MODULE HTMLDocs IN Oberon;
	IMPORT Objects, Input, Strings, Display, Display3, Fonts, HyperDocs, Texts, Gadgets, Documents, HTTPDocs0, TextDocs, Oberon, TextGadgets, Lists, Attributes, Desktops, Links, Streams, TextStreams;
CONST 
	WhiteSpace* = 0; 
	OpenTag* = 1; 
	OpenEndTag* = 2; 
	CloseTag* = 3; 
	CharRef* = 4; 
	Character* = 5; 
	Value* = 6; 
	Undef* = 7; 
	TextPlain* = 1; 
	TextHtml* = 2; 
	InTag* = 3; 
	End* = 4; 
	DefList = 0; 
	DescList = 1; 
	OrderedList = 2; 
	Menu = \"Desktops.Copy[Copy] HyperDocs.Back[Back] HyperDocs.Reload[Reload] TextDocs.Search[Search] Desktops.StoreDoc[Store]"\; 
	GreekCap = \"0013143516173415192134222324252728202931323337372636180000000000"\; 
	GreekMin = \"004546674849664751536654555657596052616364656969586850"\; 
	ASCIIBullets = TRUE; 
TYPE 
	DocURL* = POINTER TO DocURLDesc; 

	DocURLDesc* = RECORD (HyperDocs.DefURLDesc)
		dockey*: LONGINT; 
	END; 

	TextAttrs = POINTER TO TextAttrsDesc; 

	TextAttrsDesc = RECORD 
		lib: Objects.Library; 
		style: TextGadgets.Style; 
		col, voff: SHORTINT; 
		next: TextAttrs; 
	END; 

	Page* = POINTER TO PageDesc; 

	Scanner* = RECORD 
		page*: Page; 
		S*: Streams.Stream; 
		class*, state*: INTEGER; 
		value*: ARRAY 1024 OF CHAR; 
		pre*, end*: BOOLEAN; 
		ch*, next*, char*: CHAR; 
		avail: LONGINT; 
	END; 

	List = POINTER TO ListDesc; 

	ListDesc = RECORD 
		style: TextGadgets.Style; 
		kind, nesting, itemNr: INTEGER; 
		dtok: BOOLEAN; 
		next: List; 
	END; 

	Form* = POINTER TO FormDesc; 

	FormDesc* = RECORD (TextGadgets.ControlDesc)
		elems*: HTTPDocs0.ObjList; 
	END; 

	PageDesc* = RECORD (Gadgets.ObjDesc)
		W*, Ws*: Texts.Writer; 
		textAttrs: TextAttrs; 
		T*, source*: Texts.Text; 
		D*: Documents.Document; 
		alink*, clink: Objects.Object; 
		style: TextGadgets.Style; 
		base*: DocURL; 
		orgLabel: ARRAY 64 OF CHAR; 
		lists: List; 
		orgPos, linkkey*, headerLen, docKey*: LONGINT; 
		next*: Page; 
		task: Oberon.Task; 
		textC*, linkC*, oldLinkC*, textbackC*, lines*: INTEGER; 
		left*, blank*, head, cacheSource*: BOOLEAN; 
	END; 

	Item* = POINTER TO ItemDesc; 

	ItemDesc* = RECORD (Lists.ItemDesc)
		value*: ARRAY 64 OF CHAR; 
		oldSel*, hasVal*: BOOLEAN; 
	END; 

	TagHandler* = PROCEDURE (VAR S: Scanner; on: BOOLEAN); 

	ExtTag* = POINTER TO ExtTagDesc; 

	ExtTagDesc* = RECORD 
		tag: ARRAY 32 OF CHAR; 
		handle*: TagHandler; 
		start*, stop*: PROCEDURE (P: Page); 
		next: ExtTag; 
	END; 

	TagAttr* = POINTER TO TagAttrDesc; 

	TagAttrDesc* = RECORD 
		name: ARRAY 64 OF CHAR; 
		value*: ARRAY 512 OF CHAR; 
		next: TagAttr; 
	END; 

	Task = POINTER TO TaskDesc; 

	TaskDesc = RECORD (Oberon.TaskDesc)
		S: Scanner; 
		P: Page; 
	END; 

	; 
VAR 
	bullets: ARRAY 2 OF RECORD 
		f: Fonts.Font; 
		c: CHAR; 
	END; 
	Wr*, Wq: Texts.Writer; 
	imgs*: BOOLEAN; 
	extTags, newTag*: ExtTag; 
	entities*: ARRAY 69 OF ARRAY 7 OF CHAR; 
	entityEncoding*: ARRAY 69 OF CHAR; 
	pages*: Page; 
	searchAttr: ARRAY 32 OF CHAR; 
	mono: Fonts.Font; 
	found: BOOLEAN; 
	dispW: INTEGER; 
	GreekTab: ARRAY 128 OF CHAR; 

	PROCEDURE ^ WriteLn*(P: Page); 
	PROCEDURE ^ WriteSpace*(P: Page); 
	PROCEDURE ^ WriteObj*(P: Page; obj: Objects.Object); 
	PROCEDURE ^ InitTabs(style: TextGadgets.Style); 
	PROCEDURE ^ NewStyle(): TextGadgets.Style; 
	PROCEDURE ^ Syntax(size: INTEGER; attr: CHAR): Fonts.Font; 
	PROCEDURE ^ PushTextAttrs*(P: Page); 
	PROCEDURE ^ PopTextAttrs*(P: Page); 
	PROCEDURE ^ SplitFontName(f: Fonts.Font; VAR family: ARRAY OF CHAR; VAR size: INTEGER; VAR attr: CHAR); 
	PROCEDURE ^ FontSize(f: Fonts.Font; VAR size: INTEGER); 
	PROCEDURE ^ GetFontSize*(P: Page): INTEGER; 
	PROCEDURE ^ ChangeFontAttr(f: Fonts.Font; attr: CHAR): Fonts.Font; 
	PROCEDURE ^ ChangeFontSize(f: Fonts.Font; size: INTEGER): Fonts.Font; 
	PROCEDURE ^ SetFontSize*(P: Page; size: INTEGER); 
	PROCEDURE ^ HorzRule*(P: Page; w, h: INTEGER); 
	PROCEDURE ^ TextAlign*(CONST align: ARRAY OF CHAR): TextGadgets.Style; 
	PROCEDURE ^ CloseA*(P: Page); 
	PROCEDURE ^ OpenList(P: Page; kind: INTEGER); 
	PROCEDURE ^ CloseList(P: Page); 
	PROCEDURE ^ FindFormObj*(form: Form; CONST name: ARRAY OF CHAR): Objects.Object; 
	PROCEDURE ^ RememberValue*(obj: Objects.Object); 
	PROCEDURE ^ AddFormObj*(P: Page; form: Form; obj: Objects.Object; CONST name: ARRAY OF CHAR; storeVal, write: BOOLEAN); 
	PROCEDURE ^ FindA(CONST name: ARRAY OF CHAR); 
	PROCEDURE ^ HasA(obj: Objects.Object; CONST name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ ResetValues(form: Form); 
	PROCEDURE ^ GetText*(view: Objects.Object): Texts.Text; 
	PROCEDURE ^ Locate*; 
	PROCEDURE ^ ExecNext*; 
	PROCEDURE ^ CurForm(context: Objects.Object): Form; 
	PROCEDURE ^ Reset*; 
	PROCEDURE ^ CopyForm(VAR M: Objects.CopyMsg; from, to: Form); 
	PROCEDURE ^ FormHandler(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewForm*; 
	PROCEDURE ^ HexDigit(i: INTEGER): CHAR; 
	PROCEDURE ^ MapCoord(obj: Objects.Object; VAR x, y: INTEGER); 
	PROCEDURE ^ ComposeQuery(form: Form; exec: Objects.Object; VAR query: Texts.Text); 
	PROCEDURE ^ SubmitQuery*; 
	PROCEDURE ^ HREF(P: Page; VAR href, cmd: ARRAY OF CHAR; VAR key: LONGINT); 
	PROCEDURE ^ Read*(VAR S: Scanner); 
	PROCEDURE ^ ChangeFontFamily(f: Fonts.Font; CONST newfamily: ARRAY OF CHAR): Fonts.Font; 
	PROCEDURE ^ WriteCharRef*(P: Page; VAR S: Scanner); 
	PROCEDURE ^ CharRefStr*(P: Page; VAR S: Scanner; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ Next*(VAR S: Scanner); 
	PROCEDURE ^ NextAttr*(VAR S: Scanner; VAR name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ GetAttrs*(VAR S: Scanner; VAR attrs: TagAttr); 
	PROCEDURE ^ FindAttr*(attrs: TagAttr; CONST name: ARRAY OF CHAR): TagAttr; 
	PROCEDURE ^ OpenScanner*(VAR S: Scanner; St: Streams.Stream); 
	PROCEDURE ^ A(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ Address(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ B(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ SplitHostPort*(VAR url, host: ARRAY OF CHAR; VAR port: INTEGER); 
	PROCEDURE ^ BASE(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ HexVal(ch: CHAR): INTEGER; 
	PROCEDURE ^ Color(CONST val: ARRAY OF CHAR; VAR col: INTEGER); 
	PROCEDURE ^ BASEFONT(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ BIG(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ BLINK(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ BLOCKQUOTE(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ ChangeColors(P: Page; from, to: SHORTINT); 
	PROCEDURE ^ BODY(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ BR(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ ExecAttrs*; 
	PROCEDURE ^ CALL(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ CENTER(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ CITE(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ CODEx(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ DD(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ DFN(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ DIR(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ DIVI(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ DL(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ DT(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ EM(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ FRAME(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ FONT(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ GREEN(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ H(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ HEAD(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ HP(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ HR(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ HTML(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ HTTP(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ I(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ KBD(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ LI(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ LINK(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ LISTING(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ ISINDEX(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ MENU(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ META(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ NEXTID(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ NOFRAMES(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ OL(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ P(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ PLAINTEXT(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ PRE(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ Q(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ Range(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ SAMP(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ SMALL(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ STRIKE(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ STRONG(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ STYLE(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ SUB(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ SUP(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ TINY(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ TITLE(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ TT(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ TAB(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ U(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ UL(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ VARN(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ XMP(VAR S: Scanner; on: BOOLEAN); 
	PROCEDURE ^ HandleTag(VAR S: Scanner); 
	PROCEDURE ^ DocHandler(D: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ TextColor(col: INTEGER): SHORTINT; 
	PROCEDURE ^ EndPage(P: Page); 
	PROCEDURE ^ ParseNext(me: Oberon.Task); 
	PROCEDURE ^ QueryString(CONST key: ARRAY OF CHAR; VAR s: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ QueryBool(CONST key: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ Parse*(D: Documents.Document; basekey: LONGINT; S: Streams.Stream; head, cache, blocking: BOOLEAN); 
	PROCEDURE ^ Show*; 
	PROCEDURE ^ Stop*; 
	PROCEDURE ^ LoadDoc(D: Documents.Document); 
	PROCEDURE ^ NewDoc*; 
	PROCEDURE ^ InitEntities; 
	PROCEDURE ^ ShowHTML*; 
	PROCEDURE ^ SetImages*; 
	PROCEDURE ^ Check; 
BEGIN
END HTMLDocs.
