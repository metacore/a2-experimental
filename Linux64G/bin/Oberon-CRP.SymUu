MODULE CRP IN Oberon;
	IMPORT CRS, CRT, CRA, CRX, Sets, Texts, Oberon;
CONST 
	maxT = 38; 
	nrSets = 18; 
	setSize = 32; 
	nSets = ((maxT DIV setSize) + 1); 
	ident = 0; 
	string = 1; 
TYPE 
	SymbolSet = ARRAY nSets OF SET; 
VAR 
	sym: INTEGER; 
	symSet: ARRAY nrSets OF SymbolSet; 
	str: ARRAY 32 OF CHAR; 
	w: Texts.Writer; 
	genScanner: BOOLEAN; 

	PROCEDURE ^ SemErr(nr: INTEGER); 
	PROCEDURE ^ MatchLiteral(sp: INTEGER); 
	PROCEDURE ^ SetCtx(gp: INTEGER); 
	PROCEDURE ^ SetDDT(s: ARRAY OF CHAR); 
	PROCEDURE ^ FixString(VAR s: ARRAY OF CHAR; len: INTEGER); 
	PROCEDURE ^ Error(n: INTEGER); 
	PROCEDURE ^ Get; 
	PROCEDURE ^ Expect(n: INTEGER); 
	PROCEDURE ^ StartOf(s: INTEGER): BOOLEAN; 
	PROCEDURE ^ ExpectWeak(n, follow: INTEGER); 
	PROCEDURE ^ WeakSeparator(n, syFol, repFol: INTEGER): BOOLEAN; 
	PROCEDURE ^ TokenFactor(VAR gL, gR: INTEGER); 
	PROCEDURE ^ TokenTerm(VAR gL, gR: INTEGER); 
	PROCEDURE ^ Factor(VAR gL, gR: INTEGER); 
	PROCEDURE ^ Term(VAR gL, gR: INTEGER); 
	PROCEDURE ^ Symbol(VAR name: CRT.Name; VAR kind: INTEGER); 
	PROCEDURE ^ SimSet(VAR set: CRT.Set); 
	PROCEDURE ^ Set(VAR set: CRT.Set); 
	PROCEDURE ^ TokenExpr(VAR gL, gR: INTEGER); 
	PROCEDURE ^ TokenDecl(typ: INTEGER); 
	PROCEDURE ^ SetDecl; 
	PROCEDURE ^ Expression(VAR gL, gR: INTEGER); 
	PROCEDURE ^ SemText(VAR semPos: CRT.Position); 
	PROCEDURE ^ Attribs(VAR attrPos: CRT.Position); 
	PROCEDURE ^ Declaration; 
	PROCEDURE ^ CR; 
	PROCEDURE ^ Parse*; 
BEGIN
END CRP.
