MODULE WMSystemComponents;
	IMPORT Files, Dates, Strings, XML, XMLObjects, WMProperties, WMEvents, WMComponents, WMTrees, WMGrids, WMStringGrids, WMRectangles, WMGraphics, Raster, KernelLog, Configuration, WMDropTarget, Texts, TextUtilities, Streams, WMPopups, WMDialogs, FileHandlers, Commands, Archives, UTF8Strings, Notepad, WM := WMWindowManager;
CONST 
	BufSize = (16 * 1024); 
	FileNameLength = Files.NameLength; 
	TraceCopy = 0; 
	TraceDragging = 1; 
	Trace = {0}; 
	FilenamePlaceholder = \"@filename"\; 
TYPE 
	FilesDropInterface = OBJECT (WMDropTarget.DropFiles)
	VAR 
		path: Files.FileName; 
		f: Files.File; 
		w: Files.Writer; 
		refresh: WMEvents.EventSource; 
		overwriteOnce, overwriteAll, overwriteNever, abort: BOOLEAN; 

		PROCEDURE ^  & New*(CONST str: ARRAY OF CHAR); 
		PROCEDURE ^ OpenPut*(CONST remoteName: ARRAY OF CHAR; VAR outw: Streams.Writer; VAR res: LONGINT); 
		PROCEDURE ^ ClosePut*(VAR res: LONGINT); 
	END FilesDropInterface; 

	FilesDropTarget = OBJECT (WMDropTarget.DropTarget)
	VAR 
		path: Files.FileName; 
		eh: WMEvents.EventListener; 

		PROCEDURE ^  & New*(str: Strings.String; e: WMEvents.EventListener); 
		PROCEDURE ^ GetInterface*(type: LONGINT): WMDropTarget.DropInterface; 
	END FilesDropTarget; 

	TreeData = OBJECT 
	VAR 
		path, name: Strings.String; 
	END TreeData; 

	DirectoryTree* = OBJECT {EXCLUSIVE} (WMTrees.TreeView)
	VAR 
		enumerator: Files.Enumerator; 
		tree: WMTrees.Tree; 
		currentPath*: WMProperties.StringProperty; 
		onPathChanged*: WMEvents.EventSource; 
		tr: WMTrees.TreeNode; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Refresh*; 
		PROCEDURE ^ NodeExpanded(sender, data: ANY); 
		PROCEDURE ^ NodeSelected(sender, data: ANY); 
		PROCEDURE ^ DragDropped*(x, y: LONGINT; dragInfo: WM.DragInfo); 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
		PROCEDURE ^ SortDirs(VAR dir: ARRAY OF TreeData); 
		PROCEDURE ^ EnumerateSubDirectories(tree: WMTrees.Tree; node: WMTrees.TreeNode; dir: Strings.String); 
		PROCEDURE ^ FillMountedFS(tree: WMTrees.Tree; node: WMTrees.TreeNode); 
	END DirectoryTree; 

	DirEntry* = OBJECT 
	VAR 
		name*, path-: Strings.String; 
		time, date, size*: LONGINT; 
		flags: SET; 
		visible: BOOLEAN; 
		node*: WMTrees.TreeNode; 

		PROCEDURE ^  & Init*(name, path: Strings.String; time, date, size: LONGINT; flags: SET); 
	END DirEntry; 

	DirEntries* = POINTER TO ARRAY OF DirEntry; 

	SelectionWrapper* = POINTER TO RECORD 
		sel*: DirEntries; 
		user*: ANY; 
	END; 

	StringWrapper* = POINTER TO RECORD 
		string*: Strings.String; 
	END; 

	FileList* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		grid: WMStringGrids.StringGrid; 
		prefixSearch: WMProperties.BooleanProperty; 
		path, filter: Strings.String; 
		fullView, fromSearchReq: BOOLEAN; 
		popup: WMPopups.Popup; 
		enumerator: Files.Enumerator; 
		dir: DirEntries; 
		selection: DirEntries; 
		nfiles, nofRows: LONGINT; 
		px, py: LONGINT; 
		colWidths: WMGrids.Spacings; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ SetSearchReqFlag*; 
		PROCEDURE ^ GetSelection*(): DirEntries; 
		PROCEDURE ^ ClickSelected(sender, data: ANY); 
		PROCEDURE ^ HandleCommands(sender, data: ANY); 
		PROCEDURE ^ ContextMenu(sender: ANY; x, y: LONGINT); 
		PROCEDURE ^ Rename(sender, data: ANY); 
		PROCEDURE ^ Delete(sender, data: ANY); 
		PROCEDURE ^ Duplicate(sender, data: ANY); 
		PROCEDURE ^ Tar(sender, data: ANY); 
		PROCEDURE ^ Open(sender, data: ANY); 
		PROCEDURE ^ EditText(sender, data: ANY); 
		PROCEDURE ^ MyDragDropped(x, y: LONGINT; dragInfo: WM.DragInfo; VAR handled: BOOLEAN); 
		PROCEDURE ^ DragDropped*(x, y: LONGINT; dragInfo: WM.DragInfo); 
		PROCEDURE ^ MyStartDrag(sender, data: ANY); 
		PROCEDURE ^ CopyFile(target: WMDropTarget.DropFiles; CONST local, remote: ARRAY OF CHAR; VAR res: LONGINT); 
		PROCEDURE ^ Refresh(sender, data: ANY); 
		PROCEDURE ^ Resized*; 
		PROCEDURE ^ DragArrived(sender, data: ANY); 
		PROCEDURE ^ ResetGrid*; 
		PROCEDURE ^ DisplayGrid*(CONST data: ARRAY OF DirEntry; noEl: LONGINT); 
		PROCEDURE ^ ToggleProps*; 
		PROCEDURE ^ FillGridRow(rowNo: LONGINT; dir: DirEntry); 
		PROCEDURE ^ PrepareList; 
		PROCEDURE ^ ScanPath; 
		PROCEDURE ^ StartNewPath*(path: Strings.String); 
		PROCEDURE ^ StartNewFilter*(filter: Strings.String); 
		PROCEDURE ^ GetNofFiles*(): LONGINT; 
		PROCEDURE ^ SortDir; 
		PROCEDURE ^ SortDirDate; 
	END FileList; 
VAR 
	DirTreePathProt: WMProperties.StringProperty; 
	FileListPrefixSearchProt: WMProperties.BooleanProperty; 
	GSonPathChanged, GSonPathChangedInfo: Strings.String; 
	GSDirectoryTree, GSFileList: Strings.String; 

	PROCEDURE ^ GenFileList*(): XML.Element; 
	PROCEDURE ^ GenDirectoryTree*(): XML.Element; 
	PROCEDURE ^ InitStrings; 
	PROCEDURE ^ InitPrototypes; 
	PROCEDURE ^ FileExists*(CONST name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ MakePathString*(VAR s: ARRAY OF CHAR); 
BEGIN
END WMSystemComponents.
