MODULE X11;
	IMPORT Trace, Unix, Modules;
CONST 
	BufferSize* = 512; 
	False* = 0; 
	True* = 1; 
	None* = 0; 
	LineSolid* = 0; 
	LineOnOffDash* = 1; 
	LineDoubleDash* = 2; 
	CapNotLast* = 0; 
	CapButt* = 1; 
	CapRound* = 2; 
	CapProjecting* = 3; 
	JoinMiter* = 0; 
	JoinRound* = 1; 
	JoinBevel* = 2; 
	FillSolid* = 0; 
	FillTiled* = 1; 
	FillStippled* = 2; 
	FillOpaqueStippled* = 3; 
	GXand* = 1; 
	GXcopy* = 3; 
	GXxor* = 6; 
	GXor* = 7; 
	GXequiv* = 9; 
	DoRed* = 1; 
	DoGreen* = 2; 
	DoBlue* = 4; 
	DoAll* = ((DoRed + DoGreen) + DoBlue); 
	AllocNone* = 0; 
	AllocAll* = 1; 
	CursorShape* = 0; 
	TileShape* = 1; 
	StippleShape* = 2; 
	StaticGray* = 0; 
	GrayScale* = 1; 
	StaticColor* = 2; 
	PseudoColor* = 3; 
	TrueColor* = 4; 
	DirectColor* = 5; 
	ArcChord* = 0; 
	ArcPieSlice* = 1; 
	Complex* = 0; 
	Nonconvex* = 1; 
	Convex* = 2; 
	CoordModeOrigin* = 0; 
	CoordModePrevious* = 1; 
	Unsorted* = 0; 
	YSorted* = 1; 
	YXSorted* = 2; 
	YXBanded* = 3; 
	PropModeReplace* = 0; 
	KeyPress* = 2; 
	KeyRelease* = 3; 
	ButtonPress* = 4; 
	ButtonRelease* = 5; 
	MotionNotify* = 6; 
	FocusIn* = 9; 
	FocusOut* = 10; 
	Expose* = 12; 
	GraphicsExpose* = 13; 
	NoExpose* = 14; 
	UnmapNotify* = 18; 
	MapNotify* = 19; 
	PropertyNotify* = 28; 
	SelectionClear* = 29; 
	SelectionRequest* = 30; 
	SelectionNotify* = 31; 
	ClientMessage* = 33; 
	MappingNotify* = 34; 
	KeyPressMask* = 1; 
	KeyReleaseMask* = 2; 
	ButtonPressMask* = 4; 
	ButtonReleaseMask* = 8; 
	PointerMotionMask* = 64; 
	PointerMotionHintMask* = 128; 
	ButtonMotionMask* = 8192; 
	ExposureMask* = 32768; 
	StructureNotifyMask* = 131072; 
	FocusChangeMask* = 2097152; 
	PropertyChangeMask* = 4194304; 
	OwnerGrabButtonMask* = 16777216; 
	QueuedAlready* = 0; 
	QueuedAfterReading* = 1; 
	QueuedAfterFlush* = 2; 
	RevertToParent* = 2; 
	Button1* = 1; 
	Button2* = 2; 
	Button3* = 3; 
	Button1Mask* = 256; 
	Button2Mask* = 512; 
	Button3Mask* = 1024; 
	XYBitmap* = 0; 
	XYPixmap* = 1; 
	ZPixmap* = 2; 
	XCleftptr* = 132; 
	XAPRIMARY* = 1; 
	XASTRING* = 31; 
TYPE 
	Pixmap* = ADDRESS; 

	Pattern* = ADDRESS; 

	PatternPtr* = POINTER TO PatternDesc; 

	PatternDesc* = RECORD 
		x*, y*: LONGINT; 
		w*, h*: INTEGER; 
		pixmap*: Pixmap; 
	END; 

	MetricDesc* = RECORD 
		dx*, x*, y*, filler: INTEGER; 
		p*: PatternDesc; 
	END; 

	Font* = POINTER TO Bytes; 

	Bytes* = RECORD 
		metrics*: ARRAY 256 OF MetricDesc; 
		xid*: LONGINT; 
	END; 

	Buffer* = ARRAY BufferSize OF CHAR; 

	ComposeStatus* = RECORD 
		opaque: ARRAY 6 OF LONGINT; 
	END; 

	Modifiers* = ARRAY 8 OF KeySym; 

	DisplayPtr* = ADDRESS; 

	Window* = ADDRESS; 

	Drawable* = ADDRESS; 

	GC* = ADDRESS; 

	Bool* = WORD; 

	Colormap* = ADDRESS; 

	Time* = ADDRESS; 

	Atom* = ADDRESS; 

	VisualID* = ADDRESS; 

	Visual* = RECORD 
		extData*: ADDRESS; 
		visualid*: VisualID; 
		class*: WORD; 
		redMask*, greenMask*, blueMask*: LONGWORD; 
		bitsPerRgb*, mapEntries*: WORD; 
	END; 

	VisualPtr* = POINTER TO Visual; 

	VisualInfo* = RECORD 
		visual*{UNTRACED} : VisualPtr; 
		visualID*: VisualID; 
		screen*, depth*, class*: WORD; 
		redmask*, greenmask*, bluemask*: LONGWORD; 
		colomapsize*, bitsperrgb*: WORD; 
	END; 

	Color* = RECORD 
		pixel*: LONGWORD; 
		red*, green*, blue*: INTEGER; 
		flags*, pad*: CHAR; 
	END; 

	Point* = RECORD 
		x*, y*: INTEGER; 
	END; 

	Rectangle* = RECORD 
		x*, y*, w*, h*: INTEGER; 
	END; 

	Cursor* = ADDRESS; 

	KeySym* = ADDRESS; 

	KeyCode* = CHAR; 

	AnyEvent* = RECORD 
		typ*: WORD; 
		serial*: LONGWORD; 
		sendEvent*: Bool; 
		display*: DisplayPtr; 
		window*: Window; 
	END; 

	Event* = RECORD (AnyEvent)
		pad*: ARRAY (192 -  SIZE OF AnyEvent) OF CHAR; 
	END; 

	SelectionEvent* = RECORD 
		typ*: WORD; 
		serial*: LONGWORD; 
		sendEvent*: Bool; 
		display*: DisplayPtr; 
		requestor*: Window; 
		selection*, target*, property*: Atom; 
		time*: Time; 
	END; 

	SelectionRequestEvent* = RECORD 
		typ*: WORD; 
		serial*: LONGWORD; 
		sendEvent*: Bool; 
		display*: DisplayPtr; 
		owner*, requestor*: Window; 
		selection*, target*, property*: Atom; 
		time*: Time; 
	END; 

	ExposeEvent* = RECORD 
		typ*: WORD; 
		serial*: LONGWORD; 
		sendEvent*: Bool; 
		display*: DisplayPtr; 
		window*: Window; 
		x*, y*, width*, height*, count*: WORD; 
	END; 

	GraphicsExposeEvent* = RECORD 
		typ*: WORD; 
		serial*: LONGWORD; 
		sendEvent*: Bool; 
		display*: DisplayPtr; 
		drawable*: Drawable; 
		x*, y*, width*, height*, count*, majorCode*, minorCode*: WORD; 
	END; 

	ButtonEvent* = RECORD 
		typ*: WORD; 
		serial*: LONGWORD; 
		sendEvent*: Bool; 
		display*: DisplayPtr; 
		window*, root*, subwindow*: Window; 
		time*: Time; 
		x*, y*, xRoot*, yRoot*, state*, button: WORD; 
		sameScreen: Bool; 
	END; 

	KeyEvent* = RECORD 
		typ*: WORD; 
		serial*: LONGWORD; 
		sendEvent*: Bool; 
		display*: DisplayPtr; 
		window*, root*, subwindow*: Window; 
		time*: Time; 
		x*, y*, xRoot*, yRoot*, state*, keycode*: WORD; 
		sameScreen: Bool; 
	END; 

	Image* = ADDRESS; 

	ImagePtr* = POINTER TO ImageDesc; 

	ImageDesc* = RECORD 
		width*, height*: WORD; 
		xoffset*, format*: WORD; 
		data*: ADDRESS; 
		byteOrder*, bitmapUnit*, bitmapBitOrder*: WORD; 
		bitmapPad*, depth*, bytesPerLine*, bitsPerPixel*: WORD; 
		redmask*, greenmask*, bluemask*: LONGWORD; 
		obdata*, createImage*, destroyImage*, getPixel*, putPixel*, subImage*, addPixel*: ADDRESS; 
	END; 

	ErrorEvent* = RECORD 
		typ*: WORD; 
		display*: DisplayPtr; 
		resourceid*: ADDRESS; 
		serial*: LONGWORD; 
		errorCode*, requestCode*, minorCode*: CHAR; 
	END; 

	ErrorEventPtr* = POINTER {UNSAFE, UNTRACED} TO ErrorEvent; 

	ErrorHandler* = PROCEDURE (d: DisplayPtr; err: ErrorEventPtr; p3, p4: LONGINT):LONGINT; 

	IOErrorHandler = PROCEDURE (d: DisplayPtr; p2, p3, p4: LONGINT):LONGINT; 
VAR 
	ErrorText*: Buffer; 
	ErrorFlag*: BOOLEAN; 
	lastEventTime*: Time; 
	ioErrors: INTEGER; 
	SendSelection*: PROCEDURE (VAR event: SelectionRequestEvent); 
	ReceiveSelection*: PROCEDURE (VAR event: SelectionEvent); 
	ClearSelection*: PROCEDURE ; 
	OpenDisplay-: PROCEDURE {C}(name: ADDRESS):DisplayPtr; 
	DefaultScreen-: PROCEDURE {C}(d: DisplayPtr):WORD; 
	DisplayWidth-: PROCEDURE {C}(d: DisplayPtr; screen: WORD):WORD; 
	DisplayHeight-: PROCEDURE {C}(d: DisplayPtr; screen: WORD):WORD; 
	DisplayHeightMM-: PROCEDURE {C}(d: DisplayPtr; screen: WORD):WORD; 
	DefaultDepth-: PROCEDURE {C}(d: DisplayPtr; screen: WORD):WORD; 
	DisplayCells-: PROCEDURE {C}(d: DisplayPtr; screen: WORD):WORD; 
	DisplayPlanes-: PROCEDURE {C}(d: DisplayPtr; screen: WORD):WORD; 
	BlackPixel-: PROCEDURE {C}(d: DisplayPtr; screen: WORD):LONGWORD; 
	WhitePixel-: PROCEDURE {C}(d: DisplayPtr; screen: WORD):LONGWORD; 
	DefaultVisual-: PROCEDURE {C}(d: DisplayPtr; screen: WORD):ADDRESS; 
	DefaultColormap-: PROCEDURE {C}(d: DisplayPtr; screen: WORD):Colormap; 
	DefaultRootWindow-: PROCEDURE {C}(d: DisplayPtr):Window; 
	CreateSimpleWindow-: PROCEDURE {C}(d: DisplayPtr; parent: Window; x, y, width, height, borderWidth: WORD; border, background: LONGWORD):Window; 
	TranslateCoordinates-: PROCEDURE {C}(d: DisplayPtr; sw, dw: Window; srcx, srcy: WORD; VAR dstx, dsty: WORD; VAR child: Window); 
	MoveResizeWindow-: PROCEDURE {C}(d: DisplayPtr; w: Window; x, y, width, height: WORD); 
	StoreName-, SetIconName-: PROCEDURE {C}(d: DisplayPtr; w: Window; name: ADDRESS); 
	SetCommand-: PROCEDURE {C}(d: DisplayPtr; w: Window; argv: ADDRESS; argc: WORD); 
	MapRaised-, LowerWindow-, ClearWindow-: PROCEDURE {C}(d: DisplayPtr; w: Window); 
	Sync-: PROCEDURE {C}(d: DisplayPtr; discard: Bool); 
	Flush-: PROCEDURE {C}(d: DisplayPtr); 
	StoreColor-: PROCEDURE {C}(d: DisplayPtr; cmap: Colormap; color: ADDRESS); 
	CreateBitmapFromData-: PROCEDURE {C}(d: DisplayPtr; drawable: Drawable; data: ADDRESS; width, height: WORD):Pixmap; 
	CopyArea-: PROCEDURE {C}(d: DisplayPtr; src, dest: Drawable; gc: GC; srcX, srcY, width, height, destX, destY: WORD); 
	CopyPlane-: PROCEDURE {C}(d: DisplayPtr; src, dest: Drawable; gc: GC; srcX, srcY, width, height, destX, destY: WORD; plane: LONGWORD); 
	SetStipple-: PROCEDURE {C}(d: DisplayPtr; gc: GC; stipple: Pixmap); 
	SetTSOrigin-: PROCEDURE {C}(d: DisplayPtr; gc: GC; tsxorigin, tsyorigin: WORD); 
	DrawPoint-: PROCEDURE {C}(d: DisplayPtr; w: Drawable; gc: GC; x, y: WORD); 
	FillRectangle-: PROCEDURE {C}(d: DisplayPtr; w: Drawable; gc: GC; x, y, width, height: WORD); 
	DrawString-: PROCEDURE {C}(d: DisplayPtr; w: Drawable; gc: GC; x, y: WORD; string: ADDRESS; length: WORD); 
	CreateGC-: PROCEDURE {C}(d: DisplayPtr; drawable: Drawable; valueMask: LONGWORD; values: ADDRESS):GC; 
	SetForeground-: PROCEDURE {C}(d: DisplayPtr; gc: GC; foreground: LONGWORD); 
	SetBackground-: PROCEDURE {C}(d: DisplayPtr; gc: GC; background: LONGWORD); 
	SetFunction-: PROCEDURE {C}(d: DisplayPtr; gc: GC; function: WORD); 
	SetFont-: PROCEDURE {C}(d: DisplayPtr; gc: GC; font: ADDRESS); 
	SetFillStyle-: PROCEDURE {C}(d: DisplayPtr; gc: GC; fill_style: WORD); 
	SetPlaneMask-: PROCEDURE {C}(d: DisplayPtr; gc: GC; mask: LONGWORD); 
	SetGraphicsExposures-: PROCEDURE {C}(d: DisplayPtr; gc: GC; graphicsExposures: Bool); 
	SetLineAttributes-: PROCEDURE {C}(d: DisplayPtr; gc: GC; lineWidth, lineStyle, capStyle, joinStyle: WORD); 
	AllocColorCells-: PROCEDURE {C}(d: DisplayPtr; cmap: Colormap; contig: Bool; VAR planeMasks: LONGWORD; nplanes: WORD; VAR pixels: LONGWORD; ncolors: WORD):WORD; 
	SetWindowBackground-: PROCEDURE {C}(d: DisplayPtr; w: Window; pixel: LONGWORD); 
	CreateFontCursor-: PROCEDURE {C}(d: DisplayPtr; shape: WORD):Cursor; 
	CreatePixmapCursor-: PROCEDURE {C}(d: DisplayPtr; csource, cmask: Pixmap; VAR cfore, cback: Color; xhot, yhot: WORD):Cursor; 
	RecolorCursor-: PROCEDURE {C}(d: DisplayPtr; curs: Cursor; cfore, cback: ADDRESS); 
	DefineCursor-: PROCEDURE {C}(d: DisplayPtr; w: Window; curs: Cursor); 
	DrawLine-: PROCEDURE {C}(d: DisplayPtr; w: Window; gc: GC; x1, y1, x2, y2: WORD); 
	SetArcMode-: PROCEDURE {C}(d: DisplayPtr; gc: GC; arcmode: WORD); 
	DrawArc-, FillArc-: PROCEDURE {C}(d: DisplayPtr; w: Window; gc: GC; x, y, width, height, angle1, angle2: WORD); 
	FillPolygon-: PROCEDURE {C}(d: DisplayPtr; w: Window; gc: GC; points: ADDRESS; npoints, shape, mode: WORD); 
	SetClipMask-: PROCEDURE {C}(d: DisplayPtr; gc: GC; clipMask: Pixmap); 
	SetClipRectangles-: PROCEDURE {C}(d: DisplayPtr; gc: GC; clipxorigin, clipyorigin: WORD; rectangles: ADDRESS; n, ordering: WORD); 
	ListFonts-: PROCEDURE {C}(d: DisplayPtr; pattern: ADDRESS; maxnames: WORD; VAR count: WORD):ADDRESS; 
	FreeFontNames-: PROCEDURE {C}(list: ADDRESS); 
	LoadFont-: PROCEDURE {C}(d: DisplayPtr; name: ADDRESS):WORD; 
	SelectInput-: PROCEDURE {C}(d: DisplayPtr; w: Window; eventMask: LONGWORD); 
	NextEvent-: PROCEDURE {C}(d: DisplayPtr; VAR event: Event); 
	EventsQueued-: PROCEDURE {C}(d: DisplayPtr; mode: WORD):WORD; 
	SetInputFocus-: PROCEDURE {C}(d: DisplayPtr; focus: Window; revertTo: WORD; time: Time); 
	LookupString-: PROCEDURE {C}(VAR event: Event; VAR buf: Buffer; bufsize: WORD; VAR keysym: KeySym; VAR cstat: ComposeStatus):WORD; 
	QueryPointer-: PROCEDURE {C}(d: DisplayPtr; w: Window; VAR rw, cw: Window; VAR xr, yr, xw, yw: WORD; VAR keysButtons: WORDSET); 
	RefreshKeyboardMapping-: PROCEDURE {C}(event: ADDRESS); 
	Bell-: PROCEDURE {C}(d: DisplayPtr; percent: WORD); 
	RebindKeysym-: PROCEDURE {C}(d: DisplayPtr; reboundsym: KeySym; VAR modlist: Modifiers; modlength: WORD; newstring: ADDRESS; newlength: WORD); 
	StringToKeysym-: PROCEDURE {C}(string: ADDRESS):KeySym; 
	CopyColormapAndFree-: PROCEDURE {C}(d: DisplayPtr; cmap: Colormap):Colormap; 
	CreateColormap-: PROCEDURE {C}(d: DisplayPtr; w: Window; vis: VisualPtr; alloc: WORD):Colormap; 
	MatchVisualInfo-: PROCEDURE {C}(d: DisplayPtr; screen, depth, class: WORD; VAR vinfo: VisualInfo):WORD; 
	SetWindowColormap-: PROCEDURE {C}(d: DisplayPtr; w: Window; cmap: Colormap); 
	QueryBestSize-: PROCEDURE {C}(d: DisplayPtr; class: WORD; screen: Drawable; width, height: WORD; VAR w, h: WORD); 
	CreatePixmap-: PROCEDURE {C}(d: DisplayPtr; drawable: Drawable; width, height, depth: WORD):Pixmap; 
	FreePixmap-: PROCEDURE {C}(d: DisplayPtr; pixmap: Pixmap); 
	CreateImage-: PROCEDURE {C}(d: DisplayPtr; visual: VisualPtr; depth, format, offset: WORD; data: ADDRESS; width, height, bitmapPad, bytesPerLine: WORD):Image; 
	DestroyImage-: PROCEDURE {C}(image: Image); 
	SubImage-: PROCEDURE {C}(image: Image; x, y, width, height: WORD):Image; 
	GetImage-: PROCEDURE {C}(d: DisplayPtr; drawable: Drawable; x, y, width, height: WORD; planeMask: LONGWORD; format: WORD):Image; 
	GetSubImage-: PROCEDURE {C}(d: DisplayPtr; drawable: Drawable; x, y, width, height: WORD; planeMask: LONGWORD; format: WORD; dstImage: Image; dstX, dstY: WORD):Image; 
	PutImage-: PROCEDURE {C}(d: DisplayPtr; drawable: Drawable; gc: GC; image: Image; srcX, srcY, dstX, dstY, width, height: WORD); 
	PutPixel-: PROCEDURE {C}(image: Image; x, y: WORD; pixel: LONGWORD):WORD; 
	GetPixel-: PROCEDURE {C}(image: Image; x, y: WORD):LONGWORD; 
	AddPixel-: PROCEDURE {C}(image: Image; value: LONGWORD); 
	Free-: PROCEDURE {C}(data: ADDRESS); 
	GetErrorText-: PROCEDURE {C}(d: DisplayPtr; errcode: WORD; VAR buf: Buffer; length: WORD); 
	StoreBytes-: PROCEDURE {C}(d: DisplayPtr; bytes: ADDRESS; nbytes: WORD); 
	FetchBytes-: PROCEDURE {C}(d: DisplayPtr; VAR nbytes: WORD):ADDRESS; 
	SetSelectionOwner-: PROCEDURE {C}(d: DisplayPtr; selection: Atom; owner: Window; time: Time); 
	GetSelectionOwner-: PROCEDURE {C}(d: DisplayPtr; selection: Atom):Window; 
	InternAtom-: PROCEDURE {C}(d: DisplayPtr; name: ADDRESS; onlyifexists: Bool):Atom; 
	SendEvent-: PROCEDURE {C}(d: DisplayPtr; w: Window; propagate: Bool; eventmask: LONGWORD; event: ADDRESS); 
	ConvertSelection-: PROCEDURE {C}(d: DisplayPtr; selection, target, property: Atom; requestor: Window; timestamp: Time); 
	ChangeProperty-: PROCEDURE {C}(d: DisplayPtr; w: Window; property, typ: Atom; format, mode: WORD; data: ADDRESS; nelements: WORD); 
	GetWindowProperty-: PROCEDURE {C}(d: DisplayPtr; w: Window; property: Atom; offset, length: LONGWORD; delete: Bool; reqtype: Atom; VAR typ: Atom; VAR format: WORD; VAR nitems, bytesafter: LONGWORD; VAR prop: ADDRESS); 
	DeleteProperty-: PROCEDURE {C}(d: DisplayPtr; w: Window; property: Atom); 
	WarpPointer-: PROCEDURE {C}(d: DisplayPtr; srcwin, dstwin: Window; srcx, srcy, srcw, srch, dstx, dsty: WORD); 
	InstallColormap-: PROCEDURE {C}(d: DisplayPtr; cmap: Colormap); 
	GetGeometry-: PROCEDURE {C}(d: DisplayPtr; drawable: Drawable; VAR root, x, y, width, height, orderWidth, Depth: WORD); 
	ResizeWindow-: PROCEDURE {C}(d: DisplayPtr; w: Window; x, y: WORD); 
	Synchronize-: PROCEDURE {C}(d: DisplayPtr; onoff: Bool); 
	AllocColor-: PROCEDURE {C}(d: DisplayPtr; cmap: Colormap; color: ADDRESS):WORD; 
	InitXErrorHandlers-: PROCEDURE {C}(eh: ErrorHandler; ioeh: IOErrorHandler); 

	PROCEDURE ^ LinkToX; 
	PROCEDURE ^ MyErrorHandler(d: DisplayPtr; err{UNTRACED} : ErrorEventPtr): LONGINT; 
	PROCEDURE ^ MyIOErrorHandler(d: DisplayPtr): LONGINT; 
BEGIN
END X11.
