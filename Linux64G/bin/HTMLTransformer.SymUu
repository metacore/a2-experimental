MODULE HTMLTransformer;
	IMPORT WebBrowserComponents, XMLTransformer, Strings, XML, XMLObjects, DynamicStrings, UTF8Strings, WMGraphics, KernelLog, WMEvents, WMCharCodes, WMComponents, WMRectangles, WMTextView, TextUtilities, Texts, WMStandardComponents, WMMessages, Streams, WMEditors, WMPopups, Messages := WMMessages;
CONST 
	verbose = TRUE; 
	defSerif = \"TimesNewRoman"\; 
	defSansSerif = \"Arial"\; 
	defCursive = \"ComicSansMS"\; 
	defFantasy = \"Arial"\; 
	defMonospace = \"CourierNew"\; 
	defaultFont = \"Oberon"\; 
	cText = 0; 
	cNewLine = 1; 
	cParagraph = 2; 
	alignLeft = 0; 
	alignCenter = 1; 
	alignRight = 2; 
	alignJustify = 3; 
TYPE 
	String = Strings.String; 

	VisualComponent = WMComponents.VisualComponent; 

	CharsetConvProc = PROCEDURE {DELEGATE}(VAR input: ARRAY OF CHAR):String; 

	TextStyle = RECORD 
		font: String; 
		size: LONGINT; 
		style: LONGINT; 
		color: LONGINT; 
		bgcolorPresent: BOOLEAN; 
		bgcolor: LONGINT; 
		link: String; 
		linktarget: String; 
		shift: LONGINT; 
		align: LONGINT; 
		indent: LONGINT; 
		enumtype: LONGINT; 
		preformatted: BOOLEAN; 
		form: Form; 
	END; 

	OLULStackItem = POINTER TO RECORD 
		prev: OLULStackItem; 
		value: LONGINT; 
	END; 

	EmbeddedObject* = POINTER TO RECORD 
		prev*: EmbeddedObject; 
		object*: VisualComponent; 
	END; 

	Transformer* = OBJECT 
	VAR 
		doc: XML.Container; 
		url: String; 
		baseAddress: String; 
		baseTarget: String; 
		sequencer: WMMessages.MsgSequencer; 
		initWidth: LONGINT; 
		loadLink*: WMEvents.EventListener; 
		charset: String; 
		frameName: String; 
		txtElem: XML.Element; 
		paragraph: XML.Element; 
		title-: String; 
		pageBgColor-: LONGINT; 
		bgImage-: String; 
		embeddedObjectsList-: EmbeddedObject; 
		textColor: LONGINT; 
		linkColor: LONGINT; 
		vlinkColor: LONGINT; 
		alinkColor: LONGINT; 
		crlfStr: String; 
		crlfDoubleStr: String; 
		charsetConv: CharsetConvProc; 
		currentText: LONGINT; 
		olulStackTop: OLULStackItem; 
		ulDepth: LONGINT; 
		inDL: BOOLEAN; 
		currentAlign: LONGINT; 
		currentIndent: LONGINT; 
		form: Form; 
		formButton: FormButton; 
		formCheckbox: FormCheckbox; 
		formTextInput: FormTextInput; 
		formRadioButton: FormRadioButton; 
		formMenu: FormMenu; 
		formHiddenControl: FormHiddenControl; 
		initAlignment: LONGINT; 
		isTableContent: BOOLEAN; 

		PROCEDURE ^  & Init*(doc: XML.Container; url: String; initWidth: LONGINT; loadLink: WMEvents.EventListener; charset: String; frameName: String); 
		PROCEDURE ^ Transform*(): XML.Document; 
		PROCEDURE ^ TransformContent(container: XML.Container; style: TextStyle); 
		PROCEDURE ^ GetText(container: XML.Container): String; 
		PROCEDURE ^ TransformElement(elem: XML.Element; style: TextStyle); 
		PROCEDURE ^ SetAlignmentAndIndent(align: LONGINT; indent: LONGINT); 
		PROCEDURE ^ NewLine(allowMultiple: BOOLEAN); 
		PROCEDURE ^ NewParagraph(allowMultiple: BOOLEAN); 
		PROCEDURE ^ AddText(txt: String; style: TextStyle); 
		PROCEDURE ^ AddImage(src: String; x: LONGINT; y: LONGINT; style: TextStyle); 
		PROCEDURE ^ AddSVG(svgRoot: XML.Element; style: TextStyle); 
		PROCEDURE ^ ToEmbeddedObjectsList(obj: VisualComponent); 
		PROCEDURE ^ AddHR(align: LONGINT); 
		PROCEDURE ^ AddTable(tableElem: XML.Element; style: TextStyle); 
		PROCEDURE ^ AddVisualComponent(vc: WMComponents.VisualComponent; style: TextStyle); 
		PROCEDURE ^ AddLabel(s: String); 
	END Transformer; 

	CellSizes = POINTER TO ARRAY OF LONGINT; 

	StringArray = POINTER TO ARRAY OF String; 

	CellWrapper = POINTER TO RECORD 
		cell: TableCell; 
	END; 

	TableGrid = POINTER TO ARRAY OF ARRAY OF CellWrapper; 

	Table* = OBJECT {EXCLUSIVE} (VisualComponent)
	VAR 
		tableElem: XML.Element; 
		parentWidth: LONGINT; 
		align-: LONGINT; 
		textColor, linkColor, vlinkColor, alinkColor: LONGINT; 
		url: String; 
		loadLink: WMEvents.EventListener; 
		charset: String; 
		frameName: String; 
		form: Form; 
		baseAddress: String; 
		baseTarget: String; 
		isSubtable: BOOLEAN; 
		width: LONGINT; 
		relativeWidth: BOOLEAN; 
		border: LONGINT; 
		rules: BOOLEAN; 
		cellspacing: LONGINT; 
		relativeCellspacing: BOOLEAN; 
		cellpadding: LONGINT; 
		relativeCellpadding: BOOLEAN; 
		bgColor: LONGINT; 
		grid: TableGrid; 
		colsCnt: LONGINT; 
		rowsCnt: LONGINT; 
		minCellWidths, maxCellWidths: CellSizes; 
		minTableWidth, maxTableWidth: LONGINT; 
		x, y: LONGINT; 
		internalWidth, internalHeight: LONGINT; 

		PROCEDURE ^  & New*(tableElem: XML.Element; parentWidth: LONGINT; align: LONGINT; textColor, linkColor, vlinkColor, alinkColor: LONGINT; url: String; loadLink: WMEvents.EventListener; charset: String; frameName: String; form: Form; baseAddress: String; baseTarget: String; seq: WMMessages.MsgSequencer; isSubtable: BOOLEAN); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ BuildCellGrid; 
		PROCEDURE ^ AddCell(elem: XML.Element; newRow: BOOLEAN); 
		PROCEDURE ^ CalculateMinMaxTableWidth; 
		PROCEDURE ^ AlignCells; 
		PROCEDURE ^ ParentTvWidthChanged*(x: LONGINT); 
	END Table; 

	TableCell = OBJECT {EXCLUSIVE} (VisualComponent)
	VAR 
		parentTable: Table; 
		transformer: Transformer; 
		tv: WMTextView.TextView; 
		text: Texts.Text; 
		minWidth, maxWidth: LONGINT; 
		width, height: LONGINT; 
		colspan, rowspan: LONGINT; 
		bgImage: WebBrowserComponents.TileImagePanel; 
		writer: Streams.Writer; 
		textWriter: TextUtilities.TextWriter; 

		PROCEDURE ^  & New*(seq: WMMessages.MsgSequencer; parentTable: Table; elem: XML.Element; textColor, linkColor, vlinkColor, alinkColor: LONGINT; url: String; loadLink: WMEvents.EventListener; charset: String; frameName: String; form: Form; baseAddress: String; baseTarget: String); 
		PROCEDURE ^ SetWidth(width: LONGINT); 
	END TableCell; 

	Form = OBJECT 
	VAR 
		action: String; 
		loadLink: WMEvents.EventListener; 
		firstComp, lastComp: FormComponent; 
		firstRadioButtonGroup, lastRadioButtonGroup: RadioButtonGroup; 

		PROCEDURE ^  & Init*(action: String; loadLink: WMEvents.EventListener); 
		PROCEDURE ^ Send(sender, par: ANY); 
		PROCEDURE ^ Reset(sender, par: ANY); 
		PROCEDURE ^ AddFormComponent(comp: FormComponent); 
		PROCEDURE ^ AddRadioButton(radioButton: FormRadioButton); 
	END Form; 

	FormComponent = OBJECT 
	VAR 
		nextComp: FormComponent; 
		name: String; 

		PROCEDURE ^ IsSuccessful(): BOOLEAN; 
		PROCEDURE ^ GetValue(): String; 
		PROCEDURE ^ Reset; 
	END FormComponent; 

	FormButton = OBJECT (FormComponent)
	VAR 
		button: WMStandardComponents.Button; 
		value: String; 
		proc: WMEvents.EventListener; 
		active: BOOLEAN; 

		PROCEDURE ^  & Init*(name: String; value: String; proc: WMEvents.EventListener); 
		PROCEDURE ^ IsSuccessful(): BOOLEAN; 
		PROCEDURE ^ GetValue(): String; 
		PROCEDURE ^ Click(sender, par: ANY); 
	END FormButton; 

	FormCheckbox = OBJECT (FormComponent)
	VAR 
		checkbox: WMStandardComponents.Checkbox; 
		value: String; 
		init: BOOLEAN; 

		PROCEDURE ^  & Init*(name: String; value: String; checked: BOOLEAN); 
		PROCEDURE ^ IsSuccessful(): BOOLEAN; 
		PROCEDURE ^ GetValue(): String; 
		PROCEDURE ^ Reset; 
	END FormCheckbox; 

	FormTextInput = OBJECT (FormComponent)
	VAR 
		editor: WMEditors.Editor; 
		init: String; 

		PROCEDURE ^  & Init*(name: String; value: String; size: LONGINT; maxlength: LONGINT; isPassword: BOOLEAN); 
		PROCEDURE ^ IsSuccessful(): BOOLEAN; 
		PROCEDURE ^ GetValue(): String; 
		PROCEDURE ^ Reset; 
	END FormTextInput; 

	FormRadioButton = OBJECT 
	VAR 
		next: FormRadioButton; 
		radioButton: WMStandardComponents.Checkbox; 
		name: String; 
		value: String; 
		group: RadioButtonGroup; 
		init: BOOLEAN; 

		PROCEDURE ^  & Init*(name: String; value: String; checked: BOOLEAN); 
		PROCEDURE ^ Clicked(sender, par: ANY); 
	END FormRadioButton; 

	RadioButtonGroup = OBJECT (FormComponent)
	VAR 
		next: RadioButtonGroup; 
		firstB, lastB: FormRadioButton; 

		PROCEDURE ^  & Init*(name: String); 
		PROCEDURE ^ IsSuccessful(): BOOLEAN; 
		PROCEDURE ^ GetValue(): String; 
		PROCEDURE ^ Reset; 
		PROCEDURE ^ Add(radioButton: FormRadioButton); 
		PROCEDURE ^ ClearOthers(exclude: FormRadioButton); 
	END RadioButtonGroup; 

	FormMenuItem = OBJECT 
	VAR 
		caption-: ARRAY 128 OF CHAR; 
		value: String; 

		PROCEDURE ^  & New*(caption: ARRAY OF CHAR; value: String); 
	END FormMenuItem; 

	FormMenu = OBJECT (FormComponent)
	VAR 
		button: WMStandardComponents.Button; 
		popup: WMPopups.Popup; 
		init: FormMenuItem; 
		current: FormMenuItem; 

		PROCEDURE ^  & Init*(name: String); 
		PROCEDURE ^ MenuHandler(x, y: LONGINT; keys: SET; VAR handled: BOOLEAN); 
		PROCEDURE ^ MenuPopupHandler(sender, data: ANY); 
		PROCEDURE ^ NewItem(value: String; label: String; selected: BOOLEAN); 
		PROCEDURE ^ IsSuccessful(): BOOLEAN; 
		PROCEDURE ^ GetValue(): String; 
		PROCEDURE ^ Reset; 
	END FormMenu; 

	FormHiddenControl = OBJECT (FormComponent)
	VAR 
		value: String; 

		PROCEDURE ^  & Init*(name: String; value: String); 
		PROCEDURE ^ IsSuccessful(): BOOLEAN; 
		PROCEDURE ^ GetValue(): String; 
	END FormHiddenControl; 
VAR 
	serif: ARRAY 64 OF CHAR; 
	sansSerif: ARRAY 64 OF CHAR; 
	cursive: ARRAY 64 OF CHAR; 
	fantasy: ARRAY 64 OF CHAR; 
	monospace: ARRAY 64 OF CHAR; 

	PROCEDURE ^ EncodeLinkData(link, target, url: String): String; 
	PROCEDURE ^ Utf82UrlEncodedUtf8*(VAR in: ARRAY OF CHAR): String; 
	PROCEDURE ^ GetElems(root: XML.Element; wanted: StringArray; stopAt: StringArray; checkMe: BOOLEAN): XMLObjects.Enumerator; 
	PROCEDURE ^ GetCharsetConverter(charset: ARRAY OF CHAR): CharsetConvProc; 
	PROCEDURE ^ Iso2Utf8(VAR input: ARRAY OF CHAR): String; 
	PROCEDURE ^ Utf82Utf8(VAR input: ARRAY OF CHAR): String; 
	PROCEDURE ^ Gb23122Utf8(VAR input: ARRAY OF CHAR): String; 
	PROCEDURE ^ GetColor(s: String): LONGINT; 
	PROCEDURE ^ StringIsWhiteSpace(VAR txt: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ StringHasNewLine(VAR txt: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ ReplaceWhiteSpaces(VAR txt: String): String; 
	PROCEDURE ^ TrimLineBreak(VAR string: ARRAY OF CHAR); 
	PROCEDURE ^ ResolveAddress*(baseAddress: String; url: String): String; 
	PROCEDURE ^ GetElemAttributeValue*(elem: XML.Element; key: ARRAY OF CHAR; lowerCase: BOOLEAN): String; 
	PROCEDURE ^ MapFontSize(font: String; size: LONGINT): LONGINT; 
	PROCEDURE ^ MapBaselineShift(size: LONGINT): LONGINT; 
	PROCEDURE ^ GetExistingFontName(f: String): String; 
	PROCEDURE ^ FontExists(f: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ IntToABCString(val: LONGINT; upperCase: BOOLEAN): String; 
	PROCEDURE ^ IntToRomanString(val: LONGINT; uppercase: BOOLEAN): String; 
	PROCEDURE ^ TransformCharEnt*(in: String): String; 
	PROCEDURE ^ GetCharEnt(VAR ent: ARRAY OF CHAR): String; 
BEGIN
END HTMLTransformer.
