MODULE X11Api;
	IMPORT X11, Unix, Modules, SYSTEM;
CONST 
	XK_Home* = 65360; 
	XK_Left* = 65361; 
	XK_Up* = 65362; 
	XK_Right* = 65363; 
	XK_Down* = 65364; 
	XK_Prior* = 65365; 
	XK_Page_Up* = 65365; 
	XK_Next* = 65366; 
	XK_Page_Down* = 65366; 
	XK_End* = 65367; 
	XK_Begin* = 65368; 
	XK_Escape* = 65307; 
	XK_F1* = 65470; 
	None* = 0; 
	ParentRelative* = 1; 
	CopyFromParent* = 0; 
	PointerWindow* = 0; 
	InputFocus* = 1; 
	PointerRoot* = 1; 
	AnyPropertyType* = 0; 
	AnyKey* = 0; 
	AnyButton* = 0; 
	AllTemporary* = 0; 
	CurrentTime* = 0; 
	NoSymbol* = 0; 
	NoEventMask* = 0; 
	KeyPressMask* = 1; 
	KeyReleaseMask* = 2; 
	ButtonPressMask* = 4; 
	ButtonReleaseMask* = 8; 
	EnterWindowMask* = 16; 
	LeaveWindowMask* = 32; 
	PointerMotionMask* = 64; 
	PointerMotionHintMask* = 128; 
	Button1MotionMask* = 256; 
	Button2MotionMask* = 512; 
	Button3MotionMask* = 1024; 
	Button4MotionMask* = 2048; 
	Button5MotionMask* = 4096; 
	ButtonMotionMask* = 8192; 
	KeymapStateMask* = 16384; 
	ExposureMask* = 32768; 
	VisibilityChangeMask* = 65536; 
	StructureNotifyMask* = 131072; 
	ResizeRedirectMask* = 262144; 
	SubstructureNotifyMask* = 524288; 
	SubstructureRedirectMask* = 1048576; 
	FocusChangeMask* = 2097152; 
	PropertyChangeMask* = 4194304; 
	ColormapChangeMask* = 8388608; 
	OwnerGrabButtonMask* = 16777216; 
	KeyPress* = 2; 
	KeyRelease* = 3; 
	ButtonPress* = 4; 
	ButtonRelease* = 5; 
	MotionNotify* = 6; 
	EnterNotify* = 7; 
	LeaveNotify* = 8; 
	FocusIn* = 9; 
	FocusOut* = 10; 
	KeymapNotify* = 11; 
	Expose* = 12; 
	GraphicsExpose* = 13; 
	NoExpose* = 14; 
	VisibilityNotify* = 15; 
	CreateNotify* = 16; 
	DestroyNotify* = 17; 
	UnmapNotify* = 18; 
	MapNotify* = 19; 
	MapRequest* = 20; 
	ReparentNotify* = 21; 
	ConfigureNotify* = 22; 
	ConfigureRequest* = 23; 
	GravityNotify* = 24; 
	ResizeRequest* = 25; 
	CirculateNotify* = 26; 
	CirculateRequest* = 27; 
	PropertyNotify* = 28; 
	SelectionClear* = 29; 
	SelectionRequest* = 30; 
	SelectionNotify* = 31; 
	ColormapNotify* = 32; 
	ClientMessage* = 33; 
	MappingNotify* = 34; 
	GenericEvent* = 35; 
	LASTEvent* = 36; 
	ShiftMask* = 0; 
	LockMask* = 1; 
	ControlMask* = 2; 
	Mod1Mask* = 3; 
	Mod2Mask* = 4; 
	Mod3Mask* = 5; 
	Mod4Mask* = 6; 
	Mod5Mask* = 7; 
	ShiftMapIndex* = 0; 
	LockMapIndex* = 1; 
	ControlMapIndex* = 2; 
	Mod1MapIndex* = 3; 
	Mod2MapIndex* = 4; 
	Mod3MapIndex* = 5; 
	Mod4MapIndex* = 6; 
	Mod5MapIndex* = 7; 
	Button1Mask* = 8; 
	Button2Mask* = 9; 
	Button3Mask* = 10; 
	Button4Mask* = 11; 
	Button5Mask* = 12; 
	AnyModifier* = 15; 
	Button1* = 1; 
	Button2* = 2; 
	Button3* = 3; 
	Button4* = 4; 
	Button5* = 5; 
	NotifyNormal* = 0; 
	NotifyGrab* = 1; 
	NotifyUngrab* = 2; 
	NotifyWhileGrabbed* = 3; 
	NotifyHint* = 1; 
	NotifyAncestor* = 0; 
	NotifyVirtual* = 1; 
	NotifyInferior* = 2; 
	NotifyNonlinear* = 3; 
	NotifyNonlinearVirtual* = 4; 
	NotifyPointer* = 5; 
	NotifyPointerRoot* = 6; 
	NotifyDetailNone* = 7; 
	VisibilityUnobscured* = 0; 
	VisibilityPartiallyObscured* = 1; 
	VisibilityFullyObscured* = 2; 
	PlaceOnTop* = 0; 
	PlaceOnBottom* = 1; 
	FamilyInternet* = 0; 
	FamilyDECnet* = 1; 
	FamilyChaos* = 2; 
	FamilyInternet6* = 6; 
	FamilyServerInterpreted* = 5; 
	PropertyNewValue* = 0; 
	PropertyDelete* = 1; 
	ColormapUninstalled* = 0; 
	ColormapInstalled* = 1; 
	GrabModeSync* = 0; 
	GrabModeAsync* = 1; 
	GrabSuccess* = 0; 
	AlreadyGrabbed* = 1; 
	GrabInvalidTime* = 2; 
	GrabNotViewable* = 3; 
	GrabFrozen* = 4; 
	AsyncPointer* = 0; 
	SyncPointer* = 1; 
	ReplayPointer* = 2; 
	AsyncKeyboard* = 3; 
	SyncKeyboard* = 4; 
	ReplayKeyboard* = 5; 
	AsyncBoth* = 6; 
	SyncBoth* = 7; 
	RevertToNone* = None; 
	RevertToPointerRoot* = PointerRoot; 
	RevertToParent* = 2; 
	Success* = 0; 
	BadRequest* = 1; 
	BadValue* = 2; 
	BadWindow* = 3; 
	BadPixmap* = 4; 
	BadAtom* = 5; 
	BadCursor* = 6; 
	BadFont* = 7; 
	BadMatch* = 8; 
	BadDrawable* = 9; 
	BadAccess* = 10; 
	BadAlloc* = 11; 
	BadColor* = 12; 
	BadGC* = 13; 
	BadIDChoice* = 14; 
	BadName* = 15; 
	BadLength* = 16; 
	BadImplementation* = 17; 
	FirstExtensionError* = 128; 
	LastExtensionError* = 255; 
	InputOutput* = 1; 
	InputOnly* = 2; 
	CWBackPixmap* = 1; 
	CWBackPixel* = 2; 
	CWBorderPixmap* = 4; 
	CWBorderPixel* = 8; 
	CWBitGravity* = 16; 
	CWWinGravity* = 32; 
	CWBackingStore* = 64; 
	CWBackingPlanes* = 80; 
	CWBackingPixel* = 256; 
	CWOverrideRedirect* = 512; 
	CWSaveUnder* = 1024; 
	CWEventMask* = 2048; 
	CWDontPropagate* = 4096; 
	CWColormap* = 8192; 
	CWCursor* = 16384; 
	CWX* = 1; 
	CWY* = 2; 
	CWWidth* = 4; 
	CWHeight* = 8; 
	CWBorderWidth* = 16; 
	CWSibling* = 32; 
	CWStackMode* = 64; 
	ForgetGravity* = 0; 
	NorthWestGravity* = 1; 
	NorthGravity* = 2; 
	NorthEastGravity* = 3; 
	WestGravity* = 4; 
	CenterGravity* = 5; 
	EastGravity* = 6; 
	SouthWestGravity* = 7; 
	SouthGravity* = 8; 
	SouthEastGravity* = 9; 
	StaticGravity* = 10; 
	UnmapGravity* = 0; 
	NotUseful* = 0; 
	WhenMapped* = 1; 
	Always* = 2; 
	IsUnmapped* = 0; 
	IsUnviewable* = 1; 
	IsViewable* = 2; 
	SetModeInsert* = 0; 
	SetModeDelete* = 1; 
	DestroyAll* = 0; 
	RetainPermanent* = 1; 
	RetainTemporary* = 2; 
	Above* = 0; 
	Below* = 1; 
	TopIf* = 2; 
	BottomIf* = 3; 
	Opposite* = 4; 
	RaiseLowest* = 0; 
	LowerHighest* = 1; 
	PropModeReplace* = 0; 
	PropModePrepend* = 1; 
	PropModeAppend* = 2; 
	FontLeftToRight* = 0; 
	FontRightToLeft* = 1; 
	FontChange* = 255; 
	XYBitmap* = 0; 
	XYPixmap* = 1; 
	ZPixmap* = 2; 
	AllocNone* = 0; 
	AllocAll* = 1; 
	DoRed* = 1; 
	DoGreen* = 2; 
	DoBlue* = 4; 
	CursorShape* = 0; 
	TileShape* = 1; 
	StippleShape* = 2; 
	AutoRepeatModeOff* = 0; 
	AutoRepeatModeOn* = 1; 
	AutoRepeatModeDefault* = 2; 
	LedModeOff* = 0; 
	LedModeOn* = 1; 
	KBKeyClickPercent* = 1; 
	KBBellPercent* = 2; 
	KBBellPitch* = 4; 
	KBBellDuration* = 8; 
	KBLed* = 16; 
	KBLedMode* = 32; 
	KBKey* = 64; 
	KBAutoRepeatMode* = 80; 
	MappingSuccess* = 0; 
	MappingBusy* = 1; 
	MappingFailed* = 2; 
	MappingModifier* = 0; 
	MappingKeyboard* = 1; 
	MappingPointer* = 2; 
	DontPreferBlanking* = 0; 
	PreferBlanking* = 1; 
	DefaultBlanking* = 2; 
	DisableScreenSaver* = 0; 
	DisableScreenInterval* = 0; 
	DontAllowExposures* = 0; 
	AllowExposures* = 1; 
	DefaultExposures* = 2; 
	ScreenSaverReset* = 0; 
	ScreenSaverActive* = 1; 
	HostInsert* = 0; 
	HostDelete* = 1; 
	EnableAccess* = 1; 
	DisableAccess* = 0; 
	StaticGray* = 0; 
	GrayScale* = 1; 
	StaticColor* = 2; 
	PseudoColor* = 3; 
	TrueColor* = 4; 
	DirectColor* = 5; 
	LSBFirst* = 0; 
	MSBFirst* = 1; 
	XA_PRIMARY* = 1; 
	XA_SECONDARY* = 2; 
	XA_ARC* = 3; 
	XA_ATOM* = 4; 
	XA_BITMAP* = 5; 
	XA_CARDINAL* = 6; 
	XA_COLORMAP* = 7; 
	XA_CURSOR* = 8; 
	XA_CUT_BUFFER0* = 9; 
	XA_CUT_BUFFER1* = 10; 
	XA_CUT_BUFFER2* = 11; 
	XA_CUT_BUFFER3* = 12; 
	XA_CUT_BUFFER4* = 13; 
	XA_CUT_BUFFER5* = 14; 
	XA_CUT_BUFFER6* = 15; 
	XA_CUT_BUFFER7* = 16; 
	XA_DRAWABLE* = 17; 
	XA_FONT* = 18; 
	XA_INTEGER* = 19; 
	XA_PIXMAP* = 20; 
	XA_POINT* = 21; 
	XA_RECTANGLE* = 22; 
	XA_RESOURCE_MANAGER* = 23; 
	XA_RGB_COLOR_MAP* = 24; 
	XA_RGB_BEST_MAP* = 25; 
	XA_RGB_BLUE_MAP* = 26; 
	XA_RGB_DEFAULT_MAP* = 27; 
	XA_RGB_GRAY_MAP* = 28; 
	XA_RGB_GREEN_MAP* = 29; 
	XA_RGB_RED_MAP* = 30; 
	XA_STRING* = 31; 
	XA_VISUALID* = 32; 
	XA_WINDOW* = 33; 
	XA_WM_COMMAND* = 34; 
	XA_WM_HINTS* = 35; 
	XA_WM_CLIENT_MACHINE* = 36; 
	XA_WM_ICON_NAME* = 37; 
	XA_WM_ICON_SIZE* = 38; 
	XA_WM_NAME* = 39; 
	XA_WM_NORMAL_HINTS* = 40; 
	XA_WM_SIZE_HINTS* = 41; 
	XA_WM_ZOOM_HINTS* = 42; 
	XA_MIN_SPACE* = 43; 
	XA_NORM_SPACE* = 44; 
	XA_MAX_SPACE* = 45; 
	XA_END_SPACE* = 46; 
	XA_SUPERSCRIPT_X* = 47; 
	XA_SUPERSCRIPT_Y* = 48; 
	XA_SUBSCRIPT_X* = 49; 
	XA_SUBSCRIPT_Y* = 50; 
	XA_UNDERLINE_POSITION* = 51; 
	XA_UNDERLINE_THICKNESS* = 52; 
	XA_STRIKEOUT_ASCENT* = 53; 
	XA_STRIKEOUT_DESCENT* = 54; 
	XA_ITALIC_ANGLE* = 55; 
	XA_X_HEIGHT* = 56; 
	XA_QUAD_WIDTH* = 57; 
	XA_WEIGHT* = 58; 
	XA_POINT_SIZE* = 59; 
	XA_RESOLUTION* = 60; 
	XA_COPYRIGHT* = 61; 
	XA_NOTICE* = 62; 
	XA_FONT_NAME* = 63; 
	XA_FAMILY_NAME* = 64; 
	XA_FULL_NAME* = 65; 
	XA_CAP_HEIGHT* = 66; 
	XA_WM_CLASS* = 67; 
	XA_WM_TRANSIENT_FOR* = 68; 
	XA_LAST_PREDEFINED* = 68; 
	XC_num_glyphs* = 154; 
	XC_X_cursor* = 0; 
	XC_arrow* = 2; 
	XC_based_arrow_down* = 4; 
	XC_based_arrow_up* = 6; 
	XC_boat* = 8; 
	XC_bogosity* = 10; 
	XC_bottom_left_corner* = 12; 
	XC_bottom_right_corner* = 14; 
	XC_bottom_side* = 16; 
	XC_bottom_tee* = 18; 
	XC_box_spiral* = 20; 
	XC_center_ptr* = 22; 
	XC_circle* = 24; 
	XC_clock* = 26; 
	XC_coffee_mug* = 28; 
	XC_cross* = 30; 
	XC_cross_reverse* = 32; 
	XC_crosshair* = 34; 
	XC_diamond_cross* = 36; 
	XC_dot* = 38; 
	XC_dotbox* = 40; 
	XC_double_arrow* = 42; 
	XC_draft_large* = 44; 
	XC_draft_small* = 46; 
	XC_draped_box* = 48; 
	XC_exchange* = 50; 
	XC_fleur* = 52; 
	XC_gobbler* = 54; 
	XC_gumby* = 56; 
	XC_hand1* = 58; 
	XC_hand2* = 60; 
	XC_heart* = 62; 
	XC_icon* = 64; 
	XC_iron_cross* = 66; 
	XC_left_ptr* = 68; 
	XC_left_side* = 70; 
	XC_left_tee* = 72; 
	XC_leftbutton* = 74; 
	XC_ll_angle* = 76; 
	XC_lr_angle* = 78; 
	XC_man* = 80; 
	XC_middlebutton* = 82; 
	XC_mouse* = 84; 
	XC_pencil* = 86; 
	XC_pirate* = 88; 
	XC_plus* = 90; 
	XC_question_arrow* = 92; 
	XC_right_ptr* = 94; 
	XC_right_side* = 96; 
	XC_right_tee* = 98; 
	XC_rightbutton* = 100; 
	XC_rtl_logo* = 102; 
	XC_sailboat* = 104; 
	XC_sb_down_arrow* = 106; 
	XC_sb_h_double_arrow* = 108; 
	XC_sb_left_arrow* = 110; 
	XC_sb_right_arrow* = 112; 
	XC_sb_up_arrow* = 114; 
	XC_sb_v_double_arrow* = 116; 
	XC_shuttle* = 118; 
	XC_sizing* = 120; 
	XC_spider* = 122; 
	XC_spraycan* = 124; 
	XC_star* = 126; 
	XC_target* = 128; 
	XC_tcross* = 130; 
	XC_top_left_arrow* = 132; 
	XC_top_left_corner* = 134; 
	XC_top_right_corner* = 136; 
	XC_top_side* = 138; 
	XC_top_tee* = 140; 
	XC_trek* = 142; 
	XC_ul_angle* = 144; 
	XC_umbrella* = 146; 
	XC_ur_angle* = 148; 
	XC_watch* = 150; 
	XC_xterm* = 152; 
	True* = 1; 
	False* = 0; 
	QueuedAlready* = 0; 
	QueuedAfterReading* = 1; 
	QueuedAfterFlush* = 2; 
	USPosition* = 1; 
	USSize* = 2; 
	PPosition* = 4; 
	PSize* = 8; 
	PMinSize* = 16; 
	PMaxSize* = 32; 
	PResizeInc* = 64; 
	PAspect* = 128; 
	PBaseSize* = 256; 
	PWinGravity* = 512; 
	NET_WM_STATE_REMOVE* = 0; 
	NET_WM_STATE_ADD* = 1; 
	NET_WM_STATE_TOGGLE* = 2; 
TYPE 
	PChar* = POINTER TO ARRAY OF CHAR; 

	VisualPtr = X11.VisualPtr; 

	VisualInfoPtr* = POINTER TO X11.VisualInfo; 

	DisplayPtr* = X11.DisplayPtr; 

	Window* = X11.Window; 

	Time* = X11.Time; 

	Pixmap = X11.Pixmap; 

	Cursor* = X11.Cursor; 

	Atom* = X11.Atom; 

	XID* = ADDRESS; 

	Drawable* = X11.Drawable; 

	Colormap* = X11.Colormap; 

	ComposeStatus* = RECORD 
		composePtr*: LONGINT; 
		charsMatched*: LONGINT; 
	END; 

	KeySym* = X11.KeySym; 

	Bool* = LONGINT; 

	Status* = LONGINT; 

	XSetWindowAttributes* = RECORD 
		backgroundPixmap*: Pixmap; 
		backgroundPixel*: LONGINT; 
		borderPixmap*: Pixmap; 
		borderPixel*: LONGINT; 
		bitGravity*: LONGINT; 
		winGravity*: LONGINT; 
		backingStore*: LONGINT; 
		backingPlanes*: LONGINT; 
		backingPixel*: LONGINT; 
		saveUnder*: BOOLEAN; 
		eventMask*: LONGINT; 
		doNotPropagateMask*: LONGINT; 
		overrideRedirect*: BOOLEAN; 
		colormap*: Colormap; 
		cursor*: Cursor; 
	END; 

	XWindowAttributes* = RECORD 
		x*, y*: LONGINT; 
		width*, height*: LONGINT; 
		borderWidth*: LONGINT; 
		depth*: LONGINT; 
		visual*: VisualPtr; 
		root*: Window; 
		class*: LONGINT; 
		bitGravity*: LONGINT; 
		winGravity*: LONGINT; 
		backingStore*: LONGINT; 
		backingPlanes*: LONGINT; 
		backingPixel*: LONGINT; 
		saveUnder*: BOOLEAN; 
		colormap*: Colormap; 
		mapInstalled*: BOOLEAN; 
		mapState*: LONGINT; 
		allEventMasks*: LONGINT; 
		yourEventMask*: LONGINT; 
		doNotPropagateMask*: LONGINT; 
		overrideRedirect*: BOOLEAN; 
		screen*: LONGINT; 
	END; 

	XHostAddress* = RECORD 
		family*: LONGINT; 
		length*: LONGINT; 
		address*: ADDRESS; 
	END; 

	XServerInterpretedAddress* = RECORD 
		typelength*: LONGINT; 
		valuelength*: LONGINT; 
		type*: ADDRESS; 
		value*: ADDRESS; 
	END; 

	XWindowChanges* = RECORD 
		x*, y*: LONGINT; 
		width*, height*: LONGINT; 
		borderWidth*: LONGINT; 
		sibling*: Window; 
		stackMode*: LONGINT; 
	END; 

	DataAspect* = RECORD 
		x*: LONGINT; 
		y*: LONGINT; 
	END; 

	XSizeHints* = RECORD 
		flags*: LONGINT; 
		x*, y*: LONGINT; 
		width*, height*: LONGINT; 
		minWidth*, minHeight*: LONGINT; 
		maxWidth*, maxHeight*: LONGINT; 
		widthInc*, heightInc*: LONGINT; 
		maxAspect*, minAspect*: DataAspect; 
		baseWidth*, baseHeight*: LONGINT; 
		winGravity*: LONGINT; 
	END; 

	XEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		pad*: ARRAY 172 OF CHAR; 
	END; 

	XAnyEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
	END; 

	XKeyEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		root*: Window; 
		subwindow*: Window; 
		time*: Time; 
		x*, y*: LONGINT; 
		xRoot*, yRoot*: LONGINT; 
		state*: SET; 
		keycode*: LONGINT; 
		sameScreen*: BOOLEAN; 
	END; 

	XKeyPressedEvent* = XKeyEvent; 

	XKeyReleasedEvent* = XKeyEvent; 

	XButtonEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		root*: Window; 
		subwindow*: Window; 
		time*: Time; 
		x*, y*: LONGINT; 
		xRoot*, yRoot*: LONGINT; 
		state*: SET; 
		button*: LONGINT; 
		sameScreen*: BOOLEAN; 
	END; 

	XButtonPressedEvent* = XButtonEvent; 

	XButtonReleasedEvent* = XButtonEvent; 

	XMotionEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		root*: Window; 
		subwindow*: Window; 
		time*: Time; 
		x*, y*: LONGINT; 
		xRoot*, yRoot*: LONGINT; 
		state*: SET; 
		isHint*: CHAR; 
		sameScreen*: BOOLEAN; 
	END; 

	PointerMovedEvent* = XMotionEvent; 

	XCrossingEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		root*: Window; 
		subwindow*: Window; 
		time*: Time; 
		x*, y*: LONGINT; 
		xRoot*, yRoot*: LONGINT; 
		mode*: LONGINT; 
		detail*: LONGINT; 
		sameScreen*: BOOLEAN; 
		focus*: BOOLEAN; 
		state*: SET; 
	END; 

	XEnterWindowEvent* = XCrossingEvent; 

	XLeaveWindowEvent* = XCrossingEvent; 

	XFocusChangeEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		mode*: LONGINT; 
		detail*: LONGINT; 
	END; 

	XFocusInEvent* = XFocusChangeEvent; 

	XFocusOutEvent* = XFocusChangeEvent; 

	XKeymapEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		keyVector*: ARRAY 32 OF CHAR; 
	END; 

	XExposeEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		x*, y*: LONGINT; 
		width*, height*: LONGINT; 
		count*: LONGINT; 
	END; 

	XGraphicsExposeEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		drawable*: Drawable; 
		x*, y*: LONGINT; 
		width*, height*: LONGINT; 
		count*: LONGINT; 
		majorCode*: LONGINT; 
		minorCode*: LONGINT; 
	END; 

	XNoExposeEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		drawable*: Drawable; 
		majorCode*: LONGINT; 
		minorCode*: LONGINT; 
	END; 

	XVisibilityEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		state*: LONGINT; 
	END; 

	XCreateWindowEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		parent*: Window; 
		window*: Window; 
		x*, y*: LONGINT; 
		width*, height*: LONGINT; 
		borderWidth*: LONGINT; 
		overrideRedirect*: BOOLEAN; 
	END; 

	XDestroyWindowEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		event*: Window; 
		window*: Window; 
	END; 

	XUnmapEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		event*: Window; 
		window*: Window; 
		fromConfigure*: BOOLEAN; 
	END; 

	XMapEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		event*: Window; 
		window*: Window; 
		overrideRedirect*: BOOLEAN; 
	END; 

	XMapRequestEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		parent*: Window; 
		window*: Window; 
	END; 

	XReparentEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		event*: Window; 
		window*: Window; 
		parent*: Window; 
		x*, y*: LONGINT; 
		overrideRedirect*: BOOLEAN; 
	END; 

	XConfigureEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		event*: Window; 
		window*: Window; 
		x*, y*: LONGINT; 
		width*, height*: LONGINT; 
		borderWidth*: LONGINT; 
		above*: Window; 
		overrideRedirect*: BOOLEAN; 
	END; 

	XGravityEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		event*: Window; 
		window*: Window; 
		x*, y*: LONGINT; 
	END; 

	XResizeRequestEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		width*, height*: LONGINT; 
	END; 

	XConfigureRequestEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		parent*: Window; 
		window*: Window; 
		x*, y*: LONGINT; 
		width*, height*: LONGINT; 
		borderWidth*: LONGINT; 
		above*: Window; 
		detail*: LONGINT; 
		valueMask*: LONGINT; 
	END; 

	XCirculateEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		event*: Window; 
		window*: Window; 
		place*: LONGINT; 
	END; 

	XCirculateRequestEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		parent*: Window; 
		window*: Window; 
		place*: LONGINT; 
	END; 

	XPropertyEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		atom*: Atom; 
		time*: Time; 
		state*: LONGINT; 
	END; 

	XSelectionClearEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		selection*: Atom; 
		time*: Time; 
	END; 

	XSelectionRequestEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		owner*: Window; 
		requestor*: Window; 
		selection*: Atom; 
		target*: Atom; 
		property*: Atom; 
		time*: Time; 
	END; 

	XSelectionEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		requestor*: Window; 
		selection*: Atom; 
		target*: Atom; 
		property*: Atom; 
		time*: Time; 
	END; 

	Data40* = ARRAY 40 OF CHAR; 

	Data40b* = ARRAY 20 OF CHAR; 

	Data40s* = ARRAY 10 OF INTEGER; 

	Data40l* = ARRAY 5 OF LONGINT; 

	XClientMessageEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		messageType*: Atom; 
		format*: LONGINT; 
		data*: Data40; 
	END; 

	XMappingEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		window*: Window; 
		request*: LONGINT; 
		firstKeycode*: LONGINT; 
		count*: LONGINT; 
	END; 

	XErrorEvent* = RECORD 
		typ*: LONGINT; 
		display*: DisplayPtr; 
		resourceid*: XID; 
		serial*: LONGINT; 
		errorCode*: CHAR; 
		requestCode*: CHAR; 
		minorCode*: CHAR; 
	END; 

	XGenericEvent* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		extension*: LONGINT; 
		evtype*: LONGINT; 
	END; 

	XGenericEventCookie* = RECORD 
		typ*: LONGINT; 
		serial*: LONGINT; 
		sendEvent*: BOOLEAN; 
		display*: DisplayPtr; 
		extension*: LONGINT; 
		evtype*: LONGINT; 
		cookie*: LONGINT; 
		data*: ADDRESS; 
	END; 

	ExtData* = POINTER TO ExtDataDesc; 

	ExtDataDesc* = RECORD 
		number*: LONGINT; 
		next*: ExtData; 
		free_private*: ADDRESS; 
		extension*: ExtData; 
		private_data*: ADDRESS; 
	END; 

	CharStruct* = RECORD 
		lbearing*: INTEGER; 
		rbearing*: INTEGER; 
		width*: INTEGER; 
		ascent*: INTEGER; 
		descent*: INTEGER; 
		attributes*: INTEGER; 
	END; 

	FontProp* = RECORD 
		name*: Atom; 
		card32*: LONGINT; 
	END; 

	FontStruct* = POINTER TO FontStructDesc; 

	FontStructDesc* = RECORD 
		ext_data*: ExtData; 
		fid*: X11.Font; 
		direction*: LONGINT; 
		min_char_or_byte2*: LONGINT; 
		max_char_or_byte2*: LONGINT; 
		min_byte1*: LONGINT; 
		max_byte1*: LONGINT; 
		all_chars_exist*: X11.Bool; 
		default_char*: LONGINT; 
		n_properties*: LONGINT; 
		properties*: ADDRESS; 
		min_bounds*: CharStruct; 
		max_bounds*: CharStruct; 
		per_char*: ADDRESS; 
		ascent*: LONGINT; 
		descent*: LONGINT; 
	END; 

	XTextProperty* = RECORD 
		value*: ADDRESS; 
		encoding*: Atom; 
		format*: LONGINT; 
		nitems*: LONGINT; 
	END; 
VAR 
	xlib: ADDRESS; 
	OpenDisplay-: PROCEDURE {C}(CONST name: ARRAY OF CHAR):DisplayPtr; 
	CloseDisplay-: PROCEDURE {C}(display: DisplayPtr):LONGINT; 
	CreateWindow-: PROCEDURE {C}(display: DisplayPtr; parent: Window; x, y: LONGINT; width, height, borderWidth, depth, class: LONGINT; visual: VisualPtr; valuemask: LONGINT; VAR attributes: XSetWindowAttributes):Window; 
	DestroyWindow-: PROCEDURE {C}(display: DisplayPtr; win: Window):LONGINT; 
	DisplayWidthMM-: PROCEDURE {C}(d: DisplayPtr; screen: LONGINT):LONGINT; 
	FreeColormap-: PROCEDURE {C}(display: DisplayPtr; colormap: Colormap); 
	FreeCursor-: PROCEDURE {C}(display: DisplayPtr; cursor: Cursor); 
	XGetAtomName-: PROCEDURE {C}(display: DisplayPtr; atom: Atom):LONGINT; 
	GetWindowAttributes-: PROCEDURE {C}(display: DisplayPtr; win: Window; VAR attr: XWindowAttributes):LONGINT; 
	GetWindowProperty-: PROCEDURE {C}(d: DisplayPtr; w: Window; property: Atom; offset, length: LONGINT; delete: Bool; reqtype: Atom; VAR typ: Atom; VAR format, nitems, bytesafter, prop: LONGINT):LONGINT; 
	GrabKeyboard-: PROCEDURE {C}(display: DisplayPtr; grabwindow: Window; ownerevents: Bool; pointermode, keyboardmode: LONGINT; time: Time):LONGINT; 
	GrabPointer-: PROCEDURE {C}(display: DisplayPtr; grabwindow: Window; ownerevents: Bool; eventmask: LONGINT; pointermode, keyboardmode: LONGINT; confineto: Window; cursor: Cursor; time: Time):LONGINT; 
	InternAtom-: PROCEDURE {C}(display: DisplayPtr; CONST name: ARRAY OF CHAR; onlyifexists: Bool):Atom; 
	LookupKeysym-: PROCEDURE {C}(CONST event: XKeyEvent; index: LONGINT):KeySym; 
	LookupString-: PROCEDURE {C}(VAR event: XKeyEvent; VAR buf: ARRAY OF CHAR; bufsize: LONGINT; VAR keysym: KeySym; VAR cstat: ComposeStatus):LONGINT; 
	MapWindow-: PROCEDURE {C}(display: DisplayPtr; win: Window); 
	NextEvent-: PROCEDURE {C}(d: DisplayPtr; VAR event: XEvent); 
	Pending-: PROCEDURE {C}(display: DisplayPtr):LONGINT; 
	RaiseWindow-: PROCEDURE {C}(display: DisplayPtr; win: Window); 
	RootWindow-: PROCEDURE {C}(display: DisplayPtr; screen: LONGINT):Window; 
	SendEvent-: PROCEDURE {C}(d: DisplayPtr; w: Window; propagate: Bool; eventmask: LONGINT; event: ADDRESS):Bool; 
	SetNormalHints-: PROCEDURE {C}(d: DisplayPtr; w: Window; VAR hints: XSizeHints); 
	GetNormalHints-: PROCEDURE {C}(d: DisplayPtr; w: Window; VAR hints: XSizeHints):Status; 
	SetStandardProperties-: PROCEDURE {C}(display: DisplayPtr; w: Window; CONST winName: ARRAY OF CHAR; CONST iconName: ARRAY OF CHAR; iconpixmap: Pixmap; argv: ADDRESS; argc: LONGINT; VAR hints: XSizeHints); 
	SetWMProtocols-: PROCEDURE {C}(display: DisplayPtr; win: Window; protoclos: ADDRESS; count: LONGINT):LONGINT; 
	StoreName-: PROCEDURE {C}(display: DisplayPtr; win: Window; CONST s: ARRAY OF CHAR):LONGINT; 
	UnmapWindow-: PROCEDURE {C}(display: DisplayPtr; win: Window); 
	WarpPointer-: PROCEDURE {C}(display: DisplayPtr; srcwin, destwin: Window; srcx, srcy: LONGINT; srcwidth, srcheight: LONGINT; destx, desty: LONGINT); 
	SendSelection*: PROCEDURE {DELEGATE}(VAR event: XSelectionRequestEvent); 
	ReceiveSelection*: PROCEDURE {DELEGATE}(VAR event: XSelectionEvent); 
	ClearSelection*: PROCEDURE {DELEGATE}; 
	CheckTypedEvent-: PROCEDURE {C}(display: DisplayPtr; eventType: LONGINT; VAR event: XEvent):Bool; 
	CheckMaskEvent-: PROCEDURE {C}(display: DisplayPtr; eventMask: LONGINT; VAR event: XEvent):Bool; 
	CheckTypedWindowEvent-: PROCEDURE {C}(display: DisplayPtr; window: Window; eventType: LONGINT; VAR event: XEvent):Bool; 
	CheckWindowEvent-: PROCEDURE {C}(display: DisplayPtr; window: Window; eventMask: LONGINT; VAR event: XEvent):Bool; 
	LoadQueryFont-: PROCEDURE {C}(display: DisplayPtr; name: ADDRESS):FontStruct; 
	QueryFont-: PROCEDURE {C}(display: DisplayPtr; name: ADDRESS):FontStruct; 
	KeycodeToKeysym-: PROCEDURE {C}(disp: DisplayPtr; keycode: LONGINT; index: LONGINT):KeySym; 
	KeysymToKeycode-: PROCEDURE {C}(disp: DisplayPtr; keysym: KeySym):LONGINT; 
	XKeysymToString-: PROCEDURE {C}(keysym: KeySym):ADDRESS; 

	PROCEDURE ^ GetStringFromAddress*(adr: ADDRESS): PChar; 
	PROCEDURE ^ KeysymToString*(keysym: KeySym): PChar; 
	PROCEDURE ^ GetAtomName*(display: DisplayPtr; atom: Atom): PChar; 
	PROCEDURE ^ LoadX11Functions; 
	PROCEDURE ^ OnClose; 
BEGIN
END X11Api.
