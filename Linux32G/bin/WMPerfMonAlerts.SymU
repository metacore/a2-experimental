MODULE WMPerfMonAlerts;
	IMPORT KernelLog, Modules, Commands, Streams, Files, Events, Strings, XML, XMLObjects, XMLScanner, XMLParser, WMPerfMonPlugins;
CONST 
	Ok* = 0; 
	Error* = 1; 
	DefaultAlertFile = \"WMPerfMonAlerts.XML"\; 
	Sticky* = 0; 
	SingleShot* = 1; 
	MultiShot* = 2; 
	Invalid* =  -1; 
	Undefined* = 0; 
	Greater* = 1; 
	GreaterOrEqual* = 2; 
	Equals* = 3; 
	NotEquals* = 4; 
	Less* = 5; 
	LessOrEqual* = 6; 
	OutOfInterval* = 7; 
	InInterval* = 8; 
	FirstValueChangedBy* = 9; 
	LastValueChangedBy* = 10; 
	Off* = 0; 
	On* = 1; 
	Triggered* = 2; 
	Reset* = 3; 
	XmlElementAlert = \"Alert"\; 
	XmlAttributeFullname = \"fullname"\; 
	XmlAttributeType = \"type"\; 
	XmlAttributeValue1 = \"value1"\; 
	XmlAttributeValue2 = \"value2"\; 
	XmlAttributeOnAlertCommand = \"onAlert"\; 
	XmlAttributeOnLeaveAlertCommand = \"onLeave"\; 
	XmlAttributeTrigger = \"trigger"\; 
	XmlGreater = \">"\; 
	XmlGreaterOrEqual = \">="\; 
	XmlEquals = \"="\; 
	XmlNotEquals = \"!="\; 
	XmlLess = \"<"\; 
	XmlLessOrEqual = \"<="\; 
	XmlOutOfInterval = \"out"\; 
	XmlInInterval = \"in"\; 
	XmlFirstValueChangedBy = \"changedBy0"\; 
	XmlLastValueChangedBy = \"changedBy"\; 
	ShowOnKernelLog = FALSE; 
	GenerateEvents = TRUE; 
	EventOriginator = \"WMPerfMonAlerts"\; 
TYPE 
	AlertInfo* = RECORD 
		id-: LONGINT; 
		fullname-: ARRAY 256 OF CHAR; 
		type-: LONGINT; 
		state-: LONGINT; 
		trigger-: LONGINT; 
		value1-, value2-: LONGREAL; 
		violation-: LONGREAL; 
		nbrOfViolations-: LONGINT; 
		lastValueIsValid: BOOLEAN; 
		lastValue: LONGREAL; 
		onAlertCommand-: XML.String; 
		onLeaveAlertCommand-: XML.String; 
	END; 

	AlertObject = OBJECT 
	VAR 
		info: AlertInfo; 
		onAlertCalled, onLeaveCalled: BOOLEAN; 
		plugin: WMPerfMonPlugins.Plugin; 
		lastState: LONGINT; 
		datasetIdx: LONGINT; 
		next: AlertObject; 

		PROCEDURE ^ SetState(state: LONGINT); 
		PROCEDURE ^ ResetState; 
		PROCEDURE ^ Alert(value: LONGREAL); 
		PROCEDURE ^ AlarmTriggered(): BOOLEAN; 
		PROCEDURE ^ HandleAlert(lastState: LONGINT; triggered: BOOLEAN); 
		PROCEDURE ^ Finalize; 
		PROCEDURE ^ ToXML(): XML.Element; 
		PROCEDURE ^ Show(details: BOOLEAN; out: Streams.Writer); 
		PROCEDURE ^  & Init*(CONST fullname: ARRAY OF CHAR; plugin: WMPerfMonPlugins.Plugin; datasetIdx: LONGINT); 
	END AlertObject; 

	Alerts* = POINTER TO ARRAY OF AlertInfo; 

	Status* = RECORD 
		enabled-: BOOLEAN; 
		filename-: ARRAY 256 OF CHAR; 
		nbrOfRules-: LONGINT; 
		nbrOfAlerts-: LONGINT; 
		stamp-: LONGINT; 
	END; 
VAR 
	alerts: AlertObject; 
	alertsEnabled: BOOLEAN; 
	alertFile: ARRAY 256 OF CHAR; 
	nbrOfRules, nbrOfAlerts: LONGINT; 
	stamp: LONGINT; 
	uniqueID: LONGINT; 
	xmlHasErrors: BOOLEAN; 

	PROCEDURE ^ Add*(CONST fullname: ARRAY OF CHAR; type, trigger: LONGINT; value1, value2: LONGREAL; onAlert, onLeave: XML.String; VAR msg: ARRAY OF CHAR; VAR res: LONGINT); 
	PROCEDURE ^ AddByString*(CONST string: ARRAY OF CHAR; VAR msg: ARRAY OF CHAR; VAR res: LONGINT); 
	PROCEDURE ^ AddByStream(r: Streams.Reader; VAR msg: ARRAY OF CHAR; VAR res: LONGINT); 
	PROCEDURE ^ AddByCommand*(context: Commands.Context); 
	PROCEDURE ^ RemoveAlertX(alert: AlertObject); 
	PROCEDURE ^ RemoveAlerts*(CONST fullname: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ RemoveAlertByID*(id: LONGINT): LONGINT; 
	PROCEDURE ^ SetStateByID*(id, state: LONGINT; VAR msg: ARRAY OF CHAR; VAR res: LONGINT); 
	PROCEDURE ^ GetByIdX(id: LONGINT): AlertObject; 
	PROCEDURE ^ HandleEvents(events: SET; perf: REAL); 
	PROCEDURE ^ CheckAlerts; 
	PROCEDURE ^ ExecuteCommand(command: XML.String); 
	PROCEDURE ^ GetAttributeValue(elem: XML.Element; CONST name: ARRAY OF CHAR): XML.String; 
	PROCEDURE ^ GetLongreal(elem: XML.Element; CONST name: ARRAY OF CHAR; VAR res: LONGINT): LONGREAL; 
	PROCEDURE ^ GetLongrealString(value: LONGREAL; VAR string: ARRAY OF CHAR); 
	PROCEDURE ^ GetTriggerPtr(string: XML.String): LONGINT; 
	PROCEDURE ^ GetTrigger(CONST string: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ GetTriggerString(trigger: LONGINT; VAR string: ARRAY OF CHAR); 
	PROCEDURE ^ GetTypePtr(string: XML.String): LONGINT; 
	PROCEDURE ^ GetType(string: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ GetStateString*(state: LONGINT; VAR string: ARRAY OF CHAR); 
	PROCEDURE ^ GetTypeString*(type: LONGINT; VAR string: ARRAY OF CHAR); 
	PROCEDURE ^ GetFullTriggerString*(ai: AlertInfo; VAR string: ARRAY OF CHAR); 
	PROCEDURE ^ GetEvent(CONST message: Events.Message; code: SHORTINT): Events.Event; 
	PROCEDURE ^ ParseAlert*(r: Streams.Reader; VAR alert: AlertInfo; VAR msg: ARRAY OF CHAR; res: LONGINT); 
	PROCEDURE ^ ParseXmlAlert(elem: XML.Element; VAR msg: ARRAY OF CHAR): AlertObject; 
	PROCEDURE ^ ParseXmlDocument(document: XML.Document; VAR msg: ARRAY OF CHAR; VAR nbrOfRules, res: LONGINT): AlertObject; 
	PROCEDURE ^ ReportError(pos, line, row: LONGINT; CONST msg: ARRAY OF CHAR); 
	PROCEDURE ^ LoadXmlDocument(CONST filename: ARRAY OF CHAR; VAR msg: ARRAY OF CHAR; VAR res: LONGINT): XML.Document; 
	PROCEDURE ^ GetStatus*(): Status; 
	PROCEDURE ^ GetAlerts*(): Alerts; 
	PROCEDURE ^ SetRulesX(CONST filename: ARRAY OF CHAR; alertList: AlertObject; nbrOfRulesP: LONGINT; append: BOOLEAN); 
	PROCEDURE ^ GetRulesAsXmlX(): XML.Element; 
	PROCEDURE ^ LoadRuleFileX(CONST filename: ARRAY OF CHAR; VAR alerts: AlertObject; VAR nbrOfRules: LONGINT; VAR msg: ARRAY OF CHAR; VAR res: LONGINT); 
	PROCEDURE ^ StoreRuleFileX(CONST filename: ARRAY OF CHAR; VAR msg: ARRAY OF CHAR; VAR res: LONGINT); 
	PROCEDURE ^ LoadRules*(CONST filename: ARRAY OF CHAR; append: BOOLEAN; VAR msg: ARRAY OF CHAR; VAR res: LONGINT); 
	PROCEDURE ^ StoreRules*(CONST filename: ARRAY OF CHAR; VAR msg: ARRAY OF CHAR; VAR res: LONGINT); 
	PROCEDURE ^ Load*(context: Commands.Context); 
	PROCEDURE ^ Store*(context: Commands.Context); 
	PROCEDURE ^ Show*(context: Commands.Context); 
	PROCEDURE ^ EnableAlerts*; 
	PROCEDURE ^ DisableAlerts*; 
	PROCEDURE ^ Enable*(context: Commands.Context); 
	PROCEDURE ^ Disable*(context: Commands.Context); 
	PROCEDURE ^ UnloadX; 
	PROCEDURE ^ Cleanup; 
BEGIN
END WMPerfMonAlerts.
