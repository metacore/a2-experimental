MODULE OPS IN Oberon;
	IMPORT OPM;
CONST 
	MaxStrLen* = 256; 
	MaxIdLen = 32; 
	char = 1; 
	integer = 2; 
	real = 3; 
	longreal = 4; 
	null* = 0; 
	times* = 1; 
	slash* = 2; 
	div* = 3; 
	mod* = 4; 
	and* = 5; 
	plus* = 6; 
	minus* = 7; 
	or* = 8; 
	eql* = 9; 
	neq* = 10; 
	lss* = 11; 
	leq* = 12; 
	gtr* = 13; 
	geq* = 14; 
	in* = 15; 
	is* = 16; 
	arrow* = 17; 
	period* = 18; 
	comma* = 19; 
	colon* = 20; 
	upto* = 21; 
	rparen* = 22; 
	rbrak* = 23; 
	rbrace* = 24; 
	of* = 25; 
	then* = 26; 
	do* = 27; 
	to* = 28; 
	by* = 29; 
	lparen* = 30; 
	lbrak* = 31; 
	lbrace* = 32; 
	not* = 33; 
	becomes* = 34; 
	number* = 35; 
	nil* = 36; 
	true* = 37; 
	false* = 38; 
	string* = 39; 
	ident* = 40; 
	semicolon* = 41; 
	bar* = 42; 
	end* = 43; 
	else* = 44; 
	elsif* = 45; 
	until* = 46; 
	if* = 47; 
	case* = 48; 
	while* = 49; 
	repeat* = 50; 
	for* = 51; 
	loop* = 52; 
	with* = 53; 
	exit* = 54; 
	return* = 55; 
	array* = 56; 
	object* = 57; 
	record* = 58; 
	pointer* = 59; 
	begin* = 60; 
	code* = 61; 
	const* = 62; 
	type* = 63; 
	var* = 64; 
	procedure* = 65; 
	import* = 66; 
	module* = 67; 
	finally* = 68; 
	eof* = 69; 
TYPE 
	Name* = ARRAY MaxIdLen OF CHAR; 

	String* = ARRAY MaxStrLen OF CHAR; 

	GetProc* = PROCEDURE (VAR sym: SHORTINT); 

	Token = POINTER TO RECORD 
		pos: LONGINT; 
		sym: SHORTINT; 
		next: Token; 
	END; 

	IntToken = POINTER TO RECORD (Token)
		intval: LONGINT; 
		typ: INTEGER; 
	END; 

	RealToken = POINTER TO RECORD (Token)
		realval: REAL; 
	END; 

	LRealToken = POINTER TO RECORD (Token)
		lrlval: LONGREAL; 
	END; 

	StrToken = POINTER TO RECORD (Token)
		str: String; 
		len: LONGINT; 
	END; 

	NameToken = POINTER TO RECORD (Token)
		name: Name; 
	END; 

	TokenStream* = Token; 
VAR 
	name*: Name; 
	str*: String; 
	numtyp*: INTEGER; 
	intval*: LONGINT; 
	realval*: REAL; 
	lrlval*: LONGREAL; 
	Get*: GetProc; 
	ch*: CHAR; 
	stream, last: TokenStream; 

	PROCEDURE ^ err(n: INTEGER); 
	PROCEDURE ^ StreamGet(VAR sym: SHORTINT); 
	PROCEDURE ^ RecToken(sym: SHORTINT); 
	PROCEDURE ^ StartRecording*(sym: SHORTINT); 
	PROCEDURE ^ StopRecording*(VAR s: TokenStream); 
	PROCEDURE ^ StartPlaying*(s: TokenStream); 
	PROCEDURE ^ Str(VAR sym: SHORTINT); 
	PROCEDURE ^ Identifier(VAR sym: SHORTINT); 
	PROCEDURE ^ CheckCardinality*(VAR name: Name; nofp: SHORTINT): BOOLEAN; 
	PROCEDURE ^ CheckOperator*(VAR id: SHORTINT); 
	PROCEDURE ^ Number*; 
	PROCEDURE ^ DefaultGet(VAR sym: SHORTINT); 
	PROCEDURE ^ Init*; 
BEGIN
END OPS.
