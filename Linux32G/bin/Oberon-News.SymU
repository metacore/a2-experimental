MODULE News IN Oberon;
	IMPORT BTrees, Strings, HyperDocs, Files, Objects, Texts, Display, Fonts, Display3, Oberon, NetSystem, NetTools, Gadgets, Attributes, TextGadgets, TextDocs, Documents, Desktops, Links, Modules, MIME, Streams, TextStreams, Mail, Dates, FileDir;
CONST 
	DefPort = 119; 
	InitText = \"News.Read.Text"\; 
	Done* = NetTools.Done; 
	ErrGroup* = 1; 
	ErrXOver* = 2; 
	ErrArticle* = 3; 
	ErrStat* = 4; 
	ErrList* = 5; 
	ErrPost* = 6; 
	Failed* = NetTools.Failed; 
	MaxMessages = (16 * 1024); 
TYPE 
	ArtNrs = POINTER TO ArtNrsDesc; 

	ArtNrsDesc = RECORD 
		beg, end: LONGINT; 
		next: ArtNrs; 
	END; 

	Group = POINTER TO GroupDesc; 

	GroupDesc = RECORD 
		name: ARRAY 128 OF CHAR; 
		subscribed: BOOLEAN; 
		readArtNrs: ArtNrs; 
		next: Group; 
	END; 

	Session* = POINTER TO SessionDesc; 

	SessionDesc* = RECORD (Mail.SMTPSessionDesc)
	END; 
VAR 
	W, Wr: Texts.Writer; 
	groups, curGrp: Group; 
	curGrpNewOnly: BOOLEAN; 
	newgDate, newgTime: LONGINT; 
	EMail: ARRAY NetTools.ServerStrLen OF CHAR; 
	refs: Files.File; 
	indexM, indexA: BTrees.Tree; 
	availBeg, beg, end, level, thread: LONGINT; 
	marked: POINTER TO ARRAY OF BOOLEAN; 
	line: ARRAY (2 * NetTools.MaxLine) OF CHAR; 
	newsFont: Fonts.Font; 

	PROCEDURE ^ ScanInt(VAR S: Texts.Scanner; VAR i: INTEGER); 
	PROCEDURE ^ ScanDate(VAR S: Texts.Scanner; VAR date: LONGINT); 
	PROCEDURE ^ ScanTime(VAR S: Texts.Scanner; VAR time: LONGINT); 
	PROCEDURE ^ TwoDigit(i: INTEGER; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ ConcatDate(VAR line: ARRAY OF CHAR; VAR date: LONGINT); 
	PROCEDURE ^ ConcatTime(VAR line: ARRAY OF CHAR; VAR time: LONGINT); 
	PROCEDURE ^ LoadInitText; 
	PROCEDURE ^ WriteDate(VAR W: Texts.Writer; VAR date: LONGINT); 
	PROCEDURE ^ WriteTime(VAR W: Texts.Writer; VAR time: LONGINT); 
	PROCEDURE ^ storeInitText; 
	PROCEDURE ^ StoreInitText*; 
	PROCEDURE ^ NewArtNr(nr: LONGINT): ArtNrs; 
	PROCEDURE ^ AddArtNr(group: Group; nr: LONGINT); 
	PROCEDURE ^ GetGroup(name: ARRAY OF CHAR; new: BOOLEAN): Group; 
	PROCEDURE ^ ReadArt(group: Group; nr: LONGINT): BOOLEAN; 
	PROCEDURE ^ ReadResponse(S: Session); 
	PROCEDURE ^ Open*(VAR S: Session; host: ARRAY OF CHAR; port: INTEGER); 
	PROCEDURE ^ Close*(S: Session); 
	PROCEDURE ^ Connect(VAR S: Session): BOOLEAN; 
	PROCEDURE ^ RegisterNewsAdr(host, group: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ WriteGroup(VAR group: ARRAY OF CHAR); 
	PROCEDURE ^ SubGroups(T: Texts.Text); 
	PROCEDURE ^ AllGroups*(S: Session; VAR T: Texts.Text); 
	PROCEDURE ^ NewGroups*(S: Session; date, time: LONGINT; VAR T: Texts.Text); 
	PROCEDURE ^ NewGrp(S: Session; VAR T: Texts.Text); 
	PROCEDURE ^ HorzRule(): Objects.Object; 
	PROCEDURE ^ WriteGrpHead(group: ARRAY OF CHAR); 
	PROCEDURE ^ RegisterNNTPAdr(group: ARRAY OF CHAR; artnr: LONGINT): LONGINT; 
	PROCEDURE ^ WriteArticle(nr: LONGINT; VAR line: ARRAY OF CHAR); 
	PROCEDURE ^ ListArts(T: Texts.Text); 
	PROCEDURE ^ enumThread(key, org: LONGINT; VAR cont: BOOLEAN); 
	PROCEDURE ^ Thread(T: Texts.Text); 
	PROCEDURE ^ ArticleRange(S: Session; group: ARRAY OF CHAR; VAR T: Texts.Text; thread: BOOLEAN; from, to: LONGINT); 
	PROCEDURE ^ Articles*(S: Session; group: ARRAY OF CHAR; VAR T: Texts.Text; thread: BOOLEAN); 
	PROCEDURE ^ ReadString(VAR R: Texts.Reader; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ ReadArticle(S: Session; VAR T: Texts.Text); 
	PROCEDURE ^ ArticleByNr*(S: Session; group: ARRAY OF CHAR; artnr: LONGINT; VAR T: Texts.Text); 
	PROCEDURE ^ ArticleByMsgId*(S: Session; msgid: ARRAY OF CHAR; VAR T: Texts.Text); 
	PROCEDURE ^ ReadGroupName(VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ SubGroup*; 
	PROCEDURE ^ UnsubGroup*; 
	PROCEDURE ^ catchUp(S: Session; group: Group); 
	PROCEDURE ^ CatchUp*; 
	PROCEDURE ^ CatchUpAll*; 
	PROCEDURE ^ SplitNewsAdr(VAR url, host, groupart: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ SplitNNTPAdr(VAR url, group: ARRAY OF CHAR; VAR artnr: LONGINT): LONGINT; 
	PROCEDURE ^ DocHandler(D: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ FindBeg(T: Texts.Text; VAR pos: LONGINT); 
	PROCEDURE ^ LoadDoc(D: Documents.Document); 
	PROCEDURE ^ NewDoc*; 
	PROCEDURE ^ ShowAllGroups*; 
	PROCEDURE ^ ShowNewGroups*; 
	PROCEDURE ^ SubscribedGroups*; 
	PROCEDURE ^ NewsSchemeHandler(L: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewNewsLinkScheme*; 
	PROCEDURE ^ NNTPSchemeHandler(L: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewNNTPLinkScheme*; 
	PROCEDURE ^ SendArticle*(S: Session; T: Texts.Text; cont: MIME.Content); 
	PROCEDURE ^ Send*; 
	PROCEDURE ^ Reply*; 
BEGIN
END News.
