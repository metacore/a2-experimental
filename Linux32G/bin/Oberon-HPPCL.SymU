MODULE HPPCL IN Oberon;
	IMPORT SYSTEM, Modules, Files, Objects, Oberon, Fonts, Texts, Printer, Display, Pictures, In;
CONST 
	InstallCmd = \"HPPCL.Install"\; 
	ReleaseMem = FALSE; 
	C3 = TRUE; 
	HPPageWidth = 2480; 
	HPPageHeight = 3508; 
	maxfonts = 24; 
	PW = 2336; 
	PH = 3281; 
	PL = (PW DIV 32); 
	ESC = 1BX; 
	CH = (PH DIV 4); 
	N = 40; 
	ColSubDiv = 6; 
TYPE 
	HPPrinter = POINTER TO HPPrinterDesc; 

	HPPrinterDesc = RECORD (Printer.PrinterDesc)
		file, spoolFile: Files.File; 
		pictList: PictList; 
		color: BOOLEAN; 
	END; 

	Bitmap = POINTER TO ARRAY CH OF ARRAY PL OF SET; 

	Pattern = ARRAY 16 OF SET; 

	Font = Fonts.Font; 

	PictList = POINTER TO RECORD 
		pict: Pictures.Picture; 
		next: PictList; 
	END; 

	RealVector = ARRAY N OF REAL; 

	Poly = RECORD 
		a, b, c, d, t: REAL; 
	END; 

	PolyVector = ARRAY N OF Poly; 

	RunP = POINTER TO RunDscP; 

	RunDscP = RECORD 
		next, prev: RunP; 
		x, y, w, h, col: INTEGER; 
	END; 

	SpoolList = POINTER TO SpoolListDesc; 

	SpoolListDesc = RECORD 
		next: SpoolList; 
		P: HPPrinter; 
		file, spoolFile: Files.File; 
		pictList: PictList; 
		readR, spoolr: Files.Rider; 
		actPos, actPict, lastActPict: LONGINT; 
		color: BOOLEAN; 
	END; 
VAR 
	Width*, Height*, Depth*, planes, Planes: INTEGER; 
	FrameX*, FrameY*, FrameW*, FrameH*: INTEGER; 
	Unit*: LONGINT; 
	nofonts, nopage: INTEGER; 
	font: ARRAY maxfonts OF ARRAY 32 OF CHAR; 
	printerfile: Files.Rider; 
	cY, cT: INTEGER; 
	sX, sY: INTEGER; 
	rev: ARRAY 256 OF CHAR; 
	Cmap, Ymap, Mmap, Kmap: Bitmap; 
	empty: INTEGER; 
	pattern: ARRAY 10 OF Pattern; 
	intens: ARRAY 17 OF Pattern; 
	yellow, magenta, cyan, black: INTEGER; 
	Default: Font; 
	spool: SpoolList; 
	task: Oberon.Task; 
	W: Texts.Writer; 
	freeP: RunP; 

	PROCEDURE ^ DisplayGetChar(F: Font; ch: CHAR; VAR dx, x, y, w, h: INTEGER; VAR pat: Display.Pattern); 
	PROCEDURE ^ PrinterSend(x: CHAR); 
	PROCEDURE ^ XShift(x: INTEGER): INTEGER; 
	PROCEDURE ^ YShift(y: INTEGER): INTEGER; 
	PROCEDURE ^ Write(x: SYSTEM.BYTE); 
	PROCEDURE ^ WriteInt(k: INTEGER); 
	PROCEDURE ^ WriteBytes(VAR x: ARRAY OF SYSTEM.BYTE; n: INTEGER); 
	PROCEDURE ^ WriteString(VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ GetDim(label: ARRAY OF CHAR; def: INTEGER; VAR val: INTEGER); 
	PROCEDURE ^ SetMetrics(P: Printer.Printer); 
	PROCEDURE ^ InitMetrics*(P: Printer.Printer); 
	PROCEDURE ^ Open*(P: Printer.Printer; printer, options: ARRAY OF CHAR); 
	PROCEDURE ^ ReplConst*(P: Printer.Printer; x, y, w, h: INTEGER); 
	PROCEDURE ^ fontno(name: ARRAY OF CHAR): SHORTINT; 
	PROCEDURE ^ UseListFont*(P: Printer.Printer; name: ARRAY OF CHAR); 
	PROCEDURE ^ GetMetric*(P: Printer.Printer; fnt: Fonts.Font): Fonts.Font; 
	PROCEDURE ^ String*(P: Printer.Printer; x, y: INTEGER; s: ARRAY OF CHAR; fnt: Fonts.Font); 
	PROCEDURE ^ ContString*(P: Printer.Printer; s: ARRAY OF CHAR; fnt: Fonts.Font); 
	PROCEDURE ^ ReplPattern*(P: Printer.Printer; x, y, w, h, col: INTEGER); 
	PROCEDURE ^ Line*(P: Printer.Printer; x0, y0, x1, y1: INTEGER); 
	PROCEDURE ^ Circle*(P: Printer.Printer; x0, y0, r: INTEGER); 
	PROCEDURE ^ Ellipse*(P: Printer.Printer; x0, y0, a, b: INTEGER); 
	PROCEDURE ^ Spline*(P: Printer.Printer; x0, y0, n, open: INTEGER; VAR X, Y: ARRAY OF INTEGER); 
	PROCEDURE ^ Picture*(print: Printer.Printer; P: Pictures.Picture; px, py, pw, ph, x, y, w, h, mode: INTEGER); 
	PROCEDURE ^ Page*(P: Printer.Printer; nofcopies: INTEGER); 
	PROCEDURE ^ SendNum(n: INTEGER); 
	PROCEDURE ^ OpenPrinter(P: HPPrinter); 
	PROCEDURE ^ OpenPage; 
	PROCEDURE ^ Last(VAR line: ARRAY OF CHAR): INTEGER; 
	PROCEDURE ^ Compress(VAR line: ARRAY OF CHAR; com: CHAR; last: INTEGER; VAR max: INTEGER); 
	PROCEDURE ^ SendEmpty(com: CHAR); 
	PROCEDURE ^ PrintLine(VAR c, y, m, k: ARRAY OF CHAR); 
	PROCEDURE ^ ClosePage; 
	PROCEDURE ^ ClosePrinter; 
	PROCEDURE ^ Block(x, y, w, h: LONGINT); 
	PROCEDURE ^ PatternBlock(x, y, w, h: LONGINT; pat: INTEGER); 
	PROCEDURE ^ Character(p: Display.Pattern; x, y, w, h: INTEGER); 
	PROCEDURE ^ Dot(x, y: LONGINT); 
	PROCEDURE ^ GetLine(y: INTEGER; map: Bitmap; VAR line: ARRAY OF CHAR); 
	PROCEDURE ^ Clear(map: Bitmap); 
	PROCEDURE ^ PrinterOpen; 
	PROCEDURE ^ PrinterReplConst(x, y, w, h: INTEGER); 
	PROCEDURE ^ PrinterFont(name: ARRAY OF CHAR): Font; 
	PROCEDURE ^ PrinterString(x, y: INTEGER; VAR s, fname: ARRAY OF CHAR); 
	PROCEDURE ^ PrinterContString(VAR s, fname: ARRAY OF CHAR); 
	PROCEDURE ^ PrinterReplPattern(x, y, w, h, pat: INTEGER); 
	PROCEDURE ^ PrinterLine(x0, y0, x1, y1: INTEGER); 
	PROCEDURE ^ PrinterCircle(x0, y0, r: INTEGER); 
	PROCEDURE ^ PrinterEllipse(x0, y0, a, b: INTEGER); 
	PROCEDURE ^ PrintPoly(x0, y0: INTEGER; VAR p, q: Poly; lim: REAL); 
	PROCEDURE ^ SolveTriDiag(VAR a, b, c, y: RealVector; n: INTEGER); 
	PROCEDURE ^ OpenSpline(VAR x, y, d: RealVector; n: INTEGER); 
	PROCEDURE ^ ClosedSpline(VAR x, y, d: RealVector; n: INTEGER); 
	PROCEDURE ^ PrinterSpline(x0, y0, n, open: INTEGER; u, v: ARRAY OF INTEGER); 
	PROCEDURE ^ RGBToPatNr(red, green, blue: INTEGER; VAR pNr: INTEGER); 
	PROCEDURE ^ PrinterPicture(P: Pictures.Picture; px, py, pw, ph, X, Y, W, H: INTEGER); 
	PROCEDURE ^ PrinterStripe(nofcopies: INTEGER); 
	PROCEDURE ^ PrinterUseColor(r, g, b: INTEGER); 
	PROCEDURE ^ PrinterClose; 
	PROCEDURE ^ InitR; 
	PROCEDURE ^ InitP(p, a, b, c: INTEGER); 
	PROCEDURE ^ InitIntens; 
	PROCEDURE ^ Log(s1, s2: ARRAY OF CHAR); 
	PROCEDURE ^ Shift(VAR x, y, w, h: INTEGER); 
	PROCEDURE ^ Spool(me: Oberon.Task); 
	PROCEDURE ^ StartSpool(P: HPPrinter); 
	PROCEDURE ^ Close*(P: Printer.Printer); 
	PROCEDURE ^ UseColor*(P: Printer.Printer; red, green, blue: INTEGER); 
	PROCEDURE ^ NewPrinter*(): Printer.Printer; 
	PROCEDURE ^ Cleanup; 
	PROCEDURE ^ SetPlanes0*(n: INTEGER); 
	PROCEDURE ^ SetPlanes*; 
	PROCEDURE ^ Install*; 
BEGIN
END HPPCL.
