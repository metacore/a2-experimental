MODULE MtxCplx;
	IMPORT SYSTEM, NbrInt, ArrayXdBytes, ArrayXd := ArrayXdCplx, Array1d := Array1dCplx, NbrCplx, DataErrors, Vec := VecCplx, NbrRat, NbrRe, MtxInt, MtxRat, MtxRe, DataIO;
CONST 
	VERSION* = 1; 
TYPE 
	Value* = ArrayXd.Value; 

	Index* = LONGINT; 

	IntValue = ArrayXd.IntValue; 

	RatValue = NbrRat.Rational; 

	ReValue = NbrRe.Real; 

	Array* = ArrayXd.Array2; 

	Map* = ArrayXd.Map; 

	Matrix* = OBJECT {EXCLUSIVE} (ArrayXd.Array)
	VAR 
		lenx-, leny-: LONGINT; 
		rows-, cols-: LONGINT; 
		ox-, oy-: LONGINT; 
		Get-: PROCEDURE {DELEGATE}(x, y: Index):Value; 

		PROCEDURE ^ AlikeX*(): ArrayXdBytes.Array; 
		PROCEDURE ^ NewRangeX*(neworigin, newlen: ArrayXdBytes.IndexArray; copydata: BOOLEAN); 
		PROCEDURE ^ ValidateCache*; 
		PROCEDURE ^ SetBoundaryCondition*(c: SHORTINT); 
		PROCEDURE ^  & New*(ox, rowsORw, oy, colsORh: LONGINT); 
		PROCEDURE ^ Alike*(): Matrix; 
		PROCEDURE ^ NewRange*(ox, rowsORw, oy, colsORh: LONGINT; copydata: BOOLEAN); 
		PROCEDURE ^ Copy*(): Matrix; 
		PROCEDURE ^ Set*(rowORx, colORy: Index; v: Value); 
		PROCEDURE ^ SwapRows*(row1, row2: Index); 
		PROCEDURE ^ SwapColumns*(col1, col2: Index); 
		PROCEDURE ^ Transpose*; 
		PROCEDURE ^ Dot*(x: Matrix); 
		PROCEDURE ^ LeftDot*(x: Matrix); 
		PROCEDURE ^ RightDot*(x: Matrix); 
		PROCEDURE ^ Row*(row: Index): Vec.Vector; 
		PROCEDURE ^ InsertRow*(at: Index); 
		PROCEDURE ^ DeleteRow*(x: Index); 
		PROCEDURE ^ Col*(col: Index): Vec.Vector; 
		PROCEDURE ^ InsertCol*(at: Index); 
		PROCEDURE ^ DeleteCol*(x: Index); 
		PROCEDURE ^ CopyToVec*(dest: ArrayXd.Array; dim: Index; srcx, srcy, destx, len: Index); 
		PROCEDURE ^ CopyToMtx*(dest: ArrayXd.Array; srcx, srcy, destx, desty, lenx, leny: Index); 
		PROCEDURE ^ CopyToCube*(dest: ArrayXd.Array; dimx, dimy: Index; srcx, srcy, destx, desty, destz, lenx, leny: Index); 
		PROCEDURE ^ CopyToHCube*(dest: ArrayXd.Array; dimx, dimy: Index; srcx, srcy, destx, desty, destz, destt, lenx, leny: Index); 
		PROCEDURE ^ CopyTo1dArray*(VAR dest: ARRAY OF Value; sx, sy, slenx, sleny: Index; dpos, dlen: LONGINT); 
		PROCEDURE ^ CopyTo2dArray*(VAR dest: ARRAY OF ARRAY OF Value; sx, sy, slenx, sleny: Index; dposx, dposy, dlenx, dleny: LONGINT); 
		PROCEDURE ^ CopyTo3dArray*(VAR dest: ARRAY OF ARRAY OF ARRAY OF Value; sx, sy, slenx, sleny: Index; dposx, dposy, dposz, dlenx, dleny, dlenz: LONGINT); 
		PROCEDURE ^ CopyTo4dArray*(VAR dest: ARRAY OF ARRAY OF ARRAY OF ARRAY OF Value; sx, sy, slenx, sleny: Index; dposx, dposy, dposz, dpost, dlenx, dleny, dlenz, dlent: LONGINT); 
		PROCEDURE ^ CopyFrom1dArray*(VAR src: ARRAY OF Value; spos, slen: Index; dx, dy, dlenx, dleny: Index); 
		PROCEDURE ^ CopyFrom2dArray*(VAR src: ARRAY OF ARRAY OF Value; sposx, spoxy, slenx, sleny: Index; dx, dy, dlenx, dleny: Index); 
		PROCEDURE ^ CopyFrom3dArray*(VAR src: ARRAY OF ARRAY OF ARRAY OF Value; sposx, spoxy, sposz, slenx, sleny, slenz: Index; dx, dy, dlenx, dleny: Index); 
		PROCEDURE ^ CopyFrom4dArray*(VAR src: ARRAY OF ARRAY OF ARRAY OF ARRAY OF Value; sposx, spoxy, sposz, spost, slenx, sleny, slenz, slent: Index; dx, dy, dlenx, dleny: Index); 
	END Matrix; 

	PROCEDURE ^ FrobeniusNorm*(m: Matrix): NbrRe.Real; 
	PROCEDURE ^ Transpose*(u: Matrix): Matrix; 
	OPERATOR ^ ":="-(VAR l: Matrix; VAR r: ARRAY OF ARRAY OF Value); 
	OPERATOR ^ ":="-(VAR l: Matrix; r: Vec.Vector); 
	OPERATOR ^ ":="-(VAR l: Matrix; r: MtxInt.Matrix); 
	OPERATOR ^ ":="-(VAR l: Matrix; r: MtxRat.Matrix); 
	OPERATOR ^ ":="-(VAR l: Matrix; r: MtxRe.Matrix); 
	OPERATOR ^ ":="-(VAR l: Matrix; r: Value); 
	OPERATOR ^ ":="-(VAR l: Matrix; r: ReValue); 
	OPERATOR ^ ":="-(VAR l: Matrix; r: RatValue); 
	OPERATOR ^ ":="-(VAR l: Matrix; r: IntValue); 
	OPERATOR ^ "+"-(l, r: Matrix): Matrix; 
	OPERATOR ^ "-"-(l, r: Matrix): Matrix; 
	OPERATOR ^ "+"-(l: Matrix; r: Value): Matrix; 
	OPERATOR ^ "+"-(l: Matrix; r: ReValue): Matrix; 
	OPERATOR ^ "+"-(l: Matrix; r: RatValue): Matrix; 
	OPERATOR ^ "+"-(l: Matrix; r: IntValue): Matrix; 
	OPERATOR ^ "+"-(l: Value; r: Matrix): Matrix; 
	OPERATOR ^ "+"-(l: ReValue; r: Matrix): Matrix; 
	OPERATOR ^ "+"-(l: RatValue; r: Matrix): Matrix; 
	OPERATOR ^ "+"-(l: IntValue; r: Matrix): Matrix; 
	OPERATOR ^ "-"-(l: Matrix; r: Value): Matrix; 
	OPERATOR ^ "-"-(l: Matrix; r: ReValue): Matrix; 
	OPERATOR ^ "-"-(l: Matrix; r: RatValue): Matrix; 
	OPERATOR ^ "-"-(l: Matrix; r: IntValue): Matrix; 
	OPERATOR ^ "-"-(l: Value; r: Matrix): Matrix; 
	OPERATOR ^ "-"-(l: ReValue; r: Matrix): Matrix; 
	OPERATOR ^ "-"-(l: RatValue; r: Matrix): Matrix; 
	OPERATOR ^ "-"-(l: IntValue; r: Matrix): Matrix; 
	OPERATOR ^ "-"-(l: Matrix): Matrix; 
	OPERATOR ^ "*"-(l: Matrix; r: Value): Matrix; 
	OPERATOR ^ "*"-(l: Matrix; r: ReValue): Matrix; 
	OPERATOR ^ "*"-(l: Matrix; r: RatValue): Matrix; 
	OPERATOR ^ "*"-(l: Matrix; r: IntValue): Matrix; 
	OPERATOR ^ "*"-(l: Value; r: Matrix): Matrix; 
	OPERATOR ^ "*"-(l: ReValue; r: Matrix): Matrix; 
	OPERATOR ^ "*"-(l: RatValue; r: Matrix): Matrix; 
	OPERATOR ^ "*"-(l: IntValue; r: Matrix): Matrix; 
	OPERATOR ^ "/"-(l: Matrix; r: Value): Matrix; 
	OPERATOR ^ "/"-(l: Matrix; r: ReValue): Matrix; 
	OPERATOR ^ "/"-(l: Matrix; r: RatValue): Matrix; 
	OPERATOR ^ "/"-(l: Matrix; r: IntValue): Matrix; 
	OPERATOR ^ "/"-(l: Value; r: Matrix): Matrix; 
	OPERATOR ^ "/"-(l: ReValue; r: Matrix): Matrix; 
	OPERATOR ^ "/"-(l: RatValue; r: Matrix): Matrix; 
	OPERATOR ^ "/"-(l: IntValue; r: Matrix): Matrix; 
	OPERATOR ^ "*"-(l: Vec.Vector; r: Matrix): Vec.Vector; 
	OPERATOR ^ "*"-(l: Matrix; r: Vec.Vector): Vec.Vector; 
	OPERATOR ^ "*"-(l, r: Matrix): Matrix; 
	PROCEDURE ^ LoadMatrix(R: DataIO.Reader; VAR obj: OBJECT); 
	PROCEDURE ^ StoreMatrix(W: DataIO.Writer; obj: OBJECT); 
	PROCEDURE ^ Register; 
	PROCEDURE ^ Load*(R: DataIO.Reader; VAR obj: Matrix); 
	PROCEDURE ^ Store*(W: DataIO.Writer; obj: Matrix); 
BEGIN
END MtxCplx.
