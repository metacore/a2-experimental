MODULE Machine;
	IMPORT S := SYSTEM, Trace, Unix, Glue;
CONST 
	DefaultConfig = \"Color 0  StackSize 128"\; 
	Version = \"A2 Gen. 32-bit, "\; 
	DefaultObjectFileExtension* = \".GofU"\; 
	Second* = 1000; 
	MTTR* = 12; 
	MMX* = 23; 
	AddressSize = SIZEOF(ADDRESS); 
	StaticBlockSize = (8 * AddressSize); 
	MemBlockSize* = ((64 * 1024) * 1024); 
	TraceOutput* = 0; 
	Memory* = 1; 
	Heaps* = 2; 
	Interrupts* = 3; 
	Modules* = 4; 
	Objects* = 5; 
	Processors* = 6; 
	KernelLog* = 7; 
	X11* = 8; 
	MaxLocks* = 9; 
	MaxCPU* = 4; 
	IsCooperative* = FALSE; 
TYPE 
	Vendor* = ARRAY 13 OF CHAR; 

	MemoryBlock* = POINTER {UNSAFE, UNTRACED} TO MemoryBlockDesc; 

	MemoryBlockDesc* = RECORD 
		next-: MemoryBlock; 
		startAdr-: ADDRESS; 
		size-: SIZE; 
		beginBlockAdr-, endBlockAdr-: ADDRESS; 
	END; 

	State* = RECORD 
		PC*, BP*, SP*: ADDRESS; 
	END; 
VAR 
	mtx: ARRAY MaxLocks OF Unix.Mutex_t; 
	version-: ARRAY 64 OF CHAR; 
	features-, features2: SET; 
	MMXSupport-: BOOLEAN; 
	SSESupport-: BOOLEAN; 
	SSE2Support-: BOOLEAN; 
	SSE3Support-: BOOLEAN; 
	SSSE3Support-: BOOLEAN; 
	SSE41Support-: BOOLEAN; 
	SSE42Support-: BOOLEAN; 
	SSE5Support-: BOOLEAN; 
	AVXSupport-: BOOLEAN; 
	ticks-: LONGINT; 
	prioLow-, prioHigh-: LONGINT; 
	fcr-: SET; 
	mhz-: HUGEINT; 
	gcThreshold-: SIZE; 
	memBlockHead-{UNTRACED} , memBlockTail-{UNTRACED} : MemoryBlock; 
	config: ARRAY 2048 OF CHAR; 
	logname: ARRAY 32 OF CHAR; 
	logfile: LONGINT; 
	traceHeap: BOOLEAN; 
	timer0: HUGEINT; 

	PROCEDURE ^ ID*(): LONGINT; 
	PROCEDURE ^ FlushDCacheRange*(adr: ADDRESS; len: LONGINT); 
	PROCEDURE ^ InvalidateDCacheRange*(adr: ADDRESS; len: LONGINT); 
	PROCEDURE ^ InvalidateICacheRange*(adr: ADDRESS; len: LONGINT); 
	PROCEDURE ^ InsertMemoryBlock(memBlock: MemoryBlock); 
	PROCEDURE ^ FreeMemBlock*(memBlock: MemoryBlock); 
	PROCEDURE ^ ExpandHeap*(dummy: LONGINT; size: SIZE; VAR memoryBlock: MemoryBlock; VAR beginBlockAdr, endBlockAdr: ADDRESS); 
	PROCEDURE ^ SetMemoryBlockEndAddress*(memBlock: MemoryBlock; endBlockAdr: ADDRESS); 
	PROCEDURE ^ TraceHeap(new: MemoryBlock); 
	PROCEDURE ^ GetStaticHeap*(VAR beginBlockAdr, endBlockAdr, freeBlockAdr: ADDRESS); 
	PROCEDURE ^ ValidHeapAddress*(p: ADDRESS): BOOLEAN; 
	PROCEDURE ^ GetFreeK*(VAR total, lowFree, highFree: SIZE); 
	PROCEDURE ^ Fill32*(destAdr: ADDRESS; size: SIZE; filler: LONGINT); 
	PROCEDURE ^ Portin8*(port: LONGINT; VAR val: CHAR); 
	PROCEDURE ^ Portin16*(port: LONGINT; VAR val: INTEGER); 
	PROCEDURE ^ Portin32*(port: LONGINT; VAR val: LONGINT); 
	PROCEDURE ^ Portout8*(port: LONGINT; val: CHAR); 
	PROCEDURE ^ Portout16*(port: LONGINT; val: INTEGER); 
	PROCEDURE ^ Portout32*(port: LONGINT; val: LONGINT); 
	PROCEDURE {FingerPrint(753519207)}  - AtomicInc*(VAR x: LONGINT);
	CODE {SYSTEM.i386}
	POP EAX
	LOCK
	INC DWORD [EAX]

	END AtomicInc; 
	PROCEDURE {FingerPrint(741911151)}  - AtomicDec*(VAR x: LONGINT);
	CODE {SYSTEM.i386}
	POP EAX
	LOCK
	DEC DWORD [EAX]

	END AtomicDec; 
	PROCEDURE {FingerPrint(806537763)}  - AtomicAdd*(VAR x: LONGINT; y: LONGINT);
	CODE {SYSTEM.i386}
	POP EBX
	POP EAX
	LOCK
	ADD DWORD [EAX], EBX

	END AtomicAdd; 
	PROCEDURE ^ AtomicExcl*(VAR s: SET; bit: LONGINT); 
	PROCEDURE {FingerPrint(-1667119161)}  - AtomicTestSet*(VAR x: BOOLEAN): BOOLEAN;
	CODE {SYSTEM.i386}
	POP EBX
	MOV AL, 1
	XCHG [EBX], AL

	END AtomicTestSet; 
	PROCEDURE {FingerPrint(-618502421)}  - AtomicCAS*(VAR x: LONGINT; old, new: LONGINT): LONGINT;
	CODE {SYSTEM.i386}
	POP EBX		; new
	POP EAX		; old
	POP ECX		; address of x
	DB 0F0X, 00FX, 0B1X, 019X	; LOCK CMPXCHG [ECX], EBX; atomicly compare x with old and set it to new if equal

	END AtomicCAS; 
	PROCEDURE ^ CurrentPC*(): ADDRESS; 
	PROCEDURE {FingerPrint(-936660625)}  - CurrentBP*(): ADDRESS;
	CODE {SYSTEM.i386}
	MOV EAX, EBP

	END CurrentBP; 
	PROCEDURE {FingerPrint(-2111997521)}  - SetBP*(bp: ADDRESS);
	CODE {SYSTEM.i386}
	POP EBP

	END SetBP; 
	PROCEDURE {FingerPrint(-938888857)}  - CurrentSP*(): ADDRESS;
	CODE {SYSTEM.i386}
	MOV EAX, ESP

	END CurrentSP; 
	PROCEDURE {FingerPrint(-1826784850)}  - SetSP*(sp: ADDRESS);
	CODE {SYSTEM.i386}
	POP ESP

	END SetSP; 
	PROCEDURE {FingerPrint(1709791086)}  - GetEAX*(): LONGINT;
	CODE{SYSTEM.i386}

	END GetEAX; 
	PROCEDURE {FingerPrint(1440686669)}  - GetECX*(): LONGINT;
	CODE{SYSTEM.i386}
	MOV EAX,ECX	

	END GetECX; 
	PROCEDURE {FingerPrint(1442801269)}  - GetESI*(): LONGINT;
	CODE{SYSTEM.i386}
	MOV EAX,ESI	

	END GetESI; 
	PROCEDURE {FingerPrint(1439786621)}  - GetEDI*(): LONGINT;
	CODE{SYSTEM.i386}
	MOV EAX,EDI	

	END GetEDI; 
	PROCEDURE {FingerPrint(1286422002)}  - SetEAX*(n: LONGINT);
	CODE{SYSTEM.i386}	
	POP EAX

	END SetEAX; 
	PROCEDURE {FingerPrint(1336753649)}  - SetEBX*(n: LONGINT);
	CODE{SYSTEM.i386}
	POP EBX

	END SetEBX; 
	PROCEDURE {FingerPrint(1319976435)}  - SetECX*(n: LONGINT);
	CODE{SYSTEM.i386}
	POP ECX

	END SetECX; 
	PROCEDURE {FingerPrint(1236090352)}  - SetEDX*(n: LONGINT);
	CODE{SYSTEM.i386}
	POP EDX

	END SetEDX; 
	PROCEDURE {FingerPrint(1586445812)}  - SetESI*(n: LONGINT);
	CODE{SYSTEM.i386}
	POP ESI

	END SetESI; 
	PROCEDURE {FingerPrint(1234124277)}  - SetEDI*(n: LONGINT);
	CODE{SYSTEM.i386}
	POP EDI

	END SetEDI; 
	PROCEDURE {FingerPrint(1951073877)}  - GetTimer*(): HUGEINT;
	CODE {SYSTEM.Pentium}
	RDTSC	; set EDX:EAX

	END GetTimer; 
	PROCEDURE ^ GetConfig*(CONST name: ARRAY OF CHAR; VAR val: ARRAY OF CHAR); 
	PROCEDURE ^ StrToInt*(VAR i: LONGINT; CONST s: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ NumberOfProcessors*(): LONGINT; 
	PROCEDURE ^ SetNumberOfProcessors*(num: LONGINT); 
	PROCEDURE ^ ChangeByteOrder*(n: LONGINT): LONGINT; 
	PROCEDURE ^ TraceChar*(c: CHAR); 
	PROCEDURE ^ CPUID*(VAR vendor: Vendor; VAR version: LONGINT; VAR features1, features2: SET); 
	PROCEDURE ^ CpuIdSupported(): BOOLEAN; 
	PROCEDURE ^ SetupSSE2Ext; 
	PROCEDURE {FingerPrint(1201501690)}  - SetFCR(s: SET);
	CODE
	END SetFCR; 
	PROCEDURE {FingerPrint(538123933)}  - FCR(): SET;
	CODE
	END FCR; 
	PROCEDURE {FingerPrint(971517682)}  - InitFPU;
	CODE
	END InitFPU; 
	PROCEDURE ^ SetupFPU*; 
	PROCEDURE ^ InitLocks; 
	PROCEDURE ^ CleanupLocks*; 
	PROCEDURE ^ Acquire*(level: LONGINT); 
	PROCEDURE ^ Release*(level: LONGINT); 
	PROCEDURE ^ Shutdown*(reboot: BOOLEAN); 
	PROCEDURE ^ SetGCParams*; 
	PROCEDURE ^ InitConfig; 
	PROCEDURE ^ UpdateTicks*; 
	PROCEDURE ^ InitThreads; 
	PROCEDURE ^ CPUSpeed; 
	PROCEDURE ^ Log(c: CHAR); 
	PROCEDURE ^ LogFileOnly(c: CHAR); 
	PROCEDURE ^ InitLog; 
	PROCEDURE ^ SilentLog*; 
	PROCEDURE ^ VerboseLog*; 
	PROCEDURE ^ Append(VAR a: ARRAY OF CHAR; CONST this: ARRAY OF CHAR); 
	PROCEDURE ^ Init; 
	PROCEDURE ^ Init0*; 
BEGIN
END Machine.
