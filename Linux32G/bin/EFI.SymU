MODULE EFI;
	IMPORT SYSTEM;
CONST 
	Success* = 0; 
	WarnUnknownGlyph* = 1; 
	WarnDeleteFailure* = 2; 
	WarnWriteFailure* = 3; 
	WarnBufferTooSmall* = 4; 
	Error* = LONGINT(80000000H); 
	ErrLoadError* = (Error + 1); 
	ErrInvalidParameter* = (Error + 2); 
	ErrUnsupported* = (Error + 3); 
	ErrBadBufferSize* = (Error + 4); 
	ErrBufferTooSmall* = (Error + 5); 
	ErrNotFound* = (Error + 14); 
	ErrEndOfFile* = (Error + 31); 
	ErrInvalidLanguage* = (Error + 32); 
	AllocateAnyPage* = 0; 
	AllocateMaxAddress* = 1; 
	AllocateAddress* = 2; 
	MaxAllocateType* = 3; 
	MTReserved* = 0; 
	MTLoaderCode* = 1; 
	MTLoaderData* = 2; 
	MTBootServicesCode* = 3; 
	MTBootServicesData* = 4; 
	MTRuntimeServicesCode* = 5; 
	MTRuntimeServicesData* = 6; 
	MTConventionalMemory* = 7; 
	MTUnusableMemory* = 8; 
	MTACPIReclaimMemory* = 9; 
	MTACPIMemoryNVSM* = 10; 
	MTMemoryMappedIO* = 11; 
	MTMemoryMappedIOPortSpace* = 12; 
	MTPalCode* = 13; 
	MTMaxMemoryType* = 14; 
	PageSize* = 4096; 
	AllHandles* = 0; 
	ByRegistryNotify* = 1; 
	ByProtocol* = 2; 
	ApplicationTPL* = 4; 
	CallbackTPL* = 8; 
	NotifiyTPL* = 16; 
	HighLevelTPL* = 31; 
TYPE 
	Char8* = SHORTINT; 

	Char16* = INTEGER; 

	Boolean* = BOOLEAN; 

	Int* = SIZE; 

	Int8* = SHORTINT; 

	Int16* = INTEGER; 

	Int32* = LONGINT; 

	Int64* = HUGEINT; 

	Address* = ADDRESS; 

	Status* = Int; 

	TPL* = Int; 

	LBA* = Int64; 

	Pointer* = Address; 

	VirtualAddress* = Int64; 

	PhysicalAddress* = Int64; 

	Handle* = Pointer; 

	Event* = Pointer; 

	Protocol* = POINTER TO ProtocolDescription; 

	ProtocolDescription* = RECORD 
	END; 

	GUID* = RECORD 
		Data1*: Int32; 
		Data2*: Int16; 
		Data3*: Int16; 
		Data4*: ARRAY 8 OF Int8; 
	END; 

	MemoryDescriptorPointer* = POINTER TO MemoryDescriptor; 

	MemoryDescriptor* = RECORD 
		Type-: Int32; 
		pad-: Int32; 
		PhysicalStart-: PhysicalAddress; 
		VirtualStart-: VirtualAddress; 
		NumberOfPages-: Int64; 
		Attribute-: Int64; 
	END; 

	Time* = RECORD 
		Year-: Int16; 
		Month-: Int8; 
		Day-: Int8; 
		Hour-: Int8; 
		Minute-: Int8; 
		Second-: Int8; 
		Pad1: Int8; 
		Nanosecond-: Int32; 
		TimeZone-: Int8; 
		Daylight-: Int8; 
		Pad2: Int8; 
	END; 

	TableHeader* = RECORD 
		Signature-: Int64; 
		Revision-: Int32; 
		HeaderSize-: Int32; 
		CRC32-: Int32; 
		Reserved-: Int32; 
	END; 

	SystemTable* = RECORD 
		Hdr-: TableHeader; 
		FirmwareVendor-{UNTRACED} : POINTER TO ARRAY OF Char16; 
		FirmwareRevision-: Int32; 
		ConsoleInHandle*: Handle; 
		ConIn*{UNTRACED} : POINTER TO SimpleInputInterface; 
		ConsoleOutHandle*: Handle; 
		ConOut*{UNTRACED} : POINTER TO SimpleTextOutputInterface; 
		StandardErrorHandle*: Handle; 
		StdErr*{UNTRACED} : POINTER TO SimpleTextOutputInterface; 
		RS-{UNTRACED} : POINTER TO RuntimeServices; 
		BS*{UNTRACED} : POINTER TO BootServices; 
		NumberOfTableEntries-: Int; 
		ConfigurationTable-{UNTRACED} : POINTER TO ARRAY 2048 OF ConfigurationTableEntry; 
	END; 

	DevicePath* = RECORD 
		Type-: Int8; 
		SubType-: Int8; 
		Length-: ARRAY 2 OF Int8; 
	END; 

	BSDummyType* = PROCEDURE {WINAPI}; 

	BSTPLRaise* = PROCEDURE {WINAPI}(NewTpl: TPL):TPL; 

	BSTPLRestore* = PROCEDURE {WINAPI}(oldTpl: TPL); 

	BSAllocatePages* = PROCEDURE {WINAPI}(Type: Int; MemoryType: Int; Pages: Int; VAR Memory: PhysicalAddress):Status; 

	BSFreePages* = PROCEDURE {WINAPI}(Memory: PhysicalAddress; Pages: Int):Status; 

	BSGetMemoryMap* = PROCEDURE {WINAPI}(VAR MemoryMapSize: Int; VAR MemoryMap: ARRAY OF MemoryDescriptor; VAR MapKey, DescriptorSize: Int; VAR DescriptorVersion: Int32):Status; 

	BSProtocolInstall* = PROCEDURE {WINAPI}(VAR Handle: Handle; CONST Protocol: GUID; InterfaceType: Int; Interface: Protocol):Status; 

	BSProtocolReinstall* = PROCEDURE {WINAPI}(Handle: Handle; CONST Protocol: GUID; OldInterface, NewInterface: Protocol):Status; 

	BSProtocolUninstall* = PROCEDURE {WINAPI}(Handle: Handle; CONST Protocol: GUID; Interface: Protocol):Status; 

	BSProtocolHandle* = PROCEDURE {WINAPI}(Handle: Handle; CONST Protocol: GUID; VAR Interface: Protocol):Status; 

	BSProtocolRegisterNotify* = PROCEDURE {WINAPI}(CONST Protocol: GUID; Event: Event; VAR Registration: Pointer):Status; 

	BSLocateHandle* = PROCEDURE {WINAPI}(SearchType: Int; CONST Protocol: GUID; SearchKey: Pointer; VAR BufferSize: Int; VAR Buffer: ARRAY OF Handle):Status; 

	BSLocateDevicePath* = PROCEDURE {WINAPI}(CONST Protocol: GUID; VAR DevicePath: DevicePath; VAR Device: Handle):Status; 

	BSInstallConfigurationTable* = PROCEDURE {WINAPI}(CONST Protocol: GUID; Table: Pointer):Status; 

	BSImageLoad* = PROCEDURE {WINAPI}(BootPolicy: Boolean; ParentImageHandle: Handle; CONST FilePath: DevicePath; SourceSize: Int; SourceBuffer: Pointer; VAR ImageHandle: Handle):Status; 

	BSImageStart* = PROCEDURE {WINAPI}(ImageHandle: Handle; VAR ExitDataSize: Int; VAR ExitData: ARRAY OF Char16):Status; 

	BSImageExit* = PROCEDURE {WINAPI}(ImageHandle: Handle; ExitStatus: Status; ExitDataSize: Int; VAR ExitData: ARRAY OF Char16):Status; 

	BSImageUnload* = PROCEDURE {WINAPI}(ImageHandle: Handle):Status; 

	BSExitBootServices* = PROCEDURE {WINAPI}(ImageHandle: Handle; MapKey: Int):Status; 

	BSGetNextMonotonicCount* = PROCEDURE {WINAPI}(VAR Count: Int64); 

	BSStall* = PROCEDURE {WINAPI}(Microseconds: Int); 

	BootServices* = RECORD 
		Hdr-: TableHeader; 
		RaiseTPL-: BSTPLRaise; 
		RestoreTPL-: BSTPLRestore; 
		AllocatePages-: BSAllocatePages; 
		FreePages-: BSFreePages; 
		GetMemoryMap-: BSGetMemoryMap; 
		AllocatePool-: BSDummyType; 
		FreePool-: BSDummyType; 
		CreateEvent-: BSDummyType; 
		SetTimer-: BSDummyType; 
		WaitForEvent-: BSDummyType; 
		SignaleEvent-: BSDummyType; 
		CloseEvent-: BSDummyType; 
		CheckEvent-: BSDummyType; 
		InstallProtocolInterface-: BSProtocolInstall; 
		ReinstallProtocolInterface-: BSProtocolReinstall; 
		UninstallProtocolInterface-: BSProtocolUninstall; 
		HandleProtocol-: BSProtocolHandle; 
		PCHandleProtocol-: BSProtocolHandle; 
		RegisterProtocolNotify-: BSProtocolRegisterNotify; 
		LocateHandle-: BSLocateHandle; 
		LocateDevicePath-: BSLocateDevicePath; 
		InstallConfigurationTable-: BSDummyType; 
		LoadImage-: BSImageLoad; 
		StartImage-: BSImageStart; 
		Exit-: BSImageExit; 
		UnloadImage-: BSImageUnload; 
		ExitBootServices-: BSExitBootServices; 
		GetNextMonotinicCount-: BSGetNextMonotonicCount; 
		Stall-: BSStall; 
		SetWatchdogTimer-: BSDummyType; 
	END; 

	RSDummyType* = PROCEDURE {WINAPI}; 

	RuntimeServices* = RECORD 
		Hdr-: TableHeader; 
		GetTime-: RSDummyType; 
		SetTime-: RSDummyType; 
		GetWakeupTime-: RSDummyType; 
		SetWakeupTime-: RSDummyType; 
		SetVirtualAddressMap-: RSDummyType; 
		ConvertPointer-: RSDummyType; 
		GetVariable-: RSDummyType; 
		GetNextVariable-: RSDummyType; 
		SetVariable-: RSDummyType; 
		GetNextHighMonotonicCount-: RSDummyType; 
		ResetSystem-: RSDummyType; 
	END; 

	ConfigurationTableEntry* = RECORD 
		VendorGuid-: GUID; 
		VendorTable-: ADDRESS; 
	END; 

	InputKey* = RECORD 
		ScanCode-: Int16; 
		UnicodeChar-: Char16; 
	END; 

	InputReset* = PROCEDURE {WINAPI}(This: POINTER TO SimpleInputInterface; ExtendedVerification: Boolean):Status; 

	InputReadKey* = PROCEDURE {WINAPI}(This: POINTER TO SimpleInputInterface; VAR key: InputKey):Status; 

	SimpleInputInterface* = RECORD (ProtocolDescription)
		Reset-: InputReset; 
		ReadKey-: InputReadKey; 
		WaitForEvent-: Event; 
	END; 

	SimpleTextOutputInterfaceMode* = RECORD 
		MaxMode-: Int32; 
		Mode-: Int32; 
		Attribute-: Int32; 
		CursorColumn-: Int32; 
		CursorRow-: Int32; 
		CursorVisible-: Boolean; 
	END; 

	TextReset* = PROCEDURE {WINAPI}(This: POINTER TO SimpleTextOutputInterface; ExtendedVerification: Boolean):Status; 

	TextString* = PROCEDURE {WINAPI}(This: POINTER TO SimpleTextOutputInterface; CONST String: ARRAY OF Char16):Status; 

	TextTestString* = PROCEDURE {WINAPI}(This: POINTER TO SimpleTextOutputInterface; CONST String: ARRAY OF Char16):Status; 

	TextQueryMode* = PROCEDURE {WINAPI}(This: POINTER TO SimpleTextOutputInterface; ModeNumber: Int; VAR Columns, Rows: Int):Status; 

	TextSetMode* = PROCEDURE {WINAPI}(This: POINTER TO SimpleTextOutputInterface; ModeNumber: Int):Status; 

	TextSetAttribute* = PROCEDURE {WINAPI}(This: POINTER TO SimpleTextOutputInterface; Attribute: Int):Status; 

	TextClearScreen* = PROCEDURE {WINAPI}(This: POINTER TO SimpleTextOutputInterface):Status; 

	TextSetCursorPos* = PROCEDURE {WINAPI}(This: POINTER TO SimpleTextOutputInterface; Column, Row: Int):Status; 

	TextEnableCursor* = PROCEDURE {WINAPI}(This: POINTER TO SimpleTextOutputInterface; Visible: Boolean):Status; 

	SimpleTextOutputInterface* = RECORD (ProtocolDescription)
		Reset-: TextReset; 
		OutputString-: TextString; 
		TestString-: TextTestString; 
		QueryMode-: TextQueryMode; 
		SetMode-: TextSetMode; 
		SetAttribute-: TextSetAttribute; 
		ClearScreen-: TextClearScreen; 
		SetCursorPosition-: TextSetAttribute; 
		EnableCursor-: TextEnableCursor; 
		Mode-{UNTRACED} : POINTER TO SimpleTextOutputInterfaceMode; 
	END; 
VAR 
	imageHandle-: Handle; 
	table-{UNTRACED} : POINTER TO SystemTable; 
BEGIN
END EFI.
