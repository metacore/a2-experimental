MODULE ContextualDependency;
	IMPORT Files, KernelLog, Configuration, Texts, Strings, XML, XMLObjects, XMLParser, XMLScanner;
CONST 
	RangeDebug = FALSE; 
	LanguageAttribute = \"language"\; 
	ValueAttribute = \"value"\; 
	BaseAttribute = \"base"\; 
	CodeAttribute = \"code"\; 
	RangeAttribute = \"range"\; 
	SizeAttribute = \"size"\; 
	OffsetAttribute = \"offset"\; 
	NegativeAttribute = \"neg"\; 
	LowAttribute = \"low"\; 
	HighAttribute = \"high"\; 
	RootTag = \"LanguageContext"\; 
	CharacterTag = \"Character"\; 
	PropertiesTag = \"Properties"\; 
	ContextTag = \"Context"\; 
	SecondleftTag = \"secondleft"\; 
	LeftTag = \"left"\; 
	RightTag = \"right"\; 
	SecondrightTag = \"secondright"\; 
	GenericLeftTag = \"genericLeft"\; 
	GenericRightTag = \"genericRight"\; 
	BeforeTag = \"left"\; 
	AfterTag = \"right"\; 
	ResultTag = \"result"\; 
	RangeTag = \"Range"\; 
	SizeTag = \"Size"\; 
TYPE 
	String = POINTER TO ARRAY OF Texts.Char32; 

	RangeNode = POINTER TO RECORD 
		leftNode, rightNode: RangeNode; 
		leftOuterBound, leftInnerBound: LONGINT; 
		rightInnerBound, rightOuterBound: LONGINT; 
		depth: LONGINT; 
		target: RangedContextAnalyzer; 
	END; 

	RangeTree = OBJECT 
	VAR 
		root, last: RangeNode; 

		PROCEDURE ^ AddRange(target: RangedContextAnalyzer); 
		PROCEDURE ^ RecursiveAdd(newNode: RangeNode; VAR thisNode: RangeNode; VAR left, right: LONGINT); 
		PROCEDURE ^ Search(position: LONGINT): RangedContextAnalyzer; 
		PROCEDURE ^ RecursiveSearch(position: LONGINT; thisNode: RangeNode): RangedContextAnalyzer; 
		PROCEDURE ^ CompleteBalancing; 
		PROCEDURE ^ RecursiveBalancing(VAR thisNode: RangeNode): LONGINT; 
		PROCEDURE ^ RotateRight(VAR thisNode: RangeNode); 
		PROCEDURE ^ RotateLeft(VAR thisNode: RangeNode); 
		PROCEDURE ^ GetNodeDepth(thisNode: RangeNode): LONGINT; 
	END RangeTree; 

	Range = OBJECT 
	VAR 
		lowerBound: LONGINT; 
		upperBound: LONGINT; 
		valid: BOOLEAN; 

		PROCEDURE ^  & Init*; 
	END Range; 

	RangeArray = POINTER TO ARRAY OF Range; 

	Ranges = POINTER TO RECORD 
		posRanges: RangeArray; 
		negRanges: RangeArray; 
	END; 

	GenericContext = POINTER TO RECORD 
		lastRanges, secondlastRanges: Ranges; 
		nextRanges, secondnextRanges: Ranges; 
		wholeLastRanges, wholeNextRanges: POINTER TO ARRAY OF Ranges; 
		resultingChar: Texts.Char32; 
	END; 

	ContextCacheElement = OBJECT 
	VAR 
		key: Texts.Char32; 
		value: GenericContext; 
		next: ContextCacheElement; 

		PROCEDURE ^  & Init*(key: Texts.Char32; value: GenericContext); 
	END ContextCacheElement; 

	ContextCache = OBJECT 
	VAR 
		internalCache: POINTER TO ARRAY OF ContextCacheElement; 
		cacheSize: LONGINT; 
		nextElement: ContextCacheElement; 

		PROCEDURE ^  & Init*(hashMapSize: LONGINT); 
		PROCEDURE ^ Lookup(char: Texts.Char32; VAR done: BOOLEAN): GenericContext; 
		PROCEDURE ^ Insert(char: Texts.Char32; value: GenericContext); 
	END ContextCache; 

	RangedContextAnalyzer = OBJECT 
	VAR 
		language: XML.String; 
		rangeLow, rangeHigh: LONGINT; 
		closeContext, wideContext, wholeContext: BOOLEAN; 
		contextCache: ContextCache; 
		contextFile: XML.Document; 

		PROCEDURE ^  & Init*(context: XML.Document; rangeLow, rangeHigh: LONGINT; language, mode: Strings.String); 
		PROCEDURE ^ SetCloseContext; 
		PROCEDURE ^ SetWideContext; 
		PROCEDURE ^ SetWholeContext; 
		PROCEDURE ^ SetNoContext; 
		PROCEDURE ^ AnalyzeCloseContext(thisChar, lastChar, nextChar: Texts.Char32): Texts.Char32; 
		PROCEDURE ^ AnalyzeWideContext(thisChar, secondlastChar, lastChar, nextChar, secondnextChar: Texts.Char32): Texts.Char32; 
		PROCEDURE ^ AnalyzeWholeContext(thisPos: LONGINT; line: String): Texts.Char32; 
		PROCEDURE ^ CheckCloseContext(lastChar, nextChar: Texts.Char32; context: GenericContext): BOOLEAN; 
		PROCEDURE ^ CheckWideContext(secondlastChar, lastChar, nextChar, secondnextChar: Texts.Char32; context: GenericContext): BOOLEAN; 
		PROCEDURE ^ CheckWholeContext(thisPos: LONGINT; line: String; context: GenericContext): BOOLEAN; 
		PROCEDURE ^ RangeOK(thisChar: Texts.Char32; ranges: Ranges): BOOLEAN; 
		PROCEDURE ^ GetContextsFromXML(thisChar: Texts.Char32); 
		PROCEDURE ^ ParseRangeString(rangeString: XML.String; base16, neg: BOOLEAN; VAR ranges: Ranges); 
		PROCEDURE ^ GetReflexiveContext(thisChar: Texts.Char32): GenericContext; 
	END RangedContextAnalyzer; 

	ContextAnalyzer = OBJECT 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ AnalyzeLine(line: Texts.TextReader; start, end: LONGINT): Texts.TextReader; 
	END ContextAnalyzer; 
VAR 
	contextAnalyzer: ContextAnalyzer; 
	ranges: RangeTree; 

	PROCEDURE ^ RegisterRangedAnalyzer(language: Strings.String; contextFile: XML.Document); 
	PROCEDURE ^ AnalyzeLine*(line: Texts.TextReader; start, end: LONGINT): Texts.TextReader; 
	PROCEDURE ^ InitRangedAnalyzer(CONST filename: ARRAY OF CHAR; VAR useThisContext: BOOLEAN; VAR context: XML.Document); 
	PROCEDURE ^ LoadContextualDependencies; 
BEGIN
END ContextualDependency.
