MODULE Layouts IN Oberon;
	IMPORT Objects, Gadgets, Display, Out;
CONST 
	Inval* = Objects.Inval; 
	Int* = Objects.Int; 
	Real* = Objects.Real; 
	Bool* = Objects.Bool; 
	Char* = Objects.Char; 
	String* = Objects.String; 
	Format* = 8; 
	Ident* = 9; 
	Def* = 20; 
	Set* = 21; 
	Params* = 22; 
	Layout* = 23; 
	Attributes* = 24; 
	Links* = 25; 
	Instance* = 26; 
	Obj* = 27; 
	Break* = 28; 
	Left* = 60; 
	Right* = 61; 
	Bottom* = 62; 
	Top* = 63; 
	Center* = 64; 
	Static* = 65; 
	Dynamic* = 66; 
	Hor* = 67; 
	Vert* = 68; 
	left = 0; 
	right = 1; 
	bottom = 3; 
	top = 4; 
	sameWidth = 6; 
	sameHeight = 7; 
	hstatic = 9; 
	vstatic = 10; 
	vert = 12; 
	innerleft = 14; 
	innerright = 15; 
	innerbottom = 17; 
	innertop = 18; 
	leaf = 0; 
	place = 1; 
	list = 2; 
	table = 3; 
TYPE 
	Node* = POINTER TO NodeDesc; 

	NodeDesc* = RECORD 
		id*: INTEGER; 
		copy: PROCEDURE (node: Node):Node; 
		dsc, last, next: Node; 
	END; 

	ValNode = POINTER TO ValNodeDesc; 

	ValNodeDesc = RECORD (NodeDesc)
		str: POINTER TO ARRAY OF CHAR; 
		char: CHAR; 
		int, fills: LONGINT; 
		real: REAL; 
		bool: BOOLEAN; 
		format: INTEGER; 
		node: Node; 
	END; 

	AssignNode = POINTER TO AssignNodeDesc; 

	AssignNodeDesc = RECORD (NodeDesc)
		name: Objects.Name; 
		link: AssignNode; 
	END; 

	ObjNode = POINTER TO ObjNodeDesc; 

	SizeProc = PROCEDURE (node: ObjNode); 

	MakeProc = PROCEDURE (node: ObjNode; hfill, vfill: INTEGER); 

	IntLine = POINTER TO ARRAY OF INTEGER; 

	ObjNodeDesc = RECORD (NodeDesc)
		obj: Objects.Object; 
		type: INTEGER; 
		sized, made: BOOLEAN; 
		x, y, w, h: INTEGER; 
		row, col, spanw, spanh: INTEGER; 
		minx, miny, minw, minh: INTEGER; 
		hFactor, vFactor: INTEGER; 
		gmaxw, gmaxh, hexpand, vexpand: IntLine; 
		hfill, vfill: INTEGER; 
		hdist, vdist, hborder, vborder: INTEGER; 
		cols, rows: INTEGER; 
		format: SET; 
		def, lastdef: AssignNode; 
		size: SizeProc; 
		make: MakeProc; 
	END; 
VAR 
	Definitions: AssignNode; 

	PROCEDURE ^ Insert*(node, dsc: Node); 
	PROCEDURE ^ SetParams*(node, params: Node); 
	PROCEDURE ^ CopyDsc(new, node: Node); 
	PROCEDURE ^ CopyNode(node: Node): Node; 
	PROCEDURE ^ CopyValNode(node: Node): Node; 
	PROCEDURE ^ CopyAssignNode(node: Node): Node; 
	PROCEDURE ^ CopyObjNode(node: Node): Node; 
	PROCEDURE ^ CopyOf*(node: Node): Node; 
	PROCEDURE ^ IsVirtual*(node: Node): BOOLEAN; 
	PROCEDURE ^ Realize*(node: Node): Objects.Object; 
	PROCEDURE ^ GetNodeRec(cur: AssignNode; val: Node): Node; 
	PROCEDURE ^ GetNode(val: Node; firstTime: BOOLEAN): Node; 
	PROCEDURE ^ NewValNode(type: INTEGER): ValNode; 
	PROCEDURE ^ NewString*(str: ARRAY OF CHAR): Node; 
	PROCEDURE ^ NewIdent*(str: ARRAY OF CHAR): Node; 
	PROCEDURE ^ NewChar*(ch: CHAR): Node; 
	PROCEDURE ^ NewInt*(int: LONGINT): Node; 
	PROCEDURE ^ NewSize*(MinSize, ExpandFactor: INTEGER): Node; 
	PROCEDURE ^ NewReal*(real: REAL): Node; 
	PROCEDURE ^ NewBool*(bool: BOOLEAN): Node; 
	PROCEDURE ^ NewFormat*(sym: INTEGER): Node; 
	PROCEDURE ^ NewNode*(id: INTEGER): Node; 
	PROCEDURE ^ NewAssignNode(id: INTEGER; name: ARRAY OF CHAR; val: Node): Node; 
	PROCEDURE ^ NewSet*(Name: ARRAY OF CHAR; Value: Node): Node; 
	PROCEDURE ^ NewDef*(Name: ARRAY OF CHAR; Value: Node): Node; 
	PROCEDURE ^ NewObj(size: SizeProc; make: MakeProc; id: ARRAY OF CHAR): Node; 
	PROCEDURE ^ SetAttributes(obj: Objects.Object; node: Node); 
	PROCEDURE ^ SetLinks(obj: Objects.Object; node: Node); 
	PROCEDURE ^ Settings(node: ObjNode); 
	PROCEDURE ^ SetLayout(node: ObjNode; layout: Node); 
	PROCEDURE ^ SizeOf(node: ObjNode); 
	PROCEDURE ^ Reset(node: ObjNode); 
	PROCEDURE ^ FindIdents(node: Node); 
	PROCEDURE ^ SizeOfNew(node: ObjNode); 
	PROCEDURE ^ MakeNew(node: ObjNode; hfill, vfill: INTEGER); 
	PROCEDURE ^ SizeOfPlace(node: ObjNode); 
	PROCEDURE ^ PlaceObjects(VAR last, obj: Objects.Object; w, h: INTEGER; VAR minx, miny: INTEGER); 
	PROCEDURE ^ InsertObjects(node: ObjNode; obj: Objects.Object); 
	PROCEDURE ^ MakePlace(node: ObjNode; hfill, vfill: INTEGER); 
	PROCEDURE ^ CountRows(vert: BOOLEAN; obj: Node; cols: INTEGER; VAR rows: INTEGER); 
	PROCEDURE ^ CalcSize(node: ObjNode; VAR minSize: INTEGER; VAR break: BOOLEAN); 
	PROCEDURE ^ SetSize(VAR hfill, min, w: INTEGER; cols, minSize: INTEGER; VAR expand, max: IntLine; hor, sameWidth, setSize: BOOLEAN); 
	PROCEDURE ^ SizeOfTable(node: ObjNode); 
	PROCEDURE ^ FillCols(space, cols, fills: INTEGER; expand, max: IntLine; sameSize: BOOLEAN); 
	PROCEDURE ^ SetOffset(cols, border, dist: INTEGER; VAR max, offset: IntLine); 
	PROCEDURE ^ MakeTable(node: ObjNode; hfill, vfill: INTEGER); 
	PROCEDURE ^ SizeOfTransient(node: ObjNode); 
	PROCEDURE ^ MakeTransient(node: ObjNode; hfill, vfill: INTEGER); 
	PROCEDURE ^ SizeOfConfig(node: ObjNode); 
	PROCEDURE ^ MakeConfig(node: ObjNode; hfill, vfill: INTEGER); 
	PROCEDURE ^ NewObject*(NewProc: ARRAY OF CHAR): Node; 
	PROCEDURE ^ NewInstance*(Ident: ARRAY OF CHAR): Node; 
	PROCEDURE ^ NewPlace*(NewProc: ARRAY OF CHAR): Node; 
	PROCEDURE ^ NewHList*(NewProc: ARRAY OF CHAR): Node; 
	PROCEDURE ^ NewVList*(NewProc: ARRAY OF CHAR): Node; 
	PROCEDURE ^ NewTable*(NewProc: ARRAY OF CHAR): Node; 
	PROCEDURE ^ NewSpan*(rows, cols: INTEGER): Node; 
	PROCEDURE ^ NewBreak*(): Node; 
	PROCEDURE ^ NewConfig*(): Node; 
	PROCEDURE ^ CopyPublicObj*(name: ARRAY OF CHAR; deep: BOOLEAN): Node; 
	PROCEDURE ^ WrappedObject*(obj: Objects.Object): Node; 
BEGIN
END Layouts.
