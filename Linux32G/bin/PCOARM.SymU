MODULE PCOARM;
	IMPORT SYSTEM, Files, PCLIR, PCM, Diagnostics;
CONST 
	INTERNALERROR* = 100; 
	UNIMPLEMENTED* = 101; 
	NONORTHOGONALITYEXCEPTION* = 102; 
	ErrBranchOffsetTooBig* = 110; 
	ErrImmediateTooSmall* = 111; 
	ErrImmediateTooBig* = 112; 
	ErrRotateImmTooBig* = 113; 
	ErrRotateImmOdd* = 114; 
	ErrInvalidRegister* = 115; 
	ErrInvalidRegisterSet* = 116; 
	ErrInvalidMode* = 117; 
	ErrCaseOffsetTooBig* = 118; 
	MaxCodeLength* = (256 * 1024); 
	InstructionSize* = 4; 
	EQ* = {}; 
	NE* = {28}; 
	CS* = {29}; 
	HS* = CS; 
	CC* = {29, 28}; 
	LO* = CC; 
	MI* = {30}; 
	PL* = {30, 28}; 
	VS* = {30, 29}; 
	VC* = {30, 29, 28}; 
	HI* = {31}; 
	LS* = {31, 28}; 
	GE* = {31, 29}; 
	LT* = {31, 29, 28}; 
	GT* = {31, 30}; 
	LE* = {31, 30, 28}; 
	AL* = {31, 30, 29}; 
	CondMask* = {31, 30, 29, 28}; 
	R0* = 0; 
	R1* = 1; 
	R2* = 2; 
	R3* = 3; 
	R4* = 4; 
	R5* = 5; 
	R6* = 6; 
	R7* = 7; 
	R8* = 8; 
	R9* = 9; 
	R10* = 10; 
	R11* = 11; 
	FP* = 12; 
	SP* = 13; 
	LR* = 14; 
	PC* = 15; 
	Registers* = {15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}; 
	CPSR* = {}; 
	SPSR* = {22}; 
	CR0* = 0; 
	CR1* = 1; 
	CR2* = 2; 
	CR3* = 3; 
	CR4* = 4; 
	CR5* = 5; 
	CR6* = 6; 
	CR7* = 7; 
	CR8* = 8; 
	CR9* = 9; 
	CR10* = 10; 
	CR11* = 11; 
	CR12* = 12; 
	CR13* = 13; 
	CR14* = 14; 
	CR15* = 15; 
	PSRc* = {16}; 
	PSRx* = {17}; 
	PSRs* = {18}; 
	PSRf* = {19}; 
	Mask24* = {0 .. 23}; 
	MaskRd* = {15, 14, 13, 12}; 
	Sflag* = {20}; 
	Bflag* = {22}; 
	Lflag* = {22}; 
	Lsl* = {}; 
	LSR* = {5}; 
	Asr* = {6}; 
	Ror* = {6, 5}; 
	RRX* = Ror; 
	ShiftMask = {6, 5}; 
	Load* = {20}; 
	Store* = {}; 
	IdxAdd* = {23}; 
	IdxSub* = {}; 
	Offset* = {24}; 
	PreIdxd* = {24, 21}; 
	PostIdxd* = {}; 
	A1Imm* = {25}; 
	A1Reg* = {}; 
	A1ShiftImm* = {}; 
	A1ShiftReg* = {4}; 
	A1Immediate0* = {}; 
	A1Immediate1* = {0}; 
	A1Immediate2* = {1}; 
	A1Immediate4* = {2}; 
	A1Immediate8* = {3}; 
	A1Immediate31* = {4, 3, 2, 1, 0}; 
	A2Mode* = {26}; 
	A2Word* = {}; 
	A2Byte* = {22}; 
	A2Imm* = {}; 
	A2Reg* = {25}; 
	A2WImmOffset* = ((A2Word + A2Imm) + Offset); 
	A2WRegOffset* = ((A2Word + A2Reg) + Offset); 
	A2BImmOffset* = ((A2Byte + A2Imm) + Offset); 
	A2BRegOffset* = ((A2Byte + A2Reg) + Offset); 
	A2WImmPreIdxd* = ((A2Word + A2Imm) + PreIdxd); 
	A2WRegPreIdxd* = ((A2Word + A2Reg) + PreIdxd); 
	A2WImmPostIdxd* = ((A2Word + A2Imm) + PostIdxd); 
	A2WRegPostIdxd* = ((A2Word + A2Reg) + PostIdxd); 
	A2BImmPostIdxd* = ((A2Byte + A2Imm) + PostIdxd); 
	A2BRegPostIdxd* = ((A2Byte + A2Reg) + PostIdxd); 
	A2AddrModeMask = {25, 24, 23, 22, 21}; 
	A3Mode* = {7, 4}; 
	A3Halfword* = {5}; 
	A3Byte* = {}; 
	A3Imm* = {22}; 
	A3Reg* = {}; 
	A3Signed* = {6}; 
	A3Unsigned* = {}; 
	A3SHImmOffset* = (((A3Halfword + A3Imm) + A3Signed) + Offset); 
	A3UHImmOffset* = (((A3Halfword + A3Imm) + A3Unsigned) + Offset); 
	A3SHRegOffset* = (((A3Halfword + A3Reg) + A3Signed) + Offset); 
	A3UHRegOffset* = (((A3Halfword + A3Reg) + A3Unsigned) + Offset); 
	A3SBImmOffset* = (((A3Byte + A3Imm) + A3Signed) + Offset); 
	A3UBImmOffset* = (((A3Byte + A3Imm) + A3Unsigned) + Offset); 
	A3SBRegOffset* = (((A3Byte + A3Reg) + A3Signed) + Offset); 
	A3UBRegOffset* = (((A3Byte + A3Reg) + A3Unsigned) + Offset); 
	A3AddrModeMask = {24, 23, 22, 21, 7, 6, 5, 4}; 
	A4IA* = {23}; 
	A4IB* = {24, 23}; 
	A4DA* = {}; 
	A4DB* = {24}; 
	A4W* = {21}; 
	A4User* = {22}; 
	A4LDMMask* = {20}; 
	A5W* = {21}; 
	A5Offset* = {}; 
	A5PreIdxd* = {21}; 
	A5PostIdxd* = {24, 21}; 
	A5UnIdxd* = {24}; 
	MSRImmediate* = {25}; 
	MSRRegister* = {}; 
	opADC* = {23, 21}; 
	opADD* = {23}; 
	opAND* = {}; 
	opBIC* = {24, 23, 22}; 
	opCMN* = {24, 22, 21, 20}; 
	opCMP* = {24, 22, 20}; 
	opEOR* = {21}; 
	opMOV* = {24, 23, 21}; 
	opMVN* = {24, 23, 22, 21}; 
	opORR* = {24, 23}; 
	opRSB* = {22, 21}; 
	opRSC* = {23, 22, 21}; 
	opSBC* = {23, 22}; 
	opSUB* = {22}; 
	opTEQ* = {24, 21, 20}; 
	opTST* = {24, 20}; 
	opMRS* = {24, 19, 18, 17, 16}; 
	opMSR* = {24, 21, 15, 14, 13, 12}; 
	opMLA* = {21, 7, 4}; 
	opMUL* = {7, 4}; 
	opSMLAL* = {23, 22, 21, 7, 4}; 
	opSMULL* = {23, 22, 7, 4}; 
	opUMLAL* = {23, 21, 7, 4}; 
	opUMULL* = {23, 7, 4}; 
	opB* = {27, 25}; 
	LinkBit* = {24}; 
	opBL* = (opB + LinkBit); 
	BMask* = {27, 25, 24}; 
	opLDM* = {27, 20}; 
	opLDR* = {26, 20}; 
	opLDRH* = {20, 7, 4}; 
	opSTM* = {27}; 
	opSTR* = {26}; 
	opSTRH* = {7, 5, 4}; 
	opSWP* = {24, 7, 4}; 
	opSWI* = {27, 26, 25, 24}; 
	opBKPT* = {31, 30, 29, 24, 21, 6, 5, 4}; 
	opCDP* = {27, 26, 25}; 
	opLDC* = {27, 26, 20}; 
	opMCR* = {27, 26, 25, 4}; 
	opMRC* = {27, 26, 25, 20, 4}; 
	opSTC* = {27, 26}; 
TYPE 
	DCDList = POINTER TO RECORD 
		pc: LONGINT; 
		next: DCDList; 
	END; 

	Callback* = PROCEDURE {DELEGATE}(pc: LONGINT); 
VAR 
	AddrMode: ARRAY 5 OF SET; 
	f: Files.File; 
	r: Files.Rider; 
	start: LONGINT; 
	code: PCLIR.CodeArray; 
	codelen: LONGINT; 
	codeTooLong: BOOLEAN; 
	sourcepos*: LONGINT; 
	dcd: BOOLEAN; 
	codeBarrier: LONGINT; 
	codeBarrierCallback: Callback; 
	callbackLocked: BOOLEAN; 

	PROCEDURE ^ GetCodePos*(): LONGINT; 
	PROCEDURE ^ GetInstruction*(pos: LONGINT): SET; 
	PROCEDURE ^ GetCode*(VAR codeArr: PCLIR.CodeArray; VAR length, hdrLength, addressFactor: LONGINT); 
	PROCEDURE ^ Lsh(v, s: LONGINT): SET; 
	PROCEDURE ^ CheckReg(register: LONGINT); 
	PROCEDURE ^ CheckImm(imm, max: LONGINT); 
	PROCEDURE ^ CheckSet(set, mask: SET); 
	PROCEDURE ^ MakeA3Immediate*(VAR addrMode: SET; offset: LONGINT): SET; 
	PROCEDURE ^ MakeA3Register*(register: LONGINT): SET; 
	PROCEDURE ^ MakeA1Immediate*(immediate: LONGINT; VAR imm: SET): BOOLEAN; 
	PROCEDURE ^ MakeA1Register*(reg: LONGINT): SET; 
	PROCEDURE ^ MakeA1RegSHIFTReg*(reg, shiftreg: LONGINT; mode: SET): SET; 
	PROCEDURE ^ MakeA1RegSHIFTImm*(reg, imm: LONGINT; mode: SET): SET; 
	PROCEDURE ^ ADC*(cond, addrMode: SET; rD, rN: LONGINT; shifterOperand, S: SET); 
	PROCEDURE ^ ADD*(cond, addrMode: SET; rD, rN: LONGINT; shifterOperand, S: SET); 
	PROCEDURE ^ AND*(cond, addrMode: SET; rD, rN: LONGINT; shifterOperand, S: SET); 
	PROCEDURE ^ BIC*(cond, addrMode: SET; rD, rN: LONGINT; shifterOperand, S: SET); 
	PROCEDURE ^ CMN*(cond, addrMode: SET; rN: LONGINT; shifterOperand: SET); 
	PROCEDURE ^ CMP*(cond, addrMode: SET; rN: LONGINT; shifterOperand: SET); 
	PROCEDURE ^ EOR*(cond, addrMode: SET; rD, rN: LONGINT; shifterOperand, S: SET); 
	PROCEDURE ^ MOV*(cond, addrMode: SET; rD: LONGINT; shifterOperand, S: SET); 
	PROCEDURE ^ MVN*(cond, addrMode: SET; rD: LONGINT; shifterOperand, S: SET); 
	PROCEDURE ^ ORR*(cond, addrMode: SET; rD, rN: LONGINT; shifterOperand, S: SET); 
	PROCEDURE ^ RSB*(cond, addrMode: SET; rD, rN: LONGINT; shifterOperand, S: SET); 
	PROCEDURE ^ RSC*(cond, addrMode: SET; rD, rN: LONGINT; shifterOperand, S: SET); 
	PROCEDURE ^ SBC*(cond, addrMode: SET; rD, rN: LONGINT; shifterOperand, S: SET); 
	PROCEDURE ^ SUB*(cond, addrMode: SET; rD, rN: LONGINT; shifterOperand, S: SET); 
	PROCEDURE ^ TEQ*(cond, addrMode: SET; rN: LONGINT; shifterOperand: SET); 
	PROCEDURE ^ TST*(cond, addrMode: SET; rN: LONGINT; shifterOperand: SET); 
	PROCEDURE ^ MLA*(cond: SET; rD, rM, rS, rN: LONGINT; S: SET); 
	PROCEDURE ^ MUL*(cond: SET; rD, rM, rS: LONGINT; S: SET); 
	PROCEDURE ^ SMLAL*(cond: SET; rDHi, rDLo, rM, rS: LONGINT; S: SET); 
	PROCEDURE ^ SMULL*(cond: SET; rDHi, rDLo, rM, rS: LONGINT; S: SET); 
	PROCEDURE ^ UMLAL*(cond: SET; rDLo, rDHi, rM, rS: LONGINT; S: SET); 
	PROCEDURE ^ UMULL*(cond: SET; rDLo, rDHi, rM, rS: LONGINT; S: SET); 
	PROCEDURE ^ B*(cond: SET; address: LONGINT); 
	PROCEDURE ^ BL*(cond: SET; address: LONGINT); 
	PROCEDURE ^ MakeA2Immediate*(VAR addrMode: SET; offset: LONGINT): SET; 
	PROCEDURE ^ MakeA2Register*(register: LONGINT): SET; 
	PROCEDURE ^ MakeA2ScaledRegister*(reg: LONGINT; mode: SET; shift: LONGINT): SET; 
	PROCEDURE ^ LDM*(cond, addrMode: SET; rD: LONGINT; registers, W: SET); 
	PROCEDURE ^ LDR*(cond, addrMode: SET; rD, rAdr: LONGINT; address: SET); 
	PROCEDURE ^ LDRH*(cond, addrMode: SET; rD, rAdr: LONGINT; address: SET); 
	PROCEDURE ^ STM*(cond, addrMode: SET; rD: LONGINT; registers, W: SET); 
	PROCEDURE ^ STR*(cond, addrMode: SET; rAdr, rS: LONGINT; address: SET); 
	PROCEDURE ^ STRH*(cond, addrMode: SET; rAdr, rS: LONGINT; address: SET); 
	PROCEDURE ^ SWI*(cond: SET; code: LONGINT); 
	PROCEDURE ^ DCD*(value: LONGINT); 
	PROCEDURE ^ Lock*; 
	PROCEDURE ^ Unlock*; 
	PROCEDURE ^ SetConstantPoolBarrier*(pc: LONGINT); 
	PROCEDURE ^ SetConstantPoolBarrierCallback*(callback: Callback); 
	PROCEDURE ^ CheckCallback; 
	PROCEDURE ^ ExtractRegister(code: SET; pos: LONGINT): LONGINT; 
	PROCEDURE ^ FixLoad*(pc: LONGINT; address: LONGINT); 
	PROCEDURE ^ FixJump*(pc: LONGINT; address: LONGINT); 
	PROCEDURE ^ FixCall*(pc: LONGINT; address: LONGINT): LONGINT; 
	PROCEDURE ^ FixCaseTable*(pc: LONGINT; address: LONGINT); 
	PROCEDURE ^ Init*(codeFN: ARRAY OF CHAR); 
	PROCEDURE ^ Code(opcode: SET); 
	PROCEDURE ^ PutChar*(c: CHAR); 
	PROCEDURE ^ Close*; 
	PROCEDURE ^ BoP*(name: ARRAY OF CHAR); 
	PROCEDURE ^ EoP*; 
	PROCEDURE ^ Dump*; 
BEGIN
END PCOARM.
