; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppRevision "10248"

; Path to unpacked content of WinA2Mini32.zip file
#define MyInstallationSourcePath "..\..\Work\WinA2Mini32"
; Bitness
#define MyAppBitnessCaption "x86"


#define MyAppName "WinA2 mini"
#define MyAppPublisher "ETHZ"
#define MyAppURL "http://a2.inf.ethz.ch/"
#define MyAppExeName "A2.exe"
#define MyIconPath "A2.ico"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{E66FEAFC-A6A1-411C-BB9E-6BE3EFFB832C}
AppName={#MyAppName} {#MyAppBitnessCaption}
AppVersion={#MyAppRevision}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName} {#MyAppBitnessCaption}
LicenseFile={#MyInstallationSourcePath}\license.txt
OutputBaseFilename={#MyAppName} {#MyAppBitnessCaption}
SetupIconFile={#MyIconPath}
Compression=lzma
SolidCompression=yes
OutputDir={#MyInstallationSourcePath}
InternalCompressLevel=max
UsePreviousTasks=no
CompressionThreads=1

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "armenian"; MessagesFile: "compiler:Languages\Armenian.isl"
Name: "brazilianportuguese"; \
  MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"
Name: "catalan"; MessagesFile: "compiler:Languages\Catalan.isl"
Name: "corsican"; MessagesFile: "compiler:Languages\Corsican.isl"
Name: "czech"; MessagesFile: "compiler:Languages\Czech.isl"
Name: "danish"; MessagesFile: "compiler:Languages\Danish.isl"
Name: "dutch"; MessagesFile: "compiler:Languages\Dutch.isl"
Name: "finnish"; MessagesFile: "compiler:Languages\Finnish.isl"
Name: "french"; MessagesFile: "compiler:Languages\French.isl"
Name: "german"; MessagesFile: "compiler:Languages\German.isl"
Name: "hebrew"; MessagesFile: "compiler:Languages\Hebrew.isl"
Name: "icelandic"; MessagesFile: "compiler:Languages\Icelandic.isl"
Name: "italian"; MessagesFile: "compiler:Languages\Italian.isl"
Name: "japanese"; MessagesFile: "compiler:Languages\Japanese.isl"
Name: "norwegian"; MessagesFile: "compiler:Languages\Norwegian.isl"
Name: "polish"; MessagesFile: "compiler:Languages\Polish.isl"
Name: "portuguese"; MessagesFile: "compiler:Languages\Portuguese.isl"
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"
Name: "slovak"; MessagesFile: "compiler:Languages\Slovak.isl"
Name: "slovenian"; MessagesFile: "compiler:Languages\Slovenian.isl"
Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"
Name: "turkish"; MessagesFile: "compiler:Languages\Turkish.isl"
Name: "ukrainian"; MessagesFile: "compiler:Languages\Ukrainian.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; \
    GroupDescription: "{cm:AdditionalIcons}"
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; \
    GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "{#MyInstallationSourcePath}\A2.exe"; DestDir: "{app}"; \
  Flags: ignoreversion
Source: "{#MyInstallationSourcePath}\aosg.ini"; DestDir: "{app}"; \
  Flags: ignoreversion
Source: "{#MyInstallationSourcePath}\license.txt"; DestDir: "{app}"; \
  Flags: ignoreversion
Source: "{#MyIconPath}"; DestDir: "{app}"; DestName: "A2.ico"; \
  Flags: ignoreversion
Source: "{#MyInstallationSourcePath}\bin\*"; DestDir: "{app}\bin"; \
  Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyInstallationSourcePath}\data\*"; DestDir: "{app}\data"; \
  Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyInstallationSourcePath}\fonts\*"; DestDir: "{app}\fonts"; \
  Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyInstallationSourcePath}\source\*"; DestDir: "{app}\source"; \
  Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyInstallationSourcePath}\work\*"; DestDir: "{code:Work_Path}"; \
  Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName} {#MyAppBitnessCaption}"; \
  Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\A2.ico"
Name: "{commondesktop}\{#MyAppName} {#MyAppBitnessCaption}"; \
  Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\A2.ico"; \
  Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName} {#MyAppBitnessCaption}"; \
  Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\A2.ico"; \
  Tasks: quicklaunchicon

[Run]
Filename: "{app}\{#MyAppExeName}"; \
  Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; \
  Flags: nowait postinstall skipifsilent

[code]

function Work_Path(param: String): String;
begin
  Result := ExpandConstant('{userdocs}\')+ '{#MyAppName} {#MyAppBitnessCaption}\work';
end;

const
  INI_PATH = '{app}\aosg.ini';
  INI_LINE_PATHS_SEARCH = 'Paths.Search';
  INI_LINE_PATHS_WORK = 'Paths.Work';
  INI_WORK1 = 'work;';
  INI_WORK2 = 'Work';

procedure CurStepChanged(CurStep: TSetupStep);
var
  i: Integer;
  bFound: Boolean;
  sPath, sLine, sWorkPath: String;
  strlst: TStringList;
begin
  case CurStep of
    ssPostInstall: begin
      
      // Modify path of Work forder in INI file

      sPath := ExpandConstant(INI_PATH);
      sWorkPath := Work_Path('');
      StringChangeEx(sWorkPath, '\', '/', True);

      strlst := TStringList.Create;
      try
        strlst.LoadFromFile(sPath);

        i := 0; bFound := False;
        while (i < strlst.Count) and not bFound do
          if Pos(INI_LINE_PATHS_SEARCH, strlst[i]) >= 1 then
          begin
            bFound := True;
            sLine := strlst[i];
            StringChangeEx(sLine, INI_WORK1, sWorkPath + ';', True);
            strlst[i] := sLine;
          end
          else
            Inc(i);

        i := 0; bFound := False;
        while (i < strlst.Count) and not bFound do
          if Pos(INI_LINE_PATHS_WORK, strlst[i]) >= 1 then
          begin
            bFound := True;
            strlst[i] := INI_LINE_PATHS_WORK + '=' + sWorkPath;
          end
          else
            Inc(i);

        strlst.SaveToFile(sPath);

      finally
        strlst.Free;
      end;

    end;
  else
  end;
end;
