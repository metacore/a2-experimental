MODULE FoxArrayBase;
	IMPORT SYSTEM, KernelLog, Heaps, MathL, ComplexNumbers;
CONST 
	debug = FALSE; 
	statistics = FALSE; 
	conservative = TRUE; 
	ArrDataArrayOffset = ((3 * SIZEOF(ADDRESS)) + (( -3 * SIZEOF(ADDRESS)) MOD Heaps.ArrayAlignment)); 
	AddressSize = SIZEOF(ADDRESS); 
	MathPtrOffset = (0 * AddressSize); 
	MathAdrOffset = (1 * AddressSize); 
	MathFlagsOffset = (2 * AddressSize); 
	MathDimOffset = (3 * AddressSize); 
	MathElementSizeOffset = (4 * AddressSize); 
	MathLenOffset = (5 * AddressSize); 
	MathIncrOffset = (6 * AddressSize); 
	GeometryMismatch = 400; 
	DimensionMismatch = 401; 
	AllocationForbidden = 402; 
	ArrayAlignment = 16; 
	TensorFlag = 0; 
	RangeFlag = 1; 
	TemporaryFlag = 2; 
	down = 0; 
	up = 1; 
	SmallMatrixFlag = 3; 
	SmallVectorFlag = 3; 
	Size2Flag = 4; 
	Size3Flag = 5; 
	Size4Flag = 6; 
	Size5Flag = 7; 
	Size6Flag = 8; 
	Size7Flag = 9; 
	Size8Flag = 10; 
	Mat2x2 = {SmallMatrixFlag, Size2Flag}; 
	Mat3x3 = {SmallMatrixFlag, Size3Flag}; 
	Mat4x4 = {SmallMatrixFlag, Size4Flag}; 
	Mat5x5 = {SmallMatrixFlag, Size5Flag}; 
	Mat6x6 = {SmallMatrixFlag, Size6Flag}; 
	Mat7x7 = {SmallMatrixFlag, Size7Flag}; 
	Mat8x8 = {SmallMatrixFlag, Size8Flag}; 
	Vec2 = {SmallVectorFlag, Size2Flag}; 
	Vec3 = {SmallVectorFlag, Size3Flag}; 
	Vec4 = {SmallVectorFlag, Size4Flag}; 
	Vec5 = {SmallVectorFlag, Size5Flag}; 
	Vec6 = {SmallVectorFlag, Size6Flag}; 
	Vec7 = {SmallVectorFlag, Size7Flag}; 
	Vec8 = {SmallVectorFlag, Size8Flag}; 
	MatVec2x2 = {SmallMatrixFlag, SmallVectorFlag, Size2Flag}; 
	MatVec3x3 = {SmallMatrixFlag, SmallVectorFlag, Size3Flag}; 
	MatVec4x4 = {SmallMatrixFlag, SmallVectorFlag, Size4Flag}; 
	MatVec5x5 = {SmallMatrixFlag, SmallVectorFlag, Size5Flag}; 
	MatVec6x6 = {SmallMatrixFlag, SmallVectorFlag, Size6Flag}; 
	MatVec7x7 = {SmallMatrixFlag, SmallVectorFlag, Size7Flag}; 
	MatVec8x8 = {SmallMatrixFlag, SmallVectorFlag, Size8Flag}; 
	SmallArrayMask = {SmallMatrixFlag, SmallVectorFlag, Size2Flag, Size3Flag, Size4Flag, Size5Flag, Size6Flag, Size7Flag, Size8Flag}; 
TYPE 
	GenericUnaryAALoopS = PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: SIGNED8):SIGNED8); 

	GenericUnaryAALoopI = PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: SIGNED16):SIGNED16); 

	GenericUnaryAALoopL = PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: SIGNED32):SIGNED32); 

	GenericUnaryAALoopH = PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: SIGNED64):SIGNED64); 

	GenericUnaryAALoopR = PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: FLOAT32):FLOAT32); 

	GenericUnaryAALoopX = PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: FLOAT64):FLOAT64); 

	GenericUnaryAALoopZ = PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: COMPLEX32):COMPLEX32); 

	GenericUnaryAALoopLZ = PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: COMPLEX64):COMPLEX64); 

	UnaryAALoop = PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 

	UnaryASLoop = PROCEDURE (ladr, dadr: ADDRESS; linc, len: SIZE); 

	UnarySALoop = PROCEDURE (ladr, dadr: ADDRESS; dinc, len: SIZE); 

	BinaryAAALoop = PROCEDURE (ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 

	BinaryASALoop = PROCEDURE (ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 

	BinaryAASLoop = PROCEDURE (ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 

	BinaryAABLoop = PROCEDURE (ladr, radr: ADDRESS; linc, rinc, len: SIZE):BOOLEAN; 

	BinaryASBLoop = PROCEDURE (ladr, radr: ADDRESS; linc, len: SIZE):BOOLEAN; 

	LenType = SIZE; 

	FastMatMul* = PROCEDURE (matrixA, matrixB, matrixC: ADDRESS; IncA, StrideA, IncB, StrideB, IncC, StrideC, RowsA, ColsA, RowsB, ColsB: SIZE):BOOLEAN; 

	TransposeP* = PROCEDURE (ladr, dadr: ADDRESS; lstride, linc, dstride, dinc, rows, cols: SIZE); 

	LenInc* = RECORD 
		len*: SIZE; 
		inc*: SIZE; 
	END; 

	ArrayDescriptor* = RECORD 
		ptr*: ANY; 
		adr*: ADDRESS; 
		flags*: SET; 
		dim*: SIZE; 
		elementSize*: SIZE; 
	END; 

	Tensor = POINTER TO ArrayDescriptor; 

	UnsafeArray* = POINTER {UNSAFE, UNTRACED} TO RECORD (ArrayDescriptor)
		lens*: ARRAY 8 OF LenInc; 
	END; 

	UnsafeArrayT* = POINTER {UNSAFE} TO RECORD (ArrayDescriptor)
		lens*: ARRAY 8 OF LenInc; 
	END; 

	A0 = RECORD (ArrayDescriptor)
	END; 

	A1 = RECORD (ArrayDescriptor)
		lens: ARRAY 1 OF LenInc; 
	END; 

	A2 = RECORD (ArrayDescriptor)
		lens: ARRAY 2 OF LenInc; 
	END; 

	A3 = RECORD (ArrayDescriptor)
		lens: ARRAY 3 OF LenInc; 
	END; 

	A4 = RECORD (ArrayDescriptor)
		lens: ARRAY 4 OF LenInc; 
	END; 

	A5 = RECORD (ArrayDescriptor)
		lens: ARRAY 5 OF LenInc; 
	END; 

	A6 = RECORD (ArrayDescriptor)
		lens: ARRAY 6 OF LenInc; 
	END; 

	A7 = RECORD (ArrayDescriptor)
		lens: ARRAY 7 OF LenInc; 
	END; 

	A8 = RECORD (ArrayDescriptor)
		lens: ARRAY 8 OF LenInc; 
	END; 

	T0 = POINTER TO A0; 

	T1 = POINTER TO A1; 

	T2 = POINTER TO A2; 

	T3 = POINTER TO A3; 

	T4 = POINTER TO A4; 

	T5 = POINTER TO A5; 

	T6 = POINTER TO A6; 

	T7 = POINTER TO A7; 

	T8 = POINTER TO A8; 

	SmallMatMul* = PROCEDURE (dadr, ladr, radr: ADDRESS); 

	LongintPtr = POINTER {UNSAFE, UNTRACED} TO RECORD 
		val: SIGNED32; 
	END; 

	SizePtr = POINTER {UNSAFE, UNTRACED} TO RECORD 
		val: SIZE; 
	END; 
VAR 
	temporary*: T0; 
	alloc*: SIGNED32; 
	allocTemp*: SIGNED32; 
	loopSPAXAX*, loopSPARAR*: BinaryAASLoop; 
	loopSPAZAZ, loopSPALZALZ: BinaryAASLoop; 
	loopAddAXAX*, loopAddARAR*, loopAddAZAZ*, loopAddALZALZ*: BinaryAAALoop; 
	loopSubAXAX*, loopSubARAR*, loopSubAZAZ*, loopSubALZALZ*: BinaryAAALoop; 
	loopEMulAXAX*, loopEMulARAR*, loopEMulAZAZ*, loopEMulALZALZ*: BinaryAAALoop; 
	loopMatMulAXAX*, loopMatMulARAR*: BinaryAASLoop; 
	loopMatMulIncAXAX*, loopMatMulIncARAR*: BinaryAASLoop; 
	loopMulAXSX*, loopMulARSR*, loopMulAZSZ*, loopMulALZSLZ*: BinaryASALoop; 
	loopIncMulAXSX*, loopIncMulARSR*: BinaryASALoop; 
	matMulX*, matMulR*: FastMatMul; 
	matMulIncX*, matMulIncR*: FastMatMul; 
	transpose4*: TransposeP; 
	transpose8*: TransposeP; 
	matMulR2x2*: SmallMatMul; 
	matMulR3x3*: SmallMatMul; 
	matMulR4x4*: SmallMatMul; 
	matVecMulR2x2*: SmallMatMul; 
	matVecMulR3x3*: SmallMatMul; 
	matVecMulR4x4*: SmallMatMul; 
	matMulLR2x2*: SmallMatMul; 
	matMulLR3x3*: SmallMatMul; 
	matMulLR4x4*: SmallMatMul; 
	matVecMulLR2x2*: SmallMatMul; 
	matVecMulLR3x3*: SmallMatMul; 
	matVecMulLR4x4*: SmallMatMul; 

	PROCEDURE ^ SetDefaults*; 
	PROCEDURE ^ Err(CONST s: ARRAY OF CHAR); 
	PROCEDURE ^ GetIncr(base: UnsafeArray; dim: SIZE): SIZE; 
	PROCEDURE ^ PutInc(base: UnsafeArray; dim, val: SIZE); 
	PROCEDURE ^ GetLen(base: UnsafeArray; dim: SIZE): SIZE; 
	PROCEDURE ^ PutLen(base: UnsafeArray; dim, val: SIZE); 
	PROCEDURE ^ GetAdr(base: UnsafeArray): ADDRESS; 
	PROCEDURE ^ PutAdr(base: UnsafeArray; value: ADDRESS); 
	PROCEDURE ^ Align(value: ADDRESS): ADDRESS; 
	PROCEDURE ^ GetPtr(base: UnsafeArray): ANY; 
	PROCEDURE ^ SafePut(VAR dest: ANY; src: ANY); 
	PROCEDURE ^ PutPtr(CONST base: UnsafeArrayT; value: ANY); 
	PROCEDURE ^ GetSize(base: UnsafeArray): SIZE; 
	PROCEDURE ^ PutSize(base: UnsafeArray; val: SIZE); 
	PROCEDURE ^ GetDim(base: UnsafeArray): SIZE; 
	PROCEDURE ^ GetFlags(base: UnsafeArray): SET; 
	PROCEDURE ^ PutDim(base: UnsafeArray; dim: SIZE); 
	PROCEDURE ^ PutFlags(base: UnsafeArray; flags: SET); 
	PROCEDURE ^ Report(CONST name: ARRAY OF CHAR; s: ADDRESS); 
	PROCEDURE ^ GetArrayDesc(dim: SIZE): Tensor; 
	PROCEDURE ^ EnsureArrayDesc*(dim: SIZE; VAR d: Tensor); 
	PROCEDURE ^ Halt(code: SIZE; left, right, dest: ADDRESS); 
	PROCEDURE ^ FindPattern1(left, dim: ADDRESS; VAR d, len, linc: SIZE); 
	PROCEDURE ^ FindPattern2(left, right: ADDRESS; dim: SIZE; VAR d, len, linc, ri: SIZE); 
	PROCEDURE ^ FindPattern3(left, right, dest: ADDRESS; dim: SIZE; VAR d, len, linc, ri, di: SIZE); 
	PROCEDURE ^ Reverse(src: ADDRESS; dim: SIZE); 
	PROCEDURE ^ CopyUpCompatible(dest, src: ADDRESS; VAR modes: SET); 
	PROCEDURE ^ AllocateTemp(dest: ADDRESS; src: ADDRESS; Size: SIZE): ANY; 
	PROCEDURE ^ ApplyGenericUnaryAAOpS(VAR dest: UnsafeArrayT; CONST left: UnsafeArrayT; elementSize: SIZE; Loop: GenericUnaryAALoopS; op: PROCEDURE {DELEGATE}(x: SIGNED8):SIGNED8); 
	PROCEDURE ^ ApplyGenericUnaryAAOpI(VAR dest: UnsafeArrayT; CONST left: UnsafeArrayT; elementSize: SIZE; Loop: GenericUnaryAALoopI; op: PROCEDURE {DELEGATE}(x: SIGNED16):SIGNED16); 
	PROCEDURE ^ ApplyGenericUnaryAAOpL(VAR dest: UnsafeArrayT; CONST left: UnsafeArrayT; elementSize: SIZE; Loop: GenericUnaryAALoopL; op: PROCEDURE {DELEGATE}(x: SIGNED32):SIGNED32); 
	PROCEDURE ^ ApplyGenericUnaryAAOpH(VAR dest: UnsafeArrayT; CONST left: UnsafeArrayT; elementSize: SIZE; Loop: GenericUnaryAALoopH; op: PROCEDURE {DELEGATE}(x: SIGNED64):SIGNED64); 
	PROCEDURE ^ ApplyGenericUnaryAAOpR(VAR dest: UnsafeArrayT; CONST left: UnsafeArrayT; elementSize: SIZE; Loop: GenericUnaryAALoopR; op: PROCEDURE {DELEGATE}(x: FLOAT32):FLOAT32); 
	PROCEDURE ^ ApplyGenericUnaryAAOpX(VAR dest: UnsafeArrayT; CONST left: UnsafeArrayT; elementSize: SIZE; Loop: GenericUnaryAALoopX; op: PROCEDURE {DELEGATE}(x: FLOAT64):FLOAT64); 
	PROCEDURE ^ ApplyGenericUnaryAAOpZ(VAR dest: UnsafeArrayT; CONST left: UnsafeArrayT; elementSize: SIZE; Loop: GenericUnaryAALoopZ; op: PROCEDURE {DELEGATE}(x: COMPLEX32):COMPLEX32); 
	PROCEDURE ^ ApplyGenericUnaryAAOpLZ(VAR dest: UnsafeArrayT; CONST left: UnsafeArrayT; elementSize: SIZE; Loop: GenericUnaryAALoopLZ; op: PROCEDURE {DELEGATE}(x: COMPLEX64):COMPLEX64); 
	PROCEDURE ^ ApplyUnaryAAOp*(VAR dest: UnsafeArrayT; CONST left: UnsafeArrayT; elementSize: SIZE; Loop: UnaryAALoop); 
	PROCEDURE ^ ApplyUnaryASOp*(dest: ADDRESS; CONST left: UnsafeArrayT; Loop: UnaryASLoop); 
	PROCEDURE ^ ApplyUnarySAOp*(VAR dest: UnsafeArrayT; right: ADDRESS; Loop: UnarySALoop); 
	PROCEDURE ^ ApplyBinaryAAAOp*(VAR dest: UnsafeArrayT; CONST left, right: UnsafeArrayT; elementSize: SIZE; Loop: BinaryAAALoop); 
	PROCEDURE ^ ApplyBinaryASAOp*(VAR dest: UnsafeArrayT; CONST left: UnsafeArrayT; right: ADDRESS; elementSize: SIZE; Loop: BinaryASALoop); 
	PROCEDURE ^ ApplyBinaryAASOp*(dest: ADDRESS; CONST left, right: UnsafeArrayT; Loop: BinaryAASLoop); 
	PROCEDURE ^ ApplyBinaryAABOp*(CONST left, right: UnsafeArrayT; Loop: BinaryAABLoop; geometryMismatchDefault: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ ApplyBinaryASBOp(CONST left: UnsafeArrayT; right: ADDRESS; Loop: BinaryASBLoop): BOOLEAN; 
	PROCEDURE ^ Copy4(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	PROCEDURE ^ Copy2(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	PROCEDURE ^ Copy1(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	PROCEDURE ^ Copy8(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	PROCEDURE ^ MoveB*(srcadr, destadr, len: SIZE); 
	PROCEDURE ^ CopyContent(dest, src: ADDRESS; elementSize: SIZE); 
	PROCEDURE ^ AllocateSameT(VAR dest: UnsafeArrayT; CONST src: UnsafeArrayT; elementsize: SIZE): BOOLEAN; 
	PROCEDURE ^ Assign*(VAR dest: ADDRESS; src: ADDRESS); 
	PROCEDURE ^ TempDescCopy(CONST src: UnsafeArrayT): UnsafeArrayT; 
	PROCEDURE ^ CopyArraySelf*(VAR dest: UnsafeArrayT; CONST src: UnsafeArrayT; elementsize: SIZE); 
	PROCEDURE ^ CopyArray*(dest: UnsafeArray; CONST src: UnsafeArrayT; elementsize: SIZE); 
	PROCEDURE ^ CopyTensorSelf*(VAR dest: UnsafeArrayT; CONST src: UnsafeArrayT; elementsize: SIZE); 
	PROCEDURE ^ CopyTensor*(VAR dest: UnsafeArrayT; CONST src: UnsafeArrayT; elementsize: SIZE); 
	PROCEDURE ^ ShallowCopy*(VAR dest: UnsafeArrayT; CONST src: UnsafeArrayT); 
	PROCEDURE ^ ZeroCopy*(CONST src: ARRAY [?] ; VAR dest: ARRAY [?] ); 
	OPERATOR ^ "ALIAS"-(CONST src: ARRAY [?] ): ARRAY [?] ; 
	PROCEDURE ^ SameShape(l, r: ADDRESS): BOOLEAN; 
	PROCEDURE ^ ConvertASAILoop(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED16; 
	OPERATOR ^ "LONG"-(CONST src: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ ConvertLoopSL(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ ConvertLoopSR(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIGNED8): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ ConvertLoopSX(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIGNED8): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ ConvertLoopIS(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED8; 
	OPERATOR ^ "SHORT"-(CONST src: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ ConvertLoopIL(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED32; 
	OPERATOR ^ "LONG"-(CONST src: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ ConvertLoopIR(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIGNED16): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ ConvertLoopIX(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIGNED16): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ ConvertLoopLI(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED16; 
	OPERATOR ^ "SHORT"-(CONST src: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ ConvertLoopLR(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIGNED32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ ConvertLoopLX(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIGNED32): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ ConvertLoopRL(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF FLOAT32): ARRAY [?] OF SIGNED32; 
	OPERATOR ^ "ENTIER"-(CONST src: ARRAY [?] OF FLOAT32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ ConvertLoopRX(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT64; 
	OPERATOR ^ "LONG"-(CONST src: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ ConvertLoopXR(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT32; 
	OPERATOR ^ "SHORT"-(CONST src: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ ConvertLoopXL(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF FLOAT64): ARRAY [?] OF SIGNED32; 
	OPERATOR ^ "ENTIER"-(CONST src: ARRAY [?] OF FLOAT64): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ ConvertLoopLY(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIZE; 
	PROCEDURE ^ ConvertLoopYZ(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIZE): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ ConvertLoopYR(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "@Convert"-(CONST src: ARRAY [?] OF SIZE): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ NotLoopAB(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "~"-(CONST src: ARRAY [?] OF BOOLEAN): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ GenericLoopS(ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: SIGNED8):SIGNED8); 
	PROCEDURE ^ GenericLoopI(ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: SIGNED16):SIGNED16); 
	PROCEDURE ^ GenericLoopL(ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: SIGNED32):SIGNED32); 
	PROCEDURE ^ GenericLoopH(ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: SIGNED64):SIGNED64); 
	PROCEDURE ^ GenericLoopR(ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: FLOAT32):FLOAT32); 
	PROCEDURE ^ GenericLoopX(ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: FLOAT64):FLOAT64); 
	PROCEDURE ^ GenericLoopZ(ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: COMPLEX32):COMPLEX32); 
	PROCEDURE ^ GenericLoopLZ(ladr, dadr: ADDRESS; linc, dinc, len: SIZE; op: PROCEDURE {DELEGATE}(x: COMPLEX64):COMPLEX64); 
	PROCEDURE ^ MinusLoopS(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST src: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ MinusLoopI(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST src: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ MinusLoopL(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST src: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ MinusLoopY(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST src: ARRAY [?] OF SIZE): ARRAY [?] OF SIZE; 
	PROCEDURE ^ MinusLoopR(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST src: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ MinusLoopX(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST src: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ AddASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ AddAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ AddALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ AddARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ AddAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ AddAZAZLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left, right: ARRAY [?] OF COMPLEX32): ARRAY [?] OF COMPLEX32; 
	PROCEDURE ^ AddAHAHLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left, right: ARRAY [?] OF SIGNED64): ARRAY [?] OF SIGNED64; 
	PROCEDURE ^ AddAYAYLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left, right: ARRAY [?] OF SIZE): ARRAY [?] OF SIZE; 
	PROCEDURE ^ AddALZALZLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left, right: ARRAY [?] OF COMPLEX64): ARRAY [?] OF COMPLEX64; 
	PROCEDURE ^ AddASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF SIGNED8; 
	OPERATOR ^ "+"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ AddAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF SIGNED16; 
	OPERATOR ^ "+"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ AddALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF SIGNED32; 
	OPERATOR ^ "+"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ AddARSRLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF FLOAT32; 
	OPERATOR ^ "+"-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ AddAXSXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF FLOAT64; 
	OPERATOR ^ "+"-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ AddAZSZLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left: ARRAY [?] OF COMPLEX32; right: COMPLEX32): ARRAY [?] OF COMPLEX32; 
	OPERATOR ^ "+"-(left: COMPLEX32; CONST right: ARRAY [?] OF COMPLEX32): ARRAY [?] OF COMPLEX32; 
	PROCEDURE ^ AddAHSHLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left: ARRAY [?] OF SIGNED64; right: SIGNED64): ARRAY [?] OF SIGNED64; 
	OPERATOR ^ "+"-(left: SIGNED64; CONST right: ARRAY [?] OF SIGNED64): ARRAY [?] OF SIGNED64; 
	PROCEDURE ^ AddAYSYLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left: ARRAY [?] OF SIZE; right: SIZE): ARRAY [?] OF SIZE; 
	OPERATOR ^ "+"-(left: SIZE; CONST right: ARRAY [?] OF SIZE): ARRAY [?] OF SIZE; 
	PROCEDURE ^ AddALZSLZLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "+"-(CONST left: ARRAY [?] OF COMPLEX64; right: COMPLEX64): ARRAY [?] OF COMPLEX64; 
	OPERATOR ^ "+"-(left: COMPLEX64; CONST right: ARRAY [?] OF COMPLEX64): ARRAY [?] OF COMPLEX64; 
	PROCEDURE ^ SubASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ SubAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ SubALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ SubAYAYLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST left, right: ARRAY [?] OF SIZE): ARRAY [?] OF SIZE; 
	PROCEDURE ^ SubARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ SubAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ SubAZAZLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST left, right: ARRAY [?] OF COMPLEX32): ARRAY [?] OF COMPLEX32; 
	PROCEDURE ^ SubALZALZLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(CONST left, right: ARRAY [?] OF COMPLEX64): ARRAY [?] OF COMPLEX64; 
	OPERATOR ^ "-"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF SIGNED8; 
	OPERATOR ^ "-"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF SIGNED16; 
	OPERATOR ^ "-"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF SIGNED32; 
	OPERATOR ^ "-"-(CONST left: ARRAY [?] OF SIZE; right: SIZE): ARRAY [?] OF SIZE; 
	OPERATOR ^ "-"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF FLOAT32; 
	OPERATOR ^ "-"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF FLOAT64; 
	OPERATOR ^ "-"-(CONST left: ARRAY [?] OF COMPLEX32; right: COMPLEX32): ARRAY [?] OF COMPLEX32; 
	OPERATOR ^ "-"-(CONST left: ARRAY [?] OF COMPLEX64; right: COMPLEX64): ARRAY [?] OF COMPLEX64; 
	PROCEDURE ^ SubSSASLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ SubSIAILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ SubSLALLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ SubSYAYLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(left: SIZE; CONST right: ARRAY [?] OF SIZE): ARRAY [?] OF SIZE; 
	PROCEDURE ^ SubSRARLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ SubSXAXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ SubSZAZLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(left: COMPLEX32; CONST right: ARRAY [?] OF COMPLEX32): ARRAY [?] OF COMPLEX32; 
	PROCEDURE ^ SubSLZALZLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "-"-(left: COMPLEX64; CONST right: ARRAY [?] OF COMPLEX64): ARRAY [?] OF COMPLEX64; 
	PROCEDURE ^ EMulASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".*"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ EMulAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".*"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ EMulALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".*"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ EMulARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".*"-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ EMulAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".*"-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ EMulAZAZLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".*"-(CONST left, right: ARRAY [?] OF COMPLEX32): ARRAY [?] OF COMPLEX32; 
	PROCEDURE ^ EMulALZALZLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".*"-(CONST left, right: ARRAY [?] OF COMPLEX64): ARRAY [?] OF COMPLEX64; 
	PROCEDURE ^ EMulIncASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".*+"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ EMulIncAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".*+"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ EMulIncALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".*+"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ EMulIncARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".*+"-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ EMulIncAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".*+"-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ MulASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "*"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF SIGNED8; 
	OPERATOR ^ "*"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ MulAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "*"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF SIGNED16; 
	OPERATOR ^ "*"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ MulALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "*"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF SIGNED32; 
	OPERATOR ^ "*"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ MulAYSYLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "*"-(CONST left: ARRAY [?] OF SIZE; right: SIZE): ARRAY [?] OF SIZE; 
	OPERATOR ^ "*"-(left: SIZE; CONST right: ARRAY [?] OF SIZE): ARRAY [?] OF SIZE; 
	PROCEDURE ^ MulARSRLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "*"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF FLOAT32; 
	OPERATOR ^ "*"-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ MulAXSXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "*"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF FLOAT64; 
	OPERATOR ^ "*"-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ MulAZSZLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "*"-(CONST left: ARRAY [?] OF COMPLEX32; right: COMPLEX32): ARRAY [?] OF COMPLEX32; 
	OPERATOR ^ "*"-(left: COMPLEX32; CONST right: ARRAY [?] OF COMPLEX32): ARRAY [?] OF COMPLEX32; 
	PROCEDURE ^ MulALZSLZLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "*"-(CONST left: ARRAY [?] OF COMPLEX64; right: COMPLEX64): ARRAY [?] OF COMPLEX64; 
	OPERATOR ^ "*"-(left: COMPLEX64; CONST right: ARRAY [?] OF COMPLEX64): ARRAY [?] OF COMPLEX64; 
	PROCEDURE ^ IncMulASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF SIGNED8; 
	OPERATOR ^ "INCMUL"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF SIGNED8; 
	OPERATOR ^ "DECMUL"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ IncMulAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF SIGNED16; 
	OPERATOR ^ "INCMUL"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF SIGNED16; 
	OPERATOR ^ "DECMUL"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ IncMulALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF SIGNED32; 
	OPERATOR ^ "INCMUL"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF SIGNED32; 
	OPERATOR ^ "DECMUL"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ IncMulARSRLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF FLOAT32; 
	OPERATOR ^ "INCMUL"-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF FLOAT32; 
	OPERATOR ^ "DECMUL"-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ IncMulAXSXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF FLOAT64; 
	OPERATOR ^ "INCMUL"-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF FLOAT64; 
	OPERATOR ^ "DECMUL"-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ EDivideASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "./"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ EDivideAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "./"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ EDivideALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "./"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ EDivideARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "./"-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ EDivideAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "./"-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ EDivideAZAZLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "./"-(CONST left, right: ARRAY [?] OF COMPLEX32): ARRAY [?] OF COMPLEX32; 
	PROCEDURE ^ EDivideALZALZLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "./"-(CONST left, right: ARRAY [?] OF COMPLEX64): ARRAY [?] OF COMPLEX64; 
	PROCEDURE ^ DivideASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ DivideSSASLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ DivideAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ DivideSIAILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ DivideALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ DivideSLALLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ DivideARSRLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ DivideSRARLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ DivideAXSXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ DivideSXAXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ DivideAZSZLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(CONST left: ARRAY [?] OF COMPLEX32; right: COMPLEX32): ARRAY [?] OF COMPLEX32; 
	PROCEDURE ^ DivideSZAZLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(left: COMPLEX32; CONST right: ARRAY [?] OF COMPLEX32): ARRAY [?] OF COMPLEX32; 
	PROCEDURE ^ DivideALZSLZLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(CONST left: ARRAY [?] OF COMPLEX64; right: COMPLEX64): ARRAY [?] OF COMPLEX64; 
	PROCEDURE ^ DivideSLZALZLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "/"-(left: COMPLEX64; CONST right: ARRAY [?] OF COMPLEX64): ARRAY [?] OF COMPLEX64; 
	PROCEDURE ^ EDivASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "DIV"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ EDivAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "DIV"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ EDivALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "DIV"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ EDivAYAYLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "DIV"-(CONST left, right: ARRAY [?] OF SIZE): ARRAY [?] OF SIZE; 
	PROCEDURE ^ DivASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "DIV"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ DivSSASLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "DIV"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ DivAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "DIV"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ DivSIAILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "DIV"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ DivALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "DIV"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ DivSLALLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "DIV"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ DivAYSYLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "DIV"-(CONST left: ARRAY [?] OF SIZE; right: SIZE): ARRAY [?] OF SIZE; 
	PROCEDURE ^ DivSYAYLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "DIV"-(left: SIZE; CONST right: ARRAY [?] OF SIZE): ARRAY [?] OF SIZE; 
	PROCEDURE ^ EModASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MOD"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ EModAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MOD"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ EModALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MOD"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ EModAYAYLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MOD"-(CONST left, right: ARRAY [?] OF SIZE): ARRAY [?] OF SIZE; 
	PROCEDURE ^ ModASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MOD"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ ModSSASLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MOD"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ ModAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MOD"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ ModSIAILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MOD"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ ModALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MOD"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ ModSLALLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MOD"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ ModAYSYLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MOD"-(CONST left: ARRAY [?] OF SIZE; right: SIZE): ARRAY [?] OF SIZE; 
	PROCEDURE ^ ModSYAYLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MOD"-(left: SIZE; CONST right: ARRAY [?] OF SIZE): ARRAY [?] OF SIZE; 
	PROCEDURE ^ SPASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "+*"-(CONST left, right: ARRAY [?] OF SIGNED8): SIGNED32; 
	PROCEDURE ^ SPAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "+*"-(CONST left, right: ARRAY [?] OF SIGNED16): SIGNED32; 
	PROCEDURE ^ SPALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "+*"-(CONST left, right: ARRAY [?] OF SIGNED32): SIGNED32; 
	PROCEDURE ^ SPARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "+*"-(CONST left, right: ARRAY [?] OF FLOAT32): FLOAT32; 
	PROCEDURE ^ SPAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "+*"-(CONST left, right: ARRAY [?] OF FLOAT64): FLOAT64; 
	PROCEDURE ^ SPAZAZLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "+*"-(CONST left, right: ARRAY [?] OF COMPLEX32): COMPLEX32; 
	PROCEDURE ^ SPALZALZLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "+*"-(CONST left, right: ARRAY [?] OF COMPLEX64): COMPLEX64; 
	PROCEDURE ^ EEqlABABLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".="-(CONST left, right: ARRAY [?] OF BOOLEAN): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EEqlASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".="-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EEqlAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".="-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EEqlALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".="-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EEqlARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".="-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EEqlAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".="-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EEqlABSBLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".="-(CONST left: ARRAY [?] OF BOOLEAN; right: BOOLEAN): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".="-(left: BOOLEAN; CONST right: ARRAY [?] OF BOOLEAN): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EEqlASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".="-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".="-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EEqlAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".="-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".="-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EEqlALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".="-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".="-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EEqlARSRLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".="-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".="-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EEqlAXSXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".="-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".="-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ENeqABABLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".#"-(CONST left, right: ARRAY [?] OF BOOLEAN): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ENeqASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".#"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ENeqAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".#"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ENeqALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".#"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ENeqARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".#"-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ENeqAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".#"-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ENeqABSBLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".#"-(CONST left: ARRAY [?] OF BOOLEAN; right: BOOLEAN): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".#"-(left: BOOLEAN; CONST right: ARRAY [?] OF BOOLEAN): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ENeqASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".#"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".#"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ENeqAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".#"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".#"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ENeqALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".#"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".#"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ENeqARSRLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".#"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".#"-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ENeqAXSXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".#"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".#"-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGtrASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".>"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGtrAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".>"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGtrALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".>"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGtrARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".>"-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGtrAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".>"-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGtrASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".>"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".<"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGtrAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".>"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".<"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGtrALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".>"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".<"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGtrARSRLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".>"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".<"-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGtrAXSXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".>"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".<"-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGeqASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".>="-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGeqAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".>="-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGeqALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".>="-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGeqARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".>="-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGeqAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".>="-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGeqASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".>="-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".<="-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGeqAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".>="-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".<="-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGeqALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".>="-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".<="-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGeqARSRLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".>="-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".<="-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ EGeqAXSXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".>="-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".<="-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELssASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".<"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELssAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".<"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELssALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".<"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELssARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".<"-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELssAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".<"-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELssASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".<"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".>"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELssAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".<"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".>"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELssALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".<"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".>"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELssARSRLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".<"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".>"-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELssAXSXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".<"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".>"-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELeqASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".<="-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELeqAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".<="-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELeqALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".<="-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELeqARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".<="-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELeqAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ ".<="-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELeqASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".<="-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".>="-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELeqAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".<="-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".>="-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELeqALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".<="-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".>="-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELeqARSRLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".<="-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".>="-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ELeqAXSXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ ".<="-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ ".>="-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ElOrABABLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "OR"-(CONST left, right: ARRAY [?] OF BOOLEAN): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ElAndABABLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "&"-(CONST left, right: ARRAY [?] OF BOOLEAN): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ElOrABSBLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "OR"-(CONST left: ARRAY [?] OF BOOLEAN; right: BOOLEAN): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ "OR"-(left: BOOLEAN; CONST right: ARRAY [?] OF BOOLEAN): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ ElAndABSBLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "&"-(CONST left: ARRAY [?] OF BOOLEAN; right: BOOLEAN): ARRAY [?] OF BOOLEAN; 
	OPERATOR ^ "&"-(left: BOOLEAN; CONST right: ARRAY [?] OF BOOLEAN): ARRAY [?] OF BOOLEAN; 
	PROCEDURE ^ LssASASLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<"-(CONST left, right: ARRAY [?] OF SIGNED8): BOOLEAN; 
	PROCEDURE ^ GeqASASLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">="-(CONST left, right: ARRAY [?] OF SIGNED8): BOOLEAN; 
	PROCEDURE ^ LssAIAILoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<"-(CONST left, right: ARRAY [?] OF SIGNED16): BOOLEAN; 
	PROCEDURE ^ GeqAIAILoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">="-(CONST left, right: ARRAY [?] OF SIGNED16): BOOLEAN; 
	PROCEDURE ^ LssALALLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<"-(CONST left, right: ARRAY [?] OF SIGNED32): BOOLEAN; 
	PROCEDURE ^ GeqALALLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">="-(CONST left, right: ARRAY [?] OF SIGNED32): BOOLEAN; 
	PROCEDURE ^ LssAZAZLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<"-(CONST left, right: ARRAY [?] OF SIZE): BOOLEAN; 
	PROCEDURE ^ GeqAZAZLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">="-(CONST left, right: ARRAY [?] OF SIZE): BOOLEAN; 
	PROCEDURE ^ LssARARLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<"-(CONST left, right: ARRAY [?] OF FLOAT32): BOOLEAN; 
	PROCEDURE ^ GeqARARLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">="-(CONST left, right: ARRAY [?] OF FLOAT32): BOOLEAN; 
	PROCEDURE ^ LssAXAXLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<"-(CONST left, right: ARRAY [?] OF FLOAT64): BOOLEAN; 
	PROCEDURE ^ GeqAXAXLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">="-(CONST left, right: ARRAY [?] OF FLOAT64): BOOLEAN; 
	PROCEDURE ^ GtrASASLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">"-(CONST left, right: ARRAY [?] OF SIGNED8): BOOLEAN; 
	PROCEDURE ^ LeqASASLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<="-(CONST left, right: ARRAY [?] OF SIGNED8): BOOLEAN; 
	PROCEDURE ^ GtrAIAILoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">"-(CONST left, right: ARRAY [?] OF SIGNED16): BOOLEAN; 
	PROCEDURE ^ LeqAIAILoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<="-(CONST left, right: ARRAY [?] OF SIGNED16): BOOLEAN; 
	PROCEDURE ^ GtrALALLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">"-(CONST left, right: ARRAY [?] OF SIGNED32): BOOLEAN; 
	PROCEDURE ^ LeqALALLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<="-(CONST left, right: ARRAY [?] OF SIGNED32): BOOLEAN; 
	PROCEDURE ^ GtrAZAZLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">"-(CONST left, right: ARRAY [?] OF SIZE): BOOLEAN; 
	PROCEDURE ^ LeqAZAZLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<="-(CONST left, right: ARRAY [?] OF SIZE): BOOLEAN; 
	PROCEDURE ^ GtrARARLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">"-(CONST left, right: ARRAY [?] OF FLOAT32): BOOLEAN; 
	PROCEDURE ^ LeqARARLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<="-(CONST left, right: ARRAY [?] OF FLOAT32): BOOLEAN; 
	PROCEDURE ^ GtrAXAXLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">"-(CONST left, right: ARRAY [?] OF FLOAT64): BOOLEAN; 
	PROCEDURE ^ LeqAXAXLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<="-(CONST left, right: ARRAY [?] OF FLOAT64): BOOLEAN; 
	PROCEDURE ^ EqlABABLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left, right: ARRAY [?] OF BOOLEAN): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left, right: ARRAY [?] OF BOOLEAN): BOOLEAN; 
	PROCEDURE ^ EqlASASLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left, right: ARRAY [?] OF SIGNED8): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left, right: ARRAY [?] OF SIGNED8): BOOLEAN; 
	PROCEDURE ^ EqlAIAILoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left, right: ARRAY [?] OF SIGNED16): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left, right: ARRAY [?] OF SIGNED16): BOOLEAN; 
	PROCEDURE ^ EqlALALLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left, right: ARRAY [?] OF SIGNED32): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left, right: ARRAY [?] OF SIGNED32): BOOLEAN; 
	PROCEDURE ^ EqlAZAZLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left, right: ARRAY [?] OF SIZE): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left, right: ARRAY [?] OF SIZE): BOOLEAN; 
	PROCEDURE ^ EqlARARLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left, right: ARRAY [?] OF FLOAT32): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left, right: ARRAY [?] OF FLOAT32): BOOLEAN; 
	PROCEDURE ^ EqlAXAXLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left, right: ARRAY [?] OF FLOAT64): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left, right: ARRAY [?] OF FLOAT64): BOOLEAN; 
	PROCEDURE ^ EqlACACLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left, right: ARRAY [?] OF COMPLEX32): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left, right: ARRAY [?] OF COMPLEX32): BOOLEAN; 
	PROCEDURE ^ EqlALZALZLoop(ladr, radr: ADDRESS; linc, rinc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left, right: ARRAY [?] OF COMPLEX64): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left, right: ARRAY [?] OF COMPLEX64): BOOLEAN; 
	PROCEDURE ^ EqlABSBLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left: ARRAY [?] OF BOOLEAN; right: BOOLEAN): BOOLEAN; 
	OPERATOR ^ "="-(left: BOOLEAN; CONST right: ARRAY [?] OF BOOLEAN): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left: ARRAY [?] OF BOOLEAN; right: BOOLEAN): BOOLEAN; 
	OPERATOR ^ "#"-(left: BOOLEAN; CONST right: ARRAY [?] OF BOOLEAN): BOOLEAN; 
	PROCEDURE ^ EqlASSSLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): BOOLEAN; 
	OPERATOR ^ "="-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): BOOLEAN; 
	OPERATOR ^ "#"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): BOOLEAN; 
	PROCEDURE ^ EqlAISILoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): BOOLEAN; 
	OPERATOR ^ "="-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): BOOLEAN; 
	OPERATOR ^ "#"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): BOOLEAN; 
	PROCEDURE ^ EqlALSLLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): BOOLEAN; 
	OPERATOR ^ "="-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): BOOLEAN; 
	OPERATOR ^ "#"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): BOOLEAN; 
	PROCEDURE ^ EqlAZSZLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left: ARRAY [?] OF SIZE; right: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(left: SIZE; CONST right: ARRAY [?] OF SIZE): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left: ARRAY [?] OF SIZE; right: SIZE): BOOLEAN; 
	OPERATOR ^ "#"-(left: SIZE; CONST right: ARRAY [?] OF SIZE): BOOLEAN; 
	PROCEDURE ^ EqlARSRLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): BOOLEAN; 
	OPERATOR ^ "="-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): BOOLEAN; 
	OPERATOR ^ "#"-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): BOOLEAN; 
	PROCEDURE ^ EqlAXSXLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "="-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): BOOLEAN; 
	OPERATOR ^ "="-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): BOOLEAN; 
	OPERATOR ^ "#"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): BOOLEAN; 
	OPERATOR ^ "#"-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): BOOLEAN; 
	PROCEDURE ^ GtrASSSLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): BOOLEAN; 
	OPERATOR ^ "<"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): BOOLEAN; 
	PROCEDURE ^ GtrAISILoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): BOOLEAN; 
	OPERATOR ^ "<"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): BOOLEAN; 
	PROCEDURE ^ GtrALSLLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): BOOLEAN; 
	OPERATOR ^ "<"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): BOOLEAN; 
	PROCEDURE ^ GtrAZSZLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">"-(CONST left: ARRAY [?] OF SIZE; right: SIZE): BOOLEAN; 
	OPERATOR ^ "<"-(left: SIZE; CONST right: ARRAY [?] OF SIZE): BOOLEAN; 
	PROCEDURE ^ GtrARSRLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): BOOLEAN; 
	OPERATOR ^ "<"-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): BOOLEAN; 
	PROCEDURE ^ GtrAXSXLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): BOOLEAN; 
	OPERATOR ^ "<"-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): BOOLEAN; 
	PROCEDURE ^ GeqASSSLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">="-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): BOOLEAN; 
	OPERATOR ^ "<="-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): BOOLEAN; 
	PROCEDURE ^ GeqAISILoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">="-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): BOOLEAN; 
	OPERATOR ^ "<="-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): BOOLEAN; 
	PROCEDURE ^ GeqALSLLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">="-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): BOOLEAN; 
	OPERATOR ^ "<="-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): BOOLEAN; 
	PROCEDURE ^ GeqAZSZLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">="-(CONST left: ARRAY [?] OF SIZE; right: SIZE): BOOLEAN; 
	OPERATOR ^ "<="-(left: SIZE; CONST right: ARRAY [?] OF SIZE): BOOLEAN; 
	PROCEDURE ^ GeqARSRLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">="-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): BOOLEAN; 
	OPERATOR ^ "<="-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): BOOLEAN; 
	PROCEDURE ^ GeqAXSXLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ ">="-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): BOOLEAN; 
	OPERATOR ^ "<="-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): BOOLEAN; 
	PROCEDURE ^ LeqASSSLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<="-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): BOOLEAN; 
	OPERATOR ^ ">="-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): BOOLEAN; 
	PROCEDURE ^ LeqAISILoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<="-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): BOOLEAN; 
	OPERATOR ^ ">="-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): BOOLEAN; 
	PROCEDURE ^ LeqALSLLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<="-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): BOOLEAN; 
	OPERATOR ^ ">="-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): BOOLEAN; 
	PROCEDURE ^ LeqAZSZLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<="-(CONST left: ARRAY [?] OF SIZE; right: SIZE): BOOLEAN; 
	OPERATOR ^ ">="-(left: SIZE; CONST right: ARRAY [?] OF SIZE): BOOLEAN; 
	PROCEDURE ^ LeqARSRLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<="-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): BOOLEAN; 
	OPERATOR ^ ">="-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): BOOLEAN; 
	PROCEDURE ^ LeqAXSXLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<="-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): BOOLEAN; 
	OPERATOR ^ ">="-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): BOOLEAN; 
	PROCEDURE ^ LssASSSLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): BOOLEAN; 
	OPERATOR ^ ">"-(left: SIGNED8; CONST right: ARRAY [?] OF SIGNED8): BOOLEAN; 
	PROCEDURE ^ LssAISILoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): BOOLEAN; 
	OPERATOR ^ ">"-(left: SIGNED16; CONST right: ARRAY [?] OF SIGNED16): BOOLEAN; 
	PROCEDURE ^ LssALSLLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): BOOLEAN; 
	OPERATOR ^ ">"-(left: SIGNED32; CONST right: ARRAY [?] OF SIGNED32): BOOLEAN; 
	PROCEDURE ^ LssAZSZLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<"-(CONST left: ARRAY [?] OF SIZE; right: SIZE): BOOLEAN; 
	OPERATOR ^ ">"-(left: SIZE; CONST right: ARRAY [?] OF SIZE): BOOLEAN; 
	PROCEDURE ^ LssARSRLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): BOOLEAN; 
	OPERATOR ^ ">"-(left: FLOAT32; CONST right: ARRAY [?] OF FLOAT32): BOOLEAN; 
	PROCEDURE ^ LssAXSXLoop(ladr, radr: ADDRESS; linc, len: SIZE): BOOLEAN; 
	OPERATOR ^ "<"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): BOOLEAN; 
	OPERATOR ^ ">"-(left: FLOAT64; CONST right: ARRAY [?] OF FLOAT64): BOOLEAN; 
	PROCEDURE ^ MaxAXSXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ MaxARSRLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ MaxALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ MaxAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ MaxASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ MinAXSXLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left: ARRAY [?] OF FLOAT64; right: FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ MinARSRLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left: ARRAY [?] OF FLOAT32; right: FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ MinALSLLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left: ARRAY [?] OF SIGNED32; right: SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ MinAISILoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left: ARRAY [?] OF SIGNED16; right: SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ MinASSSLoop(ladr, radr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left: ARRAY [?] OF SIGNED8; right: SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ MaxAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ MaxARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ MaxALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ MaxAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ MaxASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ MinAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ MinARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ MinALALLoop(ladr, radr, dadr: LongintPtr; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ MinAYAYLoop(ladr, radr, dadr: SizePtr; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left, right: ARRAY [?] OF SIZE): ARRAY [?] OF SIZE; 
	PROCEDURE ^ MinAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ MinASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, dinc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ MinASLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left: ARRAY [?] OF SIGNED8): SIGNED8; 
	PROCEDURE ^ MinAILoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left: ARRAY [?] OF SIGNED16): SIGNED16; 
	PROCEDURE ^ MinALLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left: ARRAY [?] OF SIGNED32): SIGNED32; 
	PROCEDURE ^ MinAZLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left: ARRAY [?] OF SIZE): SIZE; 
	PROCEDURE ^ MinARLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left: ARRAY [?] OF FLOAT32): FLOAT32; 
	PROCEDURE ^ MinAXLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "MIN"-(CONST left: ARRAY [?] OF FLOAT64): FLOAT64; 
	PROCEDURE ^ MaxASLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left: ARRAY [?] OF SIGNED8): SIGNED8; 
	PROCEDURE ^ MaxAILoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left: ARRAY [?] OF SIGNED16): SIGNED16; 
	PROCEDURE ^ MaxALLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left: ARRAY [?] OF SIGNED32): SIGNED32; 
	PROCEDURE ^ MaxARLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left: ARRAY [?] OF FLOAT32): FLOAT32; 
	PROCEDURE ^ MaxAXLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "MAX"-(CONST left: ARRAY [?] OF FLOAT64): FLOAT64; 
	OPERATOR ^ "LEN"-(CONST left: ARRAY [?] ): ARRAY [*] OF SIZE; 
	PROCEDURE ^ SumASLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "SUM"-(CONST left: ARRAY [?] OF SIGNED8): SIGNED8; 
	PROCEDURE ^ SumAILoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "SUM"-(CONST left: ARRAY [?] OF SIGNED16): SIGNED16; 
	PROCEDURE ^ SumALLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "SUM"-(CONST left: ARRAY [?] OF SIGNED32): SIGNED32; 
	PROCEDURE ^ SumAYLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "SUM"-(CONST left: ARRAY [?] OF SIZE): SIZE; 
	PROCEDURE ^ SumARLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "SUM"-(CONST left: ARRAY [?] OF FLOAT32): FLOAT32; 
	PROCEDURE ^ SumAXLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "SUM"-(CONST left: ARRAY [?] OF FLOAT64): FLOAT64; 
	PROCEDURE ^ SumAZLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "SUM"-(CONST left: ARRAY [?] OF COMPLEX32): COMPLEX32; 
	PROCEDURE ^ SumALZLoop(ladr, dadr: ADDRESS; linc, len: SIZE); 
	OPERATOR ^ "SUM"-(CONST left: ARRAY [?] OF COMPLEX64): COMPLEX64; 
	PROCEDURE ^ AbsLoopS(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "ABS"-(CONST src: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ AbsLoopI(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "ABS"-(CONST src: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	PROCEDURE ^ AbsLoopL(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "ABS"-(CONST src: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	PROCEDURE ^ AbsLoopR(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "ABS"-(CONST src: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ AbsLoopX(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "ABS"-(CONST src: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ AbsLoopZ(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "ABS"-(CONST src: ARRAY [?] OF COMPLEX32): ARRAY [?] OF FLOAT32; 
	PROCEDURE ^ AbsLoopLZ(ladr, dadr: ADDRESS; linc, dinc, len: SIZE); 
	OPERATOR ^ "ABS"-(CONST src: ARRAY [?] OF COMPLEX64): ARRAY [?] OF FLOAT64; 
	PROCEDURE ^ AssignSBABLoop(ladr, dadr: ADDRESS; dinc, len: SIZE); 
	OPERATOR ^ ":="-(VAR dest: ARRAY [?] OF BOOLEAN; right: BOOLEAN); 
	PROCEDURE ^ AssignSSASLoop(ladr, dadr: ADDRESS; dinc, len: SIZE); 
	OPERATOR ^ ":="-(VAR dest: ARRAY [?] OF SIGNED8; right: SIGNED8); 
	PROCEDURE ^ AssignSIAILoop(ladr, dadr: ADDRESS; dinc, len: SIZE); 
	OPERATOR ^ ":="-(VAR dest: ARRAY [?] OF SIGNED16; right: SIGNED16); 
	PROCEDURE ^ AssignSLALLoop(ladr, dadr: ADDRESS; dinc, len: SIZE); 
	OPERATOR ^ ":="-(VAR dest: ARRAY [?] OF SIGNED32; right: SIGNED32); 
	PROCEDURE ^ AssignSYAYLoop(ladr, dadr: ADDRESS; dinc, len: SIZE); 
	OPERATOR ^ ":="-(VAR dest: ARRAY [?] OF SIZE; right: SIZE); 
	PROCEDURE ^ AssignSHAHLoop(ladr, dadr: ADDRESS; dinc, len: SIZE); 
	OPERATOR ^ ":="-(VAR dest: ARRAY [?] OF SIGNED64; right: SIGNED64); 
	PROCEDURE ^ AssignSRARLoop(ladr, dadr: ADDRESS; dinc, len: SIZE); 
	OPERATOR ^ ":="-(VAR dest: ARRAY [?] OF FLOAT32; right: FLOAT32); 
	PROCEDURE ^ AssignSXAXLoop(ladr, dadr: ADDRESS; dinc, len: SIZE); 
	OPERATOR ^ ":="-(VAR dest: ARRAY [?] OF FLOAT64; right: FLOAT64); 
	PROCEDURE ^ AssignSZAZLoop(ladr, dadr: ADDRESS; dinc, len: SIZE); 
	OPERATOR ^ ":="-(VAR dest: ARRAY [?] OF COMPLEX32; right: COMPLEX32); 
	PROCEDURE ^ AssignSLZALZLoop(ladr, dadr: ADDRESS; dinc, len: SIZE); 
	OPERATOR ^ ":="-(VAR dest: ARRAY [?] OF COMPLEX64; right: COMPLEX64); 
	PROCEDURE ^ AllocateMatrix(dest: ADDRESS; rows, cols, elementsize: SIZE): ANY; 
	PROCEDURE ^ AllocateVector(CONST dest: UnsafeArrayT; l0, elementsize: SIZE); 
	PROCEDURE ^ ApplyMatMulLoop*(dest, left, right: ADDRESS; Size: SIZE; loop: BinaryAASLoop; fast: FastMatMul); 
	PROCEDURE ^ ApplyMatVecMulLoop(dest, left, right: ADDRESS; Size: SIZE; loop: BinaryAASLoop; fast: FastMatMul); 
	PROCEDURE ^ ApplyVecMatMulLoop(dest, left, right: ADDRESS; Size: SIZE; loop: BinaryAASLoop; fast: FastMatMul); 
	PROCEDURE ^ MatMulASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [*, *] OF SIGNED8): ARRAY [*, *] OF SIGNED8; 
	OPERATOR ^ "*"-(CONST left: ARRAY [*, *] OF SIGNED8; CONST right: ARRAY [*] OF SIGNED8): ARRAY [*] OF SIGNED8; 
	OPERATOR ^ "*"-(CONST left: ARRAY [*] OF SIGNED8; CONST right: ARRAY [*, *] OF SIGNED8): ARRAY [*] OF SIGNED8; 
	PROCEDURE ^ MatMulAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [*, *] OF SIGNED16): ARRAY [*, *] OF SIGNED16; 
	OPERATOR ^ "*"-(CONST left: ARRAY [*, *] OF SIGNED16; CONST right: ARRAY [*] OF SIGNED16): ARRAY [*] OF SIGNED16; 
	OPERATOR ^ "*"-(CONST left: ARRAY [*] OF SIGNED16; CONST right: ARRAY [*, *] OF SIGNED16): ARRAY [*] OF SIGNED16; 
	PROCEDURE ^ MatMulALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [*, *] OF SIGNED32): ARRAY [*, *] OF SIGNED32; 
	OPERATOR ^ "*"-(CONST left: ARRAY [*, *] OF SIGNED32; CONST right: ARRAY [*] OF SIGNED32): ARRAY [*] OF SIGNED32; 
	OPERATOR ^ "*"-(CONST left: ARRAY [*] OF SIGNED32; CONST right: ARRAY [*, *] OF SIGNED32): ARRAY [*] OF SIGNED32; 
	PROCEDURE ^ MatMulARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [*, *] OF FLOAT32): ARRAY [*, *] OF FLOAT32; 
	OPERATOR ^ "*"-(CONST left: ARRAY [*, *] OF FLOAT32; CONST right: ARRAY [*] OF FLOAT32): ARRAY [*] OF FLOAT32; 
	OPERATOR ^ "*"-(CONST left: ARRAY [*] OF FLOAT32; CONST right: ARRAY [*, *] OF FLOAT32): ARRAY [*] OF FLOAT32; 
	PROCEDURE ^ MatMulAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [*, *] OF FLOAT64): ARRAY [*, *] OF FLOAT64; 
	OPERATOR ^ "*"-(CONST left: ARRAY [*, *] OF FLOAT64; CONST right: ARRAY [*] OF FLOAT64): ARRAY [*] OF FLOAT64; 
	OPERATOR ^ "*"-(CONST left: ARRAY [*] OF FLOAT64; CONST right: ARRAY [*, *] OF FLOAT64): ARRAY [*] OF FLOAT64; 
	PROCEDURE ^ MatMulIncASASLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "INCMUL"-(CONST left, right: ARRAY [*, *] OF SIGNED8): ARRAY [*, *] OF SIGNED8; 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [*, *] OF SIGNED8; CONST right: ARRAY [*] OF SIGNED8): ARRAY [*] OF SIGNED8; 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [*] OF SIGNED8; CONST right: ARRAY [*, *] OF SIGNED8): ARRAY [*] OF SIGNED8; 
	OPERATOR ^ "DECMUL"-(CONST left, right: ARRAY [*, *] OF SIGNED8): ARRAY [*, *] OF SIGNED8; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [*, *] OF SIGNED8; CONST right: ARRAY [*] OF SIGNED8): ARRAY [*] OF SIGNED8; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [*] OF SIGNED8; CONST right: ARRAY [*, *] OF SIGNED8): ARRAY [*] OF SIGNED8; 
	PROCEDURE ^ MatMulIncAIAILoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "INCMUL"-(CONST left, right: ARRAY [*, *] OF SIGNED16): ARRAY [*, *] OF SIGNED16; 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [*, *] OF SIGNED16; CONST right: ARRAY [*] OF SIGNED16): ARRAY [*] OF SIGNED16; 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [*] OF SIGNED16; CONST right: ARRAY [*, *] OF SIGNED16): ARRAY [*] OF SIGNED16; 
	OPERATOR ^ "DECMUL"-(CONST left, right: ARRAY [*, *] OF SIGNED16): ARRAY [*, *] OF SIGNED16; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [*, *] OF SIGNED16; CONST right: ARRAY [*] OF SIGNED16): ARRAY [*] OF SIGNED16; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [*] OF SIGNED16; CONST right: ARRAY [*, *] OF SIGNED16): ARRAY [*] OF SIGNED16; 
	PROCEDURE ^ MatMulIncALALLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "INCMUL"-(CONST left, right: ARRAY [*, *] OF SIGNED32): ARRAY [*, *] OF SIGNED32; 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [*, *] OF SIGNED32; CONST right: ARRAY [*] OF SIGNED32): ARRAY [*] OF SIGNED32; 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [*] OF SIGNED32; CONST right: ARRAY [*, *] OF SIGNED32): ARRAY [*] OF SIGNED32; 
	OPERATOR ^ "DECMUL"-(CONST left, right: ARRAY [*, *] OF SIGNED32): ARRAY [*, *] OF SIGNED32; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [*, *] OF SIGNED32; CONST right: ARRAY [*] OF SIGNED32): ARRAY [*] OF SIGNED32; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [*] OF SIGNED32; CONST right: ARRAY [*, *] OF SIGNED32): ARRAY [*] OF SIGNED32; 
	PROCEDURE ^ MatMulIncARARLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "INCMUL"-(CONST left, right: ARRAY [*, *] OF FLOAT32): ARRAY [*, *] OF FLOAT32; 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [*, *] OF FLOAT32; CONST right: ARRAY [*] OF FLOAT32): ARRAY [*] OF FLOAT32; 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [*] OF FLOAT32; CONST right: ARRAY [*, *] OF FLOAT32): ARRAY [*] OF FLOAT32; 
	OPERATOR ^ "DECMUL"-(CONST left, right: ARRAY [*, *] OF FLOAT32): ARRAY [*, *] OF FLOAT32; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [*, *] OF FLOAT32; CONST right: ARRAY [*] OF FLOAT32): ARRAY [*] OF FLOAT32; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [*] OF FLOAT32; CONST right: ARRAY [*, *] OF FLOAT32): ARRAY [*] OF FLOAT32; 
	PROCEDURE ^ MatMulIncAXAXLoop(ladr, radr, dadr: ADDRESS; linc, rinc, len: SIZE); 
	OPERATOR ^ "INCMUL"-(CONST left, right: ARRAY [*, *] OF FLOAT64): ARRAY [*, *] OF FLOAT64; 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [*, *] OF FLOAT64; CONST right: ARRAY [*] OF FLOAT64): ARRAY [*] OF FLOAT64; 
	OPERATOR ^ "INCMUL"-(CONST left: ARRAY [*] OF FLOAT64; CONST right: ARRAY [*, *] OF FLOAT64): ARRAY [*] OF FLOAT64; 
	OPERATOR ^ "DECMUL"-(CONST left, right: ARRAY [*, *] OF FLOAT64): ARRAY [*, *] OF FLOAT64; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [*, *] OF FLOAT64; CONST right: ARRAY [*] OF FLOAT64): ARRAY [*] OF FLOAT64; 
	OPERATOR ^ "DECMUL"-(CONST left: ARRAY [*] OF FLOAT64; CONST right: ARRAY [*, *] OF FLOAT64): ARRAY [*] OF FLOAT64; 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [*] OF SIGNED8): ARRAY [*] OF SIGNED8; 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [*] OF SIGNED16): ARRAY [*] OF SIGNED16; 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [*] OF SIGNED32): ARRAY [*] OF SIGNED32; 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [*] OF FLOAT32): ARRAY [*] OF FLOAT32; 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [*] OF FLOAT64): ARRAY [*] OF FLOAT64; 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	OPERATOR ^ "*"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	PROCEDURE ^ Overlap(src1, src2: ADDRESS): BOOLEAN; 
	PROCEDURE ^ AllocateTransposed(VAR dest: UnsafeArrayT; CONST src: UnsafeArrayT; elementsize: SIZE): BOOLEAN; 
	PROCEDURE ^ Transpose*(dest: UnsafeArray; CONST left: UnsafeArrayT; Size: SIZE); 
	OPERATOR ^ "`"-(CONST left: ARRAY [*, *] OF SIGNED8): ARRAY [*, *] OF SIGNED8; 
	OPERATOR ^ "`"-(CONST left: ARRAY [*, *] OF SIGNED16): ARRAY [*, *] OF SIGNED16; 
	OPERATOR ^ "`"-(CONST left: ARRAY [*, *] OF SIGNED32): ARRAY [*, *] OF SIGNED32; 
	OPERATOR ^ "`"-(CONST left: ARRAY [*, *] OF FLOAT32): ARRAY [*, *] OF FLOAT32; 
	OPERATOR ^ "`"-(CONST left: ARRAY [*, *] OF FLOAT64): ARRAY [*, *] OF FLOAT64; 
	PROCEDURE ^ CheckTensorGeometry(left, right, dest: ADDRESS; ldim, rdim: SIZE): BOOLEAN; 
	PROCEDURE ^ DoReshape*(VAR dest: UnsafeArrayT; CONST src: UnsafeArrayT; CONST shape: ARRAY [*] OF SIZE); 
	PROCEDURE ^ AllocateTensorA*(CONST a: ARRAY OF SIZE; elementSize: SIZE; tag: ADDRESS; VAR dest: UnsafeArrayT); 
	PROCEDURE ^ AllocateArrayA*(CONST a: ARRAY OF SIZE; elementSize: SIZE; tag: ADDRESS; dest: UnsafeArray); 
	PROCEDURE ^ DoAllocateTensorX*(VAR dest: UnsafeArrayT; CONST a: ARRAY [*] OF SIZE; Size: SIZE; tag: ADDRESS); 
	PROCEDURE ^ AllocateTensorX(VAR dest: ARRAY [?] OF SIZE; CONST a: ARRAY [*] OF SIZE; Size: SIZE; tag: ADDRESS); 
	PROCEDURE ^ LenA*(VAR dest: ARRAY [*] OF SIZE; src: ADDRESS); 
	PROCEDURE ^ IncrA*(VAR dest: ARRAY [*] OF SIZE; src: ADDRESS); 
	PROCEDURE ^ Len*(src: ADDRESS; d: SIZE): SIZE; 
	PROCEDURE ^ Incr*(src: ADDRESS; d: SIZE): SIZE; 
	PROCEDURE ^ AllocateTensor(VAR dest: UnsafeArrayT; CONST left, right: UnsafeArrayT; Size: SIZE); 
	PROCEDURE ^ FindPatternTensor(left, right: ADDRESS; VAR rdim, len, linc, ri: SIZE); 
	PROCEDURE ^ ApplyTensorAAAOp(VAR dest: UnsafeArrayT; CONST left, right: UnsafeArrayT; elementSize: SIZE; Loop: BinaryASALoop); 
	OPERATOR ^ "**"-(CONST left, right: ARRAY [?] OF SIGNED8): ARRAY [?] OF SIGNED8; 
	OPERATOR ^ "**"-(CONST left, right: ARRAY [?] OF SIGNED16): ARRAY [?] OF SIGNED16; 
	OPERATOR ^ "**"-(CONST left, right: ARRAY [?] OF SIGNED32): ARRAY [?] OF SIGNED32; 
	OPERATOR ^ "**"-(CONST left, right: ARRAY [?] OF FLOAT32): ARRAY [?] OF FLOAT32; 
	OPERATOR ^ "**"-(CONST left, right: ARRAY [?] OF FLOAT64): ARRAY [?] OF FLOAT64; 
	OPERATOR ^ "**"-(CONST left, right: ARRAY [?] OF COMPLEX32): ARRAY [?] OF COMPLEX32; 
	OPERATOR ^ "**"-(CONST left, right: ARRAY [?] OF COMPLEX64): ARRAY [?] OF COMPLEX64; 
	PROCEDURE ^ InitOptimization; 
	PROCEDURE ^ CopyDescriptor*(VAR dest: UnsafeArrayT; CONST src: UnsafeArrayT; prefixIndices, prefixRanges, suffixIndices, suffixRanges: SIZE); 
	PROCEDURE ^ Reshape*(CONST left: ARRAY [?] ; CONST right: ARRAY [*] OF SIZE): ARRAY [?] ; 
	PROCEDURE ^ RangeFromInteger*(CONST integer: SIZE): RANGE; 
	PROCEDURE ^ ExpandDimensions*(CONST sourceArray: ARRAY [?] ; CONST keptDimensions: ARRAY [*] OF BOOLEAN): ARRAY [?] ; 
	OPERATOR ^ "LEN"-(CONST range: RANGE): SIZE; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF SIGNED8; op: PROCEDURE {DELEGATE}(x: SIGNED8):SIGNED8): ARRAY [?] OF SIGNED8; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF SIGNED16; op: PROCEDURE {DELEGATE}(x: SIGNED16):SIGNED16): ARRAY [?] OF SIGNED16; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF SIGNED32; op: PROCEDURE {DELEGATE}(x: SIGNED32):SIGNED32): ARRAY [?] OF SIGNED32; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF SIGNED64; op: PROCEDURE {DELEGATE}(x: SIGNED64):SIGNED64): ARRAY [?] OF SIGNED64; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF FLOAT32; op: PROCEDURE {DELEGATE}(x: FLOAT32):FLOAT32): ARRAY [?] OF FLOAT32; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF FLOAT64; op: PROCEDURE {DELEGATE}(x: FLOAT64):FLOAT64): ARRAY [?] OF FLOAT64; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF COMPLEX32; op: PROCEDURE {DELEGATE}(x: COMPLEX32):COMPLEX32): ARRAY [?] OF COMPLEX32; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF COMPLEX64; op: PROCEDURE {DELEGATE}(x: COMPLEX64):COMPLEX64): ARRAY [?] OF COMPLEX64; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF SIGNED8; map: PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE)): ARRAY [?] OF SIGNED8; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF SIGNED16; map: PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE)): ARRAY [?] OF SIGNED16; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF SIGNED32; map: PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE)): ARRAY [?] OF SIGNED32; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF SIGNED64; map: PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE)): ARRAY [?] OF SIGNED64; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF FLOAT32; map: PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE)): ARRAY [?] OF FLOAT32; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF FLOAT64; map: PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE)): ARRAY [?] OF FLOAT64; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF COMPLEX32; map: PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE)): ARRAY [?] OF COMPLEX32; 
	OPERATOR ^ "ALL"-(CONST x: ARRAY [?] OF COMPLEX64; map: PROCEDURE (ladr, dadr: ADDRESS; linc, dinc, len: SIZE)): ARRAY [?] OF COMPLEX64; 
BEGIN
END FoxArrayBase.
