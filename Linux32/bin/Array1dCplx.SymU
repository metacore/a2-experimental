MODULE Array1dCplx;
	IMPORT SYSTEM, Array1dBytes, NbrCplx, NbrRe, NbrRat, NbrInt, DataErrors, Array1dInt, Array1dRat, Array1dRe;
CONST 
	assertSrcIndexCheck* = 1000; 
	assertDestIndexCheck* = 1001; 
	sz = SIZEOF(Value); 
TYPE 
	Value* = NbrCplx.Complex; 

	RealValue* = NbrRe.Real; 

	Array* = POINTER TO ARRAY OF Value; 

	Index* = SIGNED32; 

	Map* = PROCEDURE {DELEGATE}(VAR i: Value); 

	PROCEDURE ^ Copy*(VAR x: ARRAY OF Value; VAR res: ARRAY OF Value; srcoffset, destoffset, len: Index); 
	PROCEDURE ^ CreateCopy*(VAR x: ARRAY OF Value): Array; 
	PROCEDURE ^ CopyPat*(VAR x: ARRAY OF Value; VAR res: ARRAY OF Value; srcoffset, srcstep, destoffset, deststep, piecelen, pieces: Index); 
	PROCEDURE ^ CreateCopyPat*(VAR x: ARRAY OF Value; offset, step, piecelen, pieces: Index): Array; 
	PROCEDURE ^ Fill*(x: Value; VAR res: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ FillPat*(x: Value; VAR res: ARRAY OF Value; offset, step, piecelen, pieces: Index); 
	PROCEDURE ^ Negate*(VAR x: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ NegatePat*(VAR x: ARRAY OF Value; offset, step, piecelen, pieces: Index); 
	PROCEDURE ^ Abs*(VAR x: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ AbsPat*(VAR x: ARRAY OF Value; offset, step, piecelen, pieces: Index); 
	PROCEDURE ^ AddAA*(VAR x, y: ARRAY OF Value; VAR res: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ SubtractAA*(VAR x, y: ARRAY OF Value; VAR res: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ MultAA*(VAR x, y: ARRAY OF Value; VAR res: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ ScalarProduct*(VAR x, y: ARRAY OF Value; VAR res: Value; offset, len: Index); 
	PROCEDURE ^ DivAA*(VAR x, y: ARRAY OF Value; VAR res: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ EqualsAA*(VAR x, y: ARRAY OF Value; offset, len: Index): BOOLEAN; 
	PROCEDURE ^ AddAV*(VAR x: ARRAY OF Value; y: Value; VAR res: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ AddAVPat*(VAR x: ARRAY OF Value; y: Value; VAR res: ARRAY OF Value; srcoffset, srcstep, destoffset, deststep, piecelen, pieces: Index); 
	PROCEDURE ^ SubtractAV*(VAR x: ARRAY OF Value; y: Value; VAR res: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ SubtractAVPat*(VAR x: ARRAY OF Value; y: Value; VAR res: ARRAY OF Value; srcoffset, srcstep, destoffset, deststep, piecelen, pieces: Index); 
	PROCEDURE ^ SubtractVA*(VAR x: Value; VAR y: ARRAY OF Value; VAR res: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ SubtractVAPat*(x: Value; VAR y: ARRAY OF Value; VAR res: ARRAY OF Value; srcoffset, srcstep, destoffset, deststep, piecelen, pieces: Index); 
	PROCEDURE ^ MultAV*(VAR x: ARRAY OF Value; y: Value; VAR res: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ MultAVPat*(VAR x: ARRAY OF Value; y: Value; VAR res: ARRAY OF Value; srcoffset, srcstep, destoffset, deststep, piecelen, pieces: Index); 
	PROCEDURE ^ DivAV*(VAR x: ARRAY OF Value; y: Value; VAR res: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ DivAVPat*(VAR x: ARRAY OF Value; y: Value; VAR res: ARRAY OF Value; srcoffset, srcstep, destoffset, deststep, piecelen, pieces: Index); 
	PROCEDURE ^ DivVA*(x: Value; VAR y: ARRAY OF Value; VAR res: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ DivVAPat*(x: Value; VAR y: ARRAY OF Value; VAR res: ARRAY OF Value; srcoffset, srcstep, destoffset, deststep, piecelen, pieces: Index); 
	PROCEDURE ^ ApplyMap*(map: Map; VAR res: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ ApplyMapPat*(map: Map; VAR res: ARRAY OF Value; offset, step, piecelen, pieces: Index); 
	PROCEDURE ^ MeanSsq*(VAR x: ARRAY OF Value; offset, len: Index; VAR mean: Value; VAR ssq: RealValue); 
	PROCEDURE ^ HammingWeight*(VAR x: ARRAY OF Value; offset, len: Index): Index; 
	PROCEDURE ^ HammingWeightPat*(map: Map; VAR x: ARRAY OF Value; offset, step, piecelen, pieces: Index): Index; 
	PROCEDURE ^ HammingDist*(VAR x, y: ARRAY OF Value; xoffset, yoffset, len: Index): Index; 
	PROCEDURE ^ L1Norm*(VAR x: ARRAY OF Value; offset, len: Index): RealValue; 
	PROCEDURE ^ L1NormPat*(map: Map; VAR x: ARRAY OF Value; offset, step, piecelen, pieces: Index): RealValue; 
	PROCEDURE ^ L1Dist*(VAR x, y: ARRAY OF Value; xoffset, yoffset, len: Index): RealValue; 
	PROCEDURE ^ L2NormSq*(VAR x: ARRAY OF Value; offset, len: Index): NbrRe.Real; 
	PROCEDURE ^ L2Norm*(VAR x: ARRAY OF Value; offset, len: Index): NbrRe.Real; 
	PROCEDURE ^ L2NormPatSq*(VAR x: ARRAY OF Value; offset, step, piecelen, pieces: Index): NbrRe.Real; 
	PROCEDURE ^ L2NormPat*(VAR x: ARRAY OF Value; offset, step, piecelen, pieces: Index): NbrRe.Real; 
	PROCEDURE ^ L2DistSq*(VAR x, y: ARRAY OF Value; xoffset, yoffset, len: Index): NbrRe.Real; 
	PROCEDURE ^ L2Dist*(VAR x, y: ARRAY OF Value; xoffset, yoffset, len: Index): NbrRe.Real; 
	PROCEDURE ^ LInftyNorm*(VAR x: ARRAY OF Value; offset, len: Index): RealValue; 
	PROCEDURE ^ LInftyNormPat*(map: Map; VAR x: ARRAY OF Value; offset, step, piecelen, pieces: Index): RealValue; 
	PROCEDURE ^ LInftyDist*(VAR x, y: ARRAY OF Value; xoffset, yoffset, len: Index): RealValue; 
	PROCEDURE ^ MinIndex(x, y: Index): Index; 
	PROCEDURE ^ SetLen*(VAR a: Array; len: Index); 
	PROCEDURE ^ RemoveBlock*(VAR x: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ InsertBlock*(VAR x: ARRAY OF Value; offset, len: Index); 
	PROCEDURE ^ ShiftBlock*(VAR x: ARRAY OF Value; from, to, len: Index); 
	PROCEDURE ^ RemovePat*(VAR x: ARRAY OF Value; offset, step, piecelen, pieces: SIGNED32): Array; 
	PROCEDURE ^ Remove*(VAR x: ARRAY OF Value; offset, len: SIGNED32): Array; 
	PROCEDURE ^ InsertPat*(VAR x: ARRAY OF Value; offset, step, piecelen, pieces: SIGNED32): Array; 
	PROCEDURE ^ Insert*(VAR x: ARRAY OF Value; offset, len: SIGNED32): Array; 
	PROCEDURE ^ GetPieces*(VAR a: ARRAY OF Value; offset, step, piecelen: SIGNED32): SIGNED32; 
	PROCEDURE ^ SortByIndex*(VAR x: ARRAY OF Value; VAR index: ARRAY OF Index; offset, len: Index); 
	OPERATOR ^ "-"-(x: Array): Array; 
	OPERATOR ^ "~"-(x: Array): Array; 
	OPERATOR ^ ":="-(VAR l: Array; VAR r: ARRAY OF Value); 
	OPERATOR ^ ":="-(VAR l: Array; r: Array1dRe.Array); 
	OPERATOR ^ ":="-(VAR l: Array; r: Array1dRat.Array); 
	OPERATOR ^ ":="-(VAR l: Array; r: Array1dInt.Array); 
	OPERATOR ^ ":="-(VAR l: Array; VAR r: ARRAY OF NbrRe.Real); 
	OPERATOR ^ ":="-(VAR l: Array; VAR r: ARRAY OF NbrRat.Rational); 
	OPERATOR ^ ":="-(VAR l: Array; VAR r: ARRAY OF NbrInt.Integer); 
	OPERATOR ^ "="-(l: Array; VAR r: ARRAY OF Value): BOOLEAN; 
	OPERATOR ^ "="-(VAR l: ARRAY OF Value; r: Array): BOOLEAN; 
	OPERATOR ^ ":="-(VAR l: Array; r: Value); 
	OPERATOR ^ "+"-(l, r: Array): Array; 
	OPERATOR ^ "+"-(l: Array; r: Array1dRe.Array): Array; 
	OPERATOR ^ "+"-(l: Array1dRe.Array; r: Array): Array; 
	OPERATOR ^ "+"-(l: Array; r: Array1dRat.Array): Array; 
	OPERATOR ^ "+"-(l: Array1dRat.Array; r: Array): Array; 
	OPERATOR ^ "+"-(l: Array; r: Array1dInt.Array): Array; 
	OPERATOR ^ "+"-(l: Array1dInt.Array; r: Array): Array; 
	OPERATOR ^ "+"-(l: Array; r: Value): Array; 
	OPERATOR ^ "+"-(r: Value; l: Array): Array; 
	OPERATOR ^ "-"-(l: Array; r: Value): Array; 
	OPERATOR ^ "-"-(l: Value; r: Array): Array; 
	OPERATOR ^ "-"-(l, r: Array): Array; 
	OPERATOR ^ "-"-(l: Array; r: Array1dRe.Array): Array; 
	OPERATOR ^ "-"-(l: Array1dRe.Array; r: Array): Array; 
	OPERATOR ^ "-"-(l: Array; r: Array1dRat.Array): Array; 
	OPERATOR ^ "-"-(l: Array1dRat.Array; r: Array): Array; 
	OPERATOR ^ "-"-(l: Array; r: Array1dInt.Array): Array; 
	OPERATOR ^ "-"-(l: Array1dInt.Array; r: Array): Array; 
	OPERATOR ^ "*"-(l, r: Array): Value; 
	OPERATOR ^ "*"-(l: Array; r: Array1dRe.Array): NbrCplx.Complex; 
	OPERATOR ^ "*"-(l: Array1dRe.Array; r: Array): NbrCplx.Complex; 
	OPERATOR ^ "*"-(l: Array; r: Array1dRat.Array): NbrCplx.Complex; 
	OPERATOR ^ "*"-(l: Array1dRat.Array; r: Array): NbrCplx.Complex; 
	OPERATOR ^ "*"-(l: Array; r: Array1dInt.Array): NbrCplx.Complex; 
	OPERATOR ^ "*"-(l: Array1dInt.Array; r: Array): NbrCplx.Complex; 
	OPERATOR ^ "*"-(l: Value; r: Array): Array; 
	OPERATOR ^ "*"-(l: Array; r: Value): Array; 
	OPERATOR ^ "*"-(l: NbrRe.Real; r: Array): Array; 
	OPERATOR ^ "*"-(l: Array; r: NbrRe.Real): Array; 
	OPERATOR ^ "*"-(l: NbrRat.Rational; r: Array): Array; 
	OPERATOR ^ "*"-(l: Array; r: NbrRat.Rational): Array; 
	OPERATOR ^ "*"-(l: NbrInt.Integer; r: Array): Array; 
	OPERATOR ^ "*"-(l: Array; r: NbrInt.Integer): Array; 
	OPERATOR ^ "/"-(l: Array; r: Value): Array; 
	OPERATOR ^ "/"-(l: Array; r: NbrRe.Real): Array; 
	OPERATOR ^ "/"-(l: Array; r: NbrRat.Rational): Array; 
	OPERATOR ^ "/"-(l: Array; r: NbrInt.Integer): Array; 
BEGIN
END Array1dCplx.
