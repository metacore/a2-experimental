MODULE NbrRe64;
	IMPORT Streams, MathL, NbrInt8, NbrInt16, NbrInt32, NbrInt64, NbrRe32;
CONST 
	E* = MathL.e; 
	Pi* = MathL.pi; 
TYPE 
	Real* = FLOAT64; 
VAR 
	MinNbr-, MaxNbr-, reExp, Epsilon-: Real; 
	minExp, maxExp: NbrInt16.Integer; 
	Radix-: NbrInt8.Integer; 

	PROCEDURE ^ Abs*(x: Real): Real; 
	PROCEDURE ^ Entier*(x: Real): NbrInt32.Integer; 
	PROCEDURE ^ LEntier*(x: Real): NbrInt64.Integer; 
	PROCEDURE ^ Long*(x: NbrRe32.Real): Real; 
	PROCEDURE ^ IsRe32*(x: Real): BOOLEAN; 
	PROCEDURE ^ Short*(x: Real): NbrRe32.Real; 
	PROCEDURE ^ Max*(x1, x2: Real): Real; 
	PROCEDURE ^ Min*(x1, x2: Real): Real; 
	PROCEDURE ^ Sign*(x: Real): NbrInt8.Integer; 
	PROCEDURE ^ Int*(x: Real): NbrInt32.Integer; 
	PROCEDURE ^ Frac*(x: Real): Real; 
	PROCEDURE ^ Round*(x: Real): NbrInt32.Integer; 
	PROCEDURE ^ Floor*(x: Real): NbrInt32.Integer; 
	PROCEDURE ^ Ceiling*(x: Real): NbrInt32.Integer; 
	PROCEDURE ^ Mantissa*(x: Real): Real; 
	PROCEDURE ^ Exponent*(x: Real): NbrInt16.Integer; 
	PROCEDURE ^ MantissaExponent(y: Real; VAR man: Real; VAR exp: NbrInt16.Integer); 
	PROCEDURE ^ Re*(mantissa: Real; exponent: NbrInt16.Integer): Real; 
	PROCEDURE ^ Sqrt*(x: Real): Real; 
	PROCEDURE ^ Sin*(x: Real): Real; 
	PROCEDURE ^ Cos*(x: Real): Real; 
	PROCEDURE ^ ArcTan*(x: Real): Real; 
	PROCEDURE ^ Exp*(x: Real): Real; 
	PROCEDURE ^ Ln*(x: Real): Real; 
	PROCEDURE ^ StdForm(VAR y: Real; VAR exponent: NbrInt16.Integer); 
	PROCEDURE ^ StringToRe*(string: ARRAY OF CHAR; VAR x: Real); 
	PROCEDURE ^ ReToString*(x: Real; significantFigures: NbrInt8.Integer; VAR string: ARRAY OF CHAR); 
	PROCEDURE ^ Load*(R: Streams.Reader; VAR x: Real); 
	PROCEDURE ^ Store*(W: Streams.Writer; x: Real); 
	PROCEDURE ^ EvalEpsilon; 
BEGIN
END NbrRe64.
