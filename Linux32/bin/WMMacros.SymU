MODULE WMMacros;
	IMPORT Texts, KernelLog, Strings, TextUtilities, WMTextView, WMEditors, Commands, Files, XML, XMLScanner, XMLParser, XMLObjects, Streams;
CONST 
	DefaultMacroKeySym = 65379; 
TYPE 
	String = Strings.String; 

	Char32 = Texts.Char32; 

	ParameterEntry = RECORD 
		a, b: SIZE; 
	END; 

	ParameterList = POINTER TO ARRAY OF ParameterEntry; 
VAR 
	macros: XML.Element; 
	macroKeySym: SIGNED32; 
	hasErrors: BOOLEAN; 

	PROCEDURE ^ IsStop(ch: Char32): BOOLEAN; 
	PROCEDURE ^ IsWhiteSpace(ch: Char32): BOOLEAN; 
	PROCEDURE ^ LeftSkipString(r: Texts.TextReader; VAR ch: Char32; stop: Char32): BOOLEAN; 
	PROCEDURE ^ LeftSkipIdent(r: Texts.TextReader; VAR ch: Char32): BOOLEAN; 
	PROCEDURE ^ ParseLeft(r: Texts.TextReader; VAR nof: SIZE): BOOLEAN; 
	PROCEDURE ^ ParseToRight(r: Texts.TextReader; end, nof: SIZE; par: ParameterList; VAR startPos: SIZE): BOOLEAN; 
	PROCEDURE ^ InsertParameter(text: Texts.Text; parameter: ParameterEntry; pos: SIZE); 
	PROCEDURE ^ FindMacro*(parent: XML.Element; CONST key: ARRAY OF CHAR): XML.Element; 
	PROCEDURE ^ ExecuteMacro(text: Texts.Text; r: Texts.TextReader; cursor: WMTextView.PositionMarker; parameters: ParameterList; macro: XML.Element); 
	PROCEDURE ^ Insert(text: Texts.Text; cursor: WMTextView.PositionMarker); 
	PROCEDURE ^ Handle*(sender, data: ANY); 
	PROCEDURE ^ GetMacroKeySym(): SIGNED32; 
	PROCEDURE ^ Error(pos, line, row: Streams.Position; CONST msg: ARRAY OF CHAR); 
	PROCEDURE ^ Read(CONST name: ARRAY OF CHAR); 
	PROCEDURE ^ ReadMacros*(context: Commands.Context); 
BEGIN
END WMMacros.
