MODULE FoxTRMBackend;
	IMPORT Basic := FoxBasic, SyntaxTree := FoxSyntaxTree, Global := FoxGlobal, Backend := FoxBackend, Sections := FoxSections, IntermediateCode := FoxIntermediateCode, IntermediateBackend := FoxIntermediateBackend, BinaryCode := FoxBinaryCode, SemanticChecker := FoxSemanticChecker, Formats := FoxFormats, Assembler := FoxTRMAssembler, InstructionSet := FoxTRMInstructionSet, SYSTEM, Diagnostics, Streams, Options, Strings, ObjectFile, Scanner := FoxScanner, ObjectFileFormat := FoxIntermediateObjectFile, CodeGenerators := FoxCodeGenerators, D := Debugging, Compiler;
CONST 
	TraceFixups = FALSE; 
	DefaultRuntimeModuleName = \"TRMRuntime"\; 
	HaltIRQNumber = 8; 
	Registers = 8; 
	None =  -1; 
	Low = 0; 
	High = 1; 
	FPSupported = TRUE; 
	opAND = InstructionSet.opAND; 
	opBIC* = InstructionSet.opBIC; 
	opOR = InstructionSet.opOR; 
	opXOR = InstructionSet.opXOR; 
	opADD = InstructionSet.opADD; 
	opFADD = InstructionSet.opFADD; 
	opSUB = InstructionSet.opSUB; 
	opFSUB = InstructionSet.opFSUB; 
	opMUL = InstructionSet.opMUL; 
	opFMUL = InstructionSet.opFMUL; 
	opNOT = InstructionSet.opNOT; 
	opLDH = InstructionSet.opLDH; 
	opMOV = InstructionSet.opMOV; 
	opROR = InstructionSet.opROR; 
	opBLR = InstructionSet.opBLR; 
	opBR = InstructionSet.opBR; 
	opIRET* = InstructionSet.opIRET; 
	opLD = InstructionSet.opLD; 
	opST = InstructionSet.opST; 
	opBL = InstructionSet.opBL; 
	opBEQ = InstructionSet.opBEQ; 
	opBNE = InstructionSet.opBNE; 
	opBAE = InstructionSet.opBAE; 
	opBB = InstructionSet.opBB; 
	opBN = InstructionSet.opBN; 
	opBNN = InstructionSet.opBNN; 
	opBO* = InstructionSet.opBO; 
	opBNO* = InstructionSet.opBNO; 
	opBA = InstructionSet.opBA; 
	opBBE = InstructionSet.opBBE; 
	opBGE = InstructionSet.opBGE; 
	opBLT = InstructionSet.opBLT; 
	opBGT = InstructionSet.opBGT; 
	opBLE = InstructionSet.opBLE; 
	opBT = InstructionSet.opBT; 
	opBF* = InstructionSet.opBF; 
	opSPSR* = InstructionSet.opSPSR; 
	VectorSupportFlag = \"vectorSupport"\; 
	FloatingPointSupportFlag = \"floatingPoint"\; 
	FPSupportFlag = \"supportFP"\; 
	PatchSpartan6 = \"patchSpartan6"\; 
TYPE 
	Operand = InstructionSet.Operand; 

	FixupEntry = POINTER TO RECORD 
		maxPC: LONGINT; 
		fixup: BinaryCode.Fixup; 
		next: FixupEntry; 
	END; 

	ForwardFixupList = OBJECT 
	VAR 
		first, last: FixupEntry; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Enter(fixup: BinaryCode.Fixup; currentPC: LONGINT; bits: LONGINT); 
		PROCEDURE ^ Check(outPC: LONGINT): BinaryCode.Fixup; 
	END ForwardFixupList; 

	Ticket = CodeGenerators.Ticket; 

	PhysicalRegisters* = OBJECT (CodeGenerators.PhysicalRegisters)
	VAR 
		toVirtual: ARRAY Registers OF Ticket; 
		reserved: ARRAY Registers OF BOOLEAN; 
		unusable: Ticket; 
		hint: LONGINT; 

		PROCEDURE ^  & InitPhysicalRegisters(supportFP: BOOLEAN); 
		PROCEDURE ^ SupportFP(b: BOOLEAN); 
		PROCEDURE ^ NumberRegisters*(): LONGINT; 
		PROCEDURE ^ Allocate*(index: LONGINT; virtualRegister: Ticket); 
		PROCEDURE ^ SetReserved*(index: LONGINT; res: BOOLEAN); 
		PROCEDURE ^ Reserved*(index: LONGINT): BOOLEAN; 
		PROCEDURE ^ Free*(index: LONGINT); 
		PROCEDURE ^ NextFree*(CONST type: IntermediateCode.Type): LONGINT; 
		PROCEDURE ^ AllocationHint*(index: LONGINT); 
		PROCEDURE ^ Mapped*(physical: LONGINT): Ticket; 
		PROCEDURE ^ Dump*(w: Streams.Writer); 
	END PhysicalRegisters; 

	CodeGeneratorTRM = OBJECT (CodeGenerators.GeneratorWithTickets)
	VAR 
		opSP, opLR, opFP, null, noOperand: InstructionSet.Operand; 
		instructionSet: InstructionSet.InstructionSet; 
		stackSize, spillStackPosition: LONGINT; 
		stackSizeKnown: BOOLEAN; 
		inStackAllocation: BOOLEAN; 
		runtimeModuleName: SyntaxTree.IdentifierString; 
		forwardFixups: ForwardFixupList; 
		spillStackStart: LONGINT; 
		backend: BackendTRM; 
		supportFP: BOOLEAN; 
		pushChainLength: LONGINT; 
		patchSpartan6: BOOLEAN; 

		PROCEDURE ^ SetInstructionSet(instructionSet: InstructionSet.InstructionSet); 
		PROCEDURE ^  & InitGeneratorTRM(CONST runtime: SyntaxTree.IdentifierString; diagnostics: Diagnostics.Diagnostics; b: BackendTRM; instructionSet: InstructionSet.InstructionSet); 
		PROCEDURE ^ CheckStackPointer(CONST dest: InstructionSet.Operand); 
		PROCEDURE ^ PatchSpartan6; 
		PROCEDURE ^ Emit(op: LONGINT; CONST op1, op2: InstructionSet.Operand); 
		PROCEDURE ^ Emit2(op: LONGINT; CONST op1, op2: InstructionSet.Operand); 
		PROCEDURE ^ Emit2N(op: LONGINT; CONST op1: InstructionSet.Operand; n: LONGINT); 
		PROCEDURE ^ Emit1(op: LONGINT; CONST op1: InstructionSet.Operand); 
		PROCEDURE ^ Emit1N(op: LONGINT; n: LONGINT); 
		PROCEDURE ^ Section*(in: IntermediateCode.Section; out: BinaryCode.Section); 
		PROCEDURE ^ Supported*(CONST instr: IntermediateCode.Instruction; VAR moduleName, procedureName: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ GetPartType*(CONST type: IntermediateCode.Type; part: LONGINT; VAR typePart: IntermediateCode.Type); 
		PROCEDURE ^ GetSpillOperand(ticket: Ticket; VAR mem: Operand); 
		PROCEDURE ^ ToSpillStack*(ticket: Ticket); 
		PROCEDURE ^ AllocateSpillStack*(size: LONGINT); 
		PROCEDURE ^ ToRegister*(ticket: Ticket); 
		PROCEDURE ^ ExchangeTickets*(ticket1, ticket2: Ticket); 
		PROCEDURE ^ CheckFixups; 
		PROCEDURE ^ IsComplex(CONST operand: IntermediateCode.Operand): BOOLEAN; 
		PROCEDURE ^ IsFloat(CONST operand: IntermediateCode.Operand): BOOLEAN; 
		PROCEDURE ^ Generate*(VAR instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ PostGenerate*(CONST instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ TicketToOperand(ticket: Ticket; VAR op: InstructionSet.Operand); 
		PROCEDURE ^ AllocateStack(size: LONGINT; updateStackSize: BOOLEAN); 
		PROCEDURE ^ EmitEnter(CONST instr: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitLeave(CONST instr: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitExit(CONST instr: IntermediateCode.Instruction); 
		PROCEDURE ^ ResultRegister(part: LONGINT): InstructionSet.Operand; 
		PROCEDURE ^ EmitResult(VAR instr: IntermediateCode.Instruction; part: LONGINT); 
		PROCEDURE ^ EmitReturn(VAR instr: IntermediateCode.Instruction; part: LONGINT); 
		PROCEDURE ^ EmitMov(VAR vop1, vop2: IntermediateCode.Operand; part: LONGINT); 
		PROCEDURE ^ EmitConv(VAR instr: IntermediateCode.Instruction); 
		PROCEDURE ^ Resolve(VAR op: IntermediateCode.Operand); 
		PROCEDURE ^ EmitCall(VAR instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ GetImmediate32(val: LONGINT; CONST reg: InstructionSet.Operand; emit: BOOLEAN): LONGINT; 
		PROCEDURE ^ ImmediateToOperand(imm: HUGEINT; part: LONGINT; signed: BOOLEAN; bits: LONGINT; VAR op: Operand); 
		PROCEDURE ^ MakeRegister(VAR vop: IntermediateCode.Operand; part: LONGINT; VAR rop: Operand); 
		PROCEDURE ^ GetSymbolOffset(VAR vop: IntermediateCode.Operand; VAR sectionName: ObjectFile.Identifier): LONGINT; 
		PROCEDURE ^ GetMemory(VAR vop: IntermediateCode.Operand; part: LONGINT; VAR memoryOperand: InstructionSet.Operand; ticket: Ticket); 
		PROCEDURE ^ Load(VAR vop: IntermediateCode.Operand; part: LONGINT; CONST register: Operand); 
		PROCEDURE ^ Store(VAR vop: IntermediateCode.Operand; part: LONGINT; CONST register: Operand); 
		PROCEDURE ^ UnsignedImmediate(vop: IntermediateCode.Operand; part: LONGINT; bits: LONGINT; allowNegation: BOOLEAN; VAR neg: BOOLEAN; VAR rop: Operand): BOOLEAN; 
		PROCEDURE ^ HardwareIntegerRegister(index: LONGINT; sizeInBits: LONGINT): LONGINT; 
		PROCEDURE ^ HardwareFloatRegister(index: LONGINT; sizeInBits: LONGINT): LONGINT; 
		PROCEDURE ^ GetTypedHardwareRegister(index: LONGINT; type: IntermediateCode.Type): LONGINT; 
		PROCEDURE ^ ParameterRegister(CONST type: IntermediateCode.Type; index: LONGINT): LONGINT; 
		PROCEDURE ^ PhysicalRegister(virtualReg: LONGINT; part: LONGINT; VAR offset: LONGINT): LONGINT; 
		PROCEDURE ^ GetRegister(CONST virtual: IntermediateCode.Operand; part: LONGINT; VAR physical: Operand); 
		PROCEDURE ^ IsSameRegister(CONST a, b: InstructionSet.Operand): BOOLEAN; 
		PROCEDURE ^ MovIfDifferent(CONST a, b: InstructionSet.Operand); 
		PROCEDURE ^ AcquireDestinationRegister(CONST vop: IntermediateCode.Operand; part: LONGINT; VAR op: Operand); 
		PROCEDURE ^ PrepareOp3(CONST instruction: IntermediateCode.Instruction; part: LONGINT; allowNegation: BOOLEAN; VAR negate: BOOLEAN; VAR dest, left, right: Assembler.Operand); 
		PROCEDURE ^ PrepareFOp3(CONST instruction: IntermediateCode.Instruction; VAR dest, left, right: Assembler.Operand); 
		PROCEDURE ^ PrepareOp2(CONST instruction: IntermediateCode.Instruction; part: LONGINT; allowNegation: BOOLEAN; VAR negate: BOOLEAN; VAR left, right: Assembler.Operand); 
		PROCEDURE ^ ReleaseDestinationRegister(VAR vop: IntermediateCode.Operand; part: LONGINT; left: Assembler.Operand); 
		PROCEDURE ^ FinishOp(VAR vop: IntermediateCode.Operand; part: LONGINT; dest, left: Assembler.Operand); 
		PROCEDURE ^ EmitAdd(VAR instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitFAdd(VAR instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitSub(VAR instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitFSub(VAR instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitMul(VAR instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitFMul(VAR instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitDiv(CONST instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitMod(CONST instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitAndPart(VAR instruction: IntermediateCode.Instruction; part: LONGINT); 
		PROCEDURE ^ EmitAnd(VAR instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitOr(VAR instruction: IntermediateCode.Instruction; part: LONGINT); 
		PROCEDURE ^ EmitXor(VAR instruction: IntermediateCode.Instruction; part: LONGINT); 
		PROCEDURE ^ GetTemporaryRegister(VAR op: Operand); 
		PROCEDURE ^ EmitShift(VAR instr: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitCopy(VAR instr: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitFill(VAR instr: IntermediateCode.Instruction; down: BOOLEAN); 
		PROCEDURE ^ BrForward(op: LONGINT): BinaryCode.Fixup; 
		PROCEDURE ^ SetTarget(fixup: BinaryCode.Fixup); 
		PROCEDURE ^ EmitBr(VAR instr: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitPop(VAR vop: IntermediateCode.Operand; part: LONGINT); 
		PROCEDURE ^ EmitPush(VAR vop: IntermediateCode.Operand; part: LONGINT); 
		PROCEDURE ^ EmitNeg(VAR instr: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitNot(VAR instr: IntermediateCode.Instruction; part: LONGINT); 
		PROCEDURE ^ EmitAbs(VAR instr: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitTrap(CONST instr: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitAsm(CONST instr: IntermediateCode.Instruction); 
	END CodeGeneratorTRM; 

	System = OBJECT (Global.System)

		PROCEDURE ^ SizeOf*(type: SyntaxTree.Type): LONGINT; 
	END System; 

	BackendTRM = OBJECT (IntermediateBackend.IntermediateBackend)
	VAR 
		cg: CodeGeneratorTRM; 
		patchSpartan6: BOOLEAN; 
		myInstructionSet: InstructionSet.InstructionSet; 
		recentInstructionWidth: LONGINT; 

		PROCEDURE ^  & InitBackendTRM; 
		PROCEDURE ^ Initialize*(diagnostics: Diagnostics.Diagnostics; log: Streams.Writer; flags: SET; checker: SemanticChecker.Checker; system: Global.System); 
		PROCEDURE ^ SetInstructionWidth*(instructionWidth: LONGINT); 
		PROCEDURE ^ GetSystem*(): Global.System; 
		PROCEDURE ^ SupportedInstruction*(CONST instruction: IntermediateCode.Instruction; VAR moduleName, procedureName: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ SupportedImmediate*(CONST immediate: IntermediateCode.Operand): BOOLEAN; 
		PROCEDURE ^ GenerateBinary(module: Sections.Module; dump: Streams.Writer); 
		PROCEDURE ^ ProcessIntermediateCodeModule*(intermediateCodeModule: Formats.GeneratedModule): Formats.GeneratedModule; 
		PROCEDURE ^ DefineOptions*(options: Options.Options); 
		PROCEDURE ^ GetOptions*(options: Options.Options); 
		PROCEDURE ^ DefaultObjectFileFormat*(): Formats.ObjectFileFormat; 
		PROCEDURE ^ DefaultSymbolFileFormat*(): Formats.SymbolFileFormat; 
		PROCEDURE ^ GetDescription*(VAR instructionSet: ARRAY OF CHAR); 
		PROCEDURE ^ FindPC*(x: SyntaxTree.Module; CONST sectionName: ARRAY OF CHAR; sectionOffset: LONGINT); 
		PROCEDURE ^ CheckCodeAddress*(VAR adr: LONGINT); 
		PROCEDURE ^ ResolvedSection(in: IntermediateCode.Section): BinaryCode.Section; 
	END BackendTRM; 
VAR 
	defaultInstructionSet: InstructionSet.InstructionSet; 
	emptyOperand: InstructionSet.Operand; 

	PROCEDURE ^ Assert(b: BOOLEAN; CONST s: ARRAY OF CHAR); 
	PROCEDURE ^ Halt(CONST s: ARRAY OF CHAR); 
	PROCEDURE ^ Init; 
	PROCEDURE ^ Get*(): Backend.Backend; 
BEGIN
END FoxTRMBackend.
