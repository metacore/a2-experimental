MODULE MinosLinker;
	IMPORT Streams, Commands, Files, KernelLog;
CONST 
TYPE 
	Name = ARRAY 32 OF CHAR; 

	Command = RECORD 
		name: Name; 
		offset: LONGINT; 
	END; 

	Module = POINTER TO RECORD 
		name: Name; 
		key: LONGINT; 
		dbase, pbase: LONGINT; 
		size, refcnt: LONGINT; 
		next: Module; 
		entries: LONGINT; 
		entry: ARRAY 256 OF LONGINT; 
		command: ARRAY 64 OF Command; 
	END; 

	Linker* = OBJECT 
	VAR 
		first, last: Module; 
		base, heap, descriptorBase, bodyBase: LONGINT; 
		W: Streams.Writer; 
		Out: Files.File; 
		Rout: Files.Writer; 
		code: ARRAY (256 * 1024) OF LONGINT; 
		plain, descriptors: BOOLEAN; 

		PROCEDURE ^  & InitLinker*(w: Streams.Writer; plain, descriptors: BOOLEAN); 
		PROCEDURE ^ SetPos(pos: LONGINT); 
		PROCEDURE ^ WriteCodeBlock(len, adr: LONGINT); 
		PROCEDURE ^ Fixup(fixloc, offset, base: LONGINT; VAR entry: ARRAY OF LONGINT); 
		PROCEDURE ^ FixSelf(fixloc, base: LONGINT); 
		PROCEDURE ^ ThisMod(VAR modname: ARRAY OF CHAR; VAR success: BOOLEAN): Module; 
		PROCEDURE ^ Bodies; 
		PROCEDURE ^ String(VAR str: ARRAY OF CHAR; VAR index: LONGINT); 
		PROCEDURE ^ ModuleDescriptors; 
		PROCEDURE ^ AddHeader(fileHeader: ARRAY OF CHAR; VAR success: BOOLEAN); 
		PROCEDURE ^ Begin*(base: LONGINT; fileOut, fileHeader: ARRAY OF CHAR; VAR success: BOOLEAN); 
		PROCEDURE ^ Link*(fileIn: ARRAY OF CHAR; VAR success: BOOLEAN); 
		PROCEDURE ^ End*; 
	END Linker; 
VAR 
	log: Streams.Writer; 

	PROCEDURE ^ Branch(dest, pc: LONGINT): LONGINT; 
	PROCEDURE ^ BranchLink(dest, pc: LONGINT): LONGINT; 
	PROCEDURE ^ BodyBranch(m: Module; pc: LONGINT): LONGINT; 
	PROCEDURE ^ ThisFile(name: ARRAY OF CHAR): Files.File; 
	PROCEDURE ^ DoLink(linker: Linker; addHeaderFile: BOOLEAN; context: Commands.Context); 
	PROCEDURE ^ Link*(context: Commands.Context); 
	PROCEDURE ^ SetLog*(Log: Streams.Writer); 
BEGIN
END MinosLinker.
