MODULE XMLComponents;
	IMPORT Files, DynamicStrings, XMLObjects, XML, CSS2, CSS2Properties, CSS2Scanner, CSS2Parser, WMWindowManager, Gfx;
CONST 
TYPE 
	String* = XML.String; 

	StateMessage* = OBJECT 
	VAR 
		state-: BOOLEAN; 

		PROCEDURE ^  & InitStateMessage*(state: BOOLEAN); 
	END StateMessage; 

	ValueMessage* = OBJECT 
	VAR 
		value*: SIGNED32; 
	END ValueMessage; 

	MouseMessage* = OBJECT 
	VAR 
		x*, y*: SIGNED32; 
		keys*: SET; 
	END MouseMessage; 

	KeyMessage* = OBJECT 
	VAR 
		ch*: CHAR; 
		keySym*: SIGNED32; 
		flags*: SET; 
	END KeyMessage; 

	Listener* = PROCEDURE {DELEGATE}(sender, data: ANY); 

	ListenerEntry = OBJECT 
	VAR 
		listener: Listener; 
	END ListenerEntry; 

	EventDispatcher* = OBJECT 
	VAR 
		listeners: XMLObjects.Collection; 
		sender: ANY; 

		PROCEDURE ^  & Init*(sender: ANY); 
		PROCEDURE ^ AddListener*(listener: Listener); 
		PROCEDURE ^ Dispatch*(data: ANY); 
	END EventDispatcher; 

	PropChangerEntry = OBJECT 
	VAR 
		listenedComponent: CSS2Component; 
		event: String; 
		state: BOOLEAN; 
	END PropChangerEntry; 

	PropertyChanger* = OBJECT 
	VAR 
		entries: XMLObjects.Collection; 
		changingComponent: CSS2Component; 
		changingProperties: CSS2.RuleSet; 
		oldState: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Copy*(): PropertyChanger; 
		PROCEDURE ^ AddListenedComponent*(comp: CSS2Component; VAR event: ARRAY OF CHAR); 
		PROCEDURE ^ SetChangingComponent*(comp: CSS2Component; ruleSet: CSS2.RuleSet); 
		PROCEDURE ^ StatusChanged(sender, data: ANY); 
		PROCEDURE ^ AllStatesSet(): BOOLEAN; 
		PROCEDURE ^ ChangeProperties; 
	END PropertyChanger; 

	Component* = OBJECT {EXCLUSIVE} (XML.Element)
	VAR 
		locks: SIGNED32; 

		PROCEDURE ^ AddAttribute*(attribute: XML.Attribute); 
		PROCEDURE ^ LockUpdate*; 
		PROCEDURE ^ UnlockUpdate*; 
		PROCEDURE ^ IsLocked*(): BOOLEAN; 
		PROCEDURE ^ GetNumberOfEvents*(): SIGNED32; 
		PROCEDURE ^ GetEventName*(i: SIGNED32): String; 
		PROCEDURE ^ AddEventListener*(listener: Listener; event: ARRAY OF CHAR); 
		PROCEDURE ^ GetNumberOfListeners*(): SIGNED32; 
		PROCEDURE ^ GetListenerName*(i: SIGNED32): String; 
		PROCEDURE ^ GetListener*(name: ARRAY OF CHAR): Listener; 
		PROCEDURE ^ Connect*; 
		PROCEDURE ^ Finalize*; 
		PROCEDURE ^ ConnectAttribute(attribute: XML.Attribute); 
		PROCEDURE ^ RegisterListener(listener: Listener; VAR event, path: ARRAY OF CHAR; offset, len: SIZE); 
	END Component; 

	CSS2Component* = OBJECT {EXCLUSIVE} (Component)
	VAR 
		properties-: CSS2Properties.AllMediaProperties; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ AddContent*(c: XML.Content); 
		PROCEDURE ^ GetProperties*(): CSS2Properties.AllMediaProperties; 
		PROCEDURE ^ SetProperties*(p: CSS2Properties.AllMediaProperties); 
		PROCEDURE ^ SetProperty*(name, value: ARRAY OF CHAR); 
		PROCEDURE ^ SetPropertyOnEvent*(name, value, event: ARRAY OF CHAR); 
		PROCEDURE ^ GenerateRuleSet(name, value: ARRAY OF CHAR): CSS2.RuleSet; 
		PROCEDURE ^ PropertiesChanged*; 
		PROCEDURE ^ Invalidate*; 
	END CSS2Component; 

	Box* = OBJECT 
	VAR 
		x*, y*, w*, h*: SIGNED32; 

		PROCEDURE ^ InBox*(x, y: SIGNED32): BOOLEAN; 
		PROCEDURE ^ IsEmpty*(): BOOLEAN; 
		PROCEDURE ^ SetBox*(box: Box); 
		PROCEDURE ^ SetRect*(x, y, w, h: SIGNED32); 
		PROCEDURE ^ Intersect*(box: Box): BOOLEAN; 
		PROCEDURE ^ IntersectRect*(x, y, w, h: SIGNED32): BOOLEAN; 
		PROCEDURE ^ Clip*(box: Box); 
		PROCEDURE ^ ClipRect*(x, y, w, h: SIGNED32); 
		PROCEDURE ^ Extend*(box: Box); 
		PROCEDURE ^ ExtendRect*(x, y, w, h: SIGNED32); 
	END Box; 

	VisualComponent* = OBJECT {EXCLUSIVE} (CSS2Component)
	VAR 
		pointerMoveListeners, hoverListeners, activeListeners, focusListeners: EventDispatcher; 
		bounds, borderBox, paddingBox, contentBox, invalidBox: Box; 
		inlineBoxes, textBoxes: XMLObjects.Collection; 
		pointerOwner, focusOwner: VisualComponent; 
		isHovered*, hasFocus*, isActive*, isLink*, isVisited*, dragable*: BOOLEAN; 
		lastMouseKeys-: SET; 
		lastX-, lastY-: SIGNED32; 
		trueStateMsg, falseStateMsg: StateMessage; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ AddContent*(c: XML.Content); 
		PROCEDURE ^ SetProperties*(p: CSS2Properties.AllMediaProperties); 
		PROCEDURE ^ GetBounds*(): Box; 
		PROCEDURE ^ SetBounds*(bounds: Box); 
		PROCEDURE ^ GetWidth*(): SIGNED32; 
		PROCEDURE ^ SetWidth*(w: SIGNED32); 
		PROCEDURE ^ GetHeight*(): SIGNED32; 
		PROCEDURE ^ SetHeight*(h: SIGNED32); 
		PROCEDURE ^ GetX*(): SIGNED32; 
		PROCEDURE ^ SetX*(x: SIGNED32); 
		PROCEDURE ^ GetY*(): SIGNED32; 
		PROCEDURE ^ SetY*(y: SIGNED32); 
		PROCEDURE ^ GetContentBox*(): Box; 
		PROCEDURE ^ SetContentBox*(contentBox: Box); 
		PROCEDURE ^ GetContentWidth*(): SIGNED32; 
		PROCEDURE ^ SetContentWidth*(w: SIGNED32); 
		PROCEDURE ^ GetContentHeight*(): SIGNED32; 
		PROCEDURE ^ SetContentHeight*(h: SIGNED32); 
		PROCEDURE ^ GetContentX*(): SIGNED32; 
		PROCEDURE ^ GetContentY*(): SIGNED32; 
		PROCEDURE ^ GetBorderBox*(): Box; 
		PROCEDURE ^ GetBorderWidth*(): SIGNED32; 
		PROCEDURE ^ GetBorderHeight*(): SIGNED32; 
		PROCEDURE ^ GetBorderX*(): SIGNED32; 
		PROCEDURE ^ GetBorderY*(): SIGNED32; 
		PROCEDURE ^ GetPaddingBox*(): Box; 
		PROCEDURE ^ GetPaddingWidth*(): SIGNED32; 
		PROCEDURE ^ GetPaddingHeight*(): SIGNED32; 
		PROCEDURE ^ GetPaddingX*(): SIGNED32; 
		PROCEDURE ^ GetPaddingY*(): SIGNED32; 
		PROCEDURE ^ ComputeWidths*; 
		PROCEDURE ^ ComputeHeights*; 
		PROCEDURE ^ GetNumberOfEvents*(): SIGNED32; 
		PROCEDURE ^ GetEventName*(i: SIGNED32): String; 
		PROCEDURE ^ AddEventListener*(listener: Listener; event: ARRAY OF CHAR); 
		PROCEDURE ^ UnlockUpdate*; 
		PROCEDURE ^ SetActive*(isActive: BOOLEAN); 
		PROCEDURE ^ IsActive(): BOOLEAN; 
		PROCEDURE ^ SetPointer*(pointerInfo: WMWindowManager.PointerInfo); 
		PROCEDURE ^ GetPointerOwner*(): VisualComponent; 
		PROCEDURE ^ IsHit*(x, y: SIGNED32): BOOLEAN; 
		PROCEDURE ^ PositionOwner*(x, y: SIGNED32): VisualComponent; 
		PROCEDURE ^ PointerLeave*; 
		PROCEDURE ^ PointerDown*(x, y: SIGNED32; keys: SET); 
		PROCEDURE ^ PointerMove*(x, y: SIGNED32; keys: SET); 
		PROCEDURE ^ PointerUp*(x, y: SIGNED32; keys: SET); 
		PROCEDURE ^ KeyPressed*(ch: CHAR; flags: SET; VAR keySym: SIGNED32); 
		PROCEDURE ^ FocusReceived*; 
		PROCEDURE ^ FocusLost*; 
		PROCEDURE ^ ProcessMessage*(m: ANY); 
		PROCEDURE ^ ComputeDimensions*; 
		PROCEDURE ^ Format*; 
		PROCEDURE ^ Resized*; 
		PROCEDURE ^ PropertiesChanged*; 
		PROCEDURE ^ InvalidateRange*(x, y, w, h: SIGNED32); 
		PROCEDURE ^ Invalidate*; 
		PROCEDURE ^ Draw*(ctxt: Gfx.Context); 
	END VisualComponent; 
VAR 
	Unassigned: Listener; 

	PROCEDURE ^ NoReportError(pos, line, row: SIGNED32; msg: ARRAY OF CHAR); 
	PROCEDURE ^ NewString*(value: ARRAY OF CHAR): String; 
	PROCEDURE ^ ExtractEvent(CONST string: ARRAY OF CHAR): String; 
BEGIN
END XMLComponents.
