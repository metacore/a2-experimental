MODULE SchemeOps IN Oberon;
	IMPORT Files, Objects, Strings, Texts, Gadgets, Scheme;
CONST 
TYPE 
	Context = Scheme.Context; 

	Object = Scheme.Object; 

	PROCEDURE ^ CheckNull*(ctxt: Context; args: Object); 
	PROCEDURE ^ Arg*(ctxt: Context; VAR args: Object): Object; 
	PROCEDURE ^ BoolArg*(ctxt: Context; VAR args: Object): Object; 
	PROCEDURE ^ BoolVal*(ctxt: Scheme.Context; VAR args: Object): BOOLEAN; 
	PROCEDURE ^ IntArg*(ctxt: Scheme.Context; VAR args: Object): Object; 
	PROCEDURE ^ IntVal*(ctxt: Scheme.Context; VAR args: Object): SIGNED32; 
	PROCEDURE ^ NumArg*(ctxt: Scheme.Context; VAR args: Object): Object; 
	PROCEDURE ^ NumVal*(ctxt: Scheme.Context; VAR args: Object): FLOAT64; 
	PROCEDURE ^ CharArg*(ctxt: Scheme.Context; VAR args: Object): Object; 
	PROCEDURE ^ CharVal*(ctxt: Scheme.Context; VAR args: Object): CHAR; 
	PROCEDURE ^ StringArg*(ctxt: Scheme.Context; VAR args: Object): Object; 
	PROCEDURE ^ ProcArg*(ctxt: Scheme.Context; VAR args: Object): Object; 
	PROCEDURE ^ SymbolArg*(ctxt: Scheme.Context; VAR args: Object): Object; 
	PROCEDURE ^ VectorArg*(ctxt: Scheme.Context; VAR args: Object): Object; 
	PROCEDURE ^ RefArg*(ctxt: Scheme.Context; VAR args: Object): Object; 
	PROCEDURE ^ RefVal*(ctxt: Scheme.Context; VAR args: Object): Objects.Object; 
	PROCEDURE ^ InputArg(ctxt: Scheme.Context; VAR args: Object): Object; 
	PROCEDURE ^ OutputArg(ctxt: Scheme.Context; VAR args: Object): Object; 
	PROCEDURE ^ Predicate(ctxt: Context; args: Object; VAR res: Object; check: PROCEDURE (obj: Object):BOOLEAN); 
	PROCEDURE ^ IsBoolean(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsSymbol(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsChar(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsVector(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsPair(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsNumber(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsString(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsProcedure(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsPort(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsReference(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Eqv(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Eq(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsComplex(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsReal(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsRational(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsInteger(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsExact(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsInexact(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Compare(ctxt: Context; args: Object; test: PROCEDURE (p, q: Object):BOOLEAN; VAR res: Object); 
	PROCEDURE ^ LessTest(p, q: Object): BOOLEAN; 
	PROCEDURE ^ Less(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ LessEqTest(p, q: Object): BOOLEAN; 
	PROCEDURE ^ LessEq(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ GreaterTest(p, q: Object): BOOLEAN; 
	PROCEDURE ^ Greater(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ GreaterEqTest(p, q: Object): BOOLEAN; 
	PROCEDURE ^ GreaterEq(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ NumEqTest(p, q: Object): BOOLEAN; 
	PROCEDURE ^ NumEq(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Plus(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Minus(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Mul(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Div(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Quotient(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Remainder(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Modulo(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Denominator(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Numerator(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Floor(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Ceiling(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Truncate(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Round(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Rationalize(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Sqrt(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Exp(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Log(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Expt(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Sin(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ ASin(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Cos(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ ACos(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Tan(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Atan(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ ExactToInexact(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ InexactToExact(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ NumberToString(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ StringToNumber(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Cons(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Car(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Cdr(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ SetCar(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ SetCdr(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ SymbolToString(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ StringToSymbol(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ CharEq(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ CharLt(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ CharGt(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ CharLeq(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ CharGeq(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ CharToInt(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IntToChar(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ MakeString(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ StringLength(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ StringRef(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ StringSet(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ MakeVector(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ VectorLength(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ VectorRef(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ VectorSet(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Apply(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ InputPort(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ OutputPort(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ CurrentInputPort(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ CurrentOutputPort(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ WithInputFromFile(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ WithOutputToFile(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ OpenInputFile(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ OpenOutputFile(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ CloseInputPort(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ CloseOutputPort(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Read(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ ReadChar(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ PeekChar(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ IsEof(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ CharReady(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Write(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ WriteChar(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Load(ctxt: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ New(c: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ LibObj(c: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Copy(c: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Attr(c: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ SetAttr(c: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Link(c: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ SetLink(c: Context; args: Object; VAR res: Object); 
	PROCEDURE ^ Init; 
BEGIN
END SchemeOps.
