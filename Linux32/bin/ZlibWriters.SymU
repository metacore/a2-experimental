MODULE ZlibWriters;
	IMPORT Files, Zlib, ZlibBuffers, ZlibDeflate;
CONST 
	Ok* = ZlibDeflate.Ok; 
	StreamEnd* = ZlibDeflate.StreamEnd; 
	StreamError* = ZlibDeflate.StreamError; 
	DataError* = ZlibDeflate.DataError; 
	BufError* = ZlibDeflate.BufError; 
	NoFlush* = ZlibDeflate.NoFlush; 
	SyncFlush* = ZlibDeflate.SyncFlush; 
	FullFlush* = ZlibDeflate.FullFlush; 
	DefaultCompression* = ZlibDeflate.DefaultCompression; 
	NoCompression* = ZlibDeflate.NoCompression; 
	BestSpeed* = ZlibDeflate.BestSpeed; 
	BestCompression* = ZlibDeflate.BestCompression; 
	DefaultStrategy* = ZlibDeflate.DefaultStrategy; 
	Filtered* = ZlibDeflate.Filtered; 
	HuffmanOnly* = ZlibDeflate.HuffmanOnly; 
	BufSize = 65536; 
TYPE 
	Writer* = RECORD 
		res-: SIGNED32; 
		flush-: SIGNED8; 
		wrapper-: BOOLEAN; 
		r: Files.Rider; 
		pos: SIGNED32; 
		crc32-: SIGNED32; 
		out: POINTER TO ARRAY BufSize OF CHAR; 
		s: ZlibDeflate.Stream; 
	END; 

	PROCEDURE ^ SetParams*(VAR w: Writer; level, strategy, flush: SIGNED8); 
	PROCEDURE ^ Open*(VAR w: Writer; level, strategy, flush: SIGNED8; wrapper: BOOLEAN; r: Files.Rider); 
	PROCEDURE ^ WriteBytes*(VAR w: Writer; VAR buf: ARRAY OF CHAR; offset, len: SIZE; VAR written: SIZE); 
	PROCEDURE ^ Write*(VAR w: Writer; ch: CHAR); 
	PROCEDURE ^ Close*(VAR w: Writer); 
	PROCEDURE ^ Compress*(VAR src, dst: Files.Rider; srclen: SIGNED32; VAR dstlen: SIGNED32; level, strategy: SIGNED8; VAR crc32: SIGNED32; VAR res: INTEGER); 
BEGIN
END ZlibWriters.
