MODULE Visualizer;
	IMPORT Streams, KernelLog, Commands, Options, Strings, Files, Texts, TextUtilities, Diagnostics, FoxScanner, ModuleParser;
CONST 
	None = 0; 
	Public = 1; 
	All = 2; 
	DefaultTypes = All; 
	DefaultVariables = Public; 
	DefaultProcedures = Public; 
	DefaultHasA = Public; 
	DefaultDependencies = None; 
	DefaultOutputFilename = \"graph.txt"\; 
	DependsOnFactor =   1.0000000E-001; 
	HasAFactor =   3.0000001E-001; 
	NodeFontName = \"Arial"\; 
	NodeFontSize = 48; 
	Initialized = 0; 
	Running = 1; 
	Stopped = 2; 
	Simple = 0; 
	Better = 1; 
	Extreme = 2; 
	AddSuperType = 0; 
	Parsed = 1; 
	ScannedSuperTypes = 2; 
TYPE 
	SizeString = ARRAY 16 OF CHAR; 

	Entry = POINTER TO RECORD 
		name: ARRAY 256 OF CHAR; 
		isSetSuperClass: BOOLEAN; 
		next: Entry; 
	END; 

	List = OBJECT {EXCLUSIVE} 
	VAR 
		head: Entry; 

		PROCEDURE ^ Add(CONST name: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ SetSuperClass(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ IsSetSuperClass(CONST name: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ Find(CONST name: ARRAY OF CHAR): Entry; 
		PROCEDURE ^  & Init; 
	END List; 

	ModuleEntry = OBJECT 
	VAR 
		name: ARRAY 128 OF CHAR; 
		module: ModuleParser.Module; 
		flags: SET; 
		next: ModuleEntry; 

		PROCEDURE ^  & Init(CONST name: ARRAY OF CHAR; module: ModuleParser.Module); 
	END ModuleEntry; 

	ModuleArray = POINTER TO ARRAY OF ModuleEntry; 

	EnumeratorProc = PROCEDURE {DELEGATE}(entry: ModuleEntry; indent: SIGNED32); 

	ModuleList = OBJECT {EXCLUSIVE} 
	VAR 
		head: ModuleEntry; 
		nofEntries: SIGNED32; 

		PROCEDURE ^ Add(CONST name: ARRAY OF CHAR; module: ModuleParser.Module): BOOLEAN; 
		PROCEDURE ^ GetAll(): ModuleArray; 
		PROCEDURE ^ Enumerate(proc: EnumeratorProc; indent: SIGNED32); 
		PROCEDURE ^ FindByName(CONST name: ARRAY OF CHAR): ModuleEntry; 
		PROCEDURE ^ FindByNameX(CONST name: ARRAY OF CHAR): ModuleEntry; 
		PROCEDURE ^ InclFlag(CONST name: ARRAY OF CHAR; flag: SIGNED32); 
		PROCEDURE ^ ExclFlag(CONST name: ARRAY OF CHAR; flag: SIGNED32); 
		PROCEDURE ^  & Init; 
	END ModuleList; 

	Edge = POINTER TO RECORD 
		from, to: ARRAY 128 OF CHAR; 
		count: SIGNED32; 
		next: Edge; 
	END; 

	EdgeEnumerator = PROCEDURE {DELEGATE}(edge: Edge); 

	EdgeList = OBJECT 
	VAR 
		head: Edge; 

		PROCEDURE ^ Add(CONST from, to: ARRAY OF CHAR); 
		PROCEDURE ^ Find(CONST from, to: ARRAY OF CHAR): Edge; 
		PROCEDURE ^ Enumerate(proc: EdgeEnumerator); 
		PROCEDURE ^  & Init; 
	END EdgeList; 

	Generator = OBJECT 
	VAR 
		out: Streams.Writer; 
		list: List; 
		modules: ModuleList; 
		types, variables, procedures, hasA, dependencies: SIGNED32; 
		showAllTypes: BOOLEAN; 
		mode: SIGNED32; 
		hasAEdges, dependsOnEdges: EdgeList; 
		excludedModules: Strings.StringArray; 
		state: SIGNED32; 

		PROCEDURE ^  & Init(out: Streams.Writer); 
		PROCEDURE ^ Visibility(identDef: ModuleParser.IdentDef); 
		PROCEDURE ^ IsPublic(identDef: ModuleParser.IdentDef): BOOLEAN; 
		PROCEDURE ^ FormalPars(formalPars: ModuleParser.FormalPars); 
		PROCEDURE ^ Array(array: ModuleParser.Array); 
		PROCEDURE ^ Type(type: ModuleParser.Type); 
		PROCEDURE ^ Variable(identList: ModuleParser.IdentList; type: ModuleParser.Type); 
		PROCEDURE ^ VarDecl(varDecl: ModuleParser.VarDecl); 
		PROCEDURE ^ ProcHead(procHead: ModuleParser.ProcHead); 
		PROCEDURE ^ ProcDecl(procDecl: ModuleParser.ProcDecl); 
		PROCEDURE ^ FieldDecl(fieldDecl: ModuleParser.FieldDecl); 
		PROCEDURE ^ TypeDecl(typeDecl: ModuleParser.TypeDecl; indent: SIGNED32); 
		PROCEDURE ^ Module(module: ModuleParser.Module; indent: SIGNED32); 
		PROCEDURE ^ GenerateModuleNode(module: ModuleParser.Module; indent: SIGNED32); 
		PROCEDURE ^ GenerateNodes(module: ModuleParser.Module; indent: SIGNED32); 
		PROCEDURE ^ AddEdge(CONST from, to: ARRAY OF CHAR; indent: SIGNED32); 
		PROCEDURE ^ GenerateHasAEdges(entry: ModuleEntry; indent: SIGNED32); 
		PROCEDURE ^ GenerateDependsOnEdges(entry: ModuleEntry; indent: SIGNED32); 
		PROCEDURE ^ GenerateEdges(entry: ModuleEntry; indent: SIGNED32); 
		PROCEDURE ^ AddSuperTypesSimple(entry: ModuleEntry; indent: SIGNED32); 
		PROCEDURE ^ AddSuperTypeModulesToList(entry: ModuleEntry; indent: SIGNED32); 
		PROCEDURE ^ AddUsedTypeModulesToList(entry: ModuleEntry; ident: SIGNED32); 
		PROCEDURE ^ AddDependeciesModulesToList(entry: ModuleEntry; ident: SIGNED32); 
		PROCEDURE ^ FindTypeDecl(CONST name: ARRAY OF CHAR; entry: ModuleEntry): ModuleParser.TypeDecl; 
		PROCEDURE ^ ParseModule(entry: ModuleEntry; ident: SIGNED32); 
		PROCEDURE ^ AddTypes; 
		PROCEDURE ^ ProcessOptions(options: Options.Options); 
		PROCEDURE ^ IsExcluded(CONST moduleName: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ Open(options: Options.Options); 
		PROCEDURE ^ AddModule(module: ModuleParser.Module; indent: SIGNED32); 
		PROCEDURE ^ WriteHasAEdge(edge: Edge); 
		PROCEDURE ^ WriteDependsOnEdge(edge: Edge); 
		PROCEDURE ^ Close; 
		PROCEDURE ^ Indent(indent: SIGNED32); 
	END Generator; 

	PROCEDURE ^ FixTypeName(module: ModuleParser.Module; CONST name: ARRAY OF CHAR; VAR fullname: ARRAY OF CHAR); 
	PROCEDURE ^ FixTypeDeclName(typeDecl: ModuleParser.TypeDecl); 
	PROCEDURE ^ GetTypeName(node: ModuleParser.Node): Strings.String; 
	PROCEDURE ^ IsBasicType(CONST string: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ FindImport(CONST name: ARRAY OF CHAR; module: ModuleParser.Module; VAR importName: ARRAY OF CHAR); 
	PROCEDURE ^ Rotate(VAR size: SizeString); 
	PROCEDURE ^ GetSizeString(CONST size: ARRAY OF CHAR; VAR sizeString: SizeString); 
	PROCEDURE ^ ParseFile(CONST filename: ARRAY OF CHAR; VAR module: ModuleParser.Module); 
	PROCEDURE ^ GetMode(CONST string: ARRAY OF CHAR): SIGNED32; 
	PROCEDURE ^ Generate*(context: Commands.Context); 
BEGIN
END Visualizer.
