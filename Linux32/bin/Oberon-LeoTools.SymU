MODULE LeoTools IN Oberon;
	IMPORT Files, Math IN A2, Objects, Display, Fonts, Printer, Input, Oberon, Pictures, Strings, Attributes, Links, Display3, Printer3, Effects, Gadgets, Colors, Images, GfxMatrix, GfxImages, GfxPaths, GfxRegions, GfxFonts, Gfx, GfxPrinter, GfxBuffer, Leonardo, LeoFrames;
CONST 
	inch* = 9.144E+1; 
	cm* = (inch / 2.54); 
	A4W* = (21 * cm); 
	A4H* = (2.97E+1 * cm); 
	LetterW* = (8.5 * inch); 
	LetterH* = (11 * inch); 
	RulerW = 32; 
	RulerH = 19; 
	InfoH = 16; 
	AuxH = (RulerH + InfoH); 
	ML = 2; 
	MM = 1; 
	MR = 0; 
	translate = 0; 
	scale = 1; 
	rotate = 2; 
	shear = 3; 
	mirror = 4; 
	aux = 5; 
TYPE 
	Tool* = POINTER TO ToolDesc; 

	ToolDesc* = RECORD (Gadgets.ObjDesc)
		frame*: LeoFrames.Frame; 
		unit*: FLOAT32; 
		zx*, zy*: FLOAT32; 
		pageW*, pageH*: FLOAT32; 
		buffered*: BOOLEAN; 
		grid*: RECORD 
			ticks*: SIGNED16; 
			visible*: BOOLEAN; 
			active*: BOOLEAN; 
		END; 
		hints*: RECORD 
			visible*: BOOLEAN; 
			incontents*: BOOLEAN; 
			x*, y*: SIGNED16; 
		END; 
	END; 

	ToolMsg* = RECORD (Display.FrameMsg)
		handle*: Objects.Handler; 
	END; 

	Context* = POINTER TO ContextDesc; 

	ContextDesc* = RECORD (Gfx.ContextDesc)
		orgX, orgY: FLOAT32; 
		scale: FLOAT32; 
		cx, cy, cw, ch: SIGNED16; 
		u, v, u0, v0: FLOAT32; 
		px, py: SIGNED16; 
		deferred: BOOLEAN; 
	END; 

	PathData = RECORD (GfxPaths.EnumData)
		context: Context; 
	END; 

	; 
VAR 
	DC*: Context; 
	Tolerance*: Objects.Object; 
	AlignAxes*: Objects.Object; 
	ToolHandler*: Objects.Handler; 
	Methods: Gfx.Methods; 
	Unit, PageWidth, PageHeight, GridTicks, GridVisible, GridActive, Buffered: Objects.Object; 
	Focus*: RECORD 
		frame*: LeoFrames.Frame; 
		style*: SIGNED16; 
		points*: SIGNED16; 
		x*, y*: ARRAY 2 OF FLOAT32; 
		visible*: BOOLEAN; 
	END; 
	Pat: ARRAY 6 OF Display.Pattern; 
	BC: GfxBuffer.Context; 
	Font: Fonts.Font; 
	Pict: Pictures.Picture; 

	PROCEDURE ^ ResetCTM(ctxt: Gfx.Context); 
	PROCEDURE ^ ResetClip(ctxt: Gfx.Context); 
	PROCEDURE ^ GetClipRect(ctxt: Gfx.Context; VAR llx, lly, urx, ury: FLOAT32); 
	PROCEDURE ^ GetClip(ctxt: Gfx.Context): Gfx.ClipArea; 
	PROCEDURE ^ SetClip(ctxt: Gfx.Context; clip: Gfx.ClipArea); 
	PROCEDURE ^ EnterLine(dc: Context; u, v: FLOAT32; draw: BOOLEAN); 
	PROCEDURE ^ DrawLine(dc: Context; u, v: FLOAT32); 
	PROCEDURE ^ StrokePathElem(VAR data: GfxPaths.EnumData); 
	PROCEDURE ^ Begin(ctxt: Gfx.Context; mode: SET); 
	PROCEDURE ^ End(ctxt: Gfx.Context); 
	PROCEDURE ^ Enter(ctxt: Gfx.Context; x, y, dx, dy: FLOAT32); 
	PROCEDURE ^ Exit(ctxt: Gfx.Context; dx, dy: FLOAT32); 
	PROCEDURE ^ Close(ctxt: Gfx.Context); 
	PROCEDURE ^ LineTo(ctxt: Gfx.Context; x, y: FLOAT32); 
	PROCEDURE ^ ArcTo(ctxt: Gfx.Context; x, y, x0, y0, x1, y1, x2, y2: FLOAT32); 
	PROCEDURE ^ BezierTo(ctxt: Gfx.Context; x, y, x1, y1, x2, y2: FLOAT32); 
	PROCEDURE ^ Show(ctxt: Gfx.Context; x, y: FLOAT32; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ Render(ctxt: Gfx.Context; mode: SET); 
	PROCEDURE ^ Image(ctxt: Gfx.Context; x, y: FLOAT32; img: GfxImages.Image; VAR filter: GfxImages.Filter); 
	PROCEDURE ^ InitMethods; 
	PROCEDURE ^ Reset*(frame: LeoFrames.Frame; fx, fy: SIGNED16); 
	PROCEDURE ^ Copy*(VAR msg: Objects.CopyMsg; from, to: Tool); 
	PROCEDURE ^ Handle*(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ Init*(tool: Tool); 
	PROCEDURE ^ New*; 
	PROCEDURE ^ Current*(frame: LeoFrames.Frame): Tool; 
	PROCEDURE ^ InitFrame*(frame: LeoFrames.Frame; fig: Leonardo.Figure); 
	PROCEDURE ^ NewFrame*; 
	PROCEDURE ^ InContents*(x, y, fx, fy, fw, fh: SIGNED16): BOOLEAN; 
	PROCEDURE ^ AdjustMask*(mask: Display3.Mask; frame: LeoFrames.Frame; fx, fy: SIGNED16); 
	PROCEDURE ^ FrameToPoint*(frame: LeoFrames.Frame; fx, fy: SIGNED16; VAR px, py: FLOAT32); 
	PROCEDURE ^ PointToFrame*(frame: LeoFrames.Frame; px, py: FLOAT32; VAR fx, fy: SIGNED16); 
	PROCEDURE ^ PointToRuler*(tool: Tool; px, py: FLOAT32; VAR rx, ry: FLOAT32); 
	PROCEDURE ^ RulerToPoint*(tool: Tool; rx, ry: FLOAT32; VAR px, py: FLOAT32); 
	PROCEDURE ^ Angle*(dx, dy: FLOAT32): FLOAT32; 
	PROCEDURE ^ AlignToGrid*(tool: Tool; VAR px, py: FLOAT32); 
	PROCEDURE ^ AlignToAxis*(tool: Tool; sx, sy: FLOAT32; VAR x, y: FLOAT32); 
	PROCEDURE ^ AlignToShape*(tool: Tool; x, y: FLOAT32; VAR px, py: FLOAT32); 
	PROCEDURE ^ Align*(tool: Tool; ox, oy: FLOAT32; VAR px, py: FLOAT32); 
	PROCEDURE ^ FlipHints(tool: Tool; fx, fy: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ ShowHints*(tool: Tool; fx, fy: SIGNED16; mask: Display3.Mask; x, y: SIGNED16; inContents: BOOLEAN); 
	PROCEDURE ^ ClearHints*(tool: Tool; fx, fy: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ String*(mask: Display3.Mask; fg, bg: Display.Color; sx, sy: SIGNED16; s: ARRAY OF CHAR); 
	PROCEDURE ^ StringWidth*(s: ARRAY OF CHAR): SIGNED16; 
	PROCEDURE ^ ShowStatus*(frame: LeoFrames.Frame; fx, fy: SIGNED16; mask: Display3.Mask; s: ARRAY OF CHAR); 
	PROCEDURE ^ ClearStatus*(frame: LeoFrames.Frame; fx, fy: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ Append*(t: ARRAY OF CHAR; VAR s: ARRAY OF CHAR; VAR len: SIGNED16); 
	PROCEDURE ^ AppendReal*(x: FLOAT32; VAR s: ARRAY OF CHAR; VAR len: SIGNED16); 
	PROCEDURE ^ AppendPoint*(tool: Tool; px, py: FLOAT32; VAR s: ARRAY OF CHAR; VAR len: SIGNED16); 
	PROCEDURE ^ AppendDir*(tool: Tool; dx, dy: FLOAT32; VAR s: ARRAY OF CHAR; VAR len: SIGNED16); 
	PROCEDURE ^ AppendFocus*(tool: Tool; VAR s: ARRAY OF CHAR; VAR len: SIGNED16); 
	PROCEDURE ^ AppendTool*(tool: Tool; x, y: FLOAT32; str: ARRAY OF CHAR; VAR s: ARRAY OF CHAR; VAR len: SIGNED16); 
	PROCEDURE ^ Number(mask: Display3.Mask; x, y: SIGNED16; n: SIGNED32); 
	PROCEDURE ^ CalcTicks(unit: FLOAT32; ticks: SIGNED16; VAR ticks0, ticks1: SIGNED32); 
	PROCEDURE ^ RestoreVRuler(tool: Tool; fx, fy: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ RestoreHRuler(tool: Tool; fx, fy: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ RestoreOrigin(tool: Tool; fx, fy: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ RestoreZoom(tool: Tool; fx, fy: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ RestorePage(tool: Tool; llx, lly, urx, ury: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ RestoreGrid(tool: Tool; llx, lly, urx, ury: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ RestoreFigure(tool: Tool; llx, lly, urx, ury: SIGNED16; clip: GfxRegions.Region); 
	PROCEDURE ^ Restore(tool: Tool; x, y, w, h, fx, fy: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ PNumber(mask: Display3.Mask; x, y: SIGNED16; n: SIGNED32); 
	PROCEDURE ^ PrintVRuler(tool: Tool; x, y, w, h, p: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ PrintHRuler(tool: Tool; x, y, w, h, p: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ PrintOrigin(tool: Tool; x, y, w, h, p: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ PrintZoom(tool: Tool; x, y, w, h, p: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ PrintPage(tool: Tool; llx, lly, urx, ury, p: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ PrintGrid(tool: Tool; llx, lly, urx, ury, p: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ Print(tool: Tool; VAR msg: Display.DisplayMsg); 
	PROCEDURE ^ Update(tool: Tool; VAR msg: Leonardo.UpdateMsg); 
	PROCEDURE ^ Scroll(frame: LeoFrames.Frame; dx, dy: SIGNED16); 
	PROCEDURE ^ InitFocusPatterns; 
	PROCEDURE ^ FlipFocus(fx, fy: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ ShowFocus(fx, fy: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ HideFocus(fx, fy: SIGNED16; mask: Display3.Mask); 
	PROCEDURE ^ CycleFocus; 
	PROCEDURE ^ GetDragStyle(frame: LeoFrames.Frame; VAR style, points: SIGNED16; VAR fx0, fy0, fx1, fy1: FLOAT32); 
	PROCEDURE ^ CalcMatrix(tool: Tool; style, points: SIGNED16; fx0, fy0, fx1, fy1, x0, y0, x1, y1: FLOAT32; VAR mat: GfxMatrix.Matrix; VAR s: ARRAY OF CHAR; VAR len: SIGNED16); 
	PROCEDURE ^ CalcDrag(tool: Tool; x0, y0, x1, y1: FLOAT32; VAR mat: GfxMatrix.Matrix; VAR s: ARRAY OF CHAR; VAR len: SIGNED16); 
	PROCEDURE ^ TrackVRuler(frame: LeoFrames.Frame; fx, fy: SIGNED16; VAR msg: Oberon.InputMsg); 
	PROCEDURE ^ TrackHRuler(frame: LeoFrames.Frame; fx, fy: SIGNED16; VAR msg: Oberon.InputMsg); 
	PROCEDURE ^ TrackOrigin(tool: Tool; fx, fy: SIGNED16; VAR msg: Oberon.InputMsg); 
	PROCEDURE ^ TrackZoom(frame: LeoFrames.Frame; fx, fy: SIGNED16; VAR msg: Oberon.InputMsg); 
	PROCEDURE ^ TrackFocus(tool: Tool; VAR msg: Oberon.InputMsg); 
	PROCEDURE ^ TrackMove(tool: Tool; VAR msg: Oberon.InputMsg); 
	PROCEDURE ^ TrackSelection(tool: Tool; VAR msg: Oberon.InputMsg); 
	PROCEDURE ^ TrackTool*(tool: Tool; str: ARRAY OF CHAR; marker: Oberon.Marker; VAR msg: Oberon.InputMsg); 
	PROCEDURE ^ Track*(tool: Tool; VAR msg: Oberon.InputMsg); 
	PROCEDURE ^ Consume(frame: LeoFrames.Frame; VAR msg: Display.ConsumeMsg); 
	PROCEDURE ^ HandleFrame*(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ Activate*(handle: Objects.Handler); 
	PROCEDURE ^ ActivateFocus*; 
	PROCEDURE ^ HandleLegacyFrame(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ NewLegacyFrame*; 
BEGIN
END LeoTools.
