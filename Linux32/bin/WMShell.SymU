MODULE WMShell;
	IMPORT Shell, Streams, Pipes, Texts, TextUtilities, Strings, Modules, Kernel, Inputs, WMGraphics, WMWindowManager, WMMessages, WMRestorable, WMComponents, WMDocumentEditor;
CONST 
	DefaultWidth = 640; 
	DefaultHeight = 300; 
	ReceiveBufferSize = 256; 
	Prompt = \"SHELL>"\; 
	Backspace = 8X; 
	ESC = 1BX; 
	DEL = 7FX; 
TYPE 
	ShellComponent = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		out: Streams.Writer; 
		in: Streams.Reader; 
		pipeOut, pipeIn: Pipes.Pipe; 
		w: TextUtilities.TextWriter; 
		text: Texts.Text; 
		shell: Shell.Shell; 
		editor: WMDocumentEditor.Editor; 
		running, dead: BOOLEAN; 
		timer: Kernel.Timer; 

		PROCEDURE ^ Clear; 
		PROCEDURE ^ ExtPointerUp(x, y: SIZE; keys: SET; VAR handled: BOOLEAN); 
		PROCEDURE ^ ExtKeyPressed(ucs: SIZE; flags: SET; VAR keySym: SIZE; VAR handled: BOOLEAN); 
		PROCEDURE ^ Wait(ms: LONGINT); 
		PROCEDURE ^ InitShell; 
		PROCEDURE ^ CopyFromClipboard; 
		PROCEDURE ^ Finalize*; 
		PROCEDURE ^ DeleteNCharacters(nbrOfCharacters: SIZE); 
		PROCEDURE ^ ReceiveCharacters; 
		PROCEDURE ^  & Init*; 
	BEGIN{ACTIVE} 
	END ShellComponent; 

	KillerMsg = OBJECT 
	END KillerMsg; 

	Window* = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		shell: ShellComponent; 

		PROCEDURE ^ HandleUpcall(command: WORD); 
		PROCEDURE ^  & New*(c: WMRestorable.Context); 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ Handle*(VAR x: WMMessages.Message); 
	END Window; 
VAR 
	nofWindows: SIZE; 
	StrShellComponent: Strings.String; 

	PROCEDURE ^ InitStrings; 
	PROCEDURE ^ Restore*(context: WMRestorable.Context); 
	PROCEDURE ^ Open*; 
	PROCEDURE ^ IncCount; 
	PROCEDURE ^ DecCount; 
	PROCEDURE ^ Cleanup; 
BEGIN
END WMShell.
