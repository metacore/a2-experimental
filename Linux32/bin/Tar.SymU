MODULE Tar;
	IMPORT Commands, Streams, Files, KernelLog, Strings, Archives, Locks;
CONST 
	RecordSize = 512; 
	NamSiz = 100; 
	TuNmLen = 32; 
	TgNmLen = 32; 
	EntryNameSize = 128; 
	SegmentSize = (1024 * 8); 
	StreamClosed* = 10; 
TYPE 
	Header = POINTER TO RECORD 
		name: ARRAY NamSiz OF CHAR; 
		mode: ARRAY 8 OF CHAR; 
		uid: ARRAY 8 OF CHAR; 
		gid: ARRAY 8 OF CHAR; 
		size: ARRAY 12 OF CHAR; 
		mtime: ARRAY 12 OF CHAR; 
		chksum: ARRAY 8 OF CHAR; 
		linkflag: ARRAY 1 OF CHAR; 
		linkname: ARRAY NamSiz OF CHAR; 
		magic: ARRAY 8 OF CHAR; 
		uname: ARRAY TuNmLen OF CHAR; 
		gname: ARRAY TgNmLen OF CHAR; 
		devmajor: ARRAY 8 OF CHAR; 
		devminor: ARRAY 8 OF CHAR; 
	END; 

	EntryInfo* = OBJECT (Archives.EntryInfo)
	VAR 
		name: ARRAY EntryNameSize OF CHAR; 
		size: LONGINT; 

		PROCEDURE ^  & Init*(CONST name: ARRAY OF CHAR; size: LONGINT); 
		PROCEDURE ^ GetName*(): Strings.String; 
		PROCEDURE ^ GetSize*(): LONGINT; 
		PROCEDURE ^ GetInfoString*(): Strings.String; 
	END EntryInfo; 

	Entry = OBJECT 
	VAR 
		next: Entry; 
		pos: LONGINT; 
		header: Header; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ SetName(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ SetSize(size: LONGINT); 
		PROCEDURE ^ GetSize(): LONGINT; 
		PROCEDURE ^ CalculateCheckSum; 
	END Entry; 

	SizeReader = OBJECT 
	VAR 
		input: Streams.Reader; 
		max: LONGINT; 
		archive: Archive; 

		PROCEDURE ^  & Init*(input: Streams.Reader; size: LONGINT; archive: Archive); 
		PROCEDURE ^ Receive(VAR buf: ARRAY OF CHAR; ofs, size, min: LONGINT; VAR len, res: LONGINT); 
	END SizeReader; 

	Buffer = OBJECT 

		PROCEDURE ^ Send(CONST data: ARRAY OF CHAR; ofs, len: LONGINT; propagate: BOOLEAN; VAR res: WORD); 
	END Buffer; 

	BufferSegment = OBJECT 
	VAR 
		buf: ARRAY SegmentSize OF CHAR; 
		next: BufferSegment; 
	END BufferSegment; 

	MemoryBuffer = OBJECT (Buffer)
	VAR 
		first, current: BufferSegment; 
		segmentCount, currentIndex: LONGINT; 
		archive: Archive; 
		name: ARRAY NamSiz OF CHAR; 
		closed: BOOLEAN; 

		PROCEDURE ^  & Init*(a: Archive; CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ Send(CONST data: ARRAY OF CHAR; ofs, len: LONGINT; propagate: BOOLEAN; VAR res: WORD); 
		PROCEDURE ^ NewSegment; 
		PROCEDURE ^ WriteBuffer; 
	END MemoryBuffer; 

	Archive* = OBJECT (Archives.Archive)
	VAR 
		index: Entry; 
		file: Files.File; 
		lock: Locks.RecursiveLock; 

		PROCEDURE ^  & Init*(f: Files.File); 
		PROCEDURE ^ Acquire*; 
		PROCEDURE ^ Release*; 
		PROCEDURE ^ GetIndex*(): Archives.Index; 
		PROCEDURE ^ GetEntryInfo*(CONST name: ARRAY OF CHAR): Archives.EntryInfo; 
		PROCEDURE ^ RemoveEntry*(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ RenameEntry*(CONST from, to: ARRAY OF CHAR): Archives.EntryInfo; 
		PROCEDURE ^ OpenSender*(CONST name: ARRAY OF CHAR): Streams.Sender; 
		PROCEDURE ^ OpenReceiver*(CONST name: ARRAY OF CHAR): Streams.Receiver; 
		PROCEDURE ^ Copy*(CONST name: ARRAY OF CHAR): Archives.Archive; 
		PROCEDURE ^ BuildIndex; 
		PROCEDURE ^ FindEntry(CONST name: ARRAY OF CHAR): Entry; 
		PROCEDURE ^ AddEntryNode(e: Entry); 
	END Archive; 

	PROCEDURE ^ ReadHeaderBytes(R: Streams.Reader; VAR buf: ARRAY OF CHAR; len: LONGINT; VAR chksum: LONGINT); 
	PROCEDURE ^ ReadHeader(R: Streams.Reader; VAR hdr: Header): BOOLEAN; 
	PROCEDURE ^ Empty(VAR buf: ARRAY OF CHAR; len: LONGINT); 
	PROCEDURE ^ EmptyHeader(VAR hdr: Header); 
	PROCEDURE ^ CheckHeaderBytes(CONST buf: ARRAY OF CHAR; len: LONGINT; VAR chksum: LONGINT); 
	PROCEDURE ^ CalcCheckSum(VAR hdr: Header); 
	PROCEDURE ^ WriteHeader(W: Streams.Writer; VAR hdr: Header); 
	PROCEDURE ^ OctStrToInt(CONST str: ARRAY OF CHAR; VAR val: LONGINT); 
	PROCEDURE ^ IntToOctStr(val: LONGINT; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ CopyArchiveName(CONST from: ARRAY OF CHAR; VAR to: ARRAY OF CHAR); 
	PROCEDURE ^ Backup(f: Files.File); 
	PROCEDURE ^ CopyFiles(VAR from, to: Files.File); 
	PROCEDURE ^ TransferBytes(from: Streams.Reader; to: Streams.Writer; n: LONGINT); 
	PROCEDURE ^ Old*(name: Archives.StringObject): Archives.Archive; 
	PROCEDURE ^ New*(name: Archives.StringObject): Archives.Archive; 
	PROCEDURE ^ List*(context: Commands.Context); 
	PROCEDURE ^ Extract*(context: Commands.Context); 
	PROCEDURE ^ Create*(context: Commands.Context); 
BEGIN
END Tar.
