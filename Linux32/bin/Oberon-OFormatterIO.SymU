MODULE OFormatterIO IN Oberon;
	IMPORT Texts, Fonts, Objects, Display, Oberon, Strings, Out;
CONST 
	Wheight = 800; 
	Wwidth = 650; 
	defaultCol = 15; 
	null* = 0; 
	times* = 1; 
	slash* = 2; 
	div* = 3; 
	mod* = 4; 
	and* = 5; 
	plus* = 6; 
	minus* = 7; 
	or* = 8; 
	eql* = 9; 
	neq* = 10; 
	lss* = 11; 
	leq* = 12; 
	gtr* = 13; 
	geq* = 14; 
	in* = 15; 
	is* = 16; 
	arrow* = 17; 
	period* = 18; 
	comma* = 19; 
	colon* = 20; 
	upto* = 21; 
	rparen* = 22; 
	rbrak* = 23; 
	rbrace* = 24; 
	of* = 25; 
	then* = 26; 
	do* = 27; 
	to* = 28; 
	by* = 29; 
	lparen* = 30; 
	lbrak* = 31; 
	lbrace* = 32; 
	not* = 33; 
	becomes* = 34; 
	number* = 35; 
	nil* = 36; 
	true* = 37; 
	false* = 38; 
	string* = 39; 
	ident* = 40; 
	semicolon* = 41; 
	bar* = 42; 
	end* = 43; 
	else* = 44; 
	elsif* = 45; 
	until* = 46; 
	if* = 47; 
	case* = 48; 
	while* = 49; 
	repeat* = 50; 
	for* = 51; 
	loop* = 52; 
	with* = 53; 
	exit* = 54; 
	passivate* = 55; 
	return* = 56; 
	refines* = 57; 
	implements* = 58; 
	array* = 59; 
	definition* = 60; 
	object* = 61; 
	record* = 62; 
	pointer* = 63; 
	begin* = 64; 
	code* = 65; 
	const* = 66; 
	type* = 67; 
	var* = 68; 
	procedure* = 69; 
	import* = 70; 
	module* = 71; 
	eof* = 72; 
	finally* = 73; 
	backslash* = 74; 
	scalarproduct* = 75; 
	elementproduct* = 76; 
	elementquotient* = 77; 
	dtimes* = 78; 
	transpose* = 79; 
	eeql* = 80; 
	eneq* = 81; 
	elss* = 82; 
	eleq* = 83; 
	egtr* = 84; 
	egeq* = 85; 
	qmark* = 86; 
	normalN = 0; 
	exportN = 1; 
	keywordN = 2; 
	commentN = 3; 
	importantN = 4; 
	stringN = 5; 
	extraN = 6; 
	Eot = 0X; 
	CR = 0DX; 
	TAB = 9X; 
	NL = 0AX; 
TYPE 
	BreakPoint* = POINTER TO RECORD 
		line-: SIGNED16; 
		textpos-: SIGNED32; 
		width-: SIGNED16; 
		indent-: SIGNED16; 
		pred: BreakPoint; 
	END; 

	ssBP* = POINTER TO ssBPDesc; 

	ssBPDesc* = RECORD 
		fbp*: BreakPoint; 
		bbp*: BreakPoint; 
		bp*: ARRAY 10 OF BreakPoint; 
	END; 

	; 

	; 
VAR 
	T: Texts.Text; 
	R: Texts.Reader; 
	ch: CHAR; 
	str: ARRAY 1024 OF CHAR; 
	tokenlen: SIGNED16; 
	MaxLineLength*: SIGNED32; 
	reservedCols: SET; 
	defaultFont: ARRAY 9 OF ARRAY 32 OF CHAR; 
	defaultColor: ARRAY 9 OF SIGNED8; 
	lcase, ucase: BOOLEAN; 
	firstId: BOOLEAN; 
	n1: CHAR; 
	forceNL*: BOOLEAN; 
	curbp*: ssBP; 
	curLine-, width-, curInd-: SIGNED16; 
	inpLine-: SIGNED32; 
	inCode: BOOLEAN; 
	N: Texts.Text; 
	W: Texts.Writer; 
	newFile: ARRAY 256 OF CHAR; 
	lastch: CHAR; 
	outsym: SIGNED8; 
	kw: BOOLEAN; 
	nossbp: ssBP; 
	tabw: SIGNED16; 
	spw: SIGNED16; 
	indentl1, indentl2: SIGNED16; 
	il1pos, il2pos: SIGNED32; 
	gotEmptyLine, emptyLine*: BOOLEAN; 
	emptyLines: SIGNED16; 
	nlines: SIGNED16; 
	needSp, instring, linestart, adjusted: BOOLEAN; 
	haveToken: BOOLEAN; 
	com: RECORD 
		preNL, postNL: SIGNED16; 
		lines: SIGNED16; 
		W: Texts.Writer; 
		width: SIGNED16; 
	END; 
	pc: BOOLEAN; 
	lowercase, uppercase, usecolors: BOOLEAN; 
	curFont, tokCol: SIGNED8; 
	lastbp: BreakPoint; 
	lastNL: BreakPoint; 
	expMark: BOOLEAN; 
	important: BOOLEAN; 
	isstring: BOOLEAN; 
	isextra: BOOLEAN; 
	inBreakLine, inPutComment, inAssComment: BOOLEAN; 
	lastLineStart: SIGNED32; 
	noerr*: BOOLEAN; 
	fonts: ARRAY 9 OF RECORD 
		f: Fonts.Font; 
		cw: ARRAY 256 OF SIGNED8; 
		col: SIGNED8; 
	END; 

	PROCEDURE ^ strSym(s: SIGNED8): BOOLEAN; 
	PROCEDURE ^ sSs(s: SIGNED8): BOOLEAN; 
	PROCEDURE ^ Ss(s: SIGNED8): BOOLEAN; 
	PROCEDURE ^ AssemblerComment*; 
	PROCEDURE ^ AssemblerCommentOff*; 
	PROCEDURE ^ EnterCode*; 
	PROCEDURE ^ LeaveCode*; 
	PROCEDURE ^ setFont(fn: SIGNED8); 
	PROCEDURE ^ put(ch: CHAR); 
	PROCEDURE ^ checkMark*; 
	PROCEDURE ^ makeImportant*; 
	PROCEDURE ^ adjLine; 
	PROCEDURE ^ checkLine*; 
	PROCEDURE ^ putComment*; 
	PROCEDURE ^ putToken; 
	PROCEDURE ^ err*(n: SIGNED16); 
	PROCEDURE ^ appSP*; 
	PROCEDURE ^ prepSP*; 
	PROCEDURE ^ prepTAB*; 
	PROCEDURE ^ upLn; 
	PROCEDURE ^ prepNL*; 
	PROCEDURE ^ adjust*; 
	PROCEDURE ^ getNLbp; 
	PROCEDURE ^ NewBPS*(VAR bps: ssBP); 
	PROCEDURE ^ getBP*(VAR bp: BreakPoint); 
	PROCEDURE ^ getBPind*(VAR bp: BreakPoint); 
	PROCEDURE ^ getBPind2*(VAR bp: BreakPoint; exprdepth: SIGNED16); 
	PROCEDURE ^ markIndent*(exprdepth: SIGNED16); 
	PROCEDURE ^ fixBPs(bp: BreakPoint; pdiff, wdiff: SIGNED16); 
	PROCEDURE ^ breakLine*(VAR bp: BreakPoint); 
	PROCEDURE ^ clearBP*(VAR bp: BreakPoint); 
	PROCEDURE ^ putEmptyLines*(n: SIGNED16); 
	PROCEDURE ^ aLn*; 
	PROCEDURE ^ decInd*; 
	PROCEDURE ^ incInd*; 
	PROCEDURE ^ getCharWidths; 
	PROCEDURE ^ Terminate*; 
	PROCEDURE ^ Pos*(): SIGNED32; 
	PROCEDURE ^ nextChar; 
	PROCEDURE ^ Str(VAR sym: SIGNED8); 
	PROCEDURE ^ Identifier(VAR sym: SIGNED8); 
	PROCEDURE ^ Number; 
	PROCEDURE ^ skipSpaces*; 
	PROCEDURE ^ putc(ch: CHAR; cnl: BOOLEAN); 
	PROCEDURE ^ Get*(VAR sym: SIGNED8); 
	PROCEDURE ^ LoadFont(n: SIGNED16; prefix: CHAR; VAR col: SIGNED8): Fonts.Font; 
	PROCEDURE ^ Init*(CONST fn: ARRAY OF CHAR; prefix: CHAR; color: BOOLEAN; lower, upper: BOOLEAN); 
	PROCEDURE ^ InitText*(t: Texts.Text; prefix: CHAR; color: BOOLEAN; lower, upper: BOOLEAN); 
BEGIN
END OFormatterIO.
