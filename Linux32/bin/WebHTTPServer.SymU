MODULE WebHTTPServer;
	IMPORT KernelLog, Machine, Kernel, Objects, WebHTTP, AosLog := TFLog, Modules, Streams, Files, IP, TCP, TCPServices, Classes := TFClasses, Clock, Dates, Strings;
CONST 
	Ok* = TCPServices.Ok; 
	Error* =  -1; 
	Major* = 1; 
	Minor* = 1; 
	FileBufSize = 4096; 
	ServerVersion* = \"A2 HTTP Server/1.0"\; 
	DocType* = \"<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">"\; 
	Tab = 9X; 
	Timeout = (300 * 1000); 
	MaxErrors = 10; 
	Log = FALSE; 
TYPE 
	Name* = ARRAY 64 OF CHAR; 

	HTTPPlugin* = OBJECT 
	VAR 
		name*: Name; 

		PROCEDURE ^  & Init*(CONST name: Name); 
		PROCEDURE ^ CanHandle*(host: Host; VAR header: WebHTTP.RequestHeader; secure: BOOLEAN): BOOLEAN; 
		PROCEDURE ^ LocateResource*(host: Host; VAR header: WebHTTP.RequestHeader; VAR reply: WebHTTP.ResponseHeader; VAR f: Files.File); 
		PROCEDURE ^ Handle*(host: Host; VAR request: WebHTTP.RequestHeader; VAR reply: WebHTTP.ResponseHeader; VAR in: Streams.Reader; VAR out: Streams.Writer); 
	END HTTPPlugin; 

	DefaultPlugin = OBJECT (HTTPPlugin)

		PROCEDURE ^ CanHandle*(host: Host; VAR header: WebHTTP.RequestHeader; secure: BOOLEAN): BOOLEAN; 
		PROCEDURE ^ Handle*(host: Host; VAR request: WebHTTP.RequestHeader; VAR reply: WebHTTP.ResponseHeader; VAR in: Streams.Reader; VAR out: Streams.Writer); 
	END DefaultPlugin; 

	Statistics = OBJECT {EXCLUSIVE} 
	VAR 
		bucket: SIGNED32; 
		secondBuckets: ARRAY 60 OF SIGNED32; 
		timer: Kernel.Timer; 
		avg: SIGNED32; 
		alive: BOOLEAN; 
		logCounter: SIGNED32; 

		PROCEDURE ^ Hit; 
		PROCEDURE ^ Update; 
		PROCEDURE ^ Kill; 
	BEGIN{ACTIVE} 
	END Statistics; 

	HostList* = OBJECT 
	VAR 
		host*: Host; 
		next*: HostList; 
	END HostList; 

	Host* = OBJECT {EXCLUSIVE} 
	VAR 
		name-: Name; 
		plugins: Classes.List; 
		prefix-, default-, error-: Files.FileName; 

		PROCEDURE ^  & Init*(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ AddPlugin*(pi: HTTPPlugin); 
		PROCEDURE ^ RemovePlugin*(pi: HTTPPlugin); 
		PROCEDURE ^ SetPrefix*(CONST Prefix: ARRAY OF CHAR); 
		PROCEDURE ^ SetDefault*(CONST Default: ARRAY OF CHAR); 
		PROCEDURE ^ SetError*(CONST Error: ARRAY OF CHAR); 
		PROCEDURE ^ Handle*(VAR request: WebHTTP.RequestHeader; VAR reply: WebHTTP.ResponseHeader; VAR in: Streams.Reader; VAR out: Streams.Writer; secure: BOOLEAN); 
	END Host; 

	HTTPAgent = OBJECT {EXCLUSIVE} (TCPServices.Agent)
	VAR 
		res: INTEGER; 
		len: SIZE; 
		body, closeRequested: BOOLEAN; 
		out: Streams.Writer; 
		in, inR: Streams.Reader; 
		o: ANY; 
		h, th: Host; 
		i: SIZE; 
		request: WebHTTP.RequestHeader; 
		reply: WebHTTP.ResponseHeader; 
		value: ARRAY 128 OF CHAR; 
		timeout: Objects.Timer; 
		dechunk: WebHTTP.ChunkedInStream; 
		consecutiveErrors: SIZE; 
		secure: BOOLEAN; 
		listenerProc: ListenerProc; 

		PROCEDURE ^ HandleTimeout; 
	BEGIN{ACTIVE} 
	END HTTPAgent; 

	ListenerProc* = PROCEDURE {DELEGATE}(request: WebHTTP.RequestHeader; response: WebHTTP.ResponseHeader); 
VAR 
	http: TCPServices.Service; 
	https: TCPServices.TLSService; 
	hosts: Classes.List; 
	log: AosLog.Log; 
	hitStat: Statistics; 
	nofRequests*: SIGNED32; 
	requestsPerMinute*: SIGNED32; 
	nofConnects*: SIGNED32; 
	defaultHost: Host; 
	defaultPlugin: DefaultPlugin; 
	logEnabled: BOOLEAN; 
	logWriter: Streams.Writer; 
	logFile: Files.File; 
	listener*: ListenerProc; 

	PROCEDURE ^ GetRequests*(): SIGNED32; 
	PROCEDURE ^ NewHTTPAgent(c: TCP.Connection; s: TCPServices.Service): TCPServices.Agent; 
	PROCEDURE ^ NewHTTPSAgent(c: TCP.Connection; s: TCPServices.Service): TCPServices.Agent; 
	PROCEDURE ^ OpenW3CLog(CONST fn: ARRAY OF CHAR); 
	PROCEDURE ^ W3CLog(request: WebHTTP.RequestHeader; reply: WebHTTP.ResponseHeader); 
	PROCEDURE ^ FlushW3CLog*; 
	PROCEDURE ^ GetDefaultResponseHeader*(VAR r: WebHTTP.RequestHeader; VAR h: WebHTTP.ResponseHeader); 
	PROCEDURE ^ SendData*(src: Streams.Reader; dst: Streams.Writer); 
	PROCEDURE ^ AddHost*(host: Host); 
	PROCEDURE ^ FindHosts*(CONST host: ARRAY OF CHAR): HostList; 
	PROCEDURE ^ RemoveHost*(CONST host: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ StartHTTP*(root: ARRAY OF CHAR; CONST logFile: ARRAY OF CHAR; VAR msg: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ StartHTTPS*(root: ARRAY OF CHAR; CONST logFile: ARRAY OF CHAR; VAR msg: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ StopHTTP*(VAR msg: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ StopHTTPS*(VAR msg: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ ShowHosts*(out: Streams.Writer); 
	PROCEDURE ^ Cleanup; 
BEGIN
END WebHTTPServer.
