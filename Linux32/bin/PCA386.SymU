MODULE PCA386;
	IMPORT SYSTEM, Files, StringPool, PCM, PCLIR, PCT, PCS, PCBT, PCP;
CONST 
	FileName = \"OPA.Data"\; 
	none =  -1; 
	i386 = 0; 
	i486 = 1; 
	Pentium = 2; 
	PentiumPro = 3; 
	FPU = 16; 
	Privileged = 17; 
	MMX = 18; 
	SSE = 19; 
	SSE2 = 20; 
	SSE3 = 21; 
	SSE4 = 22; 
	StLabel = 0; 
	StFwdLabel = 1; 
	StConst = 3; 
	StType = 4; 
	StVar = 5; 
	StVarPar = 6; 
	StGlobal = 7; 
	StMod = 11; 
	Reg8 = 8; 
	Reg16 = 16; 
	Reg32 = 32; 
	MReg = 40; 
	XReg = 41; 
	RegAL = 9; 
	RegAX = 17; 
	RegEAX = 33; 
	RegDX = 18; 
	RegCL = 19; 
	Imm8 = 48; 
	Imm16 = 49; 
	Imm32 = 50; 
	SImm8 = 53; 
	Imm = 54; 
	Const1 = 51; 
	Const3 = 52; 
	RM = 64; 
	RM8 = 65; 
	RM16 = 66; 
	RM32 = 67; 
	MM = 68; 
	MM32 = 69; 
	MM64 = 70; 
	XMM = 160; 
	XMM32 = 161; 
	XMM64 = 162; 
	XMM128 = 163; 
	M = 72; 
	M8 = 73; 
	M16 = 74; 
	M32 = 75; 
	M64 = 76; 
	M80 = 77; 
	M128 = 78; 
	SReg = 80; 
	RegCS = 81; 
	RegDS = 82; 
	RegES = 83; 
	RegFS = 84; 
	RegGS = 85; 
	RegSS = 86; 
	Rel8 = 96; 
	Rel16 = 97; 
	Rel32 = 98; 
	FwdJmp = 99; 
	CRReg = 112; 
	DRReg = 113; 
	TRReg = 114; 
	FReg = 128; 
	FRegST = 129; 
	TAB = 9X; 
	LF = 0AX; 
	CR = 0DX; 
	SPACE = 20X; 
	ScUndef = 0; 
	ScIdent = 1; 
	ScSemicolon = 2; 
	ScAt = 3; 
	ScNumber = 4; 
	ScComma = 5; 
	ScLBrak = 6; 
	ScRBrak = 7; 
	ScCR = 8; 
	ScMult = 9; 
	ScEnd = 10; 
	ScLabel = 11; 
	ScColon = 12; 
	ScPlus = 13; 
	ScMinus = 14; 
	ScDiv = 15; 
	ScLPar = 16; 
	ScRPar = 17; 
	ScString = 18; 
	ScPoint = 19; 
	ScLBrace = 20; 
	ScRBrace = 21; 
	NameLen = 32; 
	MaxStrLen = 256; 
	MnemoLen = 12; 
	OmReg = 1; 
	OmOp = 2; 
	OmRMReg = 3; 
	OmRM = 4; 
	NoMatch = 0; 
	SizeCast = 1; 
	TypeCast = 2; 
	ConstCast = 3; 
	Hit = 4; 
TYPE 
	Name = ARRAY 32 OF CHAR; 

	Mnemo = ARRAY MnemoLen OF CHAR; 

	Symbol = POINTER TO SymDesc; 

	FixPnt = POINTER TO FixPntDesc; 

	InstrDesc = RECORD 
		name: Mnemo; 
		start, end: INTEGER; 
		target: SET; 
	END; 

	OpCode = RECORD 
		op: ARRAY 3 OF INTEGER; 
		op0, op1, op2: INTEGER; 
		opc: INTEGER; 
		reg: INTEGER; 
	END; 

	Operand = RECORD 
		mode: LONGINT; 
		imm: LONGINT; 
		disp: LONGINT; 
		index, base, reg: INTEGER; 
		seg, scale: INTEGER; 
		obj: Symbol; 
	END; 

	SymDesc = RECORD 
		typ: LONGINT; 
		val, size: LONGINT; 
		name: Name; 
		left, right, next: Symbol; 
		fix: FixPnt; 
		obj: PCT.Symbol; 
	END; 

	FixPntDesc = RECORD 
		pc: LONGINT; 
		next: FixPnt; 
	END; 

	; 
VAR 
	OpTab: POINTER TO ARRAY OF OpCode; 
	OpTabLen: LONGINT; 
	InstrTab: POINTER TO ARRAY OF InstrDesc; 
	InstrTabLen: LONGINT; 
	SizeTab: ARRAY 17 OF SHORTINT; 
	TargetTab: ARRAY 32 OF RECORD 
		name: Name; 
		flag: SET; 
	END; 
	TargetCount: LONGINT; 
	loaded: BOOLEAN; 

	PROCEDURE ^ AND(a, b: LONGINT): LONGINT; 
	PROCEDURE ^ IsFix(name: Mnemo): BOOLEAN; 
	PROCEDURE ^ ModeSize(mode: LONGINT): LONGINT; 
	PROCEDURE ^ ConstSize(i: LONGINT; signed: BOOLEAN): INTEGER; 
	PROCEDURE ^ IsRegMode(m: LONGINT; strict: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ IsSRegMode(m: LONGINT; strict: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ IsSpecRegMode(m: LONGINT): BOOLEAN; 
	PROCEDURE ^ IsMMode(m: LONGINT): BOOLEAN; 
	PROCEDURE ^ IsRMMode(m: LONGINT): BOOLEAN; 
	PROCEDURE ^ IsMMMode(m: LONGINT): BOOLEAN; 
	PROCEDURE ^ IsXMMMode(m: LONGINT): BOOLEAN; 
	PROCEDURE ^ IsFRegMode(m: LONGINT; strict: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ IsRegister(mode: LONGINT): BOOLEAN; 
	PROCEDURE ^ NeedModRM(mode, regpos: LONGINT): BOOLEAN; 
	PROCEDURE ^ IsImmMode(m: LONGINT): BOOLEAN; 
	PROCEDURE ^ IsRelMode(m: LONGINT): BOOLEAN; 
	PROCEDURE ^ Evaluate(VAR op: Operand; mode: LONGINT): LONGINT; 
	PROCEDURE ^ Match(ind: LONGINT; VAR op: ARRAY OF Operand; errpos: LONGINT): LONGINT; 
	PROCEDURE ^ HashFn(VAR name: ARRAY OF CHAR; VAR k, n: LONGINT); 
	PROCEDURE ^ Assemble*(scanner: PCS.Scanner; scope: PCT.Scope; exported, inlined: BOOLEAN): PCM.Attribute; 
	PROCEDURE ^ BodyInit; 
	PROCEDURE ^ Install*; 
BEGIN
END PCA386.
