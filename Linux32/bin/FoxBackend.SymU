MODULE FoxBackend;
	IMPORT Streams, Diagnostics, Basic := FoxBasic, Global := FoxGlobal, BinaryCode := FoxBinaryCode, Formats := FoxFormats, SyntaxTree := FoxSyntaxTree, SemanticChecker := FoxSemanticChecker, Options, Strings;
CONST 
TYPE 
	SectionName = ARRAY 256 OF CHAR; 

	Backend* = OBJECT 
	VAR 
		diagnostics-: Diagnostics.Diagnostics; 
		log-: Streams.Writer; 
		flags*: SET; 
		system-: Global.System; 
		error-: BOOLEAN; 
		checker-: SemanticChecker.Checker; 
		source-: SyntaxTree.String; 
		findSectionName-: SectionName; 
		findSectionOffset-: SIGNED32; 
		capabilities-: SET; 
		oberon07-: BOOLEAN; 
		instructionWidth-: SIZE; 
		hasLinkRegister-: BOOLEAN; 
		name-: ARRAY 32 OF CHAR; 

		PROCEDURE ^  & InitBackend*; 
		PROCEDURE ^ SetOberon07*; 
		PROCEDURE ^ SetCapabilities*(capabilities: SET); 
		PROCEDURE ^ SetHasLinkRegister*; 
		PROCEDURE ^ SetInstructionWidth*(instructionWidth: SIZE); 
		PROCEDURE ^ ResetError*; 
		PROCEDURE ^ Initialize*(diagnostics: Diagnostics.Diagnostics; log: Streams.Writer; flags: SET; checker: SemanticChecker.Checker; system: Global.System); 
		PROCEDURE ^ SetName*(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ GetSystem*(): Global.System; 
		PROCEDURE ^ Error*(CONST source: ARRAY OF CHAR; position: Basic.Position; errorNumber: SIGNED32; CONST err: ARRAY OF CHAR); 
		PROCEDURE ^ ProcessSyntaxTreeModule*(syntaxTreeModule: SyntaxTree.Module): Formats.GeneratedModule; 
		PROCEDURE ^ ProcessIntermediateCodeModule*(intermediateCodeModule: Formats.GeneratedModule): Formats.GeneratedModule; 
		PROCEDURE ^ Emit*(backend: Backend): BOOLEAN; 
		PROCEDURE ^ FindPC*(x: SyntaxTree.Module; CONST sectionName: ARRAY OF CHAR; sectionOffset: SIGNED32); 
		PROCEDURE ^ CheckCodeAddress*(VAR adr: BinaryCode.Unit); 
		PROCEDURE ^ GetDescription*(VAR instructionSet: ARRAY OF CHAR); 
		PROCEDURE ^ CanPassInRegister*(type: SyntaxTree.Type): BOOLEAN; 
		PROCEDURE ^ DefineOptions*(options: Options.Options); 
		PROCEDURE ^ GetOptions*(options: Options.Options); 
		PROCEDURE ^ DefaultObjectFileFormat*(): Formats.ObjectFileFormat; 
		PROCEDURE ^ DefaultSymbolFileFormat*(): Formats.SymbolFileFormat; 
	END Backend; 

	PROCEDURE ^ GetDummy*(): Backend; 
	PROCEDURE ^ GetBackendByName*(CONST name: ARRAY OF CHAR): Backend; 
	PROCEDURE ^ Assert(b: BOOLEAN; CONST reason: ARRAY OF CHAR); 
BEGIN
END FoxBackend.
