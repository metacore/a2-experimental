MODULE Installer;
	IMPORT KernelLog, Streams, Commands, Strings, Disks, Files, AosUnzip := Unzip, Partitions, PartitionsLib, Codecs, XML, XMLScanner, XMLParser, XMLObjects;
CONST 
	AosPartitionType = 76; 
	Free =  -1; 
	AosFsName = \"AosFS"\; 
	DefaultMBRFile = \"OBEMBR.BIN"\; 
	DefaultBootLoader = \"OBL.Bin"\; 
	DefaultBootfile = \"IDE.Bin"\; 
	DefaultUsbBootfile = \"USB.Bin"\; 
	DefaultBootManMBR = \"BootManagerMBR.Bin"\; 
	DefaultBootManRest = \"BootManagerTail.Bin"\; 
	BootVolString = \"AOS AosFS "\; 
	DefaultPrefix = \"INSTALLER"\; 
	MaxPackages = 128; 
	XmlPackage = \"Package"\; 
	XmlPackageNumber = \"nr"\; 
	XmlPackageFilename = \"file"\; 
	XmlPackageName = \"name"\; 
	XmlPackageDescription = \"description"\; 
	XmlPackageInstall = \"install"\; 
	XmlInstallYes = \"YES"\; 
	XmlInstallNo = \"NO"\; 
	XmlInstallRequired = \"REQUIRED"\; 
	Invalid =  -1; 
	Mandatory* = 0; 
	OptionalYes* = 1; 
	OptionalNo* = 2; 
	NotAllowed* = 3; 
	BlockSize = 4096; 
	FsMetaOverheadPerFile = 128; 
	NofSteps* = 12; 
	Undefined* = 0; 
	WriteMBR* = 1; 
	CreatePartition* = 2; 
	ChangeType* = 3; 
	Activate* = 4; 
	Format* = 5; 
	UpdateBootfile* = 6; 
	SetConfig* = 7; 
	InstallBootManager* = 8; 
	Mount* = 9; 
	InstallPackages* = 10; 
	Unmount* = 11; 
TYPE 
	Configuration* = OBJECT 
	VAR 
		steps: ARRAY NofSteps OF SIGNED32; 
		mbrFile*: Files.FileName; 
		size*: SIGNED32; 
		bootloader*: Files.FileName; 
		bootfile*: Files.FileName; 
		configTable-: PartitionsLib.ConfigTable; 
		bootManMBR*, bootManRest*: Files.FileName; 
		mountPrefix*: Files.Prefix; 
		packages: Packages; 
		disk: PartitionsLib.Disk; 
		partition: SIGNED32; 
		diskpartString: PartitionsLib.String; 

		PROCEDURE ^ SetInstallStep*(step: SIZE; doStep: BOOLEAN; VAR msg: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ IsValidStepNumber(stepNr: SIZE): BOOLEAN; 
		PROCEDURE ^ DoStep*(step: SIZE): BOOLEAN; 
		PROCEDURE ^ GetNofSteps(): SIZE; 
		PROCEDURE ^ IsUsbDisk(): BOOLEAN; 
		PROCEDURE ^ SpaceAvailable*(): SIGNED32; 
		PROCEDURE ^ CheckConfiguration*(w: Streams.Writer): BOOLEAN; 
		PROCEDURE ^ ToStream*(w: Streams.Writer); 
		PROCEDURE ^ DisallowAllSteps; 
		PROCEDURE ^ DetectInstallSettings; 
		PROCEDURE ^ Clone*(): Configuration; 
		PROCEDURE ^ SetPackages*(packages: Packages); 
		PROCEDURE ^  & Init*(disk: PartitionsLib.Disk; partition: SIGNED32); 
	END Configuration; 

	Installer* = OBJECT {EXCLUSIVE} (PartitionsLib.Operation)
	VAR 
		config: Configuration; 
		currentStep, nofSteps: SIZE; 
		nofFiles: SIGNED32; 
		installLog: Streams.Writer; 

		PROCEDURE ^ SetInstallLog*(installLog: Streams.Writer); 
		PROCEDURE ^ Lock*(): BOOLEAN; 
		PROCEDURE ^ Unlock*; 
		PROCEDURE ^ SetParameters*(config: Configuration); 
		PROCEDURE ^ ValidParameters*(): BOOLEAN; 
		PROCEDURE ^ SetStep(CONST string: PartitionsLib.String); 
		PROCEDURE ^ PackagesProgress(nofFilesExtracted: SIZE); 
		PROCEDURE ^ DoOperation*; 
		PROCEDURE ^ DoInstallPackages(): BOOLEAN; 
		PROCEDURE ^ DoWriteMBR(): BOOLEAN; 
		PROCEDURE ^ DoCreatePartition(): BOOLEAN; 
		PROCEDURE ^ DoChangePartitionTypeTo(oldType, newType: SIGNED32): BOOLEAN; 
		PROCEDURE ^ DoActivatePartition(): BOOLEAN; 
		PROCEDURE ^ DoInstallBootManager(): BOOLEAN; 
		PROCEDURE ^ DoFormatPartition(): BOOLEAN; 
		PROCEDURE ^ DoUpdateBootFile(): BOOLEAN; 
		PROCEDURE ^ DoSetConfiguration(): BOOLEAN; 
		PROCEDURE ^ DoMountPartition(): BOOLEAN; 
		PROCEDURE ^ DoUnmount; 
		PROCEDURE ^ OperationDone(operation: PartitionsLib.Operation): BOOLEAN; 
		PROCEDURE ^ ReportAbort; 
		PROCEDURE ^  & Init*(disk: PartitionsLib.Disk; partition: SIGNED32; out: Streams.Writer); 
	END Installer; 

	ReportProgressProc = PROCEDURE {DELEGATE}(nofFilesExtracted: SIZE); 

	AbortedProc = PROCEDURE {DELEGATE}():BOOLEAN; 

	ReportErrorProc = PROCEDURE {DELEGATE}(CONST msg: ARRAY OF CHAR); 

	Package* = OBJECT 
	VAR 
		number-: SIGNED32; 
		install-: BOOLEAN; 
		installType-: SIGNED32; 
		filename-: XML.String; 
		file-: Files.File; 
		name-, description-: XML.String; 
		nofEntries-: SIGNED32; 
		size-: SIGNED32; 
		sizeOnDisk-: SIGNED32; 
		user*: ANY ; 
		next: Package; 

		PROCEDURE ^ SetInstall*(install: BOOLEAN; VAR msg: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ Parse(p: XML.Element; error: Streams.Writer): BOOLEAN; 
		PROCEDURE ^ Show; 
		PROCEDURE ^  & Init*; 
	END Package; 

	PackageArray* = POINTER TO ARRAY OF Package; 

	Packages* = OBJECT 
	VAR 
		hasErrors: BOOLEAN; 
		ReportError: ReportErrorProc; 
		head, tail: Package; 
		info: Streams.Writer; 
		path: Files.FileName; 
		nofFilesExtracted: SIGNED32; 
		reportProgress: ReportProgressProc; 
		Aborted: AbortedProc; 

		PROCEDURE ^ GetNofPackages(): SIGNED32; 
		PROCEDURE ^ GetPackages*(): PackageArray; 
		PROCEDURE ^ ReportProgress(nofFilesExtracted: SIGNED32); 
		PROCEDURE ^ ExtractEntry(zip: AosUnzip.ZipFile; entry: AosUnzip.Entry; CONST name: ARRAY OF CHAR; VAR res: INTEGER); 
		PROCEDURE ^ Unzip(zipFile: AosUnzip.ZipFile): BOOLEAN; 
		PROCEDURE ^ OpenZipFile(CONST filename: ARRAY OF CHAR; reportErrors: BOOLEAN): AosUnzip.ZipFile; 
		PROCEDURE ^ GetPackageSizes*; 
		PROCEDURE ^ GetInstallSize*(VAR size, sizeOnDisk, nofEntries: SIGNED32); 
		PROCEDURE ^ InstallPackages*(CONST targetPath: ARRAY OF CHAR); 
		PROCEDURE ^ DefaultReportError(CONST msg: ARRAY OF CHAR); 
		PROCEDURE ^ SetInstallLog*(info: Streams.Writer); 
		PROCEDURE ^ SetReportErrorProc(proc: ReportErrorProc); 
		PROCEDURE ^ SetReportProgressProc(proc: ReportProgressProc); 
		PROCEDURE ^ SetAbortedProc(proc: AbortedProc); 
		PROCEDURE ^ Error(pos, line, row: Streams.Position; CONST msg: ARRAY OF CHAR); 
		PROCEDURE ^ OpenPackages*(CONST name: ARRAY OF CHAR; error: Streams.Writer): BOOLEAN; 
		PROCEDURE ^ ParsePackages(document: XML.Document; error: Streams.Writer): Package; 
		PROCEDURE ^ CheckPackages(): BOOLEAN; 
		PROCEDURE ^ Show; 
		PROCEDURE ^ DefaultAborted(): BOOLEAN; 
		PROCEDURE ^  & Init*; 
	END Packages; 
VAR 
	suffix: SIGNED32; 

	PROCEDURE ^ FileExists(CONST filename: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ GetInstallType(p: XML.Element): SIGNED32; 
	PROCEDURE ^ GetXmlNumber(p: XML.Element; CONST attributeName: ARRAY OF CHAR): SIGNED32; 
	PROCEDURE ^ GetPrefix(): Files.Prefix; 
	PROCEDURE ^ TestPackages*(context: Commands.Context); 
	PROCEDURE ^ Install*(context: Commands.Context); 
BEGIN
END Installer.
