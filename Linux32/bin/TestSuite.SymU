MODULE TestSuite;
	IMPORT Streams, Files, Commands, Strings, TextUtilities, Diagnostics;
CONST 
	PositiveTest = 0; 
	NegativeTest = 1; 
	Positive* = 0; 
	Negative* = 1; 
	Failure* = 2; 
TYPE 
	TestType* = WORD; 

	TestName = ARRAY 100 OF CHAR; 

	TestResult* = POINTER TO RECORD 
		type-: TestType; 
		name-: TestName; 
		succeeded-, new-: BOOLEAN; 
		next: TestResult; 
	END; 

	TestResultList = RECORD 
		first, last: TestResult; 
	END; 

	Report* = OBJECT 
	VAR 
		tests-, succeeded-, succeededThisTime-, failed-, failedThisTime-: SIZE; 

		PROCEDURE ^ Open*; 
		PROCEDURE ^ Handle*(result: TestResult); 
		PROCEDURE ^ Close*; 
	END Report; 

	Tester* = OBJECT 
	VAR 
		tests, results: TestResultList; 
		diagnostics-: Diagnostics.Diagnostics; 

		PROCEDURE ^  & Init*(diagnostics: Diagnostics.Diagnostics); 
		PROCEDURE ^ Process*(r: Streams.Reader): BOOLEAN; 
		PROCEDURE ^ Handle*(r: Streams.Reader; pos: Streams.Position; CONST name: ARRAY OF CHAR; type: TestType): WORD; 
		PROCEDURE ^ Print*(report: Report); 
	END Tester; 

	StreamReport* = OBJECT (Report)
	VAR 
		w: Streams.Writer; 
		tw: TextUtilities.TextWriter; 

		PROCEDURE ^  & InitStreamReport*(w: Streams.Writer); 
		PROCEDURE ^ Open*; 
		PROCEDURE ^ Green; 
		PROCEDURE ^ Red; 
		PROCEDURE ^ Orange; 
		PROCEDURE ^ Default; 
		PROCEDURE ^ Bold; 
		PROCEDURE ^ Handle*(test: TestResult); 
		PROCEDURE ^ Close*; 
	END StreamReport; 

	PROCEDURE ^ SkipComment(r: Streams.Reader): BOOLEAN; 
	PROCEDURE ^ SkipWhitespace(r: Streams.Reader): BOOLEAN; 
	PROCEDURE ^ SkipLn(r: Streams.Reader): BOOLEAN; 
	PROCEDURE ^ ReadType(r: Streams.Reader; VAR type: TestType): BOOLEAN; 
	PROCEDURE ^ ReadText(r: Streams.Reader; VAR text: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ Tabulator(r: Streams.Reader): BOOLEAN; 
	PROCEDURE ^ ReadBoolean(r: Streams.Reader; VAR boolean: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ ReadResults(r: Streams.Reader; VAR list: TestResultList); 
	PROCEDURE ^ WriteResults(w: Streams.Writer; CONST list: TestResultList); 
	PROCEDURE ^ ClearList(VAR list: TestResultList); 
	PROCEDURE ^ AddResult(VAR list: TestResultList; type: TestType; CONST name: ARRAY OF CHAR; succeeded: BOOLEAN); 
	PROCEDURE ^ FindResult(CONST list: TestResultList; CONST name: ARRAY OF CHAR): TestResult; 
	PROCEDURE ^ DriveByReader*(reader: Streams.Reader; error: Streams.Writer; CONST resultname: ARRAY OF CHAR; tester: Tester): BOOLEAN; 
	PROCEDURE ^ Drive*(context: Commands.Context; tester: Tester); 
BEGIN
END TestSuite.
