MODULE WMPlayer;
	IMPORT Strings, Modules, Commands, Files, Texts, TextUtilities, Models, WMGraphics, WMMessages, WMComponents, WMStandardComponents, WMWindowManager, WMTextView, WMDialogs, MediaPlayer;
CONST 
	WindowTitle = \"Media Player"\; 
	DefaultWidth = 800; 
	DefaultHeight = 60; 
	StyleRegular = {}; 
	StyleBold = {0}; 
	Tab = CHR(Texts.TabChar); 
TYPE 
	KillerMsg = OBJECT 
	END KillerMsg; 

	InfoWindow* = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		data: MediaPlayer.Setup; 
		tv: WMTextView.TextView; 
		text: Texts.Text; 
		tw: TextUtilities.TextWriter; 
		next: InfoWindow; 

		PROCEDURE ^ CreateContent; 
		PROCEDURE ^ CreateForm(): WMComponents.VisualComponent; 
		PROCEDURE ^  & New*(setupData: MediaPlayer.Setup); 
	END InfoWindow; 

	Control = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		playBtn, stepBtn, stopBtn, pauseBtn, rewBtn, ffBtn, resetBtn: WMStandardComponents.Button; 
		owner: Window; 

		PROCEDURE ^ ButtonHandler(sender, data: ANY ); 
		PROCEDURE ^  & New(owner: Window); 
	END Control; 

	Window* = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		playBtn-, stopBtn-, pauseBtn-, ffBtn-, rewBtn-, infoBtn-, stepBtn-, resetBtn-: WMStandardComponents.Button; 
		search: WMStandardComponents.Scrollbar; 
		toolbar*: WMStandardComponents.Panel; 
		timeLbl*, totTimeLbl*, frameLbl*, maxFrameLbl*: WMStandardComponents.Label; 
		player*: MediaPlayer.Player; 
		stepSize: SIGNED32; 
		filename-: Files.FileName; 
		setupData*: MediaPlayer.Setup; 
		infos*: InfoWindow; 
		res*: INTEGER; 
		windowInfo*: WMWindowManager.WindowInfo; 

		PROCEDURE ^ CreateForm*(): WMComponents.VisualComponent; 
		PROCEDURE ^  & New*; 
		PROCEDURE ^ GenerateControl*(): ANY ; 
		PROCEDURE ^ Open*(CONST fileName: ARRAY OF CHAR); 
		PROCEDURE ^ ButtonHandler*(sender, data: ANY ); 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ Handle*(VAR x: WMMessages.Message); 
		PROCEDURE ^ SliderSearch(sender, data: ANY ); 
		PROCEDURE ^ Update*(status, pos, maxpos, time, displayTime: SIGNED32); 
		PROCEDURE ^ SetUpController*(setup: MediaPlayer.Setup); 
	END Window; 
VAR 
	nofWindows: SIGNED32; 

	PROCEDURE ^ ConvertTime(ms: SIGNED32; VAR hours, minutes, seconds: SIGNED32); 
	PROCEDURE ^ ConvertTimeToStr(ms: SIGNED32; VAR timeStr: ARRAY OF CHAR); 
	PROCEDURE ^ Open*(context: Commands.Context); 
	PROCEDURE ^ IncCount; 
	PROCEDURE ^ DecCount; 
	PROCEDURE ^ Cleanup*; 
BEGIN
END WMPlayer.
