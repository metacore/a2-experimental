MODULE Sockets;
	IMPORT S := SYSTEM, Unix, Trace, IP;
CONST 
	Backlog = 5; 
TYPE 
	SocketAdr* = POINTER TO RECORD 
		family*: INTEGER; 
		port*: INTEGER; 
	END; 

	SocketAdrV4* = POINTER TO RECORD (SocketAdr)
		v4Adr*: LONGINT; 
		zero*: ARRAY 8 OF CHAR; 
	END; 

	SocketAdrV6* = POINTER TO RECORD (SocketAdr)
		flowinfo*: LONGINT; 
		v6Adr*: ARRAY 16 OF CHAR; 
		scopeId*: LONGINT; 
		srcId*: LONGINT; 
	END; 

	NameBuf = POINTER TO RECORD 
		buf: ARRAY 64 OF CHAR; 
	END; 

	SocketOption = RECORD 
	END; 

	Length = WORD; 

	Linger = RECORD (SocketOption)
		onoff: LONGINT; 
		linger: LONGINT; 
	END; 

	Switch = RECORD (SocketOption)
		onoff: LONGINT; 
	END; 
VAR 
	socket: PROCEDURE {C}(af, typ, protocol: WORD):WORD; 
	setsockopt: PROCEDURE {C}(s: WORD; level, optname: WORD; VAR opt: SocketOption; optlen: Length):WORD; 
	accept: PROCEDURE {C}(s: WORD; adrPtr: ADDRESS; VAR adrlen: Length):WORD; 
	bind: PROCEDURE {C}(s: WORD; adr: SocketAdr; adrlen: Length):WORD; 
	connect: PROCEDURE {C}(s: WORD; adr: SocketAdr; adrlen: Length):WORD; 
	listen: PROCEDURE {C}(s: WORD; backlog: WORD):WORD; 
	recv: PROCEDURE {C}(s: WORD; buf: ADDRESS; len: SIZE; flags: WORD):SIZE; 
	send: PROCEDURE {C}(s: WORD; buf: ADDRESS; len: SIZE; flags: WORD):SIZE; 
	recvfrom: PROCEDURE {C}(s: WORD; buf: ADDRESS; len: SIZE; flags: WORD; from: NameBuf; VAR flen: Length):SIZE; 
	sendto: PROCEDURE {C}(s: WORD; buf: ADDRESS; len: SIZE; flags: WORD; to: SocketAdr; tolen: Length):SIZE; 
	shutdown: PROCEDURE {C}(s: WORD; how: WORD):WORD; 
	getpeername: PROCEDURE {C}(s: WORD; adr: NameBuf; VAR adrlen: Length):WORD; 
	getsockname: PROCEDURE {C}(s: WORD; adr: NameBuf; VAR adrlen: Length):WORD; 
	htonl: PROCEDURE {C}(hostlong: UNSIGNED32):UNSIGNED32; 
	htons: PROCEDURE {C}(hostshort: UNSIGNED16):UNSIGNED16; 
	ntohl: PROCEDURE {C}(netlong: UNSIGNED32):UNSIGNED32; 
	ntohs: PROCEDURE {C}(netshort: UNSIGNED16):UNSIGNED16; 

	PROCEDURE ^ NewSocketAdr*(ip: IP.Adr; port: LONGINT): SocketAdr; 
	PROCEDURE ^ SockAdrToIPAdr*(sadr: SocketAdr): IP.Adr; 
	PROCEDURE ^ GetPortNumber*(sadr: SocketAdr): LONGINT; 
	PROCEDURE ^ BufToSocketAdr(CONST buf: ARRAY OF CHAR; len: WORD): SocketAdr; 
	PROCEDURE ^ Accept*(s: WORD): WORD; 
	PROCEDURE ^ Bind*(s: WORD; addr: SocketAdr): BOOLEAN; 
	PROCEDURE ^ Close*(s: WORD); 
	PROCEDURE ^ Connect*(s: WORD; addr: SocketAdr): BOOLEAN; 
	PROCEDURE ^ GetSockName*(s: WORD): SocketAdr; 
	PROCEDURE ^ GetPeerName*(s: WORD): SocketAdr; 
	PROCEDURE ^ Listen*(s: WORD): BOOLEAN; 
	PROCEDURE ^ Recv*(s: WORD; VAR buf: ARRAY OF CHAR; pos: SIZE; VAR len: SIZE; flags: WORD): BOOLEAN; 
	PROCEDURE ^ Send*(s: WORD; CONST buf: ARRAY OF CHAR; pos: SIZE; VAR len: SIZE): BOOLEAN; 
	PROCEDURE ^ RecvFrom*(s: WORD; VAR from: SocketAdr; VAR buf: ARRAY OF CHAR; pos: SIZE; VAR len: SIZE): BOOLEAN; 
	PROCEDURE ^ SendTo*(s: WORD; dest: SocketAdr; CONST buf: ARRAY OF CHAR; pos, len: SIZE): BOOLEAN; 
	PROCEDURE ^ Socket*(af, typ, protocol: WORD): WORD; 
	PROCEDURE ^ Available*(s: WORD): LONGINT; 
	PROCEDURE ^ Requested*(s: WORD): BOOLEAN; 
	PROCEDURE ^ AwaitPacket*(s: WORD; ms: LONGINT): BOOLEAN; 
	PROCEDURE ^ SetLinger*(s: WORD): BOOLEAN; 
	PROCEDURE ^ KeepAlive*(s: WORD; enable: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ NoDelay*(s: WORD; enable: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ NetToInt*(x: INTEGER): INTEGER; 
	PROCEDURE ^ IntToNet*(x: INTEGER): INTEGER; 
	PROCEDURE ^ NetToLInt*(x: LONGINT): LONGINT; 
	PROCEDURE ^ LIntToNet*(x: LONGINT): LONGINT; 
	PROCEDURE ^ Init; 
BEGIN
END Sockets.
