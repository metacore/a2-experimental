MODULE HotKeys;
	IMPORT KernelLog, Strings, Inputs, Modules, Commands, Files, Streams, WMWindowManager, WMMessages, XML, XMLScanner, XMLParser, XMLObjects;
CONST 
	DefaultHotKeyFile = \"HotKeys.XML"\; 
	XMLKeysString = \"keys"\; 
	XMLCommandString = \"command"\; 
	KeySeparatorCharacter = \"+"\; 
	NoKeysym =  -1; 
	Trace = FALSE; 
TYPE 
	Remapping = POINTER TO RECORD 
		ch: CHAR; 
		flags: SET; 
		keysym: SIGNED32; 
	END; 

	HotKey = POINTER TO RECORD 
		ch: CHAR; 
		flags: SET; 
		keyString: XML.String; 
		keysym: SIGNED32; 
		command: XML.String; 
		remapping: Remapping; 
		next: HotKey; 
	END; 
VAR 
	hotkeys: HotKey; 
	hasErrors: BOOLEAN; 
	manager: WMWindowManager.WindowManager; 

	PROCEDURE ^ ParseKeyString(keyString: XML.String; VAR ch: CHAR; VAR flags: SET; VAR keysym: SIGNED32): BOOLEAN; 
	PROCEDURE ^ ParseRemapping(hk: HotKey): BOOLEAN; 
	PROCEDURE ^ StringToKeysym(CONST string: ARRAY OF CHAR): SIGNED32; 
	PROCEDURE ^ IsDuplicate(hotkey: HotKey): BOOLEAN; 
	PROCEDURE ^ AddHotKey(keys, command: XML.String); 
	PROCEDURE ^ CreateHotKeyList(doc: XML.Document); 
	PROCEDURE ^ FlagsAreEqual(f1, f2: SET): BOOLEAN; 
	PROCEDURE ^ GetHotKey(ch: CHAR; flags: SET; keysym: SIZE): HotKey; 
	PROCEDURE ^ ExecuteCommandFor(command: XML.String); 
	PROCEDURE ^ Error(pos, line, row: Streams.Position; CONST msg: ARRAY OF CHAR); 
	PROCEDURE ^ Read(CONST name: ARRAY OF CHAR; context: Commands.Context); 
	PROCEDURE ^ Handle(VAR msg: WMMessages.Message; VAR discard: BOOLEAN); 
	PROCEDURE ^ InstallHandler; 
	PROCEDURE ^ Show*(context: Commands.Context); 
	PROCEDURE ^ Open*(context: Commands.Context); 
	PROCEDURE ^ Cleanup; 
BEGIN
END HotKeys.
