MODULE PCP;
	IMPORT Machine, Modules, Objects, Kernel, Strings, StringPool, PCM, PCS, PCT, PCB, PCC, SYSTEM, PCArrays;
CONST 
	null = PCS.null; 
	times = PCS.times; 
	slash = PCS.slash; 
	div = PCS.div; 
	mod = PCS.mod; 
	and = PCS.and; 
	plus = PCS.plus; 
	minus = PCS.minus; 
	or = PCS.or; 
	eql = PCS.eql; 
	neq = PCS.neq; 
	lss = PCS.lss; 
	leq = PCS.leq; 
	gtr = PCS.gtr; 
	geq = PCS.geq; 
	in = PCS.in; 
	is = PCS.is; 
	arrow = PCS.arrow; 
	period = PCS.period; 
	comma = PCS.comma; 
	colon = PCS.colon; 
	upto = PCS.upto; 
	rparen = PCS.rparen; 
	rbrak = PCS.rbrak; 
	rbrace = PCS.rbrace; 
	of = PCS.of; 
	then = PCS.then; 
	do = PCS.do; 
	to = PCS.to; 
	by = PCS.by; 
	lparen = PCS.lparen; 
	lbrak = PCS.lbrak; 
	lbrace = PCS.lbrace; 
	not = PCS.not; 
	becomes = PCS.becomes; 
	number = PCS.number; 
	nil = PCS.nil; 
	true = PCS.true; 
	false = PCS.false; 
	string = PCS.string; 
	ident = PCS.ident; 
	semicolon = PCS.semicolon; 
	bar = PCS.bar; 
	end = PCS.end; 
	else = PCS.else; 
	elsif = PCS.elsif; 
	until = PCS.until; 
	if = PCS.if; 
	case = PCS.case; 
	while = PCS.while; 
	repeat = PCS.repeat; 
	for = PCS.for; 
	loop = PCS.loop; 
	with = PCS.with; 
	exit = PCS.exit; 
	passivate = PCS.passivate; 
	return = PCS.return; 
	refines = PCS.refines; 
	implements = PCS.implements; 
	array = PCS.array; 
	definition = PCS.definition; 
	object = PCS.object; 
	record = PCS.record; 
	pointer = PCS.pointer; 
	begin = PCS.begin; 
	codeToken = PCS.code; 
	const = PCS.const; 
	type = PCS.type; 
	var = PCS.var; 
	procedure = PCS.procedure; 
	import = PCS.import; 
	module = PCS.module; 
	eof = PCS.eof; 
	finally = PCS.finally; 
	filler = PCS.qmark; 
	backslash = PCS.backslash; 
	scalarproduct = PCS.scalarproduct; 
	elementproduct = PCS.elementproduct; 
	elementquotient = PCS.elementquotient; 
	transpose = PCS.transpose; 
	dtimes = PCS.dtimes; 
	eeql = PCS.eeql; 
	eneq = PCS.eneq; 
	elss = PCS.elss; 
	eleq = PCS.eleq; 
	egtr = PCS.egtr; 
	egeq = PCS.egeq; 
	AllowOverloadedModule = FALSE; 
	MaxIdentDef = 128; 
TYPE 
	IdentDefDesc = RECORD 
		name: PCS.Name; 
		vis: SET; 
	END; 

	Barrier = OBJECT {EXCLUSIVE} (Kernel.Timer)
	VAR 
		timeout: SIGNED32; 
		started, ended: SIGNED32; 

		PROCEDURE ^  & SInit*(timeout: SIGNED32); 
		PROCEDURE ^ Enter; 
		PROCEDURE ^ Exit; 
		PROCEDURE ^ Await; 
		PROCEDURE ^ Stats(VAR started, inside: SIGNED32); 
	END Barrier; 

	Parser* = OBJECT {EXCLUSIVE} 
	TYPE 
		; 
	VAR 
		sync: Barrier; 
		sym, savedsym: PCS.Token; 
		scanner, savedscanner: PCS.Scanner; 
		scope, codescope: PCT.Scope; 
		looplevel, scopelevel: SIGNED8; 
		forexitcount, forretcount, retcount, fincount: SIGNED32; 
		curloop: PCB.LoopInfo; 
		code: PCC.Code; 
		inline: BOOLEAN; 
		locked: BOOLEAN; 
		unlockOnExit: BOOLEAN; 
		die: BOOLEAN; 
		notifyScope: BOOLEAN; 
		isRecord: BOOLEAN; 
		inspect: BOOLEAN; 
		forwardPtr: ARRAY 128 OF RECORD 
			ptr: PCT.Pointer; 
			name: PCS.Name; 
		END; 
		nofForwardPtr: SIGNED32; 

		PROCEDURE ^ Error(n: INTEGER; pos: SIGNED32); 
		PROCEDURE ^ Check(x: PCS.Token); 
		PROCEDURE ^ CheckSemicolons; 
		PROCEDURE ^ CheckSysImported(module: PCT.Module); 
		PROCEDURE ^ TypeModifier(VAR flags: SET; default, allowed: SET); 
		PROCEDURE ^ IdentDef(VAR i: IdentDefDesc; allowRO: BOOLEAN); 
		PROCEDURE ^ OperatorDef(VAR i: IdentDefDesc; allowRO: BOOLEAN); 
		PROCEDURE ^ FPSection(scope: PCT.ProcScope; pflags: SET); 
		PROCEDURE ^ FormalPars(scope: PCT.ProcScope; VAR rtype: PCT.Struct; pflags: SET); 
		PROCEDURE ^ CheckOperator(scope: PCT.ProcScope; VAR name: PCS.Name; rtype: PCT.Struct; pos: SIGNED32); 
		PROCEDURE ^ RecordType(VAR t: PCT.Struct; pointed: BOOLEAN); 
		PROCEDURE ^ Interface(): PCT.Interface; 
		PROCEDURE ^ ObjectType(VAR t: PCT.Struct; name: StringPool.Index); 
		PROCEDURE ^ DefinitionType(pos: SIGNED32; VAR t: PCT.Struct; name: StringPool.Index); 
		PROCEDURE ^ TensorType(VAR t: PCT.Struct); 
		PROCEDURE ^ ArrayType(VAR t: PCT.Struct; enhArray: BOOLEAN); 
		PROCEDURE ^ PointerType(VAR t: PCT.Struct; name: StringPool.Index); 
		PROCEDURE ^ Type(VAR t: PCT.Struct; name: StringPool.Index); 
		PROCEDURE ^ VarDecl; 
		PROCEDURE ^ TypeDecl; 
		PROCEDURE ^ ConstDecl; 
		PROCEDURE ^ FixForwards; 
		PROCEDURE ^ ListOf(parse: PROCEDURE ); 
		PROCEDURE ^ DeclSeq; 
		PROCEDURE ^ Qualident(VAR o: PCT.Symbol); 
		PROCEDURE ^ GetModule(VAR o: PCT.Symbol); 
		PROCEDURE ^ Range(VAR exp, texp, bexp: PCB.Expression): BOOLEAN; 
		PROCEDURE ^ ExprList(VAR x: PCB.ExprList); 
		PROCEDURE ^ GetGuard(search: PCT.Scope; symbol: PCT.Symbol): PCT.Symbol; 
		PROCEDURE ^ Designator(VAR x: PCB.Designator); 
		PROCEDURE ^ Element(VAR x: PCB.Expression); 
		PROCEDURE ^ Set(VAR x: PCB.Expression); 
		PROCEDURE ^ MathArray(VAR x: PCB.Expression); 
		PROCEDURE ^ Factor(VAR x: PCB.Expression); 
		PROCEDURE ^ Term(VAR x: PCB.Expression); 
		PROCEDURE ^ CallAssignmentOp(op: PCS.Token; mod: PCT.Symbol; p1: PCB.Designator; p2: PCB.Expression; pos: SIGNED32; suppress: BOOLEAN); 
		PROCEDURE ^ CallOperator(op: PCS.Token; mod: PCT.Symbol; pars: ARRAY OF PCB.Expression; pos: SIGNED32): PCB.Expression; 
		PROCEDURE ^ SimpleExpr(VAR x: PCB.Expression); 
		PROCEDURE ^ Expr(VAR x: PCB.Expression); 
		PROCEDURE ^ ConstExpr(VAR x: PCB.Const); 
		PROCEDURE ^ Case(body, suppress: BOOLEAN; VAR awaitCount: SIGNED32; VAR caseinfo: PCB.CaseInfo); 
		PROCEDURE ^ If(body, suppress: BOOLEAN; VAR awaitCount: SIGNED32); 
		PROCEDURE ^ BlockModifier(allowBody, suppress: BOOLEAN; VAR locked: BOOLEAN); 
		PROCEDURE ^ StatementBlock(body, suppress: BOOLEAN; VAR awaitCount: SIGNED32); 
		PROCEDURE ^ CallNewOnObject(code: PCC.Code; suppress: BOOLEAN; proc: PCB.Designator; params: PCB.ExprList; curlevel: SIGNED8); 
		PROCEDURE ^ StatementSeq(body, suppress: BOOLEAN; VAR awaitCount: SIGNED32); 
		PROCEDURE ^ Body(suppress: BOOLEAN); 
		PROCEDURE ^ ProcDecl; 
		PROCEDURE ^ SkipScope; 
		PROCEDURE ^ Epilog; 
	BEGIN{ACTIVE} 
	END Parser; 

	CustomArrayParser = OBJECT {EXCLUSIVE} (Parser)
	VAR 
		bodyscope: PCT.ProcScope; 
		old: PCT.Scope; 

		PROCEDURE ^ Body(suppress: BOOLEAN); 
		PROCEDURE ^ DeclSeq; 
		PROCEDURE ^  & InitRec*(sync: Barrier; recscope: PCT.CustomArrayScope; s: PCS.Scanner; sym: PCS.Token); 
	END CustomArrayParser; 

	ObjectParser = OBJECT {EXCLUSIVE} (Parser)
	VAR 
		bodyscope: PCT.ProcScope; 
		old: PCT.Scope; 

		PROCEDURE ^ Body(suppress: BOOLEAN); 
		PROCEDURE ^ DeclSeq; 
		PROCEDURE ^  & InitRec*(sync: Barrier; recscope: PCT.RecScope; s: PCS.Scanner; sym: PCS.Token); 
	END ObjectParser; 

	RecordParser = OBJECT {EXCLUSIVE} (Parser)

		PROCEDURE ^ Body(suppress: BOOLEAN); 
		PROCEDURE ^ DeclSeq; 
		PROCEDURE ^  & InitRec*(sync: Barrier; recscope: PCT.RecScope; s: PCS.Scanner; sym: PCS.Token); 
	END RecordParser; 

	InterfaceParser = OBJECT {EXCLUSIVE} (Parser)

		PROCEDURE ^ Body(suppress: BOOLEAN); 
		PROCEDURE ^ DeclSeq; 
		PROCEDURE ^  & InitRec*(sync: Barrier; recscope: PCT.RecScope; s: PCS.Scanner; sym: PCS.Token); 
	END InterfaceParser; 

	ProcedureParser = OBJECT {EXCLUSIVE} (Parser)

		PROCEDURE ^  & InitProc*(sync: Barrier; procscope: PCT.ProcScope; inline: BOOLEAN; VAR s: PCS.Scanner; sym: PCS.Token); 
	END ProcedureParser; 

	AwaitParser = OBJECT {EXCLUSIVE} (Parser)

		PROCEDURE ^ DeclSeq; 
		PROCEDURE ^ Body(suppress: BOOLEAN); 
		PROCEDURE ^  & Init*(sync: Barrier; procscope: PCT.ProcScope; VAR s: PCS.Scanner; sym: PCS.Token); 
	END AwaitParser; 

	ModuleParser = OBJECT {EXCLUSIVE} (Parser)
	VAR 
		modscope: PCT.ModScope; 

		PROCEDURE ^ ImportList; 
		PROCEDURE ^ ParseInterface; 
		PROCEDURE ^ Await*; 
		PROCEDURE ^  & InitModule*(modscope: PCT.ModScope; s: PCS.Scanner); 
		PROCEDURE ^ Epilog; 
	END ModuleParser; 
VAR 
	Assemble*: PROCEDURE (scanner: PCS.Scanner; scope: PCT.Scope; exported, inlined: BOOLEAN):PCM.Attribute; 
	noname, self, untraced, delegate, overloading, exclusive, active, safe, priority, realtime, winapi, clang, notag, deltype, hiddenptr, procfld, ptrfld: StringPool.Index; 
	NModules, NObjects, NDefinitions, NArrays, NRecords, NPointers, NDelegates, NProcedureTypes, NExclusive, NExclusiveMain, NActive, NSyncsCount: SIGNED32; 

	PROCEDURE ^ InitializationWarning(s: PCT.Symbol); 
	PROCEDURE ^ UsageWarning(s: PCT.Symbol); 
	PROCEDURE ^ SameNameWarning(s: PCT.Symbol); 
	PROCEDURE ^ UselessExportWarning(s: PCT.Symbol); 
	PROCEDURE ^ ScopeWarnings(scope: PCT.Scope); 
	PROCEDURE ^ ImportListWarnings(mod: PCT.Module); 
	PROCEDURE ^ ParseModule*(scope: PCT.ModScope; s: PCS.Scanner); 
	PROCEDURE ^ CreateString(VAR idx: StringPool.Index; str: ARRAY OF CHAR); 
	PROCEDURE ^ CreateContext(VAR name: StringPool.Index; context: StringPool.Index); 
BEGIN
END PCP.
