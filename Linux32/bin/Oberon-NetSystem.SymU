MODULE NetSystem IN Oberon;
	IMPORT S := SYSTEM, IP IN A2, DNS IN A2, TCP IN A2, UDP IN A2, Texts, Oberon, Input, Fonts, Strings, Out;
CONST 
	CR = 0DX; 
	LF = 0AX; 
	done* = 0; 
	error* = 1; 
	timeout* = 2; 
	closed* = 0; 
	listening* = 1; 
	in* = 2; 
	out* = 3; 
	inout* = 4; 
	waitCon* = 5; 
	errorCon* = 6; 
	undef =  -1; 
	IPAdrLen = 4; 
	anyport* = 0; 
TYPE 
	IPAdr* = IP.Adr; 

	Connection* = TCP.Connection; 

	HostInfo* = POINTER TO HostInfoDesc; 

	HostInfoDesc* = RECORD 
		next: HostInfo; 
		ip-: IPAdr; 
		name-: ARRAY 64 OF CHAR; 
		done-, err-, getip: BOOLEAN; 
	END; 

	Socket* = UDP.Socket; 

	Password = POINTER TO PasswordDesc; 

	PasswordDesc = RECORD 
		service, user, host, passwd: ARRAY 64 OF CHAR; 
		next: Password; 
	END; 

	Bytes = ARRAY MAX(SIGNED32) OF CHAR; 
VAR 
	hostIP*: IPAdr; 
	anyIP*, allIP*: IPAdr; 
	hostName*: ARRAY 65 OF CHAR; 
	hostInfos: HostInfo; 
	W: Texts.Writer; 
	passwords: Password; 

	PROCEDURE ^ Start*; 
	PROCEDURE ^ Stop*; 
	PROCEDURE ^ ToHost*(CONST num: ARRAY OF CHAR; VAR adr: IPAdr; VAR done: BOOLEAN); 
	PROCEDURE ^ ToNum*(adr: IPAdr; VAR num: ARRAY OF CHAR); 
	PROCEDURE ^ AsyncGetIP*(VAR hostInfo: HostInfo; name: ARRAY OF CHAR); 
	PROCEDURE ^ GetIP*(CONST name: ARRAY OF CHAR; VAR IP: IPAdr); 
	PROCEDURE ^ AsyncGetName*(VAR hostInfo: HostInfo; IP: IPAdr); 
	PROCEDURE ^ GetName*(IP: IPAdr; VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ WriteURL(CONST service, user, host: ARRAY OF CHAR); 
	PROCEDURE ^ GetPassword*(service, host: ARRAY OF CHAR; VAR user, password: ARRAY OF CHAR); 
	PROCEDURE ^ DelPassword*(CONST pservice, user, phost: ARRAY OF CHAR); 
	PROCEDURE ^ SetUser*; 
	PROCEDURE ^ ClearUser*; 
	PROCEDURE ^ Available*(conn: Connection): SIGNED32; 
	PROCEDURE ^ OpenConnection*(VAR conn: Connection; locPort: SIGNED16; remIP: IPAdr; remPort: SIGNED16; VAR res: SIGNED16); 
	PROCEDURE ^ AsyncOpenConnection*(VAR conn: Connection; locPort: SIGNED16; remIP: IPAdr; remPort: SIGNED16; VAR res: SIGNED16); 
	PROCEDURE ^ CloseConnection*(conn: Connection); 
	PROCEDURE ^ Requested*(conn: Connection): BOOLEAN; 
	PROCEDURE ^ Accept*(conn: Connection; VAR newC: Connection; VAR res: SIGNED16); 
	PROCEDURE ^ State*(conn: Connection): SIGNED16; 
	PROCEDURE ^ GetPartner*(conn: Connection; VAR remIP: IPAdr; VAR remPort: SIGNED16); 
	PROCEDURE ^ Read*(conn: Connection; VAR ch: CHAR); 
	PROCEDURE ^ ReadBytes*(conn: Connection; pos, len: SIGNED32; VAR buf: ARRAY OF S.BYTE); 
	PROCEDURE ^ ReadBool*(conn: Connection; VAR b: BOOLEAN); 
	PROCEDURE ^ ReadInt*(conn: Connection; VAR x: SIGNED16); 
	PROCEDURE ^ ReadLInt*(conn: Connection; VAR x: SIGNED32); 
	PROCEDURE ^ ReadString*(conn: Connection; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ Write*(conn: Connection; ch: CHAR); 
	PROCEDURE ^ WriteBytes*(conn: Connection; pos, len: SIGNED32; CONST buf: ARRAY OF S.BYTE); 
	PROCEDURE ^ WriteBool*(conn: Connection; b: BOOLEAN); 
	PROCEDURE ^ WriteInt*(conn: Connection; x: SIGNED16); 
	PROCEDURE ^ WriteLInt*(conn: Connection; x: SIGNED32); 
	PROCEDURE ^ WriteString*(conn: Connection; CONST s: ARRAY OF CHAR); 
	PROCEDURE ^ OpenSocket*(VAR soc: Socket; locPort: SIGNED16; VAR res: SIGNED16); 
	PROCEDURE ^ CloseSocket*(S: Socket); 
	PROCEDURE ^ AvailableDG*(soc: Socket): SIGNED32; 
	PROCEDURE ^ SendDG*(soc: Socket; remIP: IPAdr; remport: SIGNED16; pos, len: SIGNED32; CONST buf: ARRAY OF S.BYTE); 
	PROCEDURE ^ ReceiveDG*(soc: Socket; VAR remIP: IPAdr; VAR remport: SIGNED16; pos: SIGNED32; VAR len: SIGNED32; VAR buf: ARRAY OF S.BYTE); 
	PROCEDURE ^ PutInt*(VAR buf: ARRAY OF S.BYTE; pos: SIGNED16; x: SIGNED16); 
	PROCEDURE ^ PutLInt*(VAR buf: ARRAY OF S.BYTE; pos: SIGNED16; x: SIGNED32); 
	PROCEDURE ^ GetInt*(CONST buf: ARRAY OF S.BYTE; pos: SIGNED16; VAR x: SIGNED16); 
	PROCEDURE ^ GetLInt*(CONST buf: ARRAY OF S.BYTE; pos: SIGNED16; VAR x: SIGNED32); 
	PROCEDURE ^ Show*; 
BEGIN
END NetSystem.
