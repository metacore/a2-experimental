MODULE HTTPSession;
	IMPORT HTTPSupport, WebHTTP, MD5, IP, Random, Dates, Strings, TFClasses, Kernel, Modules, KernelLog;
CONST 
	HTTPVarSessionIdName* = \"sessionid"\; 
	InitialLeaseTime = 5.; 
	LeaseTimeIncrement = 2.; 
	MaxLeaseTime = 1.5E+1; 
	LeaseManagerInterval = (60 * 1000); 
TYPE 
	SessionId* = ARRAY 80 OF CHAR; 

	SessionVariable* = POINTER TO RECORD 
		name*: Strings.String; 
		value*: ANY; 
	END; 

	Session* = OBJECT {EXCLUSIVE} 
	VAR 
		sessionId*: SessionId; 
		sessionVariables*: TFClasses.List; 
		leaseTime*: FLOAT32; 

		PROCEDURE ^  & Init*(sessionId: SessionId); 
		PROCEDURE ^ GetVariableValue*(name: ARRAY OF CHAR): ANY; 
		PROCEDURE ^ GetVariableByName*(name: ARRAY OF CHAR): SessionVariable; 
		PROCEDURE ^ AddVariableValue*(name: ARRAY OF CHAR; value: ANY); 
		PROCEDURE ^ RemoveVariable*(name: ARRAY OF CHAR); 
		PROCEDURE ^ IncreaseLifeTime*; 
	END Session; 

	SessionExpirationHandler* = PROCEDURE {DELEGATE}(session: Session); 

	LeaseManager = OBJECT {EXCLUSIVE} 
	VAR 
		timer: Kernel.Timer; 
		i, j: SIZE; 
		pSession, pHandler: ANY; 
		s: Session; 
		expiredSessions: TFClasses.List; 
		alive, dead: BOOLEAN; 
		expObj: ExpirationHandlerObject; 

		PROCEDURE ^ Kill*; 
		PROCEDURE ^ SetDead; 
		PROCEDURE ^ WaitDead*; 
	BEGIN{ACTIVE} 
	END LeaseManager; 

	ExpirationHandlerObject = POINTER TO RECORD 
		handler: SessionExpirationHandler; 
	END; 
VAR 
	sessions: TFClasses.List; 
	expirationHandlers: TFClasses.List; 
	leaseManager: LeaseManager; 
	randomSequence: Random.Sequence; 
	date, time: SIGNED32; 

	PROCEDURE ^ GetSessionId*(request: HTTPSupport.HTTPRequest; VAR sessionId: SessionId); 
	PROCEDURE ^ GetExistingSession*(request: HTTPSupport.HTTPRequest): Session; 
	PROCEDURE ^ GetSession*(request: HTTPSupport.HTTPRequest): Session; 
	PROCEDURE ^ FindSessionBySessionId(sessionId: SessionId): Session; 
	PROCEDURE ^ NewSessionId(header: WebHTTP.RequestHeader; VAR sessionId: SessionId); 
	PROCEDURE ^ AddExpirationHandler*(handler: SessionExpirationHandler); 
	PROCEDURE ^ RemoveExpirationHandler*(handler: SessionExpirationHandler); 
	PROCEDURE ^ StopLeaseManager*; 
	PROCEDURE ^ StartLeaseManager*; 
BEGIN
END HTTPSession.
