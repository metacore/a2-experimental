MODULE BTrees IN Oberon;
	IMPORT Files;
CONST 
	Done* = 0; 
	NotFound* = 1; 
	EntryChanged* = 2; 
	Tag = 2425; 
	PageSize = (2 * 1024); 
	BoolSize = 1; 
	IntSize = 2; 
	LIntSize = 4; 
	LInt = 0; 
	LIntKeySize = LIntSize; 
	LIntPageN = (((((PageSize - BoolSize) - LIntSize) - IntSize) - LIntSize) DIV (2 * (LIntKeySize + (2 * LIntSize)))); 
	LIntPageSize = ((((LIntSize + BoolSize) + IntSize) + LIntSize) + ((2 * LIntPageN) * (LIntKeySize + (2 * LIntSize)))); 
	Str = 1; 
	StrKeySize* = 64; 
	StrPageN = (((((PageSize - BoolSize) - LIntSize) - IntSize) - LIntSize) DIV (2 * (StrKeySize + (2 * LIntSize)))); 
	StrPageSize = ((((LIntSize + BoolSize) + IntSize) + LIntSize) + ((2 * StrPageN) * (StrKeySize + (2 * LIntSize)))); 
TYPE 
	Page = POINTER TO PageDesc; 

	PageDesc = RECORD 
		org: LONGINT; 
		p0: LONGINT; 
		m: INTEGER; 
		dirty: BOOLEAN; 
		discard: BOOLEAN; 
		next: Page; 
	END; 

	Tree* = POINTER TO TreeDesc; 

	TreeDesc = RECORD 
		F: Files.File; 
		cache: Page; 
		org: LONGINT; 
		root: LONGINT; 
		free: LONGINT; 
		class: INTEGER; 
		noCache: INTEGER; 
		maxCache: INTEGER; 
	END; 

	Entry = RECORD 
		org: LONGINT; 
		p: LONGINT; 
	END; 

	LIntEntry = RECORD (Entry)
		key: LONGINT; 
	END; 

	LIntPage = POINTER TO LIntPageDesc; 

	LIntPageDesc = RECORD (PageDesc)
		e: ARRAY (2 * LIntPageN) OF LIntEntry; 
	END; 

	EnumLIntProc* = PROCEDURE (key, org: LONGINT; VAR cont: BOOLEAN); 

	StrEntry = RECORD (Entry)
		key: ARRAY StrKeySize OF CHAR; 
	END; 

	StrPage = POINTER TO StrPageDesc; 

	StrPageDesc = RECORD (PageDesc)
		e: ARRAY (2 * StrPageN) OF StrEntry; 
	END; 

	EnumStrProc* = PROCEDURE (key: ARRAY OF CHAR; org: LONGINT; VAR cont: BOOLEAN); 
VAR 
	MINStrKey*, MAXStrKey*: ARRAY StrKeySize OF CHAR; 

	PROCEDURE ^ AllocSpace(T: Tree; size: LONGINT): LONGINT; 
	PROCEDURE ^ ToFree(T: Tree; P: Page); 
	PROCEDURE ^ WriteLIntPage(T: Tree; p: LIntPage); 
	PROCEDURE ^ NewLIntPage(T: Tree): LIntPage; 
	PROCEDURE ^ ReadLIntPage(T: Tree; org: LONGINT; VAR p: LIntPage); 
	PROCEDURE ^ SearchLInt*(T: Tree; key: LONGINT; VAR org: LONGINT; VAR res: INTEGER); 
	PROCEDURE ^ insertLInt(T: Tree; key, org: LONGINT; a: LIntPage; VAR h: BOOLEAN; VAR v: LIntEntry; VAR res: INTEGER); 
	PROCEDURE ^ InsertLInt*(T: Tree; key, org: LONGINT; VAR res: INTEGER); 
	PROCEDURE ^ underflowLInt(T: Tree; c, a: LIntPage; s: LONGINT; VAR h: BOOLEAN); 
	PROCEDURE ^ deleteLInt(T: Tree; key: LONGINT; a: LIntPage; VAR h: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ DeleteLInt*(T: Tree; key: LONGINT; VAR res: INTEGER); 
	PROCEDURE ^ enumerateLInt(T: Tree; p: LIntPage; min, max: LONGINT; enum: EnumLIntProc; VAR cont: BOOLEAN); 
	PROCEDURE ^ EnumLInt*(T: Tree; min, max: LONGINT; enum: EnumLIntProc); 
	PROCEDURE ^ minLIntKey(T: Tree; p: LIntPage; VAR key: LONGINT); 
	PROCEDURE ^ MinLIntKey*(T: Tree; VAR key: LONGINT; VAR res: INTEGER); 
	PROCEDURE ^ maxLIntKey(T: Tree; p: LIntPage; VAR key: LONGINT); 
	PROCEDURE ^ MaxLIntKey*(T: Tree; VAR key: LONGINT; VAR res: INTEGER); 
	PROCEDURE ^ NewLInt*(F: Files.File; org: LONGINT; cache: INTEGER): Tree; 
	PROCEDURE ^ WriteStrPage(T: Tree; p: StrPage); 
	PROCEDURE ^ NewStrPage(T: Tree): StrPage; 
	PROCEDURE ^ ReadStrPage(T: Tree; org: LONGINT; VAR p: StrPage); 
	PROCEDURE ^ SearchStr*(T: Tree; key: ARRAY OF CHAR; VAR org: LONGINT; VAR res: INTEGER); 
	PROCEDURE ^ insertStr(T: Tree; VAR key: ARRAY OF CHAR; org: LONGINT; a: StrPage; VAR h: BOOLEAN; VAR v: StrEntry; VAR res: INTEGER); 
	PROCEDURE ^ InsertStr*(T: Tree; key: ARRAY OF CHAR; org: LONGINT; VAR res: INTEGER); 
	PROCEDURE ^ underflowStr(T: Tree; c, a: StrPage; s: LONGINT; VAR h: BOOLEAN); 
	PROCEDURE ^ deleteStr(T: Tree; VAR key: ARRAY OF CHAR; a: StrPage; VAR h: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ DeleteStr*(T: Tree; key: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ enumerateStr(T: Tree; p: StrPage; VAR min, max: ARRAY OF CHAR; enum: EnumStrProc; VAR cont: BOOLEAN); 
	PROCEDURE ^ EnumStr*(T: Tree; min, max: ARRAY OF CHAR; enum: EnumStrProc); 
	PROCEDURE ^ minStrKey(T: Tree; p: StrPage; VAR key: ARRAY OF CHAR); 
	PROCEDURE ^ MinStrKey*(T: Tree; VAR key: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ maxStrKey(T: Tree; p: StrPage; VAR key: ARRAY OF CHAR); 
	PROCEDURE ^ MaxStrKey*(T: Tree; VAR key: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ NewStr*(F: Files.File; org: LONGINT; cache: INTEGER): Tree; 
	PROCEDURE ^ Old*(F: Files.File; org: LONGINT): Tree; 
	PROCEDURE ^ Flush*(T: Tree); 
	PROCEDURE ^ Base*(T: Tree): Files.File; 
	PROCEDURE ^ Init; 
BEGIN
END BTrees.
