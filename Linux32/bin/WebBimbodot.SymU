MODULE WebBimbodot;
	IMPORT Dates, Strings, Modules, Kernel, XML, XMLObjects, XMLScanner, XMLParser, Streams, KernelLog, Archives, Files, WebHTTP, WebCGI, HTTPSupport, Commands;
CONST 
	MaxAuthor = 16; 
	ArticleListFile = \"BimboArticles.txt"\; 
	CategoryFile = \"BimbodotCategories.txt"\; 
	AuthorDataFile = \"BimbodotAuthors.txt"\; 
	BimbodotConfigFile = \"BimbodotConfig.dat"\; 
TYPE 
	String = Strings.String; 

	HTMLWriter = OBJECT 
	VAR 
		w*: Streams.Writer; 

		PROCEDURE ^  & New*(w: Streams.Writer); 
		PROCEDURE ^ Head*(CONST title: ARRAY OF CHAR); 
		PROCEDURE ^ Br*; 
		PROCEDURE ^ Nbsp*; 
		PROCEDURE ^ InputText*(CONST name: ARRAY OF CHAR; value: String); 
		PROCEDURE ^ Hide*(CONST name, value: ARRAY OF CHAR); 
		PROCEDURE ^ BeginOptionField*(CONST name, value: ARRAY OF CHAR); 
		PROCEDURE ^ Option*(CONST text: ARRAY OF CHAR); 
		PROCEDURE ^ EndOptionField*; 
		PROCEDURE ^ Submit(CONST text: ARRAY OF CHAR); 
		PROCEDURE ^ InputArea*(CONST name: ARRAY OF CHAR; value: String); 
		PROCEDURE ^ TextLink*(CONST text, target: ARRAY OF CHAR); 
		PROCEDURE ^ Tail*; 
		PROCEDURE ^ TAHTMLString(CONST s: ARRAY OF CHAR); 
		PROCEDURE ^ HTMLString(CONST s: ARRAY OF CHAR); 
		PROCEDURE ^ URIString(CONST s: ARRAY OF CHAR); 
	END HTMLWriter; 

	Version = OBJECT 
	VAR 
		title, department, category, author, email, posterUID, date, text, cache: String; 
		articleID: String; 
		authorUID: SIGNED32; 
		errors: BOOLEAN; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ Store(w: Streams.Writer); 
		PROCEDURE ^ Fail(pos, line, row: Streams.Position; CONST msg: ARRAY OF CHAR); 
		PROCEDURE ^ Load(r: Streams.Reader): BOOLEAN; 
	END Version; 

	Article* = OBJECT {EXCLUSIVE} 
	VAR 
		uid, path, filename, stateFileName: String; 
		nofVersions: SIGNED32; 
		current: Version; 
		archive: Archives.Archive; 
		site: Archive; 

		PROCEDURE ^ Load(CONST path, uid: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ Create(CONST path, uid: ARRAY OF CHAR; version: Version); 
		PROCEDURE ^ CountVersions; 
		PROCEDURE ^ LoadState; 
		PROCEDURE ^ StoreState; 
		PROCEDURE ^ GetVersion*(nr: SIGNED32): Version; 
		PROCEDURE ^ InternalAdd(v: Version); 
		PROCEDURE ^ AddVersion*(v: Version); 
	END Article; 

	Articles = POINTER TO ARRAY OF Article; 

	ArticleList = POINTER TO RECORD 
		uid: String; 
		prev, next: ArticleList; 
	END; 

	Author = RECORD 
		uid: ARRAY 16 OF CHAR; 
		pwd: ARRAY 16 OF CHAR; 
		name: ARRAY 64 OF CHAR; 
		email: ARRAY 64 OF CHAR; 
		dept: ARRAY 64 OF CHAR; 
	END; 

	CategoryStrings = POINTER TO ARRAY OF Strings.String; 

	Archive = OBJECT {EXCLUSIVE} 
	VAR 
		articles: Articles; 
		nofLoadedArticles: SIGNED32; 
		aList, path, title: ARRAY 256 OF CHAR; 
		id: ARRAY 32 OF CHAR; 
		frontPage: Strings.Buffer; 
		first, last: ArticleList; 
		needUpdate: BOOLEAN; 
		alive: BOOLEAN; 
		authorList: ARRAY MaxAuthor OF Author; 
		nofAuthor: SIGNED32; 
		nofCategories: SIGNED32; 
		categoryStrings: CategoryStrings; 

		PROCEDURE ^ LoadCategories; 
		PROCEDURE ^  & Init*(CONST path, id, title: ARRAY OF CHAR); 
		PROCEDURE ^ CreateFrontPage; 
		PROCEDURE ^ ArticleUpdated; 
		PROCEDURE ^ LoadArticle(CONST uid: ARRAY OF CHAR): Article; 
		PROCEDURE ^ AddLoadedArticle(a: Article); 
		PROCEDURE ^ InternalGetArticle(CONST uid: ARRAY OF CHAR): Article; 
		PROCEDURE ^ GetArticle*(CONST uid: ARRAY OF CHAR): Article; 
		PROCEDURE ^ GetVersion*(CONST uid: ARRAY OF CHAR; vNr: SIGNED32): Version; 
		PROCEDURE ^ GetUID(VAR uid: ARRAY OF CHAR); 
		PROCEDURE ^ CreateArticle(v: Version): Article; 
		PROCEDURE ^ Finish; 
	BEGIN{ACTIVE} 
	END Archive; 

	ArchiveInfo = RECORD 
		id: ARRAY 256 OF CHAR; 
		path, title: ARRAY 256 OF CHAR; 
		content: Archive; 
	END; 

	ArchiveList = POINTER TO ARRAY OF ArchiveInfo; 
VAR 
	uriLiteral: ARRAY 256 OF BOOLEAN; 
	empty: String; 
	archiveList: ArchiveList; 
	nofArchive: SIGNED32; 

	PROCEDURE ^ MakeListLink(archive: Archive; VAR l: ARRAY OF CHAR); 
	PROCEDURE ^ RenderArticleHeadline(h: HTMLWriter; archive: Archive; a: Article); 
	PROCEDURE ^ FindVersion(archive: Archive; r: HTTPSupport.HTTPRequest): Version; 
	PROCEDURE ^ Frontpage*(archive: Archive; data: ANY): ANY; 
	PROCEDURE ^ QueryEdit*(archive: Archive; data: ANY): ANY; 
	PROCEDURE ^ Publish*(archive: Archive; data: ANY): ANY; 
	PROCEDURE ^ ShowArticle*(archive: Archive; data: ANY): ANY; 
	PROCEDURE ^ Access*(context: WebCGI.CGIContext); 
	PROCEDURE ^ AddArchive(CONST id, path, title: ARRAY OF CHAR); 
	PROCEDURE ^ GetArchiveInternal(CONST id: ARRAY OF CHAR): Archive; 
	PROCEDURE ^ GetArchive(CONST id: ARRAY OF CHAR): Archive; 
	PROCEDURE ^ LoadArchiveList; 
	PROCEDURE ^ StoreArchiveList; 
	PROCEDURE ^ Create*(context: Commands.Context); 
	PROCEDURE ^ Finalizer; 
	PROCEDURE ^ InitURILiterals; 
BEGIN
END WebBimbodot.
