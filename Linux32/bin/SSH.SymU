MODULE SSH;
	IMPORT Kernel, Streams, Files, Strings, Log := KernelLog, Commands, IP, TCP, T := SSHTransport, A := SSHAuthorize, U := CryptoUtils;
CONST 
	GlobalRequest = 50X; 
	RequestSuccess = 51X; 
	RequestFailure = 52X; 
	ChannelOpen = 5AX; 
	OpenConfirm = 5BX; 
	OpenFailure = 5CX; 
	WindAdjust = 5DX; 
	Data = 5EX; 
	ExtData = 5FX; 
	ChannelEOF = 60X; 
	ChannelClose = 61X; 
	ChannelRequest = 62X; 
	ChannelSuccess = 63X; 
	ChannelFailure = 64X; 
	WinSize = (8 * 1024); 
	MaxPacketSize = (4 * 1024); 
	CR = 0DX; 
	NL = 0AX; 
	HT = 9X; 
	ChanClosed* = T.Closed; 
	ChanOpen* = T.Connected; 
TYPE 
	ClientHandler = OBJECT {EXCLUSIVE} 
	VAR 
		f: Forwarder; 
		p: T.Packet; 
		buf: ARRAY 64 OF CHAR; 
		len: LONGINT; 
		res: WORD; 

		PROCEDURE ^  & Init(forw: Forwarder); 
	BEGIN{ACTIVE} 
	END ClientHandler; 

	Forwarder = OBJECT {EXCLUSIVE} 
	VAR 
		next: Forwarder; 
		active: BOOLEAN; 
		timer: Kernel.Timer; 
		localPort: LONGINT; 
		localConn: TCP.Connection; 
		clientConn: TCP.Connection; 
		destPort: LONGINT; 
		remConn: T.Connection; 
		chan: Channel; 
		buf: ARRAY 4096 OF CHAR; 
		type: CHAR; 
		len: LONGINT; 
		res: WORD; 
		clientHandlerRunning: BOOLEAN; 
		clientHandler: ClientHandler; 

		PROCEDURE ^ OpenTunnel(): BOOLEAN; 
		PROCEDURE ^ Stop; 
		PROCEDURE ^ CloseAllConnections; 
		PROCEDURE ^  & Init*(lConn: TCP.Connection; lPort: LONGINT; rConn: T.Connection; dPort: LONGINT); 
	BEGIN{ACTIVE} 
	END Forwarder; 

	Channel* = OBJECT (Streams.Connection)
	VAR 
		state-: SHORTINT; 
		conn-: T.Connection; 
		rchan: LONGINT; 
		wsize-: LONGINT; 
		clchan: LONGINT; 
		clwsize: LONGINT; 
		pmax: LONGINT; 
		noneblocking: BOOLEAN; 
		recBuffer: POINTER TO ARRAY OF CHAR; 
		rbstart, rbend: LONGINT; 
		interactive: BOOLEAN; 

		PROCEDURE ^ Send*(CONST data: ARRAY OF CHAR; ofs, len: LONGINT; propagate: BOOLEAN; VAR res: WORD); 
		PROCEDURE ^ Receive*(VAR data: ARRAY OF CHAR; ofs, size, min: LONGINT; VAR len: LONGINT; VAR res: WORD); 
		PROCEDURE ^ NewDataPacket(size: LONGINT): T.Packet; 
		PROCEDURE ^ SendPacket*(p: T.Packet); 
		PROCEDURE ^ SendBuffer*(CONST buf: ARRAY OF CHAR; len: LONGINT); 
		PROCEDURE ^ SendChar*(ch: CHAR); 
		PROCEDURE ^ ReceivePacket*(VAR buf: ARRAY OF CHAR; VAR len: LONGINT): CHAR; 
		PROCEDURE ^ ReceiveLine*(VAR line: ARRAY OF CHAR; VAR len: LONGINT); 
		PROCEDURE ^ WindowChange*(width, height: LONGINT); 
		PROCEDURE ^ RemoteCommand*(CONST cmd: ARRAY OF CHAR); 
		PROCEDURE ^ Sync*; 
		PROCEDURE ^ SendNL*; 
		PROCEDURE ^ SendCR*; 
		PROCEDURE ^ SendEOF*; 
		PROCEDURE ^ SkipInput; 
		PROCEDURE ^ Close*; 
		PROCEDURE ^  & Init*(conn: T.Connection); 
	END Channel; 
VAR 
	forwarderList: Forwarder; 
	hexd: ARRAY 17 OF CHAR; 

	PROCEDURE ^ OpenSession*(conn: T.Connection; interactive: BOOLEAN): Channel; 
	PROCEDURE ^ Error(CONST msg: ARRAY OF CHAR); 
	PROCEDURE ^ ErrorResponse(CONST msg, buf: ARRAY OF CHAR; len: LONGINT); 
	PROCEDURE ^ ShowChar(c: CHAR); 
	PROCEDURE ^ ShowPacket(CONST buf: ARRAY OF CHAR; len: LONGINT); 
	PROCEDURE ^ Pause(ms: LONGINT); 
	PROCEDURE ^ Connect(arg: Streams.Reader; VAR remHost: ARRAY OF CHAR): A.Connection; 
	PROCEDURE ^ Send*(context: Commands.Context); 
	PROCEDURE ^ SendFile(f: Files.File; chan: Channel; CONST name: ARRAY OF CHAR); 
	PROCEDURE ^ Receive*(context: Commands.Context); 
	PROCEDURE ^ ReceiveFile(chan: Channel; CONST name: ARRAY OF CHAR); 
	PROCEDURE ^ StartForwarding*(context: Commands.Context); 
	PROCEDURE ^ Stop(fw: Forwarder); 
	PROCEDURE ^ StopForwarding*(context: Commands.Context); 
BEGIN
END SSH.
