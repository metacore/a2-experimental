MODULE Asteroids IN Oberon;
	IMPORT Attributes, Desktops, Display, Display3, Documents, Effects, Files, Fonts, Gadgets, Strings, Modules, Math IN A2, Oberon, Objects, Out, Panels, RandomNumbers;
CONST 
	Version = \"V 1.5"\; 
	Date = \"August '97"\; 
	CompVers = \"V 1.5"\; 
	DefName = \"Asteroids.Doc"\; 
	DocMenu1 = \"Desktops.StoreDoc[Store] Asteroids.NewGame[New] Asteroids.PauseGame[Pause]"\; 
	DocMenu2 = \"Desktops.StoreDoc[Store] Asteroids.NewGame[New] Asteroids.ResumeGame[Cont]"\; 
	DocIcon = \"Icons3.Asteroids"\; 
	Indestructable = FALSE; 
	BaseDelay = 16; 
	ChThrust = 0C1X; 
	ChTurnRight = 0C3X; 
	ChTurnLeft = 0C4X; 
	ChFire = \" "\; 
	ChShield = \"z"\; 
	ChWarp = \"x"\; 
	StartShips = 3; 
	ShipRotvel =   5.0000001E-002; 
	ShipThrust =   3.0000001E-001; 
	ShipShield = 100; 
	ShipWarp = 10; 
	SBulletMax = 5; 
	SBulletSpd =   5.0000000E+000; 
	SBulletGrant = 100; 
	SBulletCost = 10; 
	SShieldGrant = 5; 
	EAppear = 8000; 
	EBulletMax = 1; 
	EBulletSpd =   2.0000000E+000; 
	EBulletGrant = 200; 
	DetonationMax = 50; 
	DetonationStep = 1; 
	HitScoreE1 = 100; 
	HitScoreA1 = 50; 
	HitScoreA2 = 70; 
	HitScoreA3 = 80; 
	StartAsts = 4; 
	SplitAsts = 2; 
TYPE 
	Object = Objects.Object; 

	Document = Documents.Document; 

	AttrMsg = Objects.AttrMsg; 

	CopyMsg = Objects.CopyMsg; 

	DisplayMsg = Display.DisplayMsg; 

	FileMsg = Objects.FileMsg; 

	InputMsg = Oberon.InputMsg; 

	LinkMsg = Objects.LinkMsg; 

	ModifyMsg = Display.ModifyMsg; 

	UpdateMsg = Gadgets.UpdateMsg; 

	MenuMsg = RECORD (Display.FrameMsg)
		frame: Display.Frame; 
		paused: BOOLEAN; 
	END; 

	Vertices = POINTER TO ARRAY OF INTEGER; 

	Starfield = POINTER TO StarfieldDesc; 

	StarfieldDesc = RECORD (Panels.PanelDesc)
		scaleX, scaleY: REAL; 
		fdx: INTEGER; 
	END; 

	Shape = POINTER TO ShapeDesc; 

	ShapeDesc = RECORD 
		n: INTEGER; 
		px, py: Vertices; 
	END; 

	SpaceObj = POINTER TO SpaceObjDesc; 

	SpaceObjDesc = RECORD 
		x, y, x0, y0: REAL; 
		alive: BOOLEAN; 
		next: SpaceObj; 
	END; 

	Detonation = POINTER TO DetonationDesc; 

	DetonationDesc = RECORD (SpaceObjDesc)
		r0, r: INTEGER; 
	END; 

	Mass = POINTER TO MassDesc; 

	MassDesc = RECORD (SpaceObjDesc)
		mass: LONGREAL; 
		rot, xvel, yvel, rotvel: REAL; 
		shape: Shape; 
		n0, u, v, w, h: INTEGER; 
		px0, py0, px1, py1: Vertices; 
	END; 

	FlyingObj = POINTER TO FlyingObjDesc; 

	FlyingObjDesc = RECORD (MassDesc)
		bullets: INTEGER; 
	END; 

	Bullet = POINTER TO BulletDesc; 

	BulletDesc = RECORD (MassDesc)
		time, rpos: INTEGER; 
		ship: FlyingObj; 
	END; 

	Ship = POINTER TO ShipDesc; 

	ShipDesc = RECORD (FlyingObjDesc)
		thrust0, thrust: BOOLEAN; 
		shield0, shield: SHORTINT; 
		shieldval, warpval: INTEGER; 
		shape0: Shape; 
		px2, py2: Vertices; 
	END; 

	Enemy = POINTER TO EnemyDesc; 

	EnemyDesc = RECORD (FlyingObjDesc)
	END; 

	SBullet = POINTER TO SBulletDesc; 

	SBulletDesc = RECORD (BulletDesc)
	END; 

	EBullet = POINTER TO EBulletDesc; 

	EBulletDesc = RECORD (BulletDesc)
	END; 

	Asteroid = POINTER TO AsteroidDesc; 

	AsteroidDesc = RECORD (MassDesc)
	END; 

	Field = POINTER TO FieldDesc; 

	FieldDesc = RECORD (Gadgets.ObjDesc)
		ship: Ship; 
		started, changed, paused: BOOLEAN; 
		ships, ufos, frames: INTEGER; 
		score, high0, high: LONGINT; 
		line0, line: ARRAY 80 OF CHAR; 
		objects: SpaceObj; 
	END; 

	Timer = POINTER TO TimerDesc; 

	TimerDesc = RECORD (Oberon.TaskDesc)
		model: Field; 
		tnext: Timer; 
	END; 
VAR 
	shAsteroid1, shAsteroid2, shAsteroid3, shEnemy, shEBullet, shShip, shThrShip, shSBullet: Shape; 
	hitscore: ARRAY 4 OF INTEGER; 
	fnt: ARRAY 7 OF Fonts.Font; 
	fw, fh: ARRAY 7 OF INTEGER; 
	b, w: INTEGER; 
	timer: Timer; 

	PROCEDURE ^ FontGeometry(dim: ARRAY OF CHAR; fdx: INTEGER); 
	PROCEDURE ^ Intersect(x11, y11, x12, y12, x21, y21, x22, y22: INTEGER; VAR x3, y3: INTEGER): BOOLEAN; 
	PROCEDURE ^ Sign(v: REAL): INTEGER; 
	PROCEDURE ^ TransX(x, y: INTEGER; p, v: REAL): REAL; 
	PROCEDURE ^ TransY(x, y: INTEGER; p, v: REAL): REAL; 
	PROCEDURE ^ Model(D: Object): Field; 
	PROCEDURE ^ Score(F: Field; score: INTEGER); 
	PROCEDURE ^ Pair(sh: Shape; n, x, y: INTEGER); 
	PROCEDURE ^ Tag(obj: SpaceObj; VAR tag: Objects.Name); 
	PROCEDURE ^ ShowStatus(obj: Field; VAR status: ARRAY OF CHAR); 
	PROCEDURE ^ Asteroid1Shape(VAR sh: Shape); 
	PROCEDURE ^ Asteroid2Shape(VAR sh: Shape); 
	PROCEDURE ^ Asteroid3Shape(VAR sh: Shape); 
	PROCEDURE ^ EnemyShape(VAR sh: Shape); 
	PROCEDURE ^ EBulletShape(VAR sh: Shape); 
	PROCEDURE ^ ShipShape(VAR sh: Shape); 
	PROCEDURE ^ ThrShipShape(VAR sh: Shape); 
	PROCEDURE ^ SBulletShape(VAR sh: Shape); 
	PROCEDURE ^ InitSpaceObj(obj: SpaceObj); 
	PROCEDURE ^ InitMass(obj: Mass; shape: Shape); 
	PROCEDURE ^ InitFlyingObj(obj: FlyingObj; shape: Shape); 
	PROCEDURE ^ InitBullet(obj: Bullet; shape: Shape; ship: FlyingObj; grant: INTEGER); 
	PROCEDURE ^ InitShip(obj: Ship; x, y: REAL); 
	PROCEDURE ^ InitSBullet(obj: SBullet; ship: Ship); 
	PROCEDURE ^ InitEnemy(obj: Enemy); 
	PROCEDURE ^ InitEBullet(obj: EBullet; ufo: Enemy; ship: Ship); 
	PROCEDURE ^ InitAsteroid(obj, father: Asteroid; shape: Shape; hx, hy: INTEGER); 
	PROCEDURE ^ InitField(obj: Field); 
	PROCEDURE ^ StoreShapeRef(VAR R: Files.Rider; shape: Shape); 
	PROCEDURE ^ LoadShapeRef(VAR R: Files.Rider; VAR shape: Shape); 
	PROCEDURE ^ FileSpaceObj(VAR R: Files.Rider; id: INTEGER; obj, root: SpaceObj); 
	PROCEDURE ^ FileDetonation(VAR R: Files.Rider; id: INTEGER; obj: Detonation; root: SpaceObj); 
	PROCEDURE ^ FileMass(VAR R: Files.Rider; id: INTEGER; obj: Mass; root: SpaceObj); 
	PROCEDURE ^ FileFlyingObj(VAR R: Files.Rider; id: INTEGER; obj: FlyingObj; root: SpaceObj); 
	PROCEDURE ^ FileBullet(VAR R: Files.Rider; id: INTEGER; obj: Bullet; root: SpaceObj); 
	PROCEDURE ^ FileShip(VAR R: Files.Rider; id: INTEGER; obj: Ship; root: SpaceObj); 
	PROCEDURE ^ FileEnemy(VAR R: Files.Rider; id: INTEGER; obj: Enemy; root: SpaceObj); 
	PROCEDURE ^ FileSBullet(VAR R: Files.Rider; id: INTEGER; obj: SBullet; root: SpaceObj); 
	PROCEDURE ^ FileEBullet(VAR R: Files.Rider; id: INTEGER; obj: EBullet; root: SpaceObj); 
	PROCEDURE ^ FileAsteroid(VAR R: Files.Rider; id: INTEGER; obj: Asteroid; root: SpaceObj); 
	PROCEDURE ^ ModifyStatus(F: Starfield; obj: Field; mx, my: INTEGER); 
	PROCEDURE ^ RestoreStatus(F: Starfield; obj: Field; mx, my: INTEGER); 
	PROCEDURE ^ DrawDetonation(F: Starfield; obj: Detonation; mx, my: INTEGER): INTEGER; 
	PROCEDURE ^ DrawMass(F: Starfield; obj: Mass; mx, my: INTEGER): INTEGER; 
	PROCEDURE ^ DrawShip(F: Starfield; obj: Ship; mx, my: INTEGER): INTEGER; 
	PROCEDURE ^ MoveMass(obj: Mass); 
	PROCEDURE ^ IntersectMass(obj1, obj2: Mass; VAR x, y: INTEGER): BOOLEAN; 
	PROCEDURE ^ SFire(F: Field; ship: Ship); 
	PROCEDURE ^ SShield(F: Field; ship: Ship); 
	PROCEDURE ^ SWarp(F: Field; ship: Ship); 
	PROCEDURE ^ EFire(F: Field; ufo: Enemy); 
	PROCEDURE ^ Hit(F: Field; x, y: REAL); 
	PROCEDURE ^ HitShip(F: Field; obj: Ship); 
	PROCEDURE ^ SplitAsteroid(F: Field; obj: Asteroid; x, y: INTEGER): INTEGER; 
	PROCEDURE ^ NewShip(F: Field; x, y: REAL); 
	PROCEDURE ^ NewEnemy(F: Field); 
	PROCEDURE ^ NewRound(F: Field; amt: INTEGER); 
	PROCEDURE ^ MoveShip(F: Field; obj: Ship); 
	PROCEDURE ^ MoveEnemy(F: Field; obj: Enemy); 
	PROCEDURE ^ MoveSBullet(F: Field; obj: SBullet); 
	PROCEDURE ^ MoveEBullet(F: Field; obj: EBullet); 
	PROCEDURE ^ UpdateShip(obj: Ship); 
	PROCEDURE ^ UpdateStatus(obj: Field); 
	PROCEDURE ^ Step1(F: Field; obj: SpaceObj); 
	PROCEDURE ^ Step2(F: Field; obj: SpaceObj; VAR obj0: SpaceObj): BOOLEAN; 
	PROCEDURE ^ TimerHandler(me: Oberon.Task); 
	PROCEDURE ^ StopTimers; 
	PROCEDURE ^ FieldAttr(F: Field; VAR M: AttrMsg); 
	PROCEDURE ^ FieldFile(F: Field; VAR M: FileMsg); 
	PROCEDURE ^ FieldHandler*(F: Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ StarfieldAttr(F: Starfield; VAR M: AttrMsg); 
	PROCEDURE ^ StarfieldCopy(F: Starfield; VAR M: CopyMsg); 
	PROCEDURE ^ StarfieldDisplay(F: Starfield; VAR M: DisplayMsg); 
	PROCEDURE ^ StarfieldFile(F: Starfield; VAR M: FileMsg); 
	PROCEDURE ^ StarfieldInput(F: Starfield; VAR M: InputMsg); 
	PROCEDURE ^ StarfieldModify(F: Starfield; VAR M: ModifyMsg); 
	PROCEDURE ^ StarfieldUpdate(F: Starfield; VAR M: UpdateMsg); 
	PROCEDURE ^ StarfieldHandler*(F: Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ DocAttr(D: Document; VAR M: AttrMsg); 
	PROCEDURE ^ DocLink(D: Document; VAR M: LinkMsg); 
	PROCEDURE ^ DocMenu(D: Document; VAR M: MenuMsg); 
	PROCEDURE ^ DocHandler*(D: Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ OldDocument(F: Files.File; D: Document; VAR f: Gadgets.Frame); 
	PROCEDURE ^ NewDocument(D: Document; VAR f: Gadgets.Frame); 
	PROCEDURE ^ LoadDocument(D: Document); 
	PROCEDURE ^ StoreDocument(D: Document); 
	PROCEDURE ^ NewField*; 
	PROCEDURE ^ NewStarfield*; 
	PROCEDURE ^ NewDoc*; 
	PROCEDURE ^ NewGame*; 
	PROCEDURE ^ PauseGame*; 
	PROCEDURE ^ ResumeGame*; 
BEGIN
END Asteroids.
