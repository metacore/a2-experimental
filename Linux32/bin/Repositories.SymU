MODULE Repositories;
	IMPORT Streams, Modules, KernelLog, Commands, Strings, Files, Archives, Localization, UTF8Strings, XML, XMLObjects, XMLScanner, XMLParser, WMEvents;
CONST 
	Ok* = 0; 
	NotFound* = 10; 
	RepositoryNotFound* = 11; 
	ComponentNotFound* = 12; 
	RepositoryNotLoaded* = 13; 
	DuplicateName* = 20; 
	DuplicateID* = 21; 
	DuplicateRepository* = 22; 
	IndexError* = 50; 
	CannotCreateArchive* = 100; 
	ArchivesError* = 101; 
	WrongVersion* = 200; 
	FormatError* = 201; 
	ParseError* = 300; 
	DictionaryNotFound* = 400; 
	LanguageNotAvailable* = 410; 
	LanguageFileNotFound* = 420; 
	InternalError* = 999; 
	Generated = 0; 
	Locked = 1; 
	IndexFile = \"index.xml"\; 
	DefaultFileExtension* = \"rep"\; 
	Delimiter* = \":"\; 
	PrototypeID = 0; 
	Version = 1; 
	Quote = \"""\; 
	EscapeCharacter = \"&"\; 
	EscapeQuote = \"&quot;"\; 
	Type_Component = 1; 
	Type_Generator = 2; 
	CommandPrefix* = \"cmd:"\; 
	XmlRepository = \"Repository"\; 
	XmlComponents = \"Components"\; 
	XmlComponent = \"Component"\; 
	XmlDictionaries = \"Dictionaries"\; 
	XmlDictionary = \"Dictionary"\; 
	XmlLanguage = \"Language"\; 
	XmlApplications = \"Applications"\; 
	XmlApplication = \"Application"\; 
	XmlAttributeName = \"name"\; 
	XmlAttributeDefault = \"default"\; 
	XmlAttributeID = \"id"\; 
	XmlAttributeSource = \"source"\; 
	TraceLoading = 0; 
	TraceInstantiate = 1; 
	TraceCreation = 2; 
	Trace = {}; 
TYPE 
	Context* = OBJECT (Commands.Context)
	VAR 
		object*: ANY; 

		PROCEDURE ^  & Init*(in, arg: Streams.Reader; out, error: Streams.Writer; caller: OBJECT); 
	END Context; 

	StoreContext* = OBJECT 
	VAR 
		repository-: Repository; 

		PROCEDURE ^  & InitStoreContext(r: Repository); 
	END StoreContext; 

	Command* = PROCEDURE {DELEGATE}(context: Context); 

	Component* = OBJECT {EXCLUSIVE} (XML.Element)
	VAR 
		repository: Repository; 
		name: Strings.String; 
		refNum: SIZE; 
		flags: SET; 
		timestamp-: SIGNED32; 
		onChanged*: WMEvents.EventSource; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ SetGenerator*(CONST gen: ARRAY OF CHAR); 
		PROCEDURE ^ SetRepository*(repository: Repository; CONST name: Name; refNum: SIZE); 
		PROCEDURE ^ GetRepository*(VAR repository: Repository; VAR name: Name; VAR refNum: SIZE); 
		PROCEDURE ^ IsLocked*(): BOOLEAN; 
		PROCEDURE ^ FromXML*(xml: XML.Element); 
	END Component; 

	Name* = ARRAY 32 OF CHAR; 

	ApplicationInfo = OBJECT {EXCLUSIVE} (XML.Element)
	END ApplicationInfo; 

	ComponentInfo = OBJECT {EXCLUSIVE} (XML.Element)
	VAR 
		name, source: Strings.String; 
		type: INTEGER; 
		id: SIZE; 
		instance: ANY; 
		next: ComponentInfo; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ AddAttribute*(attribute: XML.Attribute); 
	END ComponentInfo; 

	IndexRegistry* = OBJECT (XML.ElementRegistry)

		PROCEDURE ^ InstantiateElement*(CONST name: ARRAY OF CHAR): XML.Element; 
	END IndexRegistry; 

	Entry = OBJECT 
	VAR 
		word, translation: Strings.String; 
		next: Entry; 

		PROCEDURE ^  & Init(word, translation: Strings.String); 
	END Entry; 

	Translator = OBJECT 
	VAR 
		entries: Entry; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Add(word, translation: Strings.String); 
		PROCEDURE ^ Parse(reader: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Find(CONST word: ARRAY OF CHAR): Entry; 
		PROCEDURE ^ ComplexTranslation(CONST word: ARRAY OF CHAR): Strings.String; 
		PROCEDURE ^ TranslateAOC(CONST word: ARRAY OF CHAR): Strings.String; 
		PROCEDURE ^ Translate(word: Strings.String): Strings.String; 
	END Translator; 

	Language = RECORD 
		code: ARRAY 3 OF CHAR; 
		source: Files.FileName; 
		translator: Translator; 
		error, default: BOOLEAN; 
	END; 

	Dictionary* = OBJECT {EXCLUSIVE} (XML.Element)
	VAR 
		fullname-: Strings.String; 
		name: Strings.String; 
		languages: POINTER TO ARRAY OF Language; 
		repository: Repository; 
		next: Dictionary; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Initialize; 
		PROCEDURE ^ InitializeLanguages; 
		PROCEDURE ^ Find(CONST language: Localization.Language): Translator; 
		PROCEDURE ^ GetDefaultTranslator(): Translator; 
		PROCEDURE ^ FindBestMatch(languages: Localization.Languages): Translator; 
		PROCEDURE ^ AddAttribute*(attribute: XML.Attribute); 
		PROCEDURE ^ LoadLanguage(VAR language: Language; VAR res: INTEGER); 
		PROCEDURE ^ TranslateAOC*(CONST word: ARRAY OF CHAR; languages: Localization.Languages): Strings.String; 
		PROCEDURE ^ Translate*(word: Strings.String; languages: Localization.Languages): Strings.String; 
		PROCEDURE ^ GetLanguages*(): Localization.Languages; 
	END Dictionary; 

	Repository* = OBJECT {EXCLUSIVE} (XML.Element)
	VAR 
		name-: Name; 
		filename-: Files.FileName; 
		archive: Archives.Archive; 
		timestamp-: SIGNED32; 
		modified: BOOLEAN; 
		nextID: SIZE; 
		components: ComponentInfo; 
		dictionaries: Dictionary; 
		errors: ErrorReporter; 
		registry-: Registry; 
		next: Repository; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Initialize(): INTEGER; 
		PROCEDURE ^ FindComponentInfo(CONST name: ARRAY OF CHAR; id: SIZE): ComponentInfo; 
		PROCEDURE ^ GetDictionary*(CONST name: ARRAY OF CHAR): Dictionary; 
		PROCEDURE ^ AddComponentInfo(ci: ComponentInfo); 
		PROCEDURE ^ RemoveComponentInfo(ci: ComponentInfo); 
		PROCEDURE ^ GetComponentEnumerator*(): XMLObjects.Enumerator; 
		PROCEDURE ^ GetApplicationEnumerator*(): XMLObjects.Enumerator; 
		PROCEDURE ^ GetFile(CONST name: ARRAY OF CHAR): Streams.Reader; 
		PROCEDURE ^ Check(): BOOLEAN; 
		PROCEDURE ^ GetComponent*(CONST name: ARRAY OF CHAR; id: SIZE): Component; 
		PROCEDURE ^ PutComponent*(component: Component; CONST name: ARRAY OF CHAR; VAR id: SIZE; VAR res: INTEGER); 
		PROCEDURE ^ UnbindComponent*(CONST name: ARRAY OF CHAR; id: SIZE; VAR res: INTEGER); 
		PROCEDURE ^ Unbind*(component: Component); 
		PROCEDURE ^ RemoveComponent*(CONST name: ARRAY OF CHAR; refNum: SIZE; VAR res: INTEGER); 
		PROCEDURE ^ Remove*(component: Component; VAR res: INTEGER); 
		PROCEDURE ^ LoadComponent(CONST filename: ARRAY OF CHAR): Component; 
		PROCEDURE ^ GetID*(): SIZE; 
		PROCEDURE ^ Store*(VAR res: INTEGER); 
		PROCEDURE ^ StoreComponent(CONST filename: ARRAY OF CHAR; component: Component; VAR res: INTEGER); 
		PROCEDURE ^ Dump*(writer: Streams.Writer); 
	END Repository; 

	Repositories* = POINTER TO ARRAY OF Repository; 

	Properties* = OBJECT {EXCLUSIVE} (XML.Element)
	VAR 
		repository-: Repository; 

		PROCEDURE ^  & New(r: Repository); 
	END Properties; 

	Registry* = OBJECT (XML.ElementRegistry)
	VAR 
		repository: Repository; 

		PROCEDURE ^  & InitRegistry(r: Repository); 
		PROCEDURE ^ InstantiateElement*(CONST name: ARRAY OF CHAR): XML.Element; 
		PROCEDURE ^ InstantiateLate*(e: XML.Element): XML.Element; 
	END Registry; 

	ErrorReporter = OBJECT 
	VAR 
		nofErrors: SIZE; 

		PROCEDURE ^  & Reset; 
		PROCEDURE ^ Report(pos, line, col: Streams.Position; CONST msg: ARRAY OF CHAR); 
	END ErrorReporter; 
VAR 
	registry-: Registry; 
	indexRegistry: IndexRegistry; 
	repositories: Repository; 
	globalTimestamp: SIGNED32; 
	StrNoName, StrRepository, StrComponent, StrApplication, StrDictionary: Strings.String; 

	PROCEDURE ^ SetLockedFlag(component: Component; locked: BOOLEAN); 
	PROCEDURE ^ LockChildren(component: Component); 
	PROCEDURE ^ GenerateComponent*(CONST generator: ARRAY OF CHAR): Component; 
	PROCEDURE ^ FindChild(parent: XML.Element; CONST elementName: ARRAY OF CHAR): XML.Element; 
	PROCEDURE ^ IncrementTimestamp*(VAR timestamp: SIGNED32); 
	PROCEDURE ^ GetTimestamp*(): SIGNED32; 
	PROCEDURE ^ AwaitChange*(VAR curTimestamp: SIGNED32); 
	PROCEDURE ^ IsXmlFilename(string: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ Parse(reader: Streams.Reader; elemReg: XML.ElementRegistry; errors: ErrorReporter): XML.Element; 
	PROCEDURE ^ GetWriter(archive: Archives.Archive; CONST filename: ARRAY OF CHAR): Streams.Writer; 
	PROCEDURE ^ SplitName*(CONST name: ARRAY OF CHAR; VAR repositoryName, componentName: ARRAY OF CHAR; VAR id: SIZE): BOOLEAN; 
	PROCEDURE ^ JoinName*(CONST repositoryName, componentName: ARRAY OF CHAR; id: SIZE; VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ IsValidName*(CONST name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ IsNumber*(CONST name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ NewJoinName*(CONST repositoryName, componentName: ARRAY OF CHAR; id: SIZE): Strings.String; 
	PROCEDURE ^ SplitFilename(CONST fullname: ARRAY OF CHAR; VAR repositoryName, extension: ARRAY OF CHAR); 
	PROCEDURE ^ GetCommand*(CONST command: ARRAY OF CHAR; VAR res: INTEGER): Command; 
	PROCEDURE ^ IsCommandString*(CONST string: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ ExtractCommand*(CONST string: ARRAY OF CHAR; VAR command: ARRAY OF CHAR); 
	PROCEDURE ^ CallCommand*(CONST command: ARRAY OF CHAR; VAR context: Context; VAR res: INTEGER); 
	PROCEDURE ^ GetTranslationInfo*(CONST string: ARRAY OF CHAR; VAR dictionary: Dictionary; VAR word: Strings.String; VAR res: INTEGER); 
	PROCEDURE ^ Translate*(CONST string: ARRAY OF CHAR; languages: Localization.Languages): Strings.String; 
	PROCEDURE ^ GetDictionary*(CONST repositoryName, dictionaryName: ARRAY OF CHAR; VAR dictionary: Dictionary; VAR res: INTEGER); 
	PROCEDURE ^ GetDictionaryByString*(CONST string: ARRAY OF CHAR; VAR dictionary: Dictionary; VAR res: INTEGER); 
	PROCEDURE ^ GetComponent*(CONST repositoryName, componentName: ARRAY OF CHAR; refNum: SIZE; VAR component: Component; VAR res: INTEGER); 
	PROCEDURE ^ GetComponentByString*(CONST string: ARRAY OF CHAR; VAR component: Component; VAR res: INTEGER); 
	PROCEDURE ^ PutComponent*(component: Component; CONST repositoryName, componentName: ARRAY OF CHAR; VAR id: SIZE; VAR res: INTEGER); 
	PROCEDURE ^ UnbindComponent*(CONST repositoryName, componentName: ARRAY OF CHAR; refNum: SIZE; VAR res: INTEGER); 
	PROCEDURE ^ RemoveComponent*(CONST repositoryName, componentName: ARRAY OF CHAR; refNum: SIZE; VAR res: INTEGER); 
	PROCEDURE ^ Add(repository: Repository; VAR res: INTEGER); 
	PROCEDURE ^ Remove(repository: Repository; VAR res: INTEGER); 
	PROCEDURE ^ FindRepository(CONST name: ARRAY OF CHAR): Repository; 
	PROCEDURE ^ ThisRepository*(CONST name: ARRAY OF CHAR): Repository; 
	PROCEDURE ^ GetAll*(VAR reps: Repositories); 
	PROCEDURE ^ LoadRepository(CONST name: ARRAY OF CHAR; VAR res: INTEGER): Repository; 
	PROCEDURE ^ UnloadRepository*(CONST name: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ StoreRepository*(CONST name: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ CreateRepository*(CONST filename: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ ComponentFromXML*(xml: XML.Element): Component; 
	PROCEDURE ^ ShowRes*(res: INTEGER; out: Streams.Writer); 
	PROCEDURE ^ Create*(context: Commands.Context); 
	PROCEDURE ^ Store*(context: Commands.Context); 
	PROCEDURE ^ Load*(context: Commands.Context); 
	PROCEDURE ^ Unload*(context: Commands.Context); 
	PROCEDURE ^ Put*(context: Commands.Context); 
	PROCEDURE ^ Dump*(context: Commands.Context); 
	PROCEDURE ^ DumpAll*(context: Commands.Context); 
	PROCEDURE ^ Call*(context: Commands.Context); 
	PROCEDURE ^ InitStrings; 
BEGIN
END Repositories.
