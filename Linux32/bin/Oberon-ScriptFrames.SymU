MODULE ScriptFrames IN Oberon;
	IMPORT Texts, Fonts, Objects, Oberon, Styles, Input, Display, Modules, Printer;
CONST 
	TAB = 9X; 
	CR = 0DX; 
	LeftArrow = 0C4X; 
	RightArrow = 0C3X; 
	BRK = 0ACX; 
	HYPH = 1FX; 
	SpcW = 3; 
	ML = 2; 
	MM = 1; 
	MR = 0; 
	LeftMode = {Styles.left}; 
	RightMode = {Styles.right}; 
	AdjMode = {Styles.left, Styles.right}; 
	CenterMode = {}; 
	car = 0; 
	sel = 1; 
	arrow =  -1; 
	OpenCmd = \"Script.Open"\; 
TYPE 
	Box = POINTER TO BoxDesc; 

	Line = POINTER TO LineDesc; 

	LineDesc = RECORD 
		len, W: SIGNED32; 
		w, h: SIGNED16; 
		asr, dsr: SIGNED16; 
		off, w0: SIGNED16; 
		nSpc: SIGNED16; 
		style: Styles.Style; 
		brk, eot, tabs: BOOLEAN; 
		next: Line; 
		box: Box; 
	END; 

	Location* = RECORD 
		org*, pos*: SIGNED32; 
		dx*, x*, y*: SIGNED16; 
		lin: Line; 
	END; 

	Frame* = POINTER TO FrameDesc; 

	FrameDesc* = RECORD (Display.FrameDesc)
		text*: Texts.Text; 
		org*: SIGNED32; 
		col*: SIGNED16; 
		left*, right*, top*, bot*: SIGNED16; 
		markH*, mark*: SIGNED16; 
		time*: SIGNED32; 
		car*, sel*, hide*: BOOLEAN; 
		carLoc*: Location; 
		selBeg*, selEnd*: Location; 
		trailer: Line; 
	END; 

	Formatter = RECORD (Texts.Reader)
		len, W: SIGNED32; 
		w, asr, dsr, nSpc: SIGNED16; 
		hide: BOOLEAN; 
		fnt, mfnt: Fonts.Font; 
		unit: SIGNED32; 
	END; 

	MarkMsg = RECORD (Display.FrameMsg)
		id: SIGNED16; 
	END; 

	DisplayMsg = RECORD (Display.DisplayMsg)
		pos: SIGNED32; 
	END; 

	BoxDesc = RECORD 
		next: Box; 
		F: Display.Frame; 
		off: SIGNED32; 
		X, dY: SIGNED16; 
	END; 
VAR 
	barW*, left*, right*, top*, bot*: SIGNED16; 
	Asr, Dsr, markW, eolW: SIGNED16; 
	R1: Texts.Reader; 
	fnt, mfnt: Fonts.Font; 
	unit: SIGNED32; 
	R: Formatter; 
	ch: CHAR; 
	dx, a, d: SIGNED16; 
	dX: SIGNED32; 
	style: Styles.Style; 
	W, KW, XW: Texts.Writer; 
	pL: Line; 
	show: PROCEDURE (F: Frame; pos: SIGNED32); 
	FullColor, BackCol, BarCol: SIGNED16; 
	saved: Oberon.CaretMsg; 

	PROCEDURE ^ Min(i, j: SIGNED32): SIGNED32; 
	PROCEDURE ^ Max(i, j: SIGNED16): SIGNED16; 
	PROCEDURE ^ ShowBrk(F: Frame; col, x, y: SIGNED16); 
	PROCEDURE ^ Mask(F: Frame): Display.Frame; 
	PROCEDURE ^ Marks(F: Frame; id: SIGNED16); 
	PROCEDURE ^ Mark*(F: Frame; mark: SIGNED16); 
	PROCEDURE ^ DrawCursor(X, Y: SIGNED16); 
	PROCEDURE ^ TrackMouse(VAR X, Y: SIGNED16; VAR Keys, keysum: SET); 
	PROCEDURE ^ InvertRect(F: Frame; x, y, X, Y, W, H: SIGNED16); 
	PROCEDURE ^ ReplConst(col, x, y, w, h: SIGNED16); 
	PROCEDURE ^ Erase(F: Frame; x, y, Y, H: SIGNED16); 
	PROCEDURE ^ RemTick(F: Frame; x, y: SIGNED16); 
	PROCEDURE ^ ShowTick(F: Frame; x, y: SIGNED16); 
	PROCEDURE ^ Bar(F: Frame; x, y, Y, H: SIGNED16); 
	PROCEDURE ^ FrameDsr(F: Display.Frame): SIGNED16; 
	PROCEDURE ^ DrawFrame(F: Frame; G: Display.Frame; x, y, X, Y: SIGNED16); 
	PROCEDURE ^ Move(F: Frame; x, y, Y, H, dY: SIGNED16); 
	PROCEDURE ^ FlipCaret(F: Frame; x, y: SIGNED16); 
	PROCEDURE ^ Insert(L: Line; X, voff: SIGNED16; off: SIGNED32; G: Display.Frame; VAR dY: SIGNED16); 
	PROCEDURE ^ Append(L: Line; X: SIGNED16; b: Box); 
	PROCEDURE ^ Broadcast(F: Frame; VAR M: Display.FrameMsg); 
	PROCEDURE ^ Transparent(G: Display.Frame): BOOLEAN; 
	PROCEDURE ^ InvertArea(F: Frame; L: Line; x, y, X, Y, W: SIGNED16); 
	PROCEDURE ^ FlipSelection(F: Frame; x, y: SIGNED16; VAR beg, end: Location); 
	PROCEDURE ^ Deselect(F: Frame; G: Display.Frame); 
	PROCEDURE ^ Lim(F: Frame): SIGNED32; 
	PROCEDURE ^ CollectLines(F: Frame; VAR L: Line; VAR Y: SIGNED16; VAR org: SIGNED32); 
	PROCEDURE ^ Clone(obj: Objects.Object; id: SIGNED16; VAR new: Objects.Object); 
	PROCEDURE ^ SaveAndCopy(F: Frame; text: Texts.Text; beg, end: SIGNED32; VAR W: Texts.Writer); 
	PROCEDURE ^ StyleAt(F: Frame; pos: SIGNED32): Styles.Style; 
	PROCEDURE ^ StyleFrame(F: Frame; st: Styles.Style; X: SIGNED16): Objects.Object; 
	PROCEDURE ^ Offsets(L: Line; VAR spc, rest: SIGNED16); 
	PROCEDURE ^ IncPos(spc: SIGNED16; VAR rest, X: SIGNED16); 
	PROCEDURE ^ GetWidth(lib: Objects.Library; ch: CHAR; VAR obj: Objects.Object; VAR dx: SIGNED16; VAR dX: SIGNED32); 
	PROCEDURE ^ Width(F: Frame; L: Line; beg, end: SIGNED32; VAR x: SIGNED16; VAR X: SIGNED32); 
	PROCEDURE ^ Height(fnt: Fonts.Font; VAR a, d: SIGNED16); 
	PROCEDURE ^ DisplayLine(F: Frame; pos, dXX: SIGNED32; x, y, dX, Y: SIGNED16; L: Line); 
	PROCEDURE ^ DisplaySec(F: Frame; x, y, Y0: SIGNED16; org0: SIGNED32; L0, L1: Line); 
	PROCEDURE ^ DisplaySec0(F: Frame; x, y: SIGNED16; org0, off: SIGNED32; Y0: SIGNED16; oldL0, L0, L1: Line); 
	PROCEDURE ^ ScrollBack(F: Frame; x, y: SIGNED16; oldL: Line; VAR L: Line; VAR Y: SIGNED16; VAR org: SIGNED32); 
	PROCEDURE ^ Read; 
	PROCEDURE ^ InitFormatter(F: Frame; org: SIGNED32); 
	PROCEDURE ^ FormatLine(VAR L: Line); 
	PROCEDURE ^ NewLines(F: Frame; limit: SIGNED32; VAR L: Line; VAR Y: SIGNED16; VAR org: SIGNED32); 
	PROCEDURE ^ BottomLine(F: Frame; x, y, Y: SIGNED16; VAR L: Line; org: SIGNED32); 
	PROCEDURE ^ AppendLines(F: Frame; x, y: SIGNED16; org: SIGNED32; L: Line; VAR Y: SIGNED16); 
	PROCEDURE ^ ShowText(F: Frame; x, y: SIGNED16; pos: SIGNED32); 
	PROCEDURE ^ Resize*(F: Frame; x, y, newY: SIGNED16); 
	PROCEDURE ^ LocateOrg(F: Frame; org, pos: SIGNED32; VAR loc: Location); 
	PROCEDURE ^ LocateLine(F: Frame; y: SIGNED16; VAR loc: Location); 
	PROCEDURE ^ LocateObj(F: Frame; x, y: SIGNED16; VAR loc: Location; VAR obj: Objects.Object); 
	PROCEDURE ^ LocatePos(F: Frame; pos: SIGNED32; VAR loc: Location); 
	PROCEDURE ^ LocateString(F: Frame; x, y: SIGNED16; VAR loc: Location); 
	PROCEDURE ^ FindFrame(F: Frame; G: Display.Frame; VAR loc: Location); 
	PROCEDURE ^ TouchFrame(F: Frame; VAR M: Oberon.InputMsg): BOOLEAN; 
	PROCEDURE ^ Pos*(F: Frame; X, Y: SIGNED16): SIGNED32; 
	PROCEDURE ^ ParaBeg(T: Texts.Text; pos: SIGNED32; VAR org: SIGNED32); 
	PROCEDURE ^ Validate(F: Frame; VAR pos: SIGNED32); 
	PROCEDURE ^ SetAttributes(F: Frame; pos: SIGNED32); 
	PROCEDURE ^ SetCaret*(F: Frame; pos: SIGNED32); 
	PROCEDURE ^ RemoveCaret*(F: Frame); 
	PROCEDURE ^ SetSelection*(F: Frame; beg, end: SIGNED32); 
	PROCEDURE ^ RemoveSelection*(F: Frame); 
	PROCEDURE ^ RemoveMarks(F: Frame); 
	PROCEDURE ^ Neutralize*(F: Frame); 
	PROCEDURE ^ UpdateVisible(F: Frame; x, y: SIGNED16; beg, end, corr: SIGNED32); 
	PROCEDURE ^ UpdateSection(F: Frame; x, y: SIGNED16; beg, end, corr: SIGNED32); 
	PROCEDURE ^ DisplaySecBrk(F: Frame; x, y, Y0: SIGNED16; org0: SIGNED32; L0, L1: Line); 
	PROCEDURE ^ UpdateStyle(F: Frame; VAR M: Styles.UpdateMsg); 
	PROCEDURE ^ TrackCaret*(F: Frame; x, y, X, Y: SIGNED16; VAR keysum: SET); 
	PROCEDURE ^ TrackSelection*(F: Frame; x, y, X, Y: SIGNED16; VAR keysum: SET); 
	PROCEDURE ^ TrackLine*(F: Frame; x, y, X, Y: SIGNED16; VAR org: SIGNED32; VAR keysum: SET); 
	PROCEDURE ^ TrackWord*(F: Frame; x, y, X, Y: SIGNED16; VAR pos: SIGNED32; VAR keysum: SET); 
	PROCEDURE ^ Show*(F: Frame; pos: SIGNED32); 
	PROCEDURE ^ CallCmd(cmd: ARRAY OF CHAR; F: Frame; pos: SIGNED32; new: BOOLEAN); 
	PROCEDURE ^ Call*(F: Frame; pos: SIGNED32; new: BOOLEAN); 
	PROCEDURE ^ Warning(s: ARRAY OF CHAR); 
	PROCEDURE ^ Integrate(F: Frame; pos: SIGNED32; obj: Objects.Object; new: BOOLEAN); 
	PROCEDURE ^ Write*(F: Frame; ch: CHAR; lib: Objects.Library; col, voff: SIGNED8); 
	PROCEDURE ^ Open*(F: Frame; H: Objects.Handler; T: Texts.Text; org: SIGNED32; col, left, right, top, bot: SIGNED16); 
	PROCEDURE ^ Copy*(F: Frame; VAR F1: Frame); 
	PROCEDURE ^ CopyOver*(F: Frame; text: Texts.Text; beg, end: SIGNED32); 
	PROCEDURE ^ CopyRecall*(F: Frame); 
	PROCEDURE ^ GetSelection*(F: Frame; VAR M: Oberon.SelectMsg); 
	PROCEDURE ^ GetCaret*(F: Frame; VAR M: Oberon.CaretMsg); 
	PROCEDURE ^ Update*(F: Frame; VAR M: Texts.UpdateMsg); 
	PROCEDURE ^ Recall(F: Frame); 
	PROCEDURE ^ SaveCaret; 
	PROCEDURE ^ RestoreCaret; 
	PROCEDURE ^ Edit*(F: Frame; x, y, X, Y: SIGNED16; Keys: SET); 
	PROCEDURE ^ Control(F: Frame; VAR M: Display.ControlMsg); 
	PROCEDURE ^ ModifyDsc(F: Frame; x, y: SIGNED16; VAR M: Display.ModifyMsg); 
	PROCEDURE ^ Modify(F: Frame; VAR M: Display.ModifyMsg); 
	PROCEDURE ^ Restore(F: Frame; x, y: SIGNED16; VAR M: Display.DisplayMsg); 
	PROCEDURE ^ Handle*(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewText*(text: Texts.Text; pos: SIGNED32): Frame; 
	PROCEDURE ^ LineExtend(L: Line; VAR w, asr, dsr: SIGNED16; VAR brk: BOOLEAN); 
	PROCEDURE ^ FirstLine*(T: Texts.Text; VAR w, asr, dsr, nSpc: SIGNED16; VAR len: SIGNED32; VAR brk, eot: BOOLEAN); 
	PROCEDURE ^ NextLine*(VAR w, asr, dsr, nSpc: SIGNED16; VAR len: SIGNED32; VAR brk, eot: BOOLEAN); 
	PROCEDURE ^ New*; 
BEGIN
END ScriptFrames.
