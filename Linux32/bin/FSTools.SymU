MODULE FSTools;
	IMPORT Modules, Commands, Options, Streams, Files, Configuration, Dates, Strings;
CONST 
	MaxNameLen = 512; 
	InitialFilelistSize = 1024; 
	Column1 = 30; 
	FormatDateTime = \"dd.mm.yyyy hh:nn:ss"\; 
	Error =  -1; 
	CR = 0DX; 
	LF = 0AX; 
TYPE 
	String = Strings.String; 

	FileList = POINTER TO ARRAY OF String; 

	EnumProc = PROCEDURE (context: Commands.Context); 
VAR 
	unsafeMode: BOOLEAN; 

	PROCEDURE ^ ExpandAlias(CONST alias: ARRAY OF CHAR; VAR genvol, genfs: ARRAY OF CHAR); 
	PROCEDURE ^ GetFileSystemFactory(CONST name: ARRAY OF CHAR; error: Streams.Writer): Files.FileSystemFactory; 
	PROCEDURE ^ Mount*(context: Commands.Context); 
	PROCEDURE ^ Unmount*(context: Commands.Context); 
	PROCEDURE ^ SetDefault*(context: Commands.Context); 
	PROCEDURE ^ WriteK(k: Files.Size; out: Streams.Writer); 
	PROCEDURE ^ Watch*(context: Commands.Context); 
	PROCEDURE ^ Align(out: Streams.Writer; CONST string: ARRAY OF CHAR); 
	PROCEDURE ^ Directory*(context: Commands.Context); 
	PROCEDURE ^ EnumerateDirectory(enum: Files.Enumerator; enumProc: EnumProc; options: Options.Options; context: Commands.Context; CONST filemask: ARRAY OF CHAR; CONST arguments: ARRAY OF CHAR); 
	PROCEDURE ^ Enumerate*(context: Commands.Context); 
	PROCEDURE ^ CreateFile*(context: Commands.Context); 
	PROCEDURE ^ CopyTo*(context: Commands.Context); 
	PROCEDURE ^ CopyFiles*(context: Commands.Context); 
	PROCEDURE ^ GenerateName(CONST prefix: ARRAY OF CHAR; index: LONGINT; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ Backup*(context: Commands.Context); 
	PROCEDURE ^ DeleteFiles*(context: Commands.Context); 
	PROCEDURE ^ RenameFiles*(context: Commands.Context); 
	PROCEDURE ^ CreateDirectory*(context: Commands.Context); 
	PROCEDURE ^ DeleteDirectory*(context: Commands.Context); 
	PROCEDURE ^ CompareDirectories*(context: Commands.Context); 
	PROCEDURE ^ CompareFiles*(context: Commands.Context); 
	PROCEDURE ^ SortFileList(filelist: FileList; length: LONGINT); 
	PROCEDURE ^ ResizeFilelist(VAR filelist: FileList); 
	PROCEDURE ^ InsertFiles(CONST mask: ARRAY OF CHAR; VAR filelist: FileList; VAR index: LONGINT); 
	PROCEDURE ^ CountCharacters(CONST string: ARRAY OF CHAR; ch: CHAR): SIZE; 
	PROCEDURE ^ SplitFullName(CONST fullname: ARRAY OF CHAR; VAR prefix, path, filename, extension: ARRAY OF CHAR); 
	PROCEDURE ^ IsValidTargetMask(context: Commands.Context; CONST mask: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ AllowMaskInSafeMode(CONST mask: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ GetTargetName(CONST sourceMask, targetMask, sourceName: ARRAY OF CHAR): String; 
	PROCEDURE ^ InsertFilesAndFixDestination(context: Commands.Context; CONST sourceMask, targetMask: ARRAY OF CHAR; VAR source, target: FileList; VAR index: LONGINT): BOOLEAN; 
	PROCEDURE ^ IsMask(CONST string: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ GetFileList(context: Commands.Context; VAR filelist: FileList): LONGINT; 
	PROCEDURE ^ GetSimpleFileLists(context: Commands.Context; VAR source, target: FileList): LONGINT; 
	PROCEDURE ^ GetFileLists(context: Commands.Context; VAR source, target: FileList): LONGINT; 
	PROCEDURE ^ Safe*(context: Commands.Context); 
	PROCEDURE ^ Unsafe*(context: Commands.Context); 
	PROCEDURE ^ ShowUnsafeMessage(out: Streams.Writer); 
	PROCEDURE ^ ShowRes(out: Streams.Writer; res: WORD); 
	PROCEDURE ^ CloseFiles*(context: Commands.Context); 
	PROCEDURE ^ Exists*(CONST name: ARRAY OF CHAR; VAR fullName: ARRAY OF CHAR; VAR flags: SET): BOOLEAN; 
BEGIN
END FSTools.
