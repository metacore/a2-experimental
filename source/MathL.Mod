(* ETH Oberon, Copyright 2001 ETH Zuerich Institut fuer Computersysteme, ETH Zentrum, CH-8092 Zuerich.
Refer to the "General ETH Oberon System Source License" contract available at: http://www.oberon.ethz.ch/ *)

MODULE MathL;	(** portable *)
(** AUTHOR "?"; PURPOSE "Math utility module (LONGREAL)"; *)

(* Aos version - requires floating-point instruction support. *)

IMPORT SYSTEM;

CONST
	e* = 2.7182818284590452354D0;
	pi* = 3.14159265358979323846D0;

TYPE
	Value = LONGREAL;

PROCEDURE sin*(x: Value): Value;
BEGIN
#IF I386 THEN
	CODE
		FLD QWORD [EBP + x]
		FSIN
		#IF ~LEGACY THEN
			FSTP QWORD [EBP + x]
			MOVSD XMM0, [EBP + x]
		#END
	END;
	RETURN RESULT;
#ELSIF AMD64 THEN
	CODE
		FLD QWORD [RBP + x]
		FSIN
		#IF ~LEGACY THEN
			FSTP QWORD [RBP + x]
			MOVSD XMM0, [RBP + x]
		#END
	END;
	RETURN RESULT;
#ELSE
	unimplemented
#END
END sin;

PROCEDURE cos*(x: Value): Value;
BEGIN
#IF I386 THEN
	CODE
		FLD QWORD [EBP + x]
		FCOS
		#IF ~LEGACY THEN
			FSTP QWORD [EBP + x]
			MOVSD XMM0, [EBP + x]
		#END
	END;
	RETURN RESULT;
#ELSIF AMD64 THEN
	CODE
		FLD QWORD [RBP + x]
		FCOS
		#IF ~LEGACY THEN
			FSTP QWORD [RBP + x]
			MOVSD XMM0, [RBP + x]
		#END
	END;
	RETURN RESULT;
#ELSE
	unimplemented
#END
END cos;

PROCEDURE arctan*(x: Value): Value;
BEGIN
#IF I386 THEN
	CODE
		FLD QWORD [EBP + x]
		FLD1
		FPATAN
		#IF ~LEGACY THEN
			FSTP QWORD [EBP + x]
			MOVSD XMM0, [EBP + x]
		#END
	END;
	RETURN RESULT;
#ELSIF AMD64 THEN
	CODE
		FLD QWORD [RBP + x]
		FLD1
		FPATAN
		#IF ~LEGACY THEN
			FSTP QWORD [RBP + x]
			MOVSD XMM0, [RBP + x]
		#END
	END;
	RETURN RESULT;
#ELSE
	unimplemented
#END
END arctan;

PROCEDURE sqrt*(x: Value): Value;
BEGIN
	IF x <= 0 THEN
		IF x = 0 THEN RETURN 0 ELSE HALT(80) END;
	END;
#IF I386 THEN
	CODE
		FLD QWORD [EBP + x]
		FSQRT
		#IF ~LEGACY THEN
			FSTP QWORD [EBP + x]
			MOVSD XMM0, [EBP + x]
		#END
	END;
	RETURN RESULT;
#ELSIF AMD64 THEN
	CODE
		FLD QWORD [RBP + x]
		FSQRT
		#IF ~LEGACY THEN
			FSTP QWORD [RBP + x]
			MOVSD XMM0, [RBP + x]
		#END
	END;
	RETURN RESULT;
#ELSE
	unimplemented
#END
END sqrt;

PROCEDURE ln*(x: Value): Value;
BEGIN
	IF x <= 0 THEN
		HALT(80);
	END;
#IF I386 THEN
	CODE
		FLD1
		FLDL2E
		FDIVP
		FLD QWORD [EBP + x]
		FYL2X
		#IF ~LEGACY THEN
			FSTP QWORD [EBP + x]
			MOVSD XMM0, [EBP + x]
		#END
	END;
	RETURN RESULT;
#ELSIF AMD64 THEN
	CODE
		FLD1
		FLDL2E
		FDIVP
		FLD QWORD [RBP + x]
		FYL2X
		#IF ~LEGACY THEN
			FSTP QWORD [RBP + x]
			MOVSD XMM0, [RBP + x]
		#END
	END;
	RETURN RESULT;
#ELSE
	unimplemented
#END
END ln;

PROCEDURE exp*(x: Value): Value;
BEGIN
#IF I386 THEN
	CODE
		FLD QWORD [EBP + x]
		FLDL2E
		FMULP
		FLD ST0
		FRNDINT
		FXCH ST1
		FSUB ST0, ST1
		F2XM1
		FLD1
		FADDP
		FSCALE
		FSTP ST1
		#IF ~LEGACY THEN
			FSTP QWORD [EBP + x]
			MOVSD XMM0, [EBP + x]
		#END
	END;
	RETURN RESULT;
#ELSIF AMD64 THEN
	CODE
		FLD QWORD [RBP + x]
		FLDL2E
		FMULP
		FLD ST0
		FRNDINT
		FXCH ST1
		FSUB ST0, ST1
		F2XM1
		FLD1
		FADDP
		FSCALE
		FSTP ST1
		#IF ~LEGACY THEN
			FSTP QWORD [RBP + x]
			MOVSD XMM0, [RBP + x]
		#END
	END;
	RETURN RESULT;
#ELSE
	unimplemented
#END
END exp;

END MathL.
