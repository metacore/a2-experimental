MODULE WMShapes; (** AUTHOR "staubesv, PH"; PURPOSE "Basic geormetric shapes as visual components"; *)

IMPORT
	Strings, XML, WMRectangles, WMGraphics, WMGraphicUtilities, WMProperties, WMComponents, Math, KernelLog;

TYPE
	(* generic line. can have an arrowhead on either end *)
	Line* = OBJECT(WMComponents.VisualComponent)
	VAR
		color- : WMProperties.ColorProperty;
		colorI : LONGINT;

		isVertical- : WMProperties.BooleanProperty;
		isVerticalI : BOOLEAN;
		
		start-, end-: WMProperties.PointProperty;
		startI, endI: WMGraphics.Point2d;
		
		arrowAtStart-, arrowAtEnd-:WMProperties.BooleanProperty;
		arrowAtStartI, arrowAtEndI: BOOLEAN;		

		PROCEDURE &Init*;
		BEGIN
			Init^;
			SetGenerator("WMShapes.GenLine");
			SetNameAsString(StrLine);
			NEW(color, NIL, StrColor, StrLineColorDescription); properties.Add(color);
			color.Set(WMGraphics.Black); colorI := color.Get();
			NEW(isVertical, NIL, StrIsVertical, StrIsVerticalDescription); properties.Add(isVertical);
			isVertical.Set(FALSE); isVerticalI := isVertical.Get();
			NEW(start, NIL, StrStart, StrStartDescription); properties.Add(start);
			start.SetCoordinate(0,0); startI := start.Get();
			NEW(end, NIL, StrEnd, StrEndDescription); properties.Add(end);
			end.SetCoordinate(100,100); endI := end.Get();
			NEW(arrowAtStart, NIL, StrArrowStart, StrArrowStartDescription); properties.Add(arrowAtStart);
			arrowAtStart.Set(FALSE); arrowAtStartI := arrowAtStart.Get();
			NEW(arrowAtEnd, NIL, StrArrowEnd, StrArrowEndDescription); properties.Add(arrowAtEnd);
			arrowAtEnd.Set(TRUE); arrowAtEndI := arrowAtEnd.Get();
		END Init;

		PROCEDURE PropertyChanged*(sender, property : ANY);
		VAR x0,y0,x1,y1:LONGINT; rect: WMRectangles.Rectangle;
		BEGIN
			IF (property = color) THEN colorI := color.Get(); Invalidate; KernelLog.String("color changed0 "); KernelLog.Int(colorI,8); KernelLog.Ln;
			ELSIF (property = isVertical) THEN isVerticalI := isVertical.Get(); Invalidate;
			ELSIF (property = start) THEN	 startI := start.Get(); Invalidate;
			ELSIF (property = end) THEN	endI := end.Get(); Invalidate;
			ELSIF (property = arrowAtStart) THEN arrowAtStartI := arrowAtStart.Get(); Invalidate;
			ELSIF (property = arrowAtEnd) THEN	arrowAtEndI := arrowAtEnd.Get(); Invalidate;
			ELSE PropertyChanged^(sender, property);
			END;
			(*
			IF (property = start) OR (property = end) THEN 
				rect:=bounds.Get();
				x0:=startI.x+rect.l; y0:=startI.y+rect.t; x1:=endI.x+rect.l; y1:=endI.y+rect.t;
				rect:=WMRectangles.MakeRect(MIN(x0,x1)-5, MIN(y0,y1)-5, MAX(x0, x1)+5, MAX(y0,y1)+5); (* add border for arrowhead display *)
				bounds.Set(rect);
				startI.x:=x0-rect.l; startI.y:= y0-rect.t; start.Set(startI);
				endI.x:=x1-rect.l; endI.y:= y1-rect.t; end.Set(endI)
			END;
			Invalidate;
			*)
		END PropertyChanged;

		PROCEDURE Set*(x0,y0, x1, y1: LONGINT); 
		VAR rect:WMRectangles.Rectangle; 
		BEGIN
			
			rect:=WMRectangles.MakeRect(MIN(x0,x1)-5, MIN(y0,y1)-5, MAX(x0, x1)+5, MAX(y0,y1)+5); (* add border for arrowhead display *)
			bounds.Set(rect);
			
			start.SetCoordinate(x0-rect.l, y0-rect.t);	PropertyChanged(SELF, start);
			end.SetCoordinate(x1-rect.l, y1-rect.t);	PropertyChanged(SELF, end);	
		END Set;
		
		(** Return if the line is hit at (x, y) in parent coordinates *)
		PROCEDURE IsHit*(x, y: LONGINT): BOOLEAN; 
		VAR r: WMRectangles.Rectangle; X0,Y0, X1,Y1: LONGINT; hit:BOOLEAN;
		BEGIN
			IF ~visible.Get() THEN hit:= FALSE 
			ELSE
				r:=GetClientRect();
				X0:=startI.x+r.l; Y0:=startI.y+r.t; 
				X1:=endI.x+r.l; Y1:=endI.y+r.t;
				IF X0=X1 THEN hit:=WMRectangles.PointInRect(x, y, r) & (2>ABS(x-X0))
				ELSIF Y0=Y1 THEN hit:=WMRectangles.PointInRect(x, y, r) & (2>ABS(y-Y0))
				ELSE hit:= WMRectangles.PointInRect(x, y, r) & (2>ABS((y-Y0) - ((x-X0)*(Y1-Y0)/(X1-X0))))
				END;
			END;
			RETURN hit;
		END IsHit;
		
		PROCEDURE SetArrowheads*(arrows:SET);
		BEGIN
			arrowAtStart.Set(0 IN arrows); PropertyChanged(SELF, arrowAtStart);
			arrowAtEnd.Set(1 IN arrows); PropertyChanged(SELF, arrowAtEnd);
		END SetArrowheads;
		
		PROCEDURE DrawBackground*(canvas : WMGraphics.Canvas);
		CONST pi=3.1516; headscale= 0.25;
		VAR  alpha: REAL;
			dx,dy: LONGINT;
			size:LONGINT; head: LONGREAL;
		BEGIN
			DrawBackground^(canvas);
			IF (colorI # 0) THEN
				dx:=endI.x-startI.x; dy:=endI.y-startI.y;
				alpha:=arctan2(dx,dy);
				size:= 40; (*! to do: parametrize arrow size *)
				head:=size * headscale (*  + 2 *);
				canvas.Line(startI.x, startI.y, endI.x, endI.y, colorI, WMGraphics.ModeSrcOverDst);
				IF arrowAtEndI THEN
					canvas.Line(endI.x,endI.y, endI.x - ENTIER(0.5+head * Math.cos(alpha + pi/8)), endI.y - ENTIER(0.5+head * Math.sin(alpha + pi/8)), colorI, WMGraphics.ModeSrcOverDst);
					canvas.Line(endI.x,endI.y, endI.x - ENTIER(0.5+head * Math.cos(alpha - pi/8)), endI.y - ENTIER(0.5+head * Math.sin(alpha - pi/8)), colorI, WMGraphics.ModeSrcOverDst);
				END;
				IF arrowAtStartI THEN
					canvas.Line(startI.x,startI.y, startI.x + ENTIER(0.5+head * Math.cos(alpha + pi/8)), startI.y + ENTIER(0.5+head * Math.sin(alpha + pi/8)), colorI, WMGraphics.ModeSrcOverDst);
					canvas.Line(startI.x,startI.y, startI.x + ENTIER(0.5+head * Math.cos(alpha - pi/8)), startI.y + ENTIER(0.5+head * Math.sin(alpha - pi/8)), colorI, WMGraphics.ModeSrcOverDst);
				END
			END;
		END DrawBackground;

	END Line;

TYPE

	Rectangle* = OBJECT(WMComponents.VisualComponent)
	VAR
		clBorder- : WMProperties.ColorProperty;
		clBorderI : LONGINT;

		PROCEDURE &Init;
		BEGIN
			Init^;
			SetGenerator("WMShapes.GenRectangle");
			SetNameAsString(StrRectangle);
			NEW(clBorder, NIL, StrClBorder, StrClBorderDescription); properties.Add(clBorder);
			clBorder.Set(WMGraphics.Black); clBorderI := clBorder.Get();
		END Init;

		PROCEDURE PropertyChanged(sender, property : ANY);
		BEGIN
			IF (property = clBorder) THEN
				clBorderI := clBorder.Get();
				Invalidate;
			ELSE
				PropertyChanged^(sender, property);
			END;
		END PropertyChanged;

		PROCEDURE DrawBackground(canvas : WMGraphics.Canvas);
		VAR rect : WMRectangles.Rectangle;
		BEGIN
			DrawBackground^(canvas);
			IF (clBorderI # 0) THEN
				rect := GetClientRect();
				WMGraphicUtilities.DrawRect(canvas, rect, clBorderI, WMGraphics.ModeSrcOverDst);
			END;
		END DrawBackground;

	END Rectangle;

TYPE

	Circle* = OBJECT(WMComponents.VisualComponent)
	VAR
		color : WMProperties.ColorProperty;
		colorI : LONGINT;

		PROCEDURE &Init;
		BEGIN
			Init^;
			SetGenerator("WMShapes.GenCircle");
			SetNameAsString(StrCircle);
			NEW(color, NIL, Strings.NewString("Color"), Strings.NewString("Color")); properties.Add(color);
			color.Set(WMGraphics.Black); colorI := color.Get();
		END Init;

		PROCEDURE PropertyChanged(sender, property : ANY);
		BEGIN
			IF (property = color) THEN
				colorI := color.Get();
				Invalidate;
			ELSE
				PropertyChanged^(sender, property);
			END;
		END PropertyChanged;

		PROCEDURE DrawBackground(canvas : WMGraphics.Canvas);
		VAR rect : WMRectangles.Rectangle; radius : LONGINT;
		BEGIN
			DrawBackground^(canvas);
			IF (colorI # 0) THEN
				rect := bounds.Get();
				canvas.SetColor(colorI);
				radius := Strings.Min((rect.r - rect.l) DIV 2, (rect.b - rect.t) DIV 2) - 1;
				WMGraphicUtilities.Circle(canvas, (rect.r - rect.l) DIV 2, (rect.b - rect.t) DIV 2, radius);
			END;
		END DrawBackground;

	END Circle;

TYPE

	Ellipse* = OBJECT(WMComponents.VisualComponent)
	VAR
		color : WMProperties.ColorProperty;
		colorI : LONGINT;

		PROCEDURE &Init;
		BEGIN
			Init^;
			SetGenerator("WMShapes.GenEllipse");
			SetNameAsString(StrEllipse);
			NEW(color, NIL, StrColor, StrColorDescription);
			color.Set(WMGraphics.Black); colorI := color.Get();
		END Init;

		PROCEDURE PropertyChanged(sender, property : ANY);
		BEGIN
			IF (property = color) THEN
				colorI := color.Get();
				Invalidate;
			ELSE
				PropertyChanged^(sender, property);
			END;
		END PropertyChanged;

		PROCEDURE DrawBackground(canvas : WMGraphics.Canvas);
		VAR rect : WMRectangles.Rectangle;
		BEGIN
			DrawBackground^(canvas);
			IF (colorI # 0) THEN
				rect := bounds.Get();
				canvas.SetColor(colorI);
				WMGraphicUtilities.Ellipse(canvas, (rect.r - rect.l) DIV 2, (rect.b - rect.t) DIV 2, (rect.r - rect.l) DIV 2 - 1, (rect.b - rect.t) DIV 2 - 1);
			END;
		END DrawBackground;

	END Ellipse;

VAR
	StrLine, StrRectangle, StrCircle, StrEllipse : Strings.String;
	StrClBorder, StrClBorderDescription, StrColor, StrColorDescription, StrLineColorDescription,
	StrIsVertical, StrIsVerticalDescription,
	StrStart,StrEnd,StrArrowStart, StrArrowEnd,
	StrStartDescription, StrEndDescription, StrArrowStartDescription,StrArrowEndDescription: Strings.String;

PROCEDURE GenLine*() : XML.Element;
VAR line : Line;
BEGIN
	NEW(line); RETURN line;
END GenLine;

PROCEDURE GenRectangle*() : XML.Element;
VAR rectangle : Rectangle;
BEGIN
	NEW(rectangle); RETURN rectangle;
END GenRectangle;

PROCEDURE GenCircle*() : XML.Element;
VAR circle : Circle;
BEGIN
	NEW(circle); RETURN circle;
END GenCircle;

PROCEDURE GenEllipse*() : XML.Element;
VAR ellipse : Ellipse;
BEGIN
	NEW(ellipse); RETURN ellipse;
END GenEllipse;

PROCEDURE InitStrings;
BEGIN
	StrLine := Strings.NewString("Line");
	StrRectangle := Strings.NewString("StrRectangle");
	StrCircle := Strings.NewString("StrCircle");
	StrEllipse := Strings.NewString("StrEllipse");
	StrClBorder := Strings.NewString("ClBorder");
	StrClBorderDescription := Strings.NewString("Border color");
	StrColor := Strings.NewString("Color");
	StrColorDescription := Strings.NewString("Color");
	StrLineColorDescription := Strings.NewString("Color of line");
	StrStart := Strings.NewString("LineStart");
	StrStartDescription := Strings.NewString("start point of line");
	StrEnd := Strings.NewString("LineEnd");
	StrEndDescription := Strings.NewString("end point of line");
	StrArrowStart := Strings.NewString("ArrowAtStart");
	StrArrowStartDescription := Strings.NewString("arrows at start of line ?");
	StrArrowEnd := Strings.NewString("ArrowAtEnd");
	StrArrowEndDescription := Strings.NewString("arrows at end of line ?");
	StrIsVertical := Strings.NewString("IsVertical");
	StrIsVerticalDescription := Strings.NewString("Horizontal or vertical line?");
END InitStrings;

PROCEDURE arctan2(x,y: REAL): REAL; (*arctan in range 0..2pi*)
	BEGIN
		IF (x>0) & (y>=0) THEN RETURN Math.arctan(y/x)
		ELSIF (x>0) & (y<0) THEN RETURN Math.arctan(y/x)+2*Math.pi
		ELSIF x<0 THEN RETURN Math.arctan(y/x)+Math.pi
		ELSIF (x=0) & (y>0) THEN RETURN Math.pi/2
		ELSIF (x=0) & (y<0) THEN RETURN 3*Math.pi/2
		ELSE (*( x=0) & (y=0) *) RETURN 0 (*or RETURN NaN ?*) 
		END
	END arctan2;

BEGIN
	InitStrings;
END WMShapes.

SystemTools.FreeDownTo WMShapes ~
