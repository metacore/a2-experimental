(* Runtime support for CPU internals *)
(* Copyright (C) Florian Negele *)

MODULE CPU;

IMPORT SYSTEM;

CONST StackSize* = 2048;
CONST Quantum* = 100000;
CONST CacheLineSize* = 32;
CONST StackDisplacement* = 0;

PROCEDURE Backoff-;
CODE
END Backoff;

(* cpu control *)
PROCEDURE Delay- (cycles: SIZE);
CODE
	LDR	R2, [FP, #cycles]
delay:	SUBS	R2, R2, #1
	BNE	delay
END Delay;

PROCEDURE {NORETURN} Reset-;
BEGIN {UNCOOPERATIVE, UNCHECKED}
END Reset;

PROCEDURE {NORETURN} Halt-;
BEGIN {UNCOOPERATIVE, UNCHECKED}
	LOOP END;
END Halt;

(* hardware registers *)
CONST WDOG* = 020100024H; RSTC* = 02010001CH; PASSWORD = 05A000000H; FULLRESET = 000000020H;

CONST GPFSEL0* = 020200004H; FSEL0* = 0; FSEL1* = 3; FSEL2* = 6; FSEL3* = 9; FSEL4* = 12; FSEL5* = 15; FSEL6* = 18; FSEL7* = 21; FSEL8* = 24; FSEL9* = 27;
CONST GPFSEL1* = 020200008H; FSEL10* = 0; FSEL11* = 3; FSEL12* = 6; FSEL13* = 9; FSEL14* = 12; FSEL15* = 15; FSEL16* = 18; FSEL17* = 21; FSEL18* = 24; FSEL19* = 27;
CONST GPSET0* = 02020001CH; GPSET1* = 020200020H;
CONST GPCLR0* = 020200028H; GPCLR1* = 02020002CH;
CONST GPPUD* = 020200094H; PUD* = 0;
CONST GPPUDCLK0* = 020200098H; GPPUDCLK1* = 02020009CH;

CONST IRQBasicPending* = 02000B200H; IRQPending1* = 02000B204H; IRQPending2* = 02000B208H;
CONST IRQEnable1* = 02000B210H; IRQEnable2* = 02000B214H; IRQEnableBasic* = 02000B218H;
CONST IRQDisable1* = 02000B21CH; IRQDisable2* = 02000B220H; IRQDisableBasic* = 02000B224H;

CONST STCS* = 020003000H; M0* = 0; M1* = 1; M2* = 2; M3* = 3;
CONST STCLO* = 020003004H; STCHI* = 020003008H;
CONST STC0* = 02000300CH; STC1* = 020003010H; STC2* = 020003014H; STC3* = 020003018H;

CONST FUARTCLK* = 3000000;
CONST UART_DR* = 020201000H;
CONST UART_FR* = 020201018H; RXFE* = 4; TXFF* = 5; TXFE* = 7;
CONST UART_IBRD* = 020201024H;
CONST UART_FBRD* = 020201028H;
CONST UART_LCRH* = 02020102CH; FEN* = 4; WLEN8* = {5, 6};
CONST UART_CR* = 020201030H; UARTEN* = 0; TXE* = 8; RXE* = 9;
CONST UART_IMSC* = 020201038H; RXIM* = 4;
CONST UART_ICR* = 020201044H; RXIC* = 4;

PROCEDURE ReadWord- (register: ADDRESS): WORD;
CODE
	LDR	R2, [FP, #register]
	LDR	R0, [R2, #0]
END ReadWord;

PROCEDURE ReadMask- (register: ADDRESS): SET;
CODE
	LDR	R2, [FP, #register]
	LDR	R0, [R2, #0]
END ReadMask;

PROCEDURE WriteWord- (register: ADDRESS; value: SIZE);
CODE
	LDR	R2, [FP, #register]
	LDR	R3, [FP, #value]
	STR	R3, [R2, #0]
END WriteWord;

PROCEDURE WriteMask- (register: ADDRESS; value: SET);
CODE
	LDR	R2, [FP, #register]
	LDR	R3, [FP, #value]
	STR	R3, [R2, #0]
END WriteMask;

PROCEDURE Mask- (register: ADDRESS; value: SET);
CODE
	LDR	R2, [FP, #register]
	LDR	R3, [FP, #value]
	LDR	R4, [R2, #0]
	ORR	R4, R4, R3
	STR	R4, [r2, #0]
END Mask;

PROCEDURE Unmask- (register: ADDRESS; value: SET);
CODE
	LDR	R2, [FP, #register]
	LDR	R3, [FP, #value]
	LDR	R4, [R2, #0]
	BIC	R4, R4, R3
	STR	R4, [r2, #0]
END Unmask;

END CPU.
