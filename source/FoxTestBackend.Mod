(**
	The special backend in the Fox compiler suite serves as a tester module
	#author# Felix Friedrich, Patrick Hunziker
	#purpose# Testfile Generator
*)

MODULE FoxTestBackend;

IMPORT Basic := FoxBasic, SyntaxTree := FoxSyntaxTree, Formats := FoxFormats, Backend := FoxBackend, Options, Files, Commands, Strings;

TYPE

	TestBackend= OBJECT (Backend.Backend)
	VAR
		fileName : Files.FileName;

		PROCEDURE ProcessSyntaxTreeModule*(module: SyntaxTree.Module): Formats.GeneratedModule;
		VAR
			procedure: SyntaxTree.Procedure;
			procedureName, moduleName: Basic.SectionName;
			file: Files.File; writer: Files.Writer;
			cmd, msg: ARRAY 256 OF CHAR; res:INTEGER;
		BEGIN
			IF fileName # "" THEN
				file := Files.Old(fileName);
				NEW(writer, file, file.Length());
			ELSE
				writer := NIL;
			END;
			Basic.GetString(module.name, moduleName);
			procedure:=module.moduleScope.firstProcedure;
			WHILE procedure#NIL DO
				IF procedure.isTest THEN
					Basic.GetString(procedure.name, procedureName);
					IF writer # NIL THEN
						writer.String("positive: "); writer.String(moduleName); writer.String("."); writer.String(procedureName); writer.Ln;
						writer.Ln;
						writer.String(\"\tMODULE Test42;\n"\);
						writer.String(\"\tIMPORT "\); writer.String(moduleName); writer.String(\";\n"\);
						writer.String(\"\tBEGIN "\);
						writer.String(moduleName); writer.String("."); writer.String(procedureName);
						writer.String(" END Test42."); writer.Ln;
						writer.Ln;
						writer.Update;
					ELSE
						COPY("System.FreeDownTo ", cmd); Strings.Append(cmd, moduleName);
						Commands.Call(cmd, {Commands.Wait},res,msg);
						COPY(moduleName, cmd); Strings.Append(cmd, "."); Strings.Append(cmd, procedureName);
						IF log#NIL THEN
							log.String("testing "); log.String(cmd); log.String(": "); log.Update;
						END;
						Commands.Activate(cmd,NIL,{Commands.Wait},res,msg);
						IF log#NIL THEN
							log.String(msg); IF res=0 THEN log.String(" successful.") ELSE log.Int(res,6);  END;
							log.Ln; log.Update;
						END;
					END;
				END;
				procedure:=procedure.nextProcedure;
			END;
			RETURN NIL;
		END ProcessSyntaxTreeModule;

		PROCEDURE DefineOptions*(options: Options.Options);
		BEGIN
			DefineOptions^(options);
			options.Add(0X,"testFile",Options.String);
		END DefineOptions;

		PROCEDURE GetOptions*(options: Options.Options);
		VAR file: Files.File; writer: Files.Writer;
		BEGIN
			GetOptions^(options);
			IF options.GetString("testFile", fileName) THEN
				file := Files.New(fileName);
				NEW(writer,file,0);
				writer.String("# Testfile -- automatically generated by FoxTestBackend"); writer.Ln;
				writer.String(\"# options --mayTrap --prolog="Compiler.Compile TesterInput.txt" --command="System.Free Test42;System.Load Test42" --logFile=""\);
				writer.String(fileName); writer.String (\".Log" --result=""\); writer.String(fileName); writer.String (\".Diff" \n\n"\);
				writer.Update();
				Files.Register(file);
			ELSE
				fileName := "";
			END;
		END GetOptions;

	END TestBackend;

	PROCEDURE Get*(): Backend.Backend;
	VAR documentationBackend: TestBackend;
	BEGIN
		NEW(documentationBackend); RETURN documentationBackend;
	END Get;

END FoxTestBackend.

System.FreeDownTo FoxTestBackend ~
