MODULE CyrillicUtilities;
	IMPORT KernelLog, Codecs, Streams, Texts, Commands;
CONST 
	PRIME = 977; 
	CP1251 = 0; 
	KOI8R = (CP1251 + 1); 
	KOI8U = (KOI8R + 1); 
	CP866 = (KOI8U + 1); 
	ISO88595 = (CP866 + 1); 
	ENCODINGS_HIGH = ISO88595; 
	CR = 0DX; 
	LF = 0AX; 
TYPE 
	Char32 = Texts.Char32; 

	StaticTable = ARRAY 256 OF Char32; 

	HashTable = ARRAY PRIME OF RECORD 
		ucs32: Char32; 
		encodings: SET; 
		ch: ARRAY (ENCODINGS_HIGH + 1) OF CHAR; 
	END; 

	LowBound = ARRAY (ENCODINGS_HIGH + 1) OF INTEGER; 

	CP1251Decoder = OBJECT (Codecs.TextDecoder)
	VAR 
		errors: BOOLEAN; 
		in: Streams.Reader; 
		text: Texts.Text; 

		PROCEDURE ^ Error(CONST x: ARRAY OF CHAR); 
		PROCEDURE ^ Open*(in: Streams.Reader; VAR res: WORD); 
		PROCEDURE ^ GetText*(): Texts.Text; 
	END CP1251Decoder; 

	CP1251Encoder = OBJECT (Codecs.TextEncoder)
	VAR 
		out: Streams.Writer; 

		PROCEDURE ^ Open*(out: Streams.Writer); 
		PROCEDURE ^ WriteText*(text: Texts.Text; VAR res: WORD); 
	END CP1251Encoder; 

	KOI8RDecoder = OBJECT (Codecs.TextDecoder)
	VAR 
		errors: BOOLEAN; 
		in: Streams.Reader; 
		text: Texts.Text; 

		PROCEDURE ^ Error(CONST x: ARRAY OF CHAR); 
		PROCEDURE ^ Open*(in: Streams.Reader; VAR res: WORD); 
		PROCEDURE ^ GetText*(): Texts.Text; 
	END KOI8RDecoder; 

	KOI8REncoder = OBJECT (Codecs.TextEncoder)
	VAR 
		out: Streams.Writer; 

		PROCEDURE ^ Open*(out: Streams.Writer); 
		PROCEDURE ^ WriteText*(text: Texts.Text; VAR res: WORD); 
	END KOI8REncoder; 

	KOI8UDecoder = OBJECT (Codecs.TextDecoder)
	VAR 
		errors: BOOLEAN; 
		in: Streams.Reader; 
		text: Texts.Text; 

		PROCEDURE ^ Error(CONST x: ARRAY OF CHAR); 
		PROCEDURE ^ Open*(in: Streams.Reader; VAR res: WORD); 
		PROCEDURE ^ GetText*(): Texts.Text; 
	END KOI8UDecoder; 

	KOI8UEncoder = OBJECT (Codecs.TextEncoder)
	VAR 
		out: Streams.Writer; 

		PROCEDURE ^ Open*(out: Streams.Writer); 
		PROCEDURE ^ WriteText*(text: Texts.Text; VAR res: WORD); 
	END KOI8UEncoder; 

	CP866Decoder = OBJECT (Codecs.TextDecoder)
	VAR 
		errors: BOOLEAN; 
		in: Streams.Reader; 
		text: Texts.Text; 

		PROCEDURE ^ Error(CONST x: ARRAY OF CHAR); 
		PROCEDURE ^ Open*(in: Streams.Reader; VAR res: WORD); 
		PROCEDURE ^ GetText*(): Texts.Text; 
	END CP866Decoder; 

	CP866Encoder = OBJECT (Codecs.TextEncoder)
	VAR 
		out: Streams.Writer; 

		PROCEDURE ^ Open*(out: Streams.Writer); 
		PROCEDURE ^ WriteText*(text: Texts.Text; VAR res: WORD); 
	END CP866Encoder; 

	ISO88595Decoder = OBJECT (Codecs.TextDecoder)
	VAR 
		errors: BOOLEAN; 
		in: Streams.Reader; 
		text: Texts.Text; 

		PROCEDURE ^ Error(CONST x: ARRAY OF CHAR); 
		PROCEDURE ^ Open*(in: Streams.Reader; VAR res: WORD); 
		PROCEDURE ^ GetText*(): Texts.Text; 
	END ISO88595Decoder; 

	ISO88595Encoder = OBJECT (Codecs.TextEncoder)
	VAR 
		out: Streams.Writer; 

		PROCEDURE ^ Open*(out: Streams.Writer); 
		PROCEDURE ^ WriteText*(text: Texts.Text; VAR res: WORD); 
	END ISO88595Encoder; 

	; 
VAR 
	aLowBound: LowBound; 
	koi8r, koi8u, cp1251, cp866, iso88595: StaticTable; 
	hash: HashTable; 
	bFirst: BOOLEAN; 
	setInitDone: SET; 
	nCollisions: LONGINT; 
	ucs32Min, ucs32Max: Char32; 

	PROCEDURE ^ hashSearch(encoding: SHORTINT; bAddAllowed: BOOLEAN; ucs32: Char32; VAR ch: CHAR): BOOLEAN; 
	PROCEDURE ^ koi8rInit; 
	PROCEDURE ^ koi8uInit; 
	PROCEDURE ^ cp1251Init; 
	PROCEDURE ^ cp866Init; 
	PROCEDURE ^ iso88595Init; 
	PROCEDURE ^ CP1251DecoderFactory*(): Codecs.TextDecoder; 
	PROCEDURE ^ CP1251EncoderFactory*(): Codecs.TextEncoder; 
	PROCEDURE ^ KOI8RDecoderFactory*(): Codecs.TextDecoder; 
	PROCEDURE ^ KOI8REncoderFactory*(): Codecs.TextEncoder; 
	PROCEDURE ^ KOI8UDecoderFactory*(): Codecs.TextDecoder; 
	PROCEDURE ^ KOI8UEncoderFactory*(): Codecs.TextEncoder; 
	PROCEDURE ^ CP866DecoderFactory*(): Codecs.TextDecoder; 
	PROCEDURE ^ CP866EncoderFactory*(): Codecs.TextEncoder; 
	PROCEDURE ^ ISO88595DecoderFactory*(): Codecs.TextDecoder; 
	PROCEDURE ^ ISO88595EncoderFactory*(): Codecs.TextEncoder; 
	PROCEDURE ^ Init; 
	PROCEDURE ^ HashStat*(context: Commands.Context); 
BEGIN
END CyrillicUtilities.
