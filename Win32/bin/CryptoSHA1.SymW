MODULE CryptoSHA1;
	IMPORT Hashes := CryptoHashes, U := CryptoUtils;
CONST 
	BlockSize = 64; 
TYPE 
	State = ARRAY 5 OF SIGNED32; 

	Hash* = OBJECT (Hashes.Hash)
	VAR 
		hash: State; 
		Nl, Nh: SIZE; 
		cdata: ARRAY BlockSize OF CHAR; 
		cn: SIZE; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Initialize*; 
		PROCEDURE ^ HashContextBlock; 
		PROCEDURE ^ Update*(CONST data: ARRAY OF CHAR; pos, len: SIZE); 
		PROCEDURE ^ GetHash*(VAR buf: ARRAY OF CHAR; pos: SIZE); 
	END Hash; 

	PROCEDURE ^ NewHash*(): Hashes.Hash; 
	PROCEDURE  - tr0019(a: SIGNED32; VAR b: SIGNED32; c, d, e: SIGNED32; VAR f: SIGNED32; x: SET32);
	BEGIN
		f := ((((SIGNED32(x) + e) + 1518500249) + ROT(a, 5)) + SIGNED32((((SET32(c) / SET32(d)) * SET32(b)) / SET32(d)))); 
		b := ROT(b, 30)
	END tr0019; 
	PROCEDURE  - tr2039(a: SIGNED32; VAR b: SIGNED32; c, d, e: SIGNED32; VAR f: SIGNED32; x: SET32);
	BEGIN
		f := ((((SIGNED32(x) + e) + 1859775393) + ROT(a, 5)) + SIGNED32(((SET32(b) / SET32(c)) / SET32(d)))); 
		b := ROT(b, 30)
	END tr2039; 
	PROCEDURE  - tr4059(a: SIGNED32; VAR b: SIGNED32; c, d, e: SIGNED32; VAR f: SIGNED32; x: SET32);
	BEGIN
		f := ((((SIGNED32(x) + e) + SIGNED32(2400959708)) + ROT(a, 5)) + SIGNED32(((SET32(b) * SET32(c)) + ((SET32(b) + SET32(c)) * SET32(d))))); 
		b := ROT(b, 30)
	END tr4059; 
	PROCEDURE  - tr6079(a: SIGNED32; VAR b: SIGNED32; c, d, e: SIGNED32; VAR f: SIGNED32; x: SET32);
	BEGIN
		f := ((((SIGNED32(x) + e) + SIGNED32(3395469782)) + ROT(a, 5)) + SIGNED32(((SET32(b) / SET32(c)) / SET32(d)))); 
		b := ROT(b, 30)
	END tr6079; 
	PROCEDURE ^ HashBlock(VAR state: State; CONST buf: ARRAY OF CHAR; pos: SIZE); 
BEGIN
END CryptoSHA1.
