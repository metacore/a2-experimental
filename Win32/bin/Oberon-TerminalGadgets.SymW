MODULE TerminalGadgets IN Oberon;
	IMPORT Objects, Terminals, Oberon, Texts, Display, Display3, Gadgets, Fonts, Input, Printer, Printer3;
CONST 
	NoCursor* = 0; 
	FadedCursor* = 1; 
	FullCursor* = 2; 
	Left = 2; 
	Middle = 1; 
	Right = 0; 
	Gap* = 2; 
	VSpace = (2 * Gap); 
	HSpace = (3 * Gap); 
TYPE 
	Frame* = POINTER TO FrameDesc; 

	FrameDesc* = RECORD (Gadgets.FrameDesc)
		text*: Terminals.Terminal; 
		fnt*: Fonts.Font; 
		cursorState*, charW*, lineH*, textcol*, profile*: INTEGER; 
		hasSel*: BOOLEAN; 
		selTime*: LONGINT; 
		selFrom*, selTo*: Terminals.Location; 
		col: INTEGER; 
	END; 

	UpdateMsg* = RECORD (Display.FrameMsg)
		text: Terminals.Terminal; 
		op, fromLine, fromCol, toLine, toCol: INTEGER; 
		oldCur: Terminals.Location; 
	END; 

	MarksMsg = RECORD (Display.FrameMsg)
		id: INTEGER; 
	END; 
VAR 
	w: Texts.Writer; 

	PROCEDURE ^ InvC(F: Frame): INTEGER; 
	PROCEDURE ^ NotifyDisplay*(t: Terminals.Terminal; op, fromLine, fromCol, toLine, toCol: INTEGER; oldCur: Terminals.Location); 
	PROCEDURE ^ Open*(f: Frame; handle: Objects.Handler; t: Terminals.Terminal; fnt: Fonts.Font); 
	PROCEDURE ^ Copy*(from, to: Frame); 
	PROCEDURE ^ DrawCursor(f: Frame; frameX, frameY: INTEGER; R: Display3.Mask; line, col: INTEGER; mode: INTEGER); 
	PROCEDURE ^ SetCursor(f: Frame; frameX, frameY: INTEGER; R: Display3.Mask; state: INTEGER); 
	PROCEDURE ^ DrawSelection(f: Frame; frameX, frameY: INTEGER; R: Display3.Mask; fromLine, fromCol, toLine, toCol: INTEGER); 
	PROCEDURE ^ RemoveSelection(f: Frame; frameX, frameY: INTEGER; R: Display3.Mask); 
	PROCEDURE ^ TextOf(f: Frame): Texts.Text; 
	PROCEDURE ^ TextPos(f: Frame; line, col: INTEGER): INTEGER; 
	PROCEDURE ^ GetSelection*(f: Frame; VAR text: Texts.Text; VAR beg, end, time: LONGINT); 
	PROCEDURE ^ Neutralize*(f: Frame; frameX, frameY: INTEGER; R: Display3.Mask); 
	PROCEDURE ^ DrawChar(f: Frame; xPos, yPos: INTEGER; R: Display3.Mask; char: Terminals.Char); 
	PROCEDURE ^ DisplayLine(f: Frame; frameX, frameY: INTEGER; R: Display3.Mask; line, fromCol, toCol: INTEGER); 
	PROCEDURE ^ Shift(F: Frame; x, y: INTEGER; msk: Display3.Mask; Y, H, dY, top, bot: INTEGER); 
	PROCEDURE ^ UpdateScrolling(f: Frame; frameX, frameY: INTEGER; R: Display3.Mask; top, bot, dH: INTEGER); 
	PROCEDURE ^ Update*(f: Frame; frameX, frameY: INTEGER; R: Display3.Mask; op: INTEGER; fromLine, fromCol, toLine, toCol: INTEGER; oldCur: Terminals.Location); 
	PROCEDURE ^ TrackSelection*(f: Frame; frameX, frameY: INTEGER; R: Display3.Mask; VAR keySum: SET; x, y: INTEGER); 
	PROCEDURE ^ Call*(f: Frame; cmdLine, cmdCol: INTEGER; new: BOOLEAN); 
	PROCEDURE ^ DrawLine(f: Frame; frameX, frameY: INTEGER; R: Display3.Mask; from: Terminals.Location); 
	PROCEDURE ^ TrackWord*(f: Frame; frameX, frameY: INTEGER; R: Display3.Mask; x, y: INTEGER; VAR cmdLine, cmdCol: INTEGER; VAR keySum: SET); 
	PROCEDURE ^ Edit*(f: Frame; frameX, frameY: INTEGER; R: Display3.Mask; keys: SET; mouseX, mouseY: INTEGER); 
	PROCEDURE ^ Modify*(f: Frame; frameX, frameY: INTEGER; R: Display3.Mask; id, Y, H, dY: INTEGER); 
	PROCEDURE ^ SetFont(F: Frame; name: ARRAY OF CHAR); 
	PROCEDURE ^ FrameAttr(F: Frame; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ RestoreFrame(F: Frame; frameX, frameY: INTEGER; R: Display3.Mask); 
	PROCEDURE ^ Print(F: Frame; VAR M: Display.DisplayMsg); 
	PROCEDURE ^ CopyFrame*(VAR M: Objects.CopyMsg; from, to: Frame); 
	PROCEDURE ^ RemoveMarks(F: Frame; x, y: INTEGER; VAR M: MarksMsg); 
	PROCEDURE ^ Handle*(F: Objects.Object; VAR M: Objects.ObjMsg); 
BEGIN
END TerminalGadgets.
