MODULE Directories IN Oberon;
	IMPORT Kernel32 IN A2, FileDir, Files, Modules, Input, Strings, Display, Pictures, Display3, Printer, Printer3, Objects, Attributes, Texts, Gadgets, Oberon, ListRiders, ListGadgets, Win32FS := WinFS IN A2, AosFS := Files IN A2;
CONST 
	None = Kernel32.DriveNoRootDir; 
	Removable = Kernel32.DriveRemovable; 
	Fixed = Kernel32.DriveFixed; 
	Remote = Kernel32.DriveRemote; 
	CDROM = Kernel32.DriveCDRom; 
	RAMDisk = Kernel32.DriveRamDisk; 
	Floppy = 7; 
	FoldC = 8; 
	FoldO = 9; 
	Picts = 9; 
	NoDataStr = \"INVALID DATA"\; 
TYPE 
	Data = POINTER TO DataDesc; 

	DataDesc = RECORD (ListRiders.StringDesc)
		pictNr: SIGNED32; 
	END; 

	Item = POINTER TO ItemDesc; 

	ItemDesc = RECORD 
		s: ARRAY 64 OF CHAR; 
		key, pos, stamp, state: SIGNED32; 
		dsc, asc, next, prev: Item; 
	END; 

	Model* = POINTER TO ModelDesc; 

	ModelDesc* = RECORD (Gadgets.ObjDesc)
		tail: Item; 
		mask: ARRAY 32 OF CHAR; 
		rootDir: FileDir.FileName; 
		key: SIGNED32; 
	END; 

	Rider* = POINTER TO RiderDesc; 

	RiderDesc* = RECORD (ListRiders.RiderDesc)
		item: Item; 
	END; 
VAR 
	model: Model; 
	root: Item; 
	R: ListRiders.Rider; 
	writePath: BOOLEAN; 
	mMethod: ListRiders.Method; 
	vMethod: ListGadgets.Method; 
	drvPicts: ARRAY Picts OF Pictures.Picture; 
	maxW: SIGNED16; 
	drv: Objects.Object; 
	StringHandler: Objects.Handler; 
	task: Oberon.Task; 

	PROCEDURE ^ IsDriveAvailable(drv: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ IsOnlyDrive(path: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ IsDirectory(path: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ CheckPath(VAR path: ARRAY OF CHAR); 
	PROCEDURE ^ GetKey(obj: Model): SIGNED32; 
	PROCEDURE ^ NewItem(name: ARRAY OF CHAR; key: SIGNED32): Item; 
	PROCEDURE ^ InsertItem(item, n: Item); 
	PROCEDURE ^ Enum(path, name: ARRAY OF CHAR; time, date, size: SIGNED32; attrs: SET); 
	PROCEDURE ^ BuildList(obj: Model; tail: Item; path, mask: ARRAY OF CHAR); 
	PROCEDURE ^ SetItem(R: Rider; item: Item); 
	PROCEDURE ^ Key(R: ListRiders.Rider): SIGNED32; 
	PROCEDURE ^ Seek(R: ListRiders.Rider; key: SIGNED32); 
	PROCEDURE ^ Pos(R: ListRiders.Rider): SIGNED32; 
	PROCEDURE ^ Set(R: ListRiders.Rider; pos: SIGNED32); 
	PROCEDURE ^ Write(R: ListRiders.Rider; d: ListRiders.Data); 
	PROCEDURE ^ WriteLink(R, linkR: ListRiders.Rider); 
	PROCEDURE ^ DeleteLink(R, linkR: ListRiders.Rider); 
	PROCEDURE ^ Desc(R, old: ListRiders.Rider): ListRiders.Rider; 
	PROCEDURE ^ GetStamp(R: ListRiders.Rider): SIGNED32; 
	PROCEDURE ^ SetStamp(R: ListRiders.Rider; stamp: SIGNED32); 
	PROCEDURE ^ State(R: ListRiders.Rider): SIGNED32; 
	PROCEDURE ^ SetState(R: ListRiders.Rider; s: SIGNED32); 
	PROCEDURE ^ ConnectRider(R: Rider; base: Model); 
	PROCEDURE ^ UpdateModel*(obj: Model); 
	PROCEDURE ^ ModelAttr(obj: Model; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ ModelHandler*(obj: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitModel*(obj: Model; rootDir, mask: ARRAY OF CHAR); 
	PROCEDURE ^ New*; 
	PROCEDURE ^ FormatLine(F: ListGadgets.Frame; R: ListRiders.Rider; L: ListGadgets.Line); 
	PROCEDURE ^ DisplayLine(F: ListGadgets.Frame; Q: Display3.Mask; x, y, w, h: SIGNED16; R: ListRiders.Rider; L: ListGadgets.Line); 
	PROCEDURE ^ P(x: SIGNED32): SIGNED16; 
	PROCEDURE ^ PrintFormatLine(F: ListGadgets.Frame; R: ListRiders.Rider; L: ListGadgets.Line); 
	PROCEDURE ^ PrintLine(F: ListGadgets.Frame; Q: Display3.Mask; x, y, w, h: SIGNED16; R: ListRiders.Rider; L: ListGadgets.Line); 
	PROCEDURE ^ GadgetHandler(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewDirList*; 
	PROCEDURE ^ TaskHandler(me: Oberon.Task); 
	PROCEDURE ^ HandleDrv(obj: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewDrv*; 
	PROCEDURE ^ EnumForList(path, name: ARRAY OF CHAR; time, date, size: SIGNED32; attrs: SET); 
	PROCEDURE ^ Directory*; 
	PROCEDURE ^ GetPicts; 
	PROCEDURE ^ Cleanup; 
BEGIN
END Directories.
