MODULE WMSlideshow;
	IMPORT Codecs, Inputs, Modules, Streams, KernelLog, Files, Commands, Raster, Strings, WMDropTarget, WMWindowManager, WMGraphics, WMRectangles, WMComponents, WMStandardComponents, WMDialogs, WMTransitions, XML, XMLObjects, XMLScanner, XMLParser;
CONST 
	DEBUG = FALSE; 
TYPE 
	String = Strings.String; 

	Image = WMGraphics.Image; 

	TransitionMask = WMTransitions.TransitionMask; 

	TransitionFade = WMTransitions.TransitionFade; 

	ObjectArray = POINTER TO ARRAY OF ANY; 

	Slide* = OBJECT 
	VAR 
		img, trans: String; 
		dur: SIGNED32; 
		desc: String; 

		PROCEDURE ^  & New*(img: String; trans: String; dur: SIGNED32; desc: String); 
	END Slide; 

	List* = OBJECT {EXCLUSIVE} 
	VAR 
		list: ObjectArray; 
		count: SIGNED32; 
		readLock: SIGNED32; 

		PROCEDURE ^  & New*(size: SIGNED32); 
		PROCEDURE ^ GetCount*(): SIGNED32; 
		PROCEDURE ^ Grow; 
		PROCEDURE ^ Add*(x: ANY); 
		PROCEDURE ^ Replace*(x, y: ANY); 
		PROCEDURE ^ IndexOf*(x: ANY): SIGNED32; 
		PROCEDURE ^ Remove*(x: ANY); 
		PROCEDURE ^ RemoveByIndex*(index: SIGNED32); 
		PROCEDURE ^ Clear*; 
		PROCEDURE ^ GetItem*(i: SIGNED32): ANY; 
		PROCEDURE ^ Lock*; 
		PROCEDURE ^ Unlock*; 
	END List; 

	SlideshowApp = OBJECT 
	VAR 
		data: SlideshowData; 
		win: SlideshowWindow; 
		nav: SlideshowNavigation; 
		slideNr: SIGNED32; 
		fullscreen: BOOLEAN; 

		PROCEDURE ^  & New*(CONST filename: ARRAY OF CHAR); 
		PROCEDURE ^ Next; 
		PROCEDURE ^ Previous; 
		PROCEDURE ^ First; 
		PROCEDURE ^ Last; 
		PROCEDURE ^ ToggleFullscreen; 
		PROCEDURE ^ ShowFileList; 
		PROCEDURE ^ ExitDialog; 
		PROCEDURE ^ RemoveCurrentSlide; 
		PROCEDURE ^ Close; 
	END SlideshowApp; 

	SlideshowNavigation = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		data: SlideshowData; 
		imageP: WMStandardComponents.ImagePanel; 
		prevLen: SIGNED32; 

		PROCEDURE ^  & New*(data: SlideshowData); 
		PROCEDURE ^ UpdatePreview; 
		PROCEDURE ^ ButtonHandlerNext(sender, data: ANY); 
		PROCEDURE ^ ButtonHandlerPrevious(sender, data: ANY); 
		PROCEDURE ^ ButtonHandlerFirst(sender, data: ANY); 
		PROCEDURE ^ ButtonHandlerLast(sender, data: ANY); 
		PROCEDURE ^ KeyEvent*(ucs: SIZE; flags: SET; keysym: SIZE); 
		PROCEDURE ^ DragDropped*(x, y: SIZE; dragInfo: WMWindowManager.DragInfo); 
	END SlideshowNavigation; 

	URLDropTarget* = OBJECT (WMDropTarget.DropTarget)

		PROCEDURE ^ GetInterface*(type: SIGNED32): WMDropTarget.DropInterface; 
	END URLDropTarget; 

	DropURL* = OBJECT (WMDropTarget.DropURLs)

		PROCEDURE ^ URL*(CONST url: ARRAY OF CHAR; VAR res: INTEGER); 
	END DropURL; 

	SlideshowWindow = OBJECT {EXCLUSIVE} (WMWindowManager.DoubleBufferWindow)
	VAR 
		data: SlideshowData; 

		PROCEDURE ^  & New*(width, height: SIGNED32; alpha: BOOLEAN; data: SlideshowData); 
		PROCEDURE ^ PointerDown*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ KeyEvent*(ucs: SIZE; flags: SET; keysym: SIZE); 
		PROCEDURE ^ Show(nextSlideNr: SIGNED32); 
		PROCEDURE ^ ShowMask(current, next: Image; CONST mask: ARRAY OF CHAR; len: SIGNED32); 
		PROCEDURE ^ ShowFade(current, next: Image; len: SIGNED32); 
		PROCEDURE ^ ShowNone(next: Image); 
		PROCEDURE ^ Update; 
	END SlideshowWindow; 

	SlideshowData = OBJECT {EXCLUSIVE} 
	VAR 
		slides: List; 
		hasErrors: BOOLEAN; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ GetSlide(i: SIGNED32): Slide; 
		PROCEDURE ^ CountSlides(): SIGNED32; 
		PROCEDURE ^ LoadSlideshow(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ LoadSlides(doc: XML.Document): BOOLEAN; 
		PROCEDURE ^ ErrorReport(pos, line, row: Streams.Position; CONST msg: ARRAY OF CHAR); 
		PROCEDURE ^ AddSlide(CONST filename: ARRAY OF CHAR); 
		PROCEDURE ^ RemoveSlide(i: SIGNED32); 
		PROCEDURE ^ ClearSlides; 
	END SlideshowData; 
VAR 
	app: SlideshowApp; 

	PROCEDURE ^ Open*(context: Commands.Context); 
	PROCEDURE ^ Cleanup; 
	PROCEDURE ^ LoadImage(CONST name: ARRAY OF CHAR; fmt: Raster.Format): Image; 
	PROCEDURE ^ GetExtension(CONST name: ARRAY OF CHAR; VAR ext: ARRAY OF CHAR); 
BEGIN
END WMSlideshow.
