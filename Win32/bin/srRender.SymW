MODULE srRender;
	IMPORT Modules, Commands, WMWindowManager, Raster, Objects, Random, Rectangles := WMRectangles, Out := KernelLog, Math, srBase, srMath, srRastermovie, srvoxels, srRayEngine;
CONST 
TYPE 
	SREAL = srBase.SREAL; 

	Aperture = srBase.Aperture; 

	Ray = srBase.Ray; 

	Voxel = srBase.Voxel; 

	PT = srBase.PT; 

	SNAP = RECORD 
		lookphi, looktheta: SREAL; 
		aperture: Aperture; 
		x, y, z, cdroll: SREAL; 
		detail: SIGNED16; 
	END; 

	VoxWindow = OBJECT {EXCLUSIVE} (WMWindowManager.DoubleBufferWindow)
	VAR 
		alive, alpha: BOOLEAN; 
		i: SIGNED32; 
		random: Random.Generator; 
		camera: Camera; 
		speed: SREAL; 
		pointerlastx, pointerlasty: SIZE; 
		pi: WMWindowManager.PointerInfo; 
		px, pdx, py, pdy: SIZE; 
		pkeys: SET; 
		t1, t2, dt: SIGNED32; 
		big, focus, voxconnect: BOOLEAN; 
		connectvox: Voxel; 
		Key: CHAR; 
		movemode: CHAR; 
		raysperframe: SIGNED32; 

		PROCEDURE ^  & New*(W, H, i, j: SIGNED16; large: BOOLEAN); 
		PROCEDURE ^ FocusGot*; 
		PROCEDURE ^ FocusLost*; 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ speedup*; 
		PROCEDURE ^ slowdown*; 
		PROCEDURE ^ KeyEvent*(ucs: SIZE; flags: SET; keysym: SIZE); 
		PROCEDURE ^ PointerDown*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ deathray; 
		PROCEDURE ^ PointerUp*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerMove*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerLeave*; 
		PROCEDURE ^ WheelMove*(dz: SIZE); 
		PROCEDURE ^ move; 
		PROCEDURE ^ fly; 
		PROCEDURE ^ pan; 
	END VoxWindow; 

	Camera = OBJECT 
	VAR 
		window: VoxWindow; 
		random: Random.Generator; 
		filter, rayschanged, ang1: BOOLEAN; 
		fovealeft, fovearight, foveabottom, foveatop: SIGNED32; 
		fovea: BOOLEAN; 
		cam: srBase.PT; 
		mode: Raster.Mode; 
		pixel: Raster.Pixel; 
		W, H: SIGNED16; 
		XLOOK, YLOOK: SIGNED32; 
		large: BOOLEAN; 

		PROCEDURE ^  & init*(w: VoxWindow; width, height: SIGNED16; l: BOOLEAN); 
		PROCEDURE ^ move; 
		PROCEDURE ^ snap; 
		PROCEDURE ^ stop; 
		PROCEDURE ^ movietick; 
		PROCEDURE ^ startrecording; 
		PROCEDURE ^ stoprecording; 
		PROCEDURE ^ startplaying; 
		PROCEDURE ^ stopplaying; 
		PROCEDURE ^ deathray(x, y: SIZE); 
		PROCEDURE ^ mutateray(x, y: SIGNED32); 
		PROCEDURE ^ connectray(x, y: SIZE; VAR connection: BOOLEAN; VAR vox: Voxel); 
		PROCEDURE ^ forward(x, y: SIZE); 
		PROCEDURE ^ backward(x, y: SIZE); 
		PROCEDURE ^ xjet(jet: SREAL); 
		PROCEDURE ^ yjet(jet: SREAL); 
		PROCEDURE ^ zjet(jet: SREAL); 
		PROCEDURE ^ jitter; 
		PROCEDURE ^ initrays; 
		PROCEDURE ^ foveate(x, y: SIGNED32); 
		PROCEDURE ^ tracetiled; 
		PROCEDURE ^ left(th: SREAL); 
		PROCEDURE ^ up(ph: SREAL); 
		PROCEDURE ^ trail(a, b: PT); 
		PROCEDURE ^ tick; 
	END Camera; 

	MainLoop = OBJECT {EXCLUSIVE} 
	VAR 
		t1, t2, dt, f: SIGNED32; 
		fr: SREAL; 
		framerate, lastframerate: SIGNED32; 

	BEGIN{ACTIVE, PRIORITY(Objects.Normal)} 
	END MainLoop; 
VAR 
	main: MainLoop; 
	win, window, lwindow: VoxWindow; 
	cx, cy, cz, cvx, cvy, cvz, cvl, cvu: SREAL; 
	cdroll: SREAL; 
	lookray: Ray; 
	rand: Random.Generator; 
	wcount: SIGNED16; 
	frame, tickframe: SIGNED32; 
	frames: ARRAY 10000 OF SNAP; 
	movierecording, movieplaying: BOOLEAN; 
	foveate: BOOLEAN; 
	foveasize, foveadown, foveaup: SIGNED32; 
	block: Voxel; 
	DEATH, LOOK, TRAILS: BOOLEAN; 
	tracetiled: BOOLEAN; 
	aperture: Aperture; 
	framecount: SIGNED32; 

	PROCEDURE ^ angletoray(VAR ray: srBase.Ray); 
	PROCEDURE ^ ddray(VAR ray: srBase.Ray); 
	PROCEDURE ^ clampspeed(VAR r, g, b: SREAL; speed: SREAL); 
	PROCEDURE ^ Demo*; 
	PROCEDURE ^ Open*; 
	PROCEDURE ^ Close*; 
	PROCEDURE ^ hopcamera; 
BEGIN
END srRender.
