MODULE WMDialogs;
	IMPORT KernelLog, Commands, Inputs, Texts, Strings, XML, Repositories, WMMessages, WMRectangles, WMGraphics, WMWindowManager, WMComponents, WMStandardComponents, WMEditors;
CONST 
	TUserInput* = 0; 
	TConfirmation* = 1; 
	TInformation* = 2; 
	TWarning* = 3; 
	TError* = 4; 
	TCriticalError* = 5; 
	TPassword* = 6; 
	TLogin* = 7; 
	TNoIcon* = 8; 
	TQuestion* = 9; 
	TAction* = 10; 
	ResDialogFailure* =  -1; 
	ResOk* = 0; 
	ResNo* = 1; 
	ResAbort* = 2; 
	ResYes* = 4; 
	ResAll* = 5; 
	ResNever* = 6; 
	ResIgnore* = 7; 
	OkBtnId* = \"OkBtn"\; 
	AbortBtnId* = \"AbortBtn"\; 
	NoBtnId* = \"NoBtn"\; 
	YesBtnId* = \"YesBtn"\; 
	AllBtnId* = \"AllBtn"\; 
	NeverBtnId* = \"NeverBtn"\; 
	IgnoreBtnId* = \"IgnoreBtn"\; 
	ButtonWidth* = 60; 
	LineHeight* = 30; 
	QueryStringWidth = 350; 
	QueryStringHeight = 100; 
	MessageWidth = 350; 
	MessageHeight = 100; 
	LoginWidth = (12 * 18); 
	LoginHeight = ((3 * LineHeight) + 30); 
	UserInfoWidth = 400; 
	UserInfoHeight = 240; 
	CdFrame* = 0; 
	CdStayOnTop* = 1; 
	CdCloseWhenFocusLost* = 2; 
TYPE 
	Dialog* = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		result*, x*, y*: LONGINT; 
		errors*: BOOLEAN; 

		PROCEDURE ^ Show*; 
		PROCEDURE ^ SetType*(type: LONGINT); 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ Ok*(sender, data: ANY); 
		PROCEDURE ^ Abort*(sender, data: ANY); 
		PROCEDURE ^ No*(sender, data: ANY); 
		PROCEDURE ^ Yes*(sender, data: ANY); 
		PROCEDURE ^ All*(sender, data: ANY); 
		PROCEDURE ^ Never*(sender, data: ANY); 
		PROCEDURE ^ Ignore*(sender, data: ANY); 
		PROCEDURE ^ WireError*(CONST detectedBy, msg: ARRAY OF CHAR); 
		PROCEDURE ^ Handle*(VAR msg: WMMessages.Message); 
	END Dialog; 

	QueryStringDlg* = OBJECT {EXCLUSIVE} (Dialog)
	VAR 
		edit: WMEditors.Editor; 
		content: WMComponents.VisualComponent; 
		ok, abort: WMStandardComponents.Button; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ CreateDialog(): WMComponents.VisualComponent; 
		PROCEDURE ^ WireDialog; 
	END QueryStringDlg; 

	MessageDlg* = OBJECT {EXCLUSIVE} (Dialog)
	VAR 
		buttons: SET; 
		msg: WMEditors.Editor; 
		ok, abort, no, yes, all, never: WMStandardComponents.Button; 
		content: WMComponents.VisualComponent; 

		PROCEDURE ^  & New*(buttons: SET); 
		PROCEDURE ^ CreateDialog; 
		PROCEDURE ^ WireDialog; 
	END MessageDlg; 

	LoginDlg* = OBJECT {EXCLUSIVE} (Dialog)
	VAR 
		editUser, editPassword: WMEditors.Editor; 
		ok, abort: WMStandardComponents.Button; 
		content: WMComponents.VisualComponent; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ CreateDialog; 
		PROCEDURE ^ WireDialog; 
	END LoginDlg; 

	UserInfoDlg* = OBJECT {EXCLUSIVE} (Dialog)
	VAR 
		editShortName, editFullName, editEMail, editPassword, editPasswordConfirm: WMEditors.Editor; 
		ok, abort: WMStandardComponents.Button; 
		content: WMComponents.VisualComponent; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ CreateDialog; 
		PROCEDURE ^ WireDialog; 
	END UserInfoDlg; 

	MiniStringInput* = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		edit: WMEditors.Editor; 
		result: LONGINT; 

		PROCEDURE ^ CreateForm(): WMComponents.VisualComponent; 
		PROCEDURE ^  & New*; 
		PROCEDURE ^ Ok*(sender, data: ANY); 
		PROCEDURE ^ Abort*(sender, data: ANY); 
		PROCEDURE ^ Show*(x, y: LONGINT; VAR text: ARRAY OF CHAR): LONGINT; 
		PROCEDURE ^ FocusLost*; 
	END MiniStringInput; 

	CustomDialog* = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		closed: BOOLEAN; 
		closingComponent: WMComponents.Component; 
		xflags: SET; 

		PROCEDURE ^  & New*(CONST dialog: ARRAY OF CHAR; VAR width, height: LONGINT; VAR res: WORD); 
		PROCEDURE ^ Show*(x, y: LONGINT; flags: SET; VAR res: ARRAY OF CHAR); 
		PROCEDURE ^ WireComponents(c: XML.Content; data: ANY); 
		PROCEDURE ^ HandleEvents(sender, data: ANY); 
		PROCEDURE ^ FocusLost*; 
		PROCEDURE ^ Close*; 
	END CustomDialog; 

	PROCEDURE ^ NewPanel(fillColor, alignment, width, height: LONGINT): WMStandardComponents.Panel; 
	PROCEDURE ^ NewLabel*(CONST caption: ARRAY OF CHAR; alignment, width, height: LONGINT): WMStandardComponents.Label; 
	PROCEDURE ^ NewEditor*(CONST uid: ARRAY OF CHAR; textColor, textBgColor, alignment, width, height: LONGINT): WMEditors.Editor; 
	PROCEDURE ^ InstantiateButton*(CONST uid, caption: ARRAY OF CHAR): WMStandardComponents.Button; 
	PROCEDURE ^ FindComponent*(c: WMComponents.Component; CONST id: ARRAY OF CHAR): WMComponents.Component; 
	PROCEDURE ^ FindButton*(c: WMComponents.Component; CONST id: ARRAY OF CHAR): WMStandardComponents.Button; 
	PROCEDURE ^ DefaultPos*(VAR x, y: LONGINT; width, height: LONGINT); 
	PROCEDURE ^ QueryStringXY*(x, y: LONGINT; CONST caption: ARRAY OF CHAR; VAR string: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ QueryString*(CONST caption: ARRAY OF CHAR; VAR string: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ QueryPasswordXY*(x, y: LONGINT; CONST caption: ARRAY OF CHAR; VAR string: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ QueryPassword*(CONST caption: ARRAY OF CHAR; VAR string: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ MessageXY*(type, x, y: LONGINT; CONST caption, string: ARRAY OF CHAR; buttons: SET): LONGINT; 
	PROCEDURE ^ Message*(type: LONGINT; CONST caption, string: ARRAY OF CHAR; buttons: SET): LONGINT; 
	PROCEDURE ^ Information*(CONST caption, string: ARRAY OF CHAR); 
	PROCEDURE ^ Warning*(CONST caption, string: ARRAY OF CHAR); 
	PROCEDURE ^ Error*(CONST caption, string: ARRAY OF CHAR); 
	PROCEDURE ^ Confirmation*(CONST caption, string: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ TextMessageXY*(type, x, y: LONGINT; CONST caption: ARRAY OF CHAR; text: Texts.Text; buttons: SET): LONGINT; 
	PROCEDURE ^ TextMessage*(type: LONGINT; CONST caption: ARRAY OF CHAR; text: Texts.Text; buttons: SET): LONGINT; 
	PROCEDURE ^ QueryLoginXY*(x, y: LONGINT; CONST caption: ARRAY OF CHAR; VAR login, password: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ QueryLogin*(CONST caption: ARRAY OF CHAR; VAR login, password: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ QueryUserInfoXY*(x, y: LONGINT; CONST caption: ARRAY OF CHAR; VAR shortName, fullName, eMail, password, passwordConfirm: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ QueryUserInfo*(CONST caption: ARRAY OF CHAR; VAR shortName, fullName, eMail, password, passwordConfirm: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ CustomDialogXY*(x, y: LONGINT; flags: SET; CONST dialog: ARRAY OF CHAR; VAR answer: ARRAY OF CHAR); 
	PROCEDURE ^ Test*; 
	PROCEDURE ^ TestMsg*; 
	PROCEDURE ^ TestLogin*; 
	PROCEDURE ^ TestUserInfo*; 
	PROCEDURE ^ TestCustomDialog*(context: Commands.Context); 
BEGIN
END WMDialogs.
