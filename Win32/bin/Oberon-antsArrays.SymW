MODULE antsArrays IN Oberon;
	IMPORT vyLongreal, vyLongrealVec, vyInteger, vyIntVec, vyLongint, vyLongintVec, Out, vyRanBase, aM := antsMessages;
TYPE 
	I1d* = POINTER TO ARRAY OF SIGNED16; 

	R1d* = POINTER TO ARRAY OF FLOAT32; 

	X1d* = POINTER TO ARRAY OF FLOAT64; 

	L1d* = POINTER TO ARRAY OF SIGNED32; 

	I2d* = POINTER TO ARRAY OF ARRAY OF SIGNED16; 

	R2d* = POINTER TO ARRAY OF ARRAY OF FLOAT32; 

	X2d* = POINTER TO ARRAY OF ARRAY OF FLOAT64; 

	L2d* = POINTER TO ARRAY OF ARRAY OF SIGNED32; 

	I3d* = POINTER TO ARRAY OF I2d; 

	R3d* = POINTER TO ARRAY OF R2d; 

	X3d* = POINTER TO ARRAY OF X2d; 

	L3d* = POINTER TO ARRAY OF L2d; 

	I4d* = POINTER TO ARRAY OF I3d; 

	R4d* = POINTER TO ARRAY OF R3d; 

	X4d* = POINTER TO ARRAY OF X3d; 

	L4d* = POINTER TO ARRAY OF L3d; 
VAR 
	ra*: X1d; 
	la*: L1d; 
	ia*: I1d; 

	PROCEDURE ^ kSmallestX*(VAR a: ARRAY OF FLOAT64; n, k: SIGNED32): FLOAT64; 
	PROCEDURE ^ kSmallestL*(VAR a: ARRAY OF SIGNED32; n, k: SIGNED32): SIGNED32; 
	PROCEDURE ^ kSmallestI*(VAR a: ARRAY OF SIGNED16; n, k: SIGNED32): SIGNED16; 
	PROCEDURE ^ Use1dX(VAR a: ARRAY OF FLOAT64; n: SIGNED32); 
	PROCEDURE ^ Use1dI(VAR a: ARRAY OF SIGNED16; n: SIGNED32); 
	PROCEDURE ^ Use1dL(VAR a: ARRAY OF SIGNED32; n: SIGNED32); 
	PROCEDURE ^ Median1dX*(VAR a: ARRAY OF FLOAT64; n: SIGNED32): FLOAT64; 
	PROCEDURE ^ Median1dL*(VAR a: ARRAY OF SIGNED32; n: SIGNED32): SIGNED32; 
	PROCEDURE ^ Median1dI*(VAR a: ARRAY OF SIGNED16; n: SIGNED32): SIGNED16; 
	PROCEDURE ^ Median2dX*(VAR S: ARRAY OF ARRAY OF FLOAT64): FLOAT64; 
	PROCEDURE ^ MinMax2dX*(VAR S: ARRAY OF ARRAY OF FLOAT64; VAR min, max: FLOAT64); 
	PROCEDURE ^ Out2dX*(A: ARRAY OF ARRAY OF FLOAT64); 
	PROCEDURE ^ Transpose2dX*(VAR A: ARRAY OF ARRAY OF FLOAT64): X2d; 
	PROCEDURE ^ Uniform1dX*(VAR a: ARRAY OF FLOAT64; x, w: SIGNED32; top: FLOAT64); 
	PROCEDURE ^ Uniform1dL*(VAR a: ARRAY OF SIGNED32; x, w: SIGNED32; top: SIGNED32); 
	PROCEDURE ^ Uniform1dI*(VAR a: ARRAY OF SIGNED16; x, w: SIGNED32; top: SIGNED16); 
	PROCEDURE ^ Uniform2dI*(VAR A: ARRAY OF ARRAY OF SIGNED16; top: SIGNED16; x, y, w, h: SIGNED32); 
	PROCEDURE ^ Uniform2dL*(VAR A: ARRAY OF ARRAY OF SIGNED32; top: SIGNED32; x, y, w, h: SIGNED32); 
	PROCEDURE ^ Uniform2dX*(VAR A: ARRAY OF ARRAY OF FLOAT64; top: FLOAT64; x, y, w, h: SIGNED32); 
	PROCEDURE ^ Uniform3dI*(VAR A: I3d; top: SIGNED16); 
	PROCEDURE ^ Uniform4dI*(VAR A: I4d; top: SIGNED16); 
	PROCEDURE ^ FindFirstI*(VAR f: ARRAY OF SIGNED16; value: SIGNED16): SIGNED32; 
	PROCEDURE ^ FindFirstX*(VAR f: ARRAY OF FLOAT64; value: FLOAT64): SIGNED32; 
	PROCEDURE ^ FindMaxima1dX*(orig: ARRAY OF FLOAT64; VAR maxima: ARRAY OF FLOAT64); 
	PROCEDURE ^ FindMaxima2dXRows*(VAR Orig, Maxima: ARRAY OF ARRAY OF FLOAT64); 
	PROCEDURE ^ AndMax*(VAR Max1, Max2, Result: ARRAY OF ARRAY OF FLOAT64); 
	PROCEDURE ^ VecFromArrayX*(VAR a: ARRAY OF FLOAT64): vyLongrealVec.tVector; 
	PROCEDURE ^ VecFromArrayL*(VAR a: ARRAY OF SIGNED32): vyLongintVec.tVector; 
	PROCEDURE ^ VecFromArrayI*(VAR a: ARRAY OF SIGNED16): vyIntVec.tVector; 
	PROCEDURE ^ CountModi*(x: vyLongrealVec.tVector; minlen, maxlen: SIGNED32): SIGNED32; 
	PROCEDURE ^ TestMedian*; 
BEGIN
END antsArrays.
