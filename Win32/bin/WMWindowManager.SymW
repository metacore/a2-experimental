MODULE WMWindowManager;
	IMPORT Modules, KernelLog, Plugins, Locks, Strings, Messages := WMMessages, Graphics := WMGraphics, Raster, Rectangles := WMRectangles;
CONST 
	FlagFrame* = 0; 
	FlagClose* = 1; 
	FlagMinimize* = 2; 
	FlagStayOnTop* = 3; 
	FlagNonDispatched* = 4; 
	FlagNoFocus* = 5; 
	FlagDecorWindow* = 6; 
	FlagStayOnBottom* = 7; 
	FlagNavigation* = 8; 
	FlagHidden* = 9; 
	FlagNoResizing* = 10; 
	FlagNoPointer* = 11; 
	FlagStorable* = 12; 
	SizeMinHeight = 3; 
	SizeMinWidth = 3; 
	Ok* = 0; 
	Error* = 1; 
	NotSupported* = 2; 
	X0 = 30; 
	Y0 = 80; 
TYPE 
	Rectangle = Rectangles.Rectangle; 

	String = Strings.String; 

	Message = Messages.Message; 

	RealRect* = RECORD 
		l*, t*, r*, b*: REAL; 
	END; 

	PointerInfo* = OBJECT 
	VAR 
		hotX*, hotY*: LONGINT; 
		img*: Graphics.Image; 
	END PointerInfo; 

	WindowStyle* = OBJECT 
	VAR 
		useBitmaps*: BOOLEAN; 
		baCol*, biCol*: LONGINT; 
		basw*, bisw*: LONGINT; 
		th*, bh*, lw*, rw*: SIZE; 
		taa*, tab*, tac*, tia*, tib*, tic*, laa*, lab*, lac*, lia*, lib*, lic*, raa*, rab*, rac*, ria*, rib*, ric*, baa*, bab*, bac*, bia*, bib*, bic*: Graphics.Image; 
		ca*, ci*, closeHover*, ma*, mi*, minimizeHover*: Graphics.Image; 
		minimizeOffset*: LONGINT; 
		atextX*, atextY*, atextColor*, itextX*, itextY*, itextColor*: LONGINT; 
		bgColor*, fgColor*, selectCol*, desktopColor*: Graphics.Color; 
		topFocusThreshold*, topThreshold*, bottomFocusThreshold*, bottomThreshold*, leftFocusThreshold*, leftThreshold*, rightFocusThreshold*, rightThreshold*: LONGINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Initialize*; 
	END WindowStyle; 

	DragInfo* = OBJECT 
	VAR 
		data*, sender*: ANY; 
		onAccept*, onReject*: Messages.CompCommand; 
		offsetX*, offsetY*: SIZE; 
	END DragInfo; 

	DecorList* = OBJECT 
	VAR 
		next*: DecorList; 
		w*: Window; 
	END DecorList; 

	MessagePreviewProc* = PROCEDURE (VAR msg: Message; VAR discard: BOOLEAN); 

	MessagePreviewList* = OBJECT 
	VAR 
		proc*: MessagePreviewProc; 
		next*: MessagePreviewList; 
	END MessagePreviewList; 

	DocumentInfo* = RECORD 
		id*: LONGINT; 
		name*: ARRAY 32 OF CHAR; 
		fullname*: ARRAY 256 OF CHAR; 
		modified*, hasFocus*: BOOLEAN; 
	END; 

	VisualComponentInfo* = RECORD 
		width*, height*: LONGINT; 
		generator*: PROCEDURE {DELEGATE}():ANY; 
	END; 

	WindowInfo* = RECORD 
		openDocuments*: ARRAY 16 OF DocumentInfo; 
		handleDocumentInfo*: PROCEDURE {DELEGATE}(CONST info: DocumentInfo; new: BOOLEAN; VAR res: WORD); 
		vc*: VisualComponentInfo; 
	END; 

	WindowInfoPtr = POINTER TO WindowInfo; 

	Window* = OBJECT 
	VAR 
		id-: LONGINT; 
		timestamp*: LONGINT; 
		bounds*: Rectangle; 
		initialBounds*: Rectangle; 
		normalBounds*: Rectangle; 
		manager*: WindowManager; 
		sequencer*: Messages.MsgSequencer; 
		prev*, next*: Window; 
		title: String; 
		info*: WindowInfoPtr; 
		master*: Window; 
		view*: ViewPort; 
		decor*: DecorList; 
		flags*: SET; 
		icon*: Graphics.Image; 
		topW*, bottomW*, leftW*, rightW*: Window; 
		useAlpha*: BOOLEAN; 
		isVisible*: BOOLEAN; 
		pointerInfo-: PointerInfo; 
		acceptDrag: BOOLEAN; 
		reduceQuality-: BOOLEAN; 

		PROCEDURE ^  & Init*(w, h: SIZE; alpha: BOOLEAN); 
		PROCEDURE ^ IsCallFromSequencer*(): BOOLEAN; 
		PROCEDURE ^ GetManager*(): WindowManager; 
		PROCEDURE ^ SetTitle*(title: String); 
		PROCEDURE ^ GetTitle*(): String; 
		PROCEDURE ^ SetIcon*(icon: Graphics.Image); 
		PROCEDURE ^ GetHeight*(): SIZE; 
		PROCEDURE ^ GetWidth*(): SIZE; 
		PROCEDURE ^ SetInfo*(CONST info: WindowInfo); 
		PROCEDURE ^ GetInfo*(VAR info: WindowInfo): BOOLEAN; 
		PROCEDURE ^ Resizing*(VAR width, height: SIZE); 
		PROCEDURE ^ Resized*(width, height: SIZE); 
		PROCEDURE ^ Invalidate*(rect: Rectangle); 
		PROCEDURE ^ PointerDown*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerMove*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ WheelMove*(dz: SIZE); 
		PROCEDURE ^ PointerUp*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerLeave*; 
		PROCEDURE ^ DragOver*(x, y: SIZE; dragInfo: DragInfo); 
		PROCEDURE ^ DragDropped*(x, y: SIZE; dragInfo: DragInfo); 
		PROCEDURE ^ ConfirmDrag*(accept: BOOLEAN; dragInfo: DragInfo); 
		PROCEDURE ^ StartDrag*(sender, data: ANY; img: Graphics.Image; offsetX, offsetY: SIZE; onAccept, onReject: Messages.CompCommand): BOOLEAN; 
		PROCEDURE ^ KeyEvent*(ucs: SIZE; flags: SET; keysym: SIZE); 
		PROCEDURE ^ FocusGot*; 
		PROCEDURE ^ FocusLost*; 
		PROCEDURE ^ StyleChanged*; 
		PROCEDURE ^ CanClose*(): BOOLEAN; 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ IsHit*(x, y: SIZE): BOOLEAN; 
		PROCEDURE ^ SetPointerInfo*(pi: PointerInfo); 
		PROCEDURE ^ Handle*(VAR m: Message); 
		PROCEDURE ^ Draw*(canvas: Graphics.Canvas; w, h: SIZE; q: WORD); 
		PROCEDURE ^ HintReduceQuality*(reduce: BOOLEAN); 
	END Window; 

	BufferWindow* = OBJECT {EXCLUSIVE} (Window)
	VAR 
		img*: Graphics.Image; 
		canvas*: Graphics.BufferCanvas; 
		canvasGen-: Graphics.CanvasGenerator; 
		pointerThreshold*, maxInterpolation*: LONGINT; 

		PROCEDURE ^  & Init*(w, h: SIZE; alpha: BOOLEAN); 
		PROCEDURE ^ SetCanvasGenerator*(canvasGen: Graphics.CanvasGenerator); 
		PROCEDURE ^ IsHit*(x, y: SIZE): BOOLEAN; 
		PROCEDURE ^ Draw*(canvas: Graphics.Canvas; w, h: SIZE; q: WORD); 
		PROCEDURE ^ Invalidate*(rect: Rectangle); 
		PROCEDURE ^ Handle*(VAR m: Message); 
	END BufferWindow; 

	DoubleBufferWindow* = OBJECT {EXCLUSIVE} (BufferWindow)
	VAR 
		visibleCanvas: Graphics.BufferCanvas; 
		backImg*: Graphics.Image; 
		swapping, drawing: BOOLEAN; 

		PROCEDURE ^  & Init*(w, h: SIZE; alpha: BOOLEAN); 
		PROCEDURE ^ ReInit*(w, h: SIZE); 
		PROCEDURE ^ SetCanvasGenerator*(canvasGen: Graphics.CanvasGenerator); 
		PROCEDURE ^ Draw*(canvas: Graphics.Canvas; w, h: SIZE; q: WORD); 
		PROCEDURE ^ CopyRect*(rect: Rectangle); 
		PROCEDURE ^ Swap*; 
	END DoubleBufferWindow; 

	ViewPort* = OBJECT (Plugins.Plugin)
	VAR 
		next*: ViewPort; 
		manager*: WindowManager; 
		range*: RealRect; 
		width0*, height0*: SIZE; 

		PROCEDURE ^ Update*(r: Rectangle; top: Window); 
		PROCEDURE ^ Refresh*(top: Window); 
		PROCEDURE ^ SetRange*(x, y, w, h: REAL; showTransition: BOOLEAN); 
		PROCEDURE ^ GetKeyState*(VAR state: SET); 
	END ViewPort; 

	Decorator* = PROCEDURE {DELEGATE}(w: Window); 

	WindowManager* = OBJECT (Plugins.Plugin)
	VAR 
		pointerNull*, pointerStandard*, pointerMove*, pointerText*, pointerCrosshair*, pointerLeftRight*, pointerUpDown*, pointerULDR*, pointerURDL*, pointerLink*: PointerInfo; 
		decorate*: Decorator; 
		viewRegistry-: Plugins.Registry; 
		sequencer-: Messages.MsgSequencer; 
		lock-: Locks.RWLock; 
		messagePreviewList: MessagePreviewList; 
		style: WindowStyle; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ InitCursors; 
		PROCEDURE ^ ZeroSkin*; 
		PROCEDURE ^ ShutDown*; 
		PROCEDURE ^ Add*(l, t: SIZE; item: Window; flags: SET); 
		PROCEDURE ^ Remove*(item: Window); 
		PROCEDURE ^ SetWindowPos*(vs: Window; x, y: SIZE); 
		PROCEDURE ^ SetWindowSize*(vs: Window; VAR width, height: SIZE); 
		PROCEDURE ^ AddDirty*(VAR rect: Rectangle); 
		PROCEDURE ^ AddVisibleDirty*(w: Window; rect: Rectangle); 
		PROCEDURE ^ SetFocus*(w: Window); 
		PROCEDURE ^ AddDecorWindow*(to, decor: Window); 
		PROCEDURE ^ RemoveDecorWindow*(w, from: Window); 
		PROCEDURE ^ SetStyle*(x: WindowStyle); 
		PROCEDURE ^ GetStyle*(): WindowStyle; 
		PROCEDURE ^ ToFront*(w: Window); 
		PROCEDURE ^ ToBack*(w: Window); 
		PROCEDURE ^ SetIsVisible*(w: Window; isVisible: BOOLEAN); 
		PROCEDURE ^ SetWindowIcon*(w: Window; icon: Graphics.Image); 
		PROCEDURE ^ GetPositionOwner*(x, y: SIZE): Window; 
		PROCEDURE ^ GetFocusOwner*(): Window; 
		PROCEDURE ^ SetWindowTitle*(w: Window; title: String); 
		PROCEDURE ^ GetWindowTitle*(w: Window): String; 
		PROCEDURE ^ SetWindowInfo*(w: Window; CONST info: WindowInfo); 
		PROCEDURE ^ GetWindowInfo*(w: Window; VAR info: WindowInfo): BOOLEAN; 
		PROCEDURE ^ SetWindowFlag*(w: Window; flag: LONGINT; value: BOOLEAN); 
		PROCEDURE ^ SetAcceptDrag*(w: Window; accept: BOOLEAN); 
		PROCEDURE ^ StartDrag*(w: Window; sender, data: ANY; img: Graphics.Image; offsetX, offsetY: SIZE; onAccept, onReject: Messages.CompCommand): BOOLEAN; 
		PROCEDURE ^ TransferPointer*(to: Window): BOOLEAN; 
		PROCEDURE ^ CheckPointerImage*; 
		PROCEDURE ^ AddView*(v: ViewPort); 
		PROCEDURE ^ RefreshView*(v: ViewPort); 
		PROCEDURE ^ RemoveView*(v: ViewPort); 
		PROCEDURE ^ Broadcast*(VAR m: Message); 
		PROCEDURE ^ SendMessage*(dest: Window; VAR m: Message): BOOLEAN; 
		PROCEDURE ^ InstallMessagePreview*(x: MessagePreviewProc); 
		PROCEDURE ^ RemoveMessagePreview*(x: MessagePreviewProc); 
		PROCEDURE ^ PreviewMessage*(VAR m: Message; VAR discard: BOOLEAN); 
		PROCEDURE ^ GetFirst*(): Window; 
		PROCEDURE ^ GetNext*(x: Window): Window; 
		PROCEDURE ^ GetPrev*(x: Window): Window; 
		PROCEDURE ^ ReplaceBackground*(w: Window): Window; 
		PROCEDURE ^ GetPopulatedArea*(VAR r: Rectangle); 
		PROCEDURE ^ HandleInternal*(VAR msg: Messages.Message); 
		PROCEDURE ^ Handle*(VAR msg: Messages.Message); 
	END WindowManager; 
VAR 
	registry-: Plugins.Registry; 
	pointerNull: PointerInfo; 
	wTimestamp-: LONGINT; 
	oTimestamp-: LONGINT; 
	x1, y1: SIZE; 
	format*: Raster.Format; 
	nextId: LONGINT; 
	standardCursorImage: Graphics.Image; 

	PROCEDURE ^ GetId(): LONGINT; 
	PROCEDURE ^ IncWTimestamp*; 
	PROCEDURE ^ IncOTimestamp*; 
	PROCEDURE ^ AwaitChange*(wTs, oTs: LONGINT); 
	PROCEDURE ^ ClearInfo*(VAR info: WindowInfo); 
	PROCEDURE ^ NewString*(CONST x: ARRAY OF CHAR): String; 
	PROCEDURE ^ LoadCursor*(CONST name: ARRAY OF CHAR; hx, hy: LONGINT; VAR pi: PointerInfo); 
	PROCEDURE ^ GetDefaultManager*(): WindowManager; 
	PROCEDURE ^ GetDefaultView*(): ViewPort; 
	PROCEDURE ^ ResetNextPosition*; 
	PROCEDURE ^ GetNextPosition*(window: Window; manager: WindowManager; view: ViewPort; VAR dx, dy: SIZE); 
	PROCEDURE ^ DefaultAddWindow*(w: Window); 
	PROCEDURE ^ AddWindow*(w: Window; dx, dy: SIZE); 
	PROCEDURE ^ ExtAddWindow*(w: Window; dx, dy: SIZE; flags: SET); 
	PROCEDURE ^ ExtAddViewBoundWindow*(w: Window; dx, dy: SIZE; view: ViewPort; flags: SET); 
	PROCEDURE ^ DefaultBringToView*(w: Window; toFront: BOOLEAN); 
	PROCEDURE ^ CleanUp; 
	PROCEDURE ^ CreateStandardCursorImage; 
BEGIN
END WMWindowManager.
