MODULE vyGraphBase0 IN Oberon;
	IMPORT Display, Pictures, Display3, Fonts, Printer, Printer3, Files, Images, Objects, vyPortability;
CONST 
	BrushSize = 100; 
	cDisplayBuffer* = 0; 
	cImageBuffer* = 1; 
	display = 0; 
	print = 1; 
	StdFnt = \"Syntax10.Scn.Fnt"\; 
	paint = Display.paint; 
TYPE 
	tPatPrinter* = PROCEDURE (x, y: SIGNED16); 

	tSign* = POINTER TO tSignDesc; 

	tSignDesc = RECORD 
		pat: Display.Pattern; 
		print: tPatPrinter; 
		w-, h-: SIGNED16; 
		wDIV2-, hDIV2-: SIGNED16; 
	END; 

	doubleBuffer* = POINTER TO doubleBufferDesc; 

	doubleBufferDesc* = RECORD 
		new-: BOOLEAN; 
		displayBuffer: vyPortability.displayBuffer; 
		imageBuffer: Images.Image; 
		mask: Display3.Mask; 
		x, y, w, h: SIGNED16; 
		active-: BOOLEAN; 
		type-: SIGNED16; 
	END; 

	Brush = RECORD 
		brul, brur: ARRAY BrushSize OF SIGNED16; 
		bufl, bufr: ARRAY BrushSize OF SIGNED16; 
		bufh, brushr: SIGNED16; 
		x, y: SIGNED16; 
	END; 

	; 
VAR 
	du, pu, hpu: SIGNED32; 
	clipMask*: Display3.Mask; 
	db-: doubleBuffer; 
	xPrnOrg, yPrnOrg, xPortOrg, yPortOrg: SIGNED16; 
	status: SIGNED16; 
	contextfcol-, contextbcol-: Display.Color; 
	contextmode: SIGNED16; 
	contextstyle: SET; 
	contextpattern: SIGNED32; 
	contextpensize: SIGNED16; 
	contextfnt: ARRAY 64 OF CHAR; 
	tmpr, tmpg, tmpb: SIGNED16; 
	Enum: RECORD 
		img: Images.Image; 
		x, y: SIGNED16; 
	END; 
	contextimg: Images.Image; 
	contextfpix-, contextbpix-: Images.Pixel; 
	drawingPolygon: BOOLEAN; 
	brush: Brush; 
	stringpict: Pictures.Picture; 
	contextpatternternimage: Images.Image; 
	contextalpha: SIGNED16; 
	PrntPat: ARRAY 9 OF Display.Pattern; 
	tmpPatPic: Pictures.Picture; 
	copyPattern*: PROCEDURE (sgn: tSign; x, y: SIGNED16); 
	dot*: PROCEDURE (x, y: SIGNED16); 
	replConst*: PROCEDURE (x, y, w, h: SIGNED16); 
	replString*: PROCEDURE (X, Y: SIGNED16; fnt, str: ARRAY OF CHAR); 
	replPict*: PROCEDURE (picture: Pictures.Picture; px, py, x, y, w, h: SIGNED16); 
	pict*: PROCEDURE (picture: Pictures.Picture; x, y, w, h, dx, dy: SIGNED16); 
	stretchedpict*: PROCEDURE (picture: Pictures.Picture; x, y, w, h, dx, dy, dw, dh: SIGNED16); 
	image*: PROCEDURE (VAR image: Images.Image; x, y, w, h, dx, dy: SIGNED16); 
	stretchedimage*: PROCEDURE (VAR image: Images.Image; x, y, w, h, dx, dy, dw, dh: SIGNED16); 
	line*: PROCEDURE (x0, y0, x1, y1: SIGNED16); 
	circle*: PROCEDURE (x, y, r: SIGNED16); 
	ellipse*: PROCEDURE (x, y, a, b: SIGNED16); 
	rect*: PROCEDURE (x, y, w, h: SIGNED16); 
	rect3d*: PROCEDURE (x, y, a, b: SIGNED16); 
	paintrect*: PROCEDURE (x, y, w, h: SIGNED16); 
	poly*: PROCEDURE (VAR x, y: ARRAY OF SIGNED16; n: SIGNED16); 

	PROCEDURE ^ SetBackColor*(col: Display.Color); 
	PROCEDURE ^ SetForeColor*(col: Display.Color); 
	PROCEDURE ^ SetFColRGBA*(r, g, b, a: SIGNED16); 
	PROCEDURE ^ SetBColRGBA*(r, g, b, a: SIGNED16); 
	PROCEDURE ^ SetPenSize*(size: SIGNED16); 
	PROCEDURE ^ SetDisplayMode*(m: SIGNED16); 
	PROCEDURE ^ SetDisplayStyle*(s: SET); 
	PROCEDURE ^ SetDisplayPattern*(p: SIGNED32); 
	PROCEDURE ^ SetFont*(f: ARRAY OF CHAR); 
	PROCEDURE ^ SetAlpha*(a: SIGNED16); 
	PROCEDURE ^ Min(x, y: SIGNED16): SIGNED16; 
	PROCEDURE ^ Max(x, y: SIGNED16): SIGNED16; 
	PROCEDURE ^ StandardizeRect(VAR x, y, w, h: SIGNED16); 
	PROCEDURE ^ RectInRect(x, y, w, h, X, Y, W, H: SIGNED16): BOOLEAN; 
	PROCEDURE ^ RectIntersection(VAR x, y, w, h: SIGNED16; X, Y, W, H: SIGNED16); 
	PROCEDURE ^ PlacedRectIntersect(VAR x, y, w, h, dx, dy: SIGNED16; X, Y, W, H: SIGNED16); 
	PROCEDURE ^ EmptyIntersection(x, y, w, h, X, Y, W, H: SIGNED16): BOOLEAN; 
	PROCEDURE ^ CopyPatternC(sgn: tSign; x, y: SIGNED16); 
	PROCEDURE ^ DotC(x, y: SIGNED16); 
	PROCEDURE ^ ReplConstC(x, y, w, h: SIGNED16); 
	PROCEDURE ^ ReplStringC(X, Y: SIGNED16; fnt, str: ARRAY OF CHAR); 
	PROCEDURE ^ LineC(x0, y0, x1, y1: SIGNED16); 
	PROCEDURE ^ CircleC(x, y, r: SIGNED16); 
	PROCEDURE ^ EllipseC(x, y, a, b: SIGNED16); 
	PROCEDURE ^ RectC(x, y, w, h: SIGNED16); 
	PROCEDURE ^ Rect3DC(x, y, w, h: SIGNED16); 
	PROCEDURE ^ PaintRectC(x, y, w, h: SIGNED16); 
	PROCEDURE ^ PolyC(VAR x, y: ARRAY OF SIGNED16; n: SIGNED16); 
	PROCEDURE ^ ReplPictC(picture: Pictures.Picture; px, py, x, y, w, h: SIGNED16); 
	PROCEDURE ^ PictC(picture: Pictures.Picture; x, y, w, h, dx, dy: SIGNED16); 
	PROCEDURE ^ StretchedPictC(picture: Pictures.Picture; x, y, w, h, dx, dy, dw, dh: SIGNED16); 
	PROCEDURE ^ RestoreRuns(x, y, w, h: SIGNED16); 
	PROCEDURE ^ RestoreLines(x, y, w, h: SIGNED16); 
	PROCEDURE ^ RestoreBlock(x, y, w, h: SIGNED16); 
	PROCEDURE ^ ImageC(VAR img: Images.Image; x, y, w, h, dx, dy: SIGNED16); 
	PROCEDURE ^ StretchedImageC(VAR sP: Images.Image; X, Y, W, H, DX, DY, DW, DH: SIGNED16); 
	PROCEDURE ^ ImageToPict(img: Images.Image; pict: Pictures.Picture); 
	PROCEDURE ^ ImageP(VAR img: Images.Image; x, y, w, h, dx, dy: SIGNED16); 
	PROCEDURE ^ StretchedImageP(VAR img: Images.Image; x, y, w, h, dx, dy, dw, dh: SIGNED16); 
	PROCEDURE ^ Doti(x, y: SIGNED16); 
	PROCEDURE ^ ReplConsti(x, y, w, h: SIGNED16); 
	PROCEDURE ^ DirectReplConsti(x, y, w, h: SIGNED16); 
	PROCEDURE ^ PatternToImage(pat: Display.Pattern; patimg: Images.Image); 
	PROCEDURE ^ FillPatterni(pX, pY, X, Y, W, H: SIGNED16); 
	PROCEDURE ^ CopyPatterni(sgn: tSign; X, Y: SIGNED16); 
	PROCEDURE ^ Recti(X, Y, W, H: SIGNED16); 
	PROCEDURE ^ Rect3Di(X, Y, W, H: SIGNED16); 
	PROCEDURE ^ BrushJump(VAR b: Brush; x, y: SIGNED16); 
	PROCEDURE ^ BrushWalk(VAR b: Brush; x, y: SIGNED16); 
	PROCEDURE ^ BrushFlush(VAR b: Brush); 
	PROCEDURE ^ InitBrush(VAR b: Brush; w: SIGNED16); 
	PROCEDURE ^ Linei(X, Y, X1, Y1: SIGNED16); 
	PROCEDURE ^ FilledPolyi(VAR X, Y: ARRAY OF SIGNED16; n: SIGNED16); 
	PROCEDURE ^ Polyi(VAR X, Y: ARRAY OF SIGNED16; n: SIGNED16); 
	PROCEDURE ^ Ellipsei(X, Y, a, b: SIGNED16); 
	PROCEDURE ^ Circlei(X, Y, r: SIGNED16); 
	PROCEDURE ^ PaintRecti(x, y, w, h: SIGNED16); 
	PROCEDURE ^ Picti(sP: Pictures.Picture; X, Y, W, H, DX, DY: SIGNED16); 
	PROCEDURE ^ Stringi(x, y: SIGNED16; fnt: Fonts.Font; s: ARRAY OF CHAR); 
	PROCEDURE ^ ReplStringi(X, Y: SIGNED16; fnt, str: ARRAY OF CHAR); 
	PROCEDURE ^ StretchedPicti(sP: Pictures.Picture; X, Y, W, H, DX, DY, DW, DH: SIGNED16); 
	PROCEDURE ^ Imagei(VAR img: Images.Image; x, y, w, h, dx, dy: SIGNED16); 
	PROCEDURE ^ IGetRun(P: Images.Image; VAR pix: Images.Pixel; VAR x: SIGNED16; y: SIGNED16); 
	PROCEDURE ^ StretchedImagei(VAR sP: Images.Image; X, Y, W, H, DX, DY, DW, DH: SIGNED16); 
	PROCEDURE ^ PointToPrnPoint(VAR x, y: SIGNED16); 
	PROCEDURE ^ SizeToPrnSize(VAR w, h: SIGNED16); 
	PROCEDURE ^ CopyPatternPrn(sgn: tSign; x, y: SIGNED16); 
	PROCEDURE ^ DotPrn(x, y: SIGNED16); 
	PROCEDURE ^ ReplConstPrn(x, y, w, h: SIGNED16); 
	PROCEDURE ^ ReplStringPrn(X, Y: SIGNED16; fnt, str: ARRAY OF CHAR); 
	PROCEDURE ^ LinePrn(x0, y0, x1, y1: SIGNED16); 
	PROCEDURE ^ CirclePrn(x, y, r: SIGNED16); 
	PROCEDURE ^ EllipsePrn(x, y, a, b: SIGNED16); 
	PROCEDURE ^ RectPrn(x, y, w, h: SIGNED16); 
	PROCEDURE ^ Rect3DPrn(x, y, w, h: SIGNED16); 
	PROCEDURE ^ PaintRectPrn(x, y, w, h: SIGNED16); 
	PROCEDURE ^ PolyPrn(VAR x, y: ARRAY OF SIGNED16; n: SIGNED16); 
	PROCEDURE ^ ReplPictPrn(picture: Pictures.Picture; px, py, x, y, w, h: SIGNED16); 
	PROCEDURE ^ pictPrn(picture: Pictures.Picture; x, y, w, h, dx, dy: SIGNED16); 
	PROCEDURE ^ stretchedpictPrn(picture: Pictures.Picture; x, y, w, h, dx, dy, dw, dh: SIGNED16); 
	PROCEDURE ^ StdSignPrinter(x, y: SIGNED16); 
	PROCEDURE ^ StorePattern*(VAR R: Files.Rider; sgn: tSign); 
	PROCEDURE ^ LoadPattern*(VAR R: Files.Rider): tSign; 
	PROCEDURE ^ NewPattern*(image: ARRAY OF SET; w, h: SIGNED16; prn: tPatPrinter): tSign; 
	PROCEDURE ^ SetDisplayPrimitives*; 
	PROCEDURE ^ SetPrinterPrimitives*; 
	PROCEDURE ^ SetImagePrimitives*; 
	PROCEDURE ^ OpenPrinter*(x, y, px, py: SIGNED16); 
	PROCEDURE ^ ClosePrinter*; 
	PROCEDURE ^ OpenBuffer*(VAR b: doubleBuffer; x, y, w, h: SIGNED16; translucent: BOOLEAN); 
	PROCEDURE ^ UseAsBufferBG*(db: doubleBuffer; img: Images.Image); 
	PROCEDURE ^ WriteBuffer*(b: doubleBuffer); 
	PROCEDURE ^ CloseBuffer*(b: doubleBuffer; VAR x, y: SIGNED16); 
BEGIN
END vyGraphBase0.
