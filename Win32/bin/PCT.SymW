MODULE PCT;
	IMPORT SYSTEM, KernelLog, StringPool, Strings, PCM, PCS;
CONST 
	MaxPlugins = 4; 
	Ok* = 0; 
	DuplicateSymbol* = 1; 
	NotAType* = 53; 
	IllegalPointerBase* = 57; 
	RecursiveType* = 58; 
	IllegalValue* = 63; 
	IllegalType* = 88; 
	IllegalArrayBase* = 89; 
	IllegalMixture* = 91; 
	ParameterMismatch* = 115; 
	ReturnMismatch* = 117; 
	DuplicateOperator* = 139; 
	ImportCycle* = 154; 
	MultipleInitializers* = 144; 
	NotImplemented* = 200; 
	ObjectOnly* = 249; 
	InitializerOutsideObject* = 253; 
	IndexerNotVirtual* = 991; 
	BodyNameStr* = \"@Body"\; 
	SelfNameStr* = \"@Self"\; 
	AnonymousStr* = \"@NoName"\; 
	PtrReturnTypeStr* = \"@PtrReturnType"\; 
	AssignIndexer* = \"@AssignIndexer"\; 
	ReadIndexer* = \"@ReadIndexer"\; 
	AwaitProcStr = \"@AwaitProc"\; 
	HiddenProcStr = \"@tmpP"\; 
	local* = 0; 
	structdeclared* = 1; 
	structshallowallocated* = 2; 
	structallocated* = 3; 
	procdeclared* = 4; 
	hiddenvarsdeclared* = 5; 
	modeavailable* = 6; 
	complete* = 7; 
	HiddenRW* = 0; 
	InternalR* = 1; 
	InternalW* = 2; 
	ProtectedR* = 3; 
	ProtectedW* = 4; 
	PublicR* = 5; 
	PublicW* = 6; 
	Hidden* = {HiddenRW}; 
	Internal* = {InternalR, InternalW}; 
	Protected* = {ProtectedR, ProtectedW}; 
	Public* = {PublicR, PublicW}; 
	static* = 1; 
	open* = 2; 
	exclusive* = 0; 
	active* = 1; 
	safe* = 2; 
	class* = 16; 
	interface* = 17; 
	used* = 16; 
	written* = 17; 
	Constructor* = 1; 
	Inline* = 2; 
	copy* = 3; 
	NonVirtual* = 7; 
	Operator* = 10; 
	Indexer* = 11; 
	RealtimeProc* = PCM.RealtimeProc; 
	WinAPIParam* = PCM.WinAPIParam; 
	CParam* = PCM.CParam; 
	OberonCC* = 1; 
	OberonPassivateCC* = 2; 
	WinAPICC* = 3; 
	CLangCC* = 4; 
	StaticMethodsOnly* = 5; 
	SystemType* = 6; 
	RealtimeProcType* = PCM.RealtimeProcType; 
	Overloading* = 31; 
	AutodeclareSelf* = 30; 
	SuperclassAvailable* = 29; 
	CanSkipAllocation* = 28; 
	RealtimeScope* = 27; 
TYPE 
	StringIndex* = StringPool.Index; 

	Struct* = POINTER TO RECORD 
		owner-: Type; 
		size*: PCM.Attribute; 
		sym*: PCM.Attribute; 
		flags-: SET; 
	END; 

	Symbol* = OBJECT 
	VAR 
		name-: StringIndex; 
		vis-: SET; 
		type*: Struct; 
		adr*, sym*: PCM.Attribute; 
		flags*: SET; 
		sorted-: Symbol; 
		inScope-: Scope; 
		dlink*: Symbol; 
		info*: ANY; 
		pos-: SIGNED32; 

		PROCEDURE ^ Use; 
		PROCEDURE ^ Write; 
	END Symbol; 

	Node* = OBJECT 
	VAR 
		pos*: SIGNED32; 
	END Node; 

	Scope* = OBJECT {EXCLUSIVE} 
	VAR 
		state-: SIGNED8; 
		flags-: SET; 
		ownerID-: ADDRESS; 
		module-: Module; 
		sorted-, last-: Symbol; 
		firstValue-, lastValue-: Value; 
		firstVar-, lastVar-: Variable; 
		firstHiddenVar-, lastHiddenVar-: Variable; 
		firstProc-, lastProc-: Proc; 
		firstType-, lastType-: Type; 
		parent-: Scope; 
		code*: PCM.Attribute; 
		imported-: BOOLEAN; 
		valueCount-, varCount-, procCount-, typeCount-: SIGNED32; 
		tmpCount: SIGNED32; 

		PROCEDURE ^ Await*(state: SIGNED8); 
		PROCEDURE ^ ChangeState(state: SIGNED8); 
		PROCEDURE ^ CreateSymbol*(name: StringIndex; vis: SET; type: Struct; VAR res: INTEGER); 
		PROCEDURE ^ CreateValue*(name: StringIndex; vis: SET; c: Const; pos: SIGNED32; VAR res: INTEGER); 
		PROCEDURE ^ CreateType*(name: StringIndex; vis: SET; type: Struct; pos: SIGNED32; VAR res: INTEGER); 
		PROCEDURE ^ CreateAlias*(ov: Variable; type: Struct; VAR res: INTEGER); 
		PROCEDURE ^ CreateVar*(name: StringIndex; vis, flags: SET; type: Struct; pos: SIGNED32; info: ANY; VAR res: INTEGER); 
		PROCEDURE ^ CreateProc*(name: StringIndex; vis, flags: SET; scope: Scope; return: Struct; pos: SIGNED32; VAR res: INTEGER); 
		PROCEDURE ^ CreateHiddenVarName*(VAR name: StringIndex); 
		PROCEDURE ^ CreateAwaitProcName*(VAR name: StringIndex; count: SIGNED32); 
		PROCEDURE ^ FindHiddenVar*(pos: SIGNED32; info: ANY): Variable; 
	END Scope; 

	WithScope* = OBJECT {EXCLUSIVE} (Scope)
	VAR 
		withGuard*, withSym*: Symbol; 

		PROCEDURE ^ CreateVar*(name: StringIndex; vis, flags: SET; type: Struct; pos: SIGNED32; info: ANY; VAR res: INTEGER); 
	END WithScope; 

	ProcScope* = OBJECT {EXCLUSIVE} (Scope)
	VAR 
		ownerS-: Delegate; 
		ownerO-: Proc; 
		firstPar-, lastPar-: Parameter; 
		formalParCount-, parCount-: SIGNED32; 
		cc-: SIGNED32; 
		returnParameter-: ReturnParameter; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ SetCC*(cc: SIGNED32); 
		PROCEDURE ^ CreateVar*(name: StringIndex; vis, flags: SET; type: Struct; pos: SIGNED32; info: ANY; VAR res: INTEGER); 
		PROCEDURE ^ ReversePars*; 
		PROCEDURE ^ CreatePar*(vis: SET; ref: BOOLEAN; name: StringIndex; flags: SET; type: Struct; pos: SIGNED32; VAR res: INTEGER); 
		PROCEDURE ^ CreateReturnPar*(type: Struct; VAR res: INTEGER); 
		PROCEDURE ^ CreateProc*(name: StringIndex; vis, flags: SET; scope: Scope; return: Struct; pos: SIGNED32; VAR res: INTEGER); 
	END ProcScope; 

	RecScope* = OBJECT {EXCLUSIVE} (Scope)
	VAR 
		owner-: Record; 
		body-, initproc-: Method; 
		firstMeth-, lastMeth-: Method; 
		totalVarCount-, totalProcCount-: SIGNED32; 

		PROCEDURE ^ CreateVar*(name: StringIndex; vis, flags: SET; type: Struct; pos: SIGNED32; info: ANY; VAR res: INTEGER); 
		PROCEDURE ^ CreateProc*(name: StringIndex; vis, flags: SET; scope: Scope; return: Struct; pos: SIGNED32; VAR res: INTEGER); 
		PROCEDURE ^ IsProtected*(): BOOLEAN; 
	END RecScope; 

	CustomArrayScope* = OBJECT {EXCLUSIVE} (RecScope)
	END CustomArrayScope; 

	ModScope* = OBJECT {EXCLUSIVE} (Scope)
	VAR 
		owner-: Module; 
		records-: Record; 
		nofRecs-: SIGNED16; 

		PROCEDURE ^ CreateVar*(name: StringIndex; vis, flags: SET; type: Struct; pos: SIGNED32; info: ANY; VAR res: INTEGER); 
		PROCEDURE ^ CreateProc*(name: StringIndex; vis, flags: SET; scope: Scope; return: Struct; pos: SIGNED32; VAR res: INTEGER); 
		PROCEDURE ^ AddModule*(alias: StringIndex; m: Module; pos: SIGNED32; VAR res: INTEGER); 
	END ModScope; 

	Basic* = POINTER TO RECORD (Struct)
	END; 

	Array* = POINTER TO RECORD (Struct)
		mode-: SIGNED8; 
		base-: Struct; 
		len-: SIGNED32; 
		opendim-: SIGNED32; 
		isDynSized*: BOOLEAN; 
	END; 

	EnhArray* = POINTER TO RECORD (Struct)
		mode-: SIGNED8; 
		base-: Struct; 
		len-: SIGNED32; 
		inc-: SIGNED32; 
		dim-: SIGNED32; 
		opendim-: SIGNED32; 
	END; 

	Tensor* = POINTER TO RECORD (Struct)
		base-: Struct; 
	END; 

	Record* = POINTER TO RECORD (Struct)
		scope-: RecScope; 
		brec-: Record; 
		btyp-: Struct; 
		ptr-: Pointer; 
		intf-: POINTER TO Interfaces; 
		mode*: SET; 
		prio*: SIGNED32; 
		imported-: BOOLEAN; 
		link-: Record; 
		pvused*, pbused*: BOOLEAN; 
	END; 

	CustomArray* = POINTER TO RECORD (Record)
		dim-: SIGNED32; 
		etyp: Struct; 
	END; 

	Pointer* = POINTER TO RECORD (Struct)
		base-: Struct; 
		baseA-: Array; 
		baseR-: Record; 
	END; 

	Interface* = Pointer; 

	Interfaces* = ARRAY OF Interface; 

	Delegate* = POINTER TO RECORD (Struct)
		return-: Struct; 
		scope-: ProcScope; 
	END; 

	Const* = POINTER TO RECORD 
		type-: Struct; 
		int-: SIGNED32; 
		real-: FLOAT64; 
		long-: SIGNED64; 
		set-: SET; 
		bool-: BOOLEAN; 
		ptr-: ANY; 
		str-: POINTER TO PCS.String; 
		owner-: Value; 
	END; 

	ConstArray* = POINTER TO RECORD (Const)
		data-: POINTER TO ARRAY OF CHAR; 
		len-: POINTER TO ARRAY OF SIGNED32; 
	END; 

	Value* = OBJECT (Symbol)
	VAR 
		const-: Const; 
		nextVal-: Value; 
	END Value; 

	Variable* = OBJECT (Symbol)
	VAR 
		level-: SIGNED8; 
		nextVar-: Variable; 
	END Variable; 

	GlobalVar* = OBJECT (Variable)
	END GlobalVar; 

	LocalVar* = OBJECT (Variable)
	END LocalVar; 

	ReturnParameter* = OBJECT (Variable)
	VAR 
		ref-: BOOLEAN; 
	END ReturnParameter; 

	Parameter* = OBJECT (Variable)
	VAR 
		ref-: BOOLEAN; 
		nextPar-: Parameter; 
	END Parameter; 

	Field* = OBJECT (Variable)
	END Field; 

	Alias* = OBJECT (Variable)
	VAR 
		extern: BOOLEAN; 
		obj-: Variable; 
	END Alias; 

	Proc* = OBJECT (Symbol)
	VAR 
		scope-: ProcScope; 
		nextProc-: Proc; 
		level-: SIGNED8; 
	END Proc; 

	Method* = OBJECT (Proc)
	VAR 
		super-: Method; 
		boundTo-: Record; 
		self-: Parameter; 
		nextMeth-: Method; 
	END Method; 

	Type* = OBJECT (Symbol)
	VAR 
		nextType-: Type; 

		PROCEDURE ^ Use; 
	END Type; 

	Module* = OBJECT (Symbol)
	VAR 
		context*, label*: StringIndex; 
		scope-: ModScope; 
		imported-, sysImported-: BOOLEAN; 
		imports*: ModuleArray; 
		directImps*: ModuleArray; 
		next: Module; 

		PROCEDURE ^ AddImport*(m: Module); 
		PROCEDURE ^ AddDirectImp*(m: Module); 
		PROCEDURE ^ Use; 
	END Module; 

	ModuleArray* = POINTER TO ARRAY OF Module; 

	ModuleDB* = Module; 

	ImporterPlugin* = PROCEDURE (self: Module; VAR new: Module; name: StringIndex); 
VAR 
	BodyName-, SelfName-, Anonymous-, PtrReturnType-: StringIndex; 
	AWait, ANoWait: SIGNED32; 
	Byte-, Bool-, Char8-, Char16-, Char32-: Struct; 
	Int8-, Int16-, Int32-, Int64-, Float32-, Float64-: Struct; 
	Set-, Ptr-, String-, NilType-, NoType-, UndefType-, Address*, SetType*, Size*: Struct; 
	NumericType-: ARRAY 6 OF Basic; 
	CharType-: ARRAY 3 OF Basic; 
	Allocate*: PROCEDURE (context, scope: Scope; hiddenVarsOnly: BOOLEAN); 
	PreAllocate*, PostAllocate*: PROCEDURE (context, scope: Scope); 
	Universe-, System-: Module; 
	True-, False-: Const; 
	SystemAddress-, SystemSize-: Type; 
	AddressSize*, SetSize*: SIGNED32; 
	import: ARRAY MaxPlugins OF ImporterPlugin; 
	nofImportPlugins: SIGNED32; 
	database*: ModuleDB; 

	PROCEDURE ^ ExtendModArray*(VAR a: ModuleArray); 
	PROCEDURE ^ IsCardinalType*(t: Struct): BOOLEAN; 
	PROCEDURE ^ IsFloatType*(t: Struct): BOOLEAN; 
	PROCEDURE ^ IsCharType*(t: Struct): BOOLEAN; 
	PROCEDURE ^ IsPointer*(t: Struct): BOOLEAN; 
	PROCEDURE ^ ContainsPointer*(t: Struct): BOOLEAN; 
	PROCEDURE ^ IsStaticDelegate*(t: Struct): BOOLEAN; 
	PROCEDURE ^ IsDynamicDelegate*(t: Struct): BOOLEAN; 
	PROCEDURE ^ IsRecord*(t: Struct): BOOLEAN; 
	PROCEDURE ^ IsBasic*(t: Struct): BOOLEAN; 
	PROCEDURE ^ BasicTypeDistance*(from, to: Basic): SIGNED32; 
	PROCEDURE ^ RecordTypeDistance*(from, to: Record): SIGNED32; 
	PROCEDURE ^ PointerTypeDistance*(from, to: Pointer): SIGNED32; 
	PROCEDURE ^ ArrayTypeDistance*(from, to: Array): SIGNED32; 
	PROCEDURE ^ TypeDistance*(from, to: Struct): SIGNED32; 
	PROCEDURE ^ SignatureDistance*(from, to: Parameter): SIGNED32; 
	PROCEDURE ^ SignatureDistance0*(parCount: SIGNED32; CONST pars: ARRAY OF Struct; to: Parameter): SIGNED32; 
	PROCEDURE ^ IsLegalReturnType(t: Struct): BOOLEAN; 
	PROCEDURE ^ ParameterMatch*(Pa, Pb: Parameter; VAR faulty: Symbol): BOOLEAN; 
	PROCEDURE ^ EqualTypes*(Ta, Tb: Struct): BOOLEAN; 
	PROCEDURE ^ CheckForRecursion(type, banned: Struct): BOOLEAN; 
	PROCEDURE ^ CompareSignature(s1, s2: Parameter): INTEGER; 
	PROCEDURE ^ GetProcedureAllowed*(scope: ProcScope; returnType: Struct): BOOLEAN; 
	PROCEDURE ^ SetOwner*(scope: Scope); 
	PROCEDURE ^ InitScope*(scope, parent: Scope; flags: SET; imported: BOOLEAN); 
	PROCEDURE ^ Insert(scope: Scope; obj: Symbol; VAR res: INTEGER); 
	PROCEDURE ^ Lookup(scope: Scope; name: StringIndex): Symbol; 
	PROCEDURE ^ HiddenVarExists*(scope: Scope; info: ANY): BOOLEAN; 
	PROCEDURE ^ IsVisible(vis: SET; current, search: Scope; localsearch: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ Find*(current, search: Scope; name: StringIndex; mode: SIGNED8; mark: BOOLEAN): Symbol; 
	PROCEDURE ^ FindIndexer*(scope: RecScope; name: StringIndex): Method; 
	PROCEDURE ^ FindOperator*(current, search: Scope; parents: BOOLEAN; name: StringIndex; CONST pars: ARRAY OF Struct; parCount: SIZE; pos: SIGNED32): Proc; 
	PROCEDURE ^ PrintString*(s: StringIndex); 
	PROCEDURE ^ Distance(CONST pars: ARRAY OF Struct; param: Parameter; parCount: SIZE): SIGNED32; 
	PROCEDURE ^ FindProcedure*(current, search: Scope; name: StringIndex; parCount: SIGNED32; CONST pars: ARRAY OF Struct; identicSignature, mark: BOOLEAN): Proc; 
	PROCEDURE ^ FindSameSignature*(search: Scope; name: StringIndex; par: Parameter; identic: BOOLEAN): Proc; 
	PROCEDURE ^ CheckInterfaceImpl(rec, int: Record; VAR res: INTEGER); 
	PROCEDURE ^ StateStructShallowAllocated*(scope: Scope); 
	PROCEDURE ^ ChangeState*(scope: Scope; state: SIGNED8; pos: SIGNED32); 
	PROCEDURE ^ Import*(self: Module; VAR new: Module; name: StringIndex); 
	PROCEDURE ^ TraverseScopes*(top: Scope; proc: PROCEDURE (s: Scope)); 
	PROCEDURE ^ AddRecord*(scope: Scope; rec: Record); 
	PROCEDURE ^ CommitParList(scope: ProcScope; level: SIGNED8); 
	PROCEDURE ^ GetIntType*(i: SIGNED32): Struct; 
	PROCEDURE ^ GetCharType*(i: SIGNED32): Struct; 
	PROCEDURE ^ NewIntConst*(i: SIGNED32; type: Struct): Const; 
	PROCEDURE ^ NewInt64Const*(i: SIGNED64): Const; 
	PROCEDURE ^ NewBoolConst(b: BOOLEAN): Const; 
	PROCEDURE ^ NewSetConst*(s: SET): Const; 
	PROCEDURE ^ NewFloatConst*(r: FLOAT64; type: Struct): Const; 
	PROCEDURE ^ NewStringConst*(CONST str: ARRAY OF CHAR): Const; 
	PROCEDURE ^ NewPtrConst*(p: ANY; type: Struct): Const; 
	PROCEDURE ^ MakeArrayType*(len: ARRAY OF SIGNED32; dim: SIGNED32; base: Struct; basesize: SIGNED32): Struct; 
	PROCEDURE ^ NewArrayConst*(VAR data: ARRAY OF SYSTEM.BYTE; len: ARRAY OF SIGNED32; dim: SIGNED32; base: Struct; basesize: SIGNED32): Const; 
	PROCEDURE ^ CheckArrayBase(a: Array; allowedMode: SET; VAR res: INTEGER); 
	PROCEDURE ^ CheckEnhArrayBase(a: EnhArray; allowedMode: SET; VAR res: INTEGER); 
	PROCEDURE ^ ElementType*(a: Struct): Struct; 
	PROCEDURE ^ InitOpenArray*(a: Array; base: Struct; VAR res: INTEGER); 
	PROCEDURE ^ InitStaticArray*(a: Array; len: SIGNED32; base: Struct; VAR res: INTEGER); 
	PROCEDURE ^ InitTensor*(a: Tensor; base: Struct; VAR res: INTEGER); 
	PROCEDURE ^ InitOpenEnhArray*(a: EnhArray; base: Struct; allow: SET; VAR res: INTEGER); 
	PROCEDURE ^ InitStaticEnhArray*(a: EnhArray; len: SIGNED32; base: Struct; allow: SET; VAR res: INTEGER); 
	PROCEDURE ^ SetEnhArrayLen*(a: EnhArray; len: SIGNED32); 
	PROCEDURE ^ SetEnhArrayInc*(a: EnhArray; inc: SIGNED32); 
	PROCEDURE ^ BuildOpenArray*(base: Struct; dim: SIGNED32): Struct; 
	PROCEDURE ^ BuildTensor*(base: Struct): Tensor; 
	PROCEDURE ^ CopyMethods(scope: RecScope; CONST intf: Interfaces; isImported: BOOLEAN); 
	PROCEDURE ^ InitRecord*(r: Record; base: Struct; CONST intf: Interfaces; scope: RecScope; isInterface, isImported, isDynamic: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ NewRecord*(base: Struct; scope: RecScope; flags: SET; imported: BOOLEAN; VAR res: INTEGER): Record; 
	PROCEDURE ^ InitCustomArray*(r: CustomArray; base: Struct; dim: SIGNED32; scope: CustomArrayScope; VAR res: INTEGER); 
	PROCEDURE ^ NewCustomArray*(base: Struct; dim: SIGNED32; scope: CustomArrayScope; VAR res: INTEGER): Pointer; 
	PROCEDURE ^ NewClass*(base: Struct; CONST implements: Interfaces; scope: RecScope; imported: BOOLEAN; VAR res: INTEGER): Pointer; 
	PROCEDURE ^ NewInterface*(CONST implements: Interfaces; scope: RecScope; imported: BOOLEAN; VAR res: INTEGER): Pointer; 
	PROCEDURE ^ InitPointer*(ptr: Pointer; base: Struct; VAR res: INTEGER); 
	PROCEDURE ^ InitDelegate*(p: Delegate; return: Struct; scope: ProcScope; flags: SET; VAR res: INTEGER); 
	PROCEDURE ^ InitSymbol*(o: Symbol; name: StringIndex; vis: SET; type: Struct); 
	PROCEDURE ^ InitType*(t: Type; name: StringIndex; vis: SET; type: Struct); 
	PROCEDURE ^ NewValue*(name: StringIndex; vis: SET; c: Const): Value; 
	PROCEDURE ^ CheckVar(v: Variable; allowedArray: SET; allowedEnhArray: SET; VAR res: INTEGER); 
	PROCEDURE ^ NewGlobalVar*(vis: SET; name: StringIndex; flags: SET; type: Struct; VAR res: INTEGER): GlobalVar; 
	PROCEDURE ^ InitProc(p: Proc; vis: SET; name: StringIndex; scope: ProcScope; return: Struct; VAR res: INTEGER); 
	PROCEDURE ^ NewProc*(vis: SET; name: StringIndex; flags: SET; scope: ProcScope; return: Struct; VAR res: INTEGER): Proc; 
	PROCEDURE ^ FindOverwrittenMethod(owner: Record; name: StringIndex; mscope: ProcScope; VAR res: INTEGER): Method; 
	PROCEDURE ^ NewMethod(vis: SET; name: StringIndex; flags: SET; scope: ProcScope; return: Struct; boundTo: Record; pos: SIGNED32; VAR res: INTEGER): Method; 
	PROCEDURE ^ NewModule*(name: StringIndex; imported: BOOLEAN; flags: SET; scope: ModScope): Module; 
	PROCEDURE ^ SetMode*(scope: Scope; mode: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ SetProcFlag*(scope: Scope; flag: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ IsRealtimeScope*(scope: Scope): BOOLEAN; 
	PROCEDURE ^ RecordSizeUsed*(rec: Record); 
	PROCEDURE ^ Written*(s: Symbol); 
	PROCEDURE ^ RemoveWarning*(s: Symbol); 
	PROCEDURE ^ GetTypeName*(type: Struct; VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ GetScopeName*(scope: Scope; VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ Register*(root: ModuleDB; m: Module); 
	PROCEDURE ^ Unregister*(root: ModuleDB; name: StringIndex); 
	PROCEDURE ^ Retrieve*(root: ModuleDB; name: StringIndex): Module; 
	PROCEDURE ^ Enumerate*(root: ModuleDB; EnumProc: PROCEDURE {DELEGATE}(m: Module)); 
	PROCEDURE ^ InitDB*(VAR root: ModuleDB); 
	PROCEDURE ^ AddImporter*(p: ImporterPlugin); 
	PROCEDURE ^ RemoveImporter*(p: ImporterPlugin); 
	PROCEDURE ^ DummyAllocate(context, scope: Scope; hiddenVarsOnly: BOOLEAN); 
	PROCEDURE ^ DummyPrePostAllocate(context, scope: Scope); 
	PROCEDURE ^ NewBasic(m: Module; CONST name: ARRAY OF CHAR): Basic; 
	PROCEDURE ^ Init; 
BEGIN
END PCT.
