MODULE FTP IN Oberon;
	IMPORT Files, Strings, Input, Display, Fonts, Texts, Oberon, NetSystem, IP IN A2;
CONST 
	MaxLine = 1024; 
	BufLen = MaxLine; 
	Tab = 9X; 
	Esc = 1BX; 
	BreakChar = Esc; 
	Done = 0; 
	NotReady = 1; 
	NotConnected = 2; 
	WrongUser = 3; 
	WrongPassword = 4; 
	TimedOut = 5; 
	LocFileNotFound = 6; 
	Interrupted = 7; 
	Disconnected = 8; 
	Failed = MAX(SIGNED16); 
	MinDataPort = 1100; 
	MaxDataPort = 1500; 
	Unknown =  -1; 
	UNIX = 0; 
	VMS = 1; 
	DefConPort = 21; 
	FileActionOk = 250; 
	CommandOk = 200; 
	DataConnectionOpen = 125; 
	FileStatusOk = 150; 
	EnterPassword = 330; 
	NeedPassword = 331; 
	PathNameCreated = 257; 
	UserLoggedIn = 230; 
TYPE 
	Session = POINTER TO SessionDesc; 

	SessionDesc = RECORD 
		C: NetSystem.Connection; 
		dataC: NetSystem.Connection; 
		reply: ARRAY MaxLine OF CHAR; 
		usr, passw, host, portIPAddress: ARRAY 64 OF CHAR; 
		dataIP: NetSystem.IPAdr; 
		dataPort, status, system, res: SIGNED16; 
		ack: BOOLEAN; 
	END; 

	EnumProc = PROCEDURE (entry: ARRAY OF CHAR); 
VAR 
	S: Session; 
	W: Texts.Writer; 
	log: Texts.Text; 
	line: ARRAY MaxLine OF CHAR; 
	buffer: ARRAY BufLen OF CHAR; 
	timeOut: SIGNED32; 
	dataPort, col: SIGNED16; 

	PROCEDURE ^ Connected(C: NetSystem.Connection; mode: SIGNED16): BOOLEAN; 
	PROCEDURE ^ Disconnect(VAR C: NetSystem.Connection); 
	PROCEDURE ^ Connect(VAR C: NetSystem.Connection; port: SIGNED16; host: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ UserBreak(): BOOLEAN; 
	PROCEDURE ^ ReadResponse(S: Session; VAR sline: ARRAY OF CHAR); 
	PROCEDURE ^ SendString(C: NetSystem.Connection; str: ARRAY OF CHAR); 
	PROCEDURE ^ SendLine(C: NetSystem.Connection; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ SendCmd(S: Session; str: ARRAY OF CHAR); 
	PROCEDURE ^ CloseS(S: Session); 
	PROCEDURE ^ Close2(S: Session); 
	PROCEDURE ^ QuerySystem(S: Session); 
	PROCEDURE ^ QueryString(key: ARRAY OF CHAR; VAR s: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ GetLogin(VAR host, usr, passw: ARRAY OF CHAR); 
	PROCEDURE ^ OpenS(server, user, passwd: ARRAY OF CHAR; port: SIGNED16; VAR S: Session); 
	PROCEDURE ^ ChangeDirS(S: Session; newDir: ARRAY OF CHAR); 
	PROCEDURE ^ SetDataPort(S: Session); 
	PROCEDURE ^ WaitDataCon(S: Session): NetSystem.Connection; 
	PROCEDURE ^ EnumDir(S: Session; enum: EnumProc); 
	PROCEDURE ^ GetCurDir(S: Session; VAR curdir: ARRAY OF CHAR); 
	PROCEDURE ^ MakeDirS(S: Session; newDir: ARRAY OF CHAR); 
	PROCEDURE ^ RmDirS(S: Session; dir: ARRAY OF CHAR); 
	PROCEDURE ^ DeleteFile(S: Session; remName: ARRAY OF CHAR); 
	PROCEDURE ^ ReadData(S: Session; C: NetSystem.Connection; VAR R: Files.Rider); 
	PROCEDURE ^ GetF(S: Session; remName: ARRAY OF CHAR; VAR R: Files.Rider); 
	PROCEDURE ^ GetFile(S: Session; remName, locName: ARRAY OF CHAR); 
	PROCEDURE ^ WriteData(C: NetSystem.Connection; VAR R: Files.Rider); 
	PROCEDURE ^ PutFile(S: Session; remName, locName: ARRAY OF CHAR); 
	PROCEDURE ^ ReadText(C: NetSystem.Connection; VAR W: Texts.Writer); 
	PROCEDURE ^ GetText(S: Session; remName: ARRAY OF CHAR; VAR W: Texts.Writer); 
	PROCEDURE ^ WriteText(C: NetSystem.Connection; T: Texts.Text); 
	PROCEDURE ^ PutText(S: Session; remName: ARRAY OF CHAR; text: Texts.Text); 
	PROCEDURE ^ ShowRes; 
	PROCEDURE ^ OpenScanner(VAR S: Texts.Scanner); 
	PROCEDURE ^ SplitFTPAdr(VAR url, host, path, user, passwd: ARRAY OF CHAR; VAR type: CHAR; VAR port: SIGNED16): BOOLEAN; 
	PROCEDURE ^ Open*; 
	PROCEDURE ^ Con(): BOOLEAN; 
	PROCEDURE ^ Close*; 
	PROCEDURE ^ ChangeDir*; 
	PROCEDURE ^ ShowEntry(entry: ARRAY OF CHAR); 
	PROCEDURE ^ Dir*; 
	PROCEDURE ^ ShowCompactEntry(entry: ARRAY OF CHAR); 
	PROCEDURE ^ CompactDir*; 
	PROCEDURE ^ CurDir*; 
	PROCEDURE ^ MakeDir*; 
	PROCEDURE ^ RmDir*; 
	PROCEDURE ^ DeleteFiles*; 
	PROCEDURE ^ ScanPair(VAR S: Texts.Scanner; VAR name1, name2: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ GetFiles*; 
	PROCEDURE ^ GetTexts*; 
	PROCEDURE ^ PutFiles*; 
	PROCEDURE ^ PutTexts*; 
	PROCEDURE ^ OpenLog*; 
BEGIN
END FTP.
