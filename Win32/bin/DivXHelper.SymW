MODULE DivXHelper;
	IMPORT SYSTEM, Streams, DT := DivXTypes, AVI, idct := IDCT;
CONST 
	W1 = 2841; 
	W2 = 2676; 
	W3 = 2408; 
	W5 = 1609; 
	W6 = 1108; 
	W7 = 565; 
	Escape = 7167; 
TYPE 
	Event = RECORD 
		last, run, level: SIGNED32; 
	END; 

	TextureDecoding* = OBJECT 
	VAR 
		block*: DT.PointerToArrayOfLONGINT; 
		mp4State: DT.MP4State; 
		dcScaler: SIGNED32; 
		saiAcLeftIndex: ARRAY 8 OF SIGNED32; 
		vld: VLD; 
		log: Streams.Writer; 
		srcBlock, dstBlock*: POINTER TO ARRAY 68 OF SIGNED16; 

		PROCEDURE ^  & init*(state: DT.MP4State; logWriter: Streams.Writer); 
		PROCEDURE ^ ClearBlock; 
		PROCEDURE ^ ClearBlockGeneric; 
		PROCEDURE ^ ClearBlockMMX(dst: SIGNED32); 
		PROCEDURE ^ BlockIntra*(blockNum: SIGNED32; coded: BOOLEAN; VAR r: DT.VideoBuffer): SIGNED32; 
		PROCEDURE ^ BlockInter*(blockNum: SIGNED32; coded: BOOLEAN; VAR r: DT.VideoBuffer): SIGNED32; 
		PROCEDURE ^ DumpMacroBlock; 
		PROCEDURE ^ GetDCSizeLum(VAR r: DT.VideoBuffer): SIGNED32; 
		PROCEDURE ^ GetDCSizeChr(VAR r: DT.VideoBuffer): SIGNED32; 
		PROCEDURE ^ GetDCDiff(dctDCSize: SIGNED32; VAR r: DT.VideoBuffer): SIGNED32; 
		PROCEDURE ^ Pow(x, y: SIGNED32): SIGNED32; 
		PROCEDURE ^ SetDCScaler(blockNum: SIGNED32); 
		PROCEDURE ^ DCRecon(blockNum: SIGNED32; dcValue: DT.PointerToArrayOfLONGINT); 
		PROCEDURE ^ DivDiv(a, b: SIGNED32): SIGNED32; 
		PROCEDURE ^ ACRecon(blockNum: SIGNED32; psBlock: DT.PointerToArrayOfLONGINT); 
		PROCEDURE ^ ACStore(blockNum: SIGNED32; psBlock: DT.PointerToArrayOfLONGINT); 
		PROCEDURE ^ Rescale(predictQuant, currentQuant, coeff: SIGNED32): SIGNED32; 
		PROCEDURE ^ ACRescaling(blockNum: SIGNED32; psBlock: DT.PointerToArrayOfLONGINT): SIGNED32; 
		PROCEDURE ^ IsIntra(mbY, mbX: SIGNED32): BOOLEAN; 
		PROCEDURE ^ RescuePredict; 
		PROCEDURE ^ FastCopy(from, sizefrom, offsetfrom, to, sizeto, offsetto: SIGNED32); 
		PROCEDURE ^ IDCT(block: DT.PointerToArrayOfLONGINT); 
		PROCEDURE ^ IDCTRow(blk: DT.PointerToArrayOfLONGINT; baseIndex: SIGNED32); 
		PROCEDURE ^ IDCTCol(blk: DT.PointerToArrayOfLONGINT; baseIndex: SIGNED32); 
		PROCEDURE ^ IQuant(psBlock: DT.PointerToArrayOfLONGINT; intraFlag: BOOLEAN); 
		PROCEDURE ^ IQuantTypeFirst(psblock: DT.PointerToArrayOfLONGINT); 
	END TextureDecoding; 

	VLD = OBJECT 
	VAR 
		tableB161: ARRAY 112 OF DT.TabType; 
		tableB162: ARRAY 96 OF DT.TabType; 
		tableB163: ARRAY 120 OF DT.TabType; 
		tableB171: ARRAY 112 OF DT.TabType; 
		tableB172: ARRAY 96 OF DT.TabType; 
		tableB173: ARRAY 120 OF DT.TabType; 
		log: Streams.Writer; 

		PROCEDURE ^  & init*(logWriter: Streams.Writer); 
		PROCEDURE ^ VldIntraDCT(VAR event: Event; VAR r: DT.VideoBuffer); 
		PROCEDURE ^ VldInterDCT(VAR event: Event; VAR r: DT.VideoBuffer); 
		PROCEDURE ^ VldEvent(intraFlag: BOOLEAN; VAR event: Event; VAR r: DT.VideoBuffer); 
		PROCEDURE ^ VldTableB19(last, run: SIGNED32): SIGNED32; 
		PROCEDURE ^ VldTableB20(last, run: SIGNED32): SIGNED32; 
		PROCEDURE ^ VldTableB21(last, level: SIGNED32): SIGNED32; 
		PROCEDURE ^ VldTableB22(last, level: SIGNED32): SIGNED32; 
		PROCEDURE ^ VldTableB16(code: SIGNED32; VAR r: DT.VideoBuffer): DT.TabType; 
		PROCEDURE ^ VldTableB17(code: SIGNED32; VAR r: DT.VideoBuffer): DT.TabType; 
	END VLD; 
BEGIN
END DivXHelper.
