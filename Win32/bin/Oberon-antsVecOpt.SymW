MODULE antsVecOpt IN Oberon;
	IMPORT vyLongrealVec, antsCommands, vyBase, vyRandom, aM := antsMessages, Objects, antsArrays, Attributes;
CONST 
	cNoisedByName* = \"noised by"\; 
	cGauss* = \"Gauss"\; 
	cExp* = \"Exponential"\; 
	cLaplace* = \"Laplace"\; 
	cUni* = \"Uniform"\; 
	clocpar* = \"location parameter"\; 
	cscalepar* = \"scale parameter"\; 

	PROCEDURE ^ DoAddConst*(data, result: vyBase.tVector; const: FLOAT64); 
	PROCEDURE ^ DoAddGaussNoise*(data, degraded: vyBase.tVector; mu, sigmasq: FLOAT64); 
	PROCEDURE ^ DoAddCauchyNoise*(data, degraded: vyBase.tVector); 
	PROCEDURE ^ DoAddLaplaceNoise*(data, degraded: vyBase.tVector; mu: FLOAT64); 
	PROCEDURE ^ DoAddExpNoise*(data, degraded: vyBase.tVector; mu: FLOAT64); 
	PROCEDURE ^ DoAddUniformNoise*(data, degraded: vyBase.tVector; len: FLOAT64); 
	PROCEDURE ^ Copy*; 
	PROCEDURE ^ AddGaussNoise*; 
	PROCEDURE ^ AddExpNoise*; 
	PROCEDURE ^ AddLaplaceNoise*; 
	PROCEDURE ^ AddUniformNoise*; 
	PROCEDURE ^ AddConst*; 
	PROCEDURE ^ Mean(VAR a: ARRAY OF FLOAT64; n: SIGNED32): FLOAT64; 
	PROCEDURE ^ DoUMA(len: SIGNED32; v: vyLongrealVec.tVector); 
	PROCEDURE ^ UniformMovingAverage*; 
	PROCEDURE ^ DoCutMedian*(len: SIGNED32; v: vyLongrealVec.tVector); 
	PROCEDURE ^ DoTaperedMedian*(len: SIGNED32; v: vyLongrealVec.tVector); 
	PROCEDURE ^ MedianFilter*; 
	PROCEDURE ^ TaperedMedianFilter*; 
	PROCEDURE ^ AppendValue*; 
	PROCEDURE ^ PartialSums*(y: vyBase.tVector; yint: vyBase.tVector); 
	PROCEDURE ^ CumSum*(y: vyBase.tVector; ysum: vyBase.tVector); 
BEGIN
END antsVecOpt.
