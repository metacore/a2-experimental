MODULE System;
	IMPORT Machine, Modules, Objects, Commands, Options, ProcessInfo, Kernel, Streams, Dates, Strings, Plugins, Files, SystemVersion, Heaps, Reflection;
CONST 
	MaxTimers = 16; 
	DateTimeFormat = \"dd.mm.yyyy hh:nn:ss"\; 
	CR = 0DX; 
	LF = 0AX; 
	TAB = 9X; 
	TraceCommands = 1; 
	TraceFreeDownTo = 2; 
	Trace = {}; 
	OberonKernel = \"Oberon-Kernel"\; 
TYPE 
	Module = POINTER TO RECORD 
		next: Module; 
		checked, imports: BOOLEAN; 
		m: Modules.Module; 
	END; 
VAR 
	timers: ARRAY MaxTimers OF Dates.DateTime; 

	PROCEDURE ^ Find(root: Module; m: Modules.Module): Module; 
	PROCEDURE ^ CopyModules(): Module; 
	PROCEDURE ^ Imports(root, m: Module; CONST name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ LockOberon; 
	PROCEDURE ^ UnlockOberon; 
	PROCEDURE ^ ListModules*(context: Commands.Context); 
	PROCEDURE ^ ListPlugins*(context: Commands.Context); 
	PROCEDURE ^ ListCommands*(context: Commands.Context); 
	PROCEDURE ^ List*(context: Commands.Context); 
	PROCEDURE ^ ModuleIsLoaded(CONST name: Modules.Name): BOOLEAN; 
	PROCEDURE ^ WhoImports*(context: Commands.Context); 
	PROCEDURE ^ IsLoaded*(context: Commands.Context); 
	PROCEDURE ^ ModuleState*(context: Commands.Context); 
	PROCEDURE ^ Load*(context: Commands.Context); 
	PROCEDURE ^ FreeDownTo*(context: Commands.Context); 
	PROCEDURE ^ Free*(context: Commands.Context); 
	PROCEDURE ^ Kill*(context: Commands.Context); 
	PROCEDURE ^ ShowProcesses*(context: Commands.Context); 
	PROCEDURE ^ ShowStacks*(context: Commands.Context); 
	PROCEDURE ^ ShowStack*(context: Commands.Context); 
	PROCEDURE ^ Watch*(context: Commands.Context); 
	PROCEDURE ^ RenameExtension*(context: Commands.Context); 
	PROCEDURE ^ IsDelimiter(ch: CHAR): BOOLEAN; 
	PROCEDURE ^ DoFile*(context: Commands.Context); 
	PROCEDURE ^ DoCommands*(context: Commands.Context); 
	PROCEDURE ^ RemoveComments(VAR string: ARRAY OF CHAR; length: LONGINT); 
	PROCEDURE ^ RemoveFirstLineComment(string: Strings.String); 
	PROCEDURE ^ Repeat*(context: Commands.Context); 
	PROCEDURE ^ Timer*(context: Commands.Context); 
	PROCEDURE ^ Time*(context: Commands.Context); 
	PROCEDURE ^ ShowFile*(context: Commands.Context); 
	PROCEDURE ^ Show*(context: Commands.Context); 
	PROCEDURE ^ Ln*(context: Commands.Context); 
	PROCEDURE ^ Wait*(context: Commands.Context); 
	PROCEDURE ^ Reboot*; 
	PROCEDURE ^ PowerDown*; 
	PROCEDURE ^ CollectGarbage*(context: Commands.Context); 
	PROCEDURE ^ Version*(context: Commands.Context); 
BEGIN
END System.
