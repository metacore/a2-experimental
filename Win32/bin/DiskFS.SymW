MODULE DiskFS;
	IMPORT SYSTEM, Machine, KernelLog, Modules, Clock, Files, Kernel;
CONST 
	SkipIndexFlag = 31; 
	MinVolSize = 4; 
	SectorFactor = 29; 
	FileNameLength = 128; 
	SectorTableSize = 128; 
	SectorSize = 4096; 
	IndexSize = (SectorSize DIV 4); 
	DiskAdrSize = 4; 
	HeaderSize = (((4 + FileNameLength) + (4 * 4)) + ((SectorTableSize + 1) * DiskAdrSize)); 
	DirEntrySize = (FileNameLength + (2 * DiskAdrSize)); 
	DirPgHeaderSize = (((2 * 4) + DiskAdrSize) + 4); 
	DirPgSize = ((SectorSize - DirPgHeaderSize) DIV DirEntrySize); 
	FillerSize = (((SectorSize - DirPgHeaderSize) MOD DirEntrySize) + 4); 
	DirRootAdr = (1 * SectorFactor); 
	N = (DirPgSize DIV 2); 
	DirMark = LONGINT(2602476429); 
	HeaderMark = LONGINT(2611420550); 
	MapIndexSize = ((SectorSize - 4) DIV 4); 
	MapSize = (SectorSize DIV SIZEOF(SET)); 
	MapMark = LONGINT(2620364671); 
	MaxBufs = 1024; 
	InitHint = (200 * SectorFactor); 
	Closed = 0X; 
	Opening = 1X; 
	Opened = 2X; 
	Closing = 3X; 
	SetSize = (MAX(SET) + 1); 
TYPE 
	DiskSector = RECORD 
	END; 

	DiskSectorArr = ARRAY SectorSize OF CHAR; 

	DiskAdr = LONGINT; 

	FileName = ARRAY FileNameLength OF CHAR; 

	SectorTable = ARRAY SectorTableSize OF DiskAdr; 

	FileHeader = RECORD (DiskSector)
		mark: LONGINT; 
		name: FileName; 
		aleng, bleng: LONGINT; 
		date, time: LONGINT; 
		sec: SectorTable; 
		ext: DiskAdr; 
		data: ARRAY (SectorSize - HeaderSize) OF CHAR; 
	END; 

	IndexSector = RECORD (DiskSector)
		x: ARRAY IndexSize OF DiskAdr; 
	END; 

	DataSector = RECORD (DiskSector)
		B: ARRAY SectorSize OF CHAR; 
	END; 

	DirEntry = RECORD 
		name: FileName; 
		adr: DiskAdr; 
		p: DiskAdr; 
	END; 

	DirPage = RECORD (DiskSector)
		mark: LONGINT; 
		m: LONGINT; 
		p0: DiskAdr; 
		fill: ARRAY FillerSize OF CHAR; 
		e: ARRAY DirPgSize OF DirEntry; 
	END; 

	MapIndex = RECORD (DiskSector)
		mark: LONGINT; 
		index: ARRAY MapIndexSize OF DiskAdr; 
	END; 

	MapSector = RECORD (DiskSector)
		map: ARRAY MapSize OF SET; 
	END; 

	Buffer = POINTER TO RECORD (Files.Hint)
		apos, lim: LONGINT; 
		mod: BOOLEAN; 
		next: Buffer; 
		data: DataSector; 
	END; 

	SuperIndex = POINTER TO RECORD 
		adr: DiskAdr; 
		mod: BOOLEAN; 
		sub: ARRAY IndexSize OF SubIndex; 
	END; 

	SubIndex = POINTER TO RECORD 
		adr: DiskAdr; 
		mod: BOOLEAN; 
		sec: IndexSector; 
	END; 

	Directory = OBJECT {EXCLUSIVE} 
	VAR 
		vol: Files.Volume; 
		state: CHAR; 
		lastSectorReserved, noCleanup: BOOLEAN; 

		PROCEDURE ^ Search(VAR name: FileName; VAR A: DiskAdr); 
		PROCEDURE ^ insert(VAR name: FileName; dpg0: DiskAdr; VAR h: BOOLEAN; VAR v: DirEntry; fad: DiskAdr); 
		PROCEDURE ^ Insert(VAR name: FileName; fad: DiskAdr); 
		PROCEDURE ^ underflow(VAR c: DirPage; dpg0: DiskAdr; s: LONGINT; VAR h: BOOLEAN); 
		PROCEDURE ^ delete(VAR name: FileName; dpg0: DiskAdr; VAR h: BOOLEAN; VAR fad: DiskAdr); 
		PROCEDURE ^ Delete(VAR name: FileName; VAR fad: DiskAdr); 
		PROCEDURE ^ Startup; 
		PROCEDURE ^  & Init*(vol: Files.Volume); 
		PROCEDURE ^ Cleanup; 
	END Directory; 

	FileSystem = OBJECT {EXCLUSIVE} (Files.FileSystem)
	VAR 
		dir: Directory; 
		finalizeFiles: Kernel.FinalizedCollection; 
		openFiles: DiskAdrList; 
		tempRegFileSec: DiskAdrTable; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ New0*(name: ARRAY OF CHAR): Files.File; 
		PROCEDURE ^ Old0*(name: ARRAY OF CHAR): Files.File; 
		PROCEDURE ^ Delete0*(name: ARRAY OF CHAR; VAR key: LONGINT; VAR res: WORD); 
		PROCEDURE ^ Rename0*(old, new: ARRAY OF CHAR; f: Files.File; VAR res: WORD); 
		PROCEDURE ^ Enumerate0*(mask: ARRAY OF CHAR; flags: SET; enum: Files.Enumerator); 
		PROCEDURE ^ FileKey*(name: ARRAY OF CHAR): LONGINT; 
		PROCEDURE ^ CollectRegisteredFileSectors(adr: DiskAdr); 
		PROCEDURE ^ PurgeByAdr(adr: DiskAdr); 
		PROCEDURE ^ PurgeOpenedFile(f: File; except: DiskAdrTable); 
		PROCEDURE ^ Close(f: File); 
		PROCEDURE ^ Finalize*; 
	END FileSystem; 

	DiskAdrArray = POINTER TO ARRAY OF DiskAdr; 

	DiskAdrList = OBJECT {EXCLUSIVE} 
	VAR 
		list: DiskAdrArray; 
		count: LONGINT; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ Grow; 
		PROCEDURE ^ Add(x: DiskAdr); 
		PROCEDURE ^ Remove(x: DiskAdr); 
		PROCEDURE ^ Contains(x: DiskAdr): BOOLEAN; 
	END DiskAdrList; 

	DiskAdrTable = OBJECT {EXCLUSIVE} 
	CONST 
		threshold = 4; 
	VAR 
		table: DiskAdrArray; 
		count: SIZE; 
		size: SIZE; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ Clear; 
		PROCEDURE ^ Grow; 
		PROCEDURE ^ HashValue(key: DiskAdr): SIZE; 
		PROCEDURE ^ Add(x: DiskAdr); 
		PROCEDURE ^ Contains(x: DiskAdr): BOOLEAN; 
	END DiskAdrTable; 

	File = OBJECT {EXCLUSIVE} (Files.File)
	VAR 
		aleng, bleng: LONGINT; 
		nofbufs: LONGINT; 
		modH, registered: BOOLEAN; 
		firstbuf: Buffer; 
		sechint: DiskAdr; 
		name: FileName; 
		time, date: LONGINT; 
		ext: SuperIndex; 
		sec: SectorTable; 

		PROCEDURE ^ Set*(VAR r: Files.Rider; pos: LONGINT); 
		PROCEDURE ^ Pos*(VAR r: Files.Rider): LONGINT; 
		PROCEDURE ^ Read*(VAR r: Files.Rider; VAR x: CHAR); 
		PROCEDURE ^ ReadBytes*(VAR r: Files.Rider; VAR x: ARRAY OF CHAR; ofs, len: LONGINT); 
		PROCEDURE ^ Write*(VAR r: Files.Rider; x: CHAR); 
		PROCEDURE ^ WriteBytes*(VAR r: Files.Rider; CONST x: ARRAY OF CHAR; ofs, len: LONGINT); 
		PROCEDURE ^ Length*(): LONGINT; 
		PROCEDURE ^ GetDate*(VAR t, d: LONGINT); 
		PROCEDURE ^ SetDate*(t, d: LONGINT); 
		PROCEDURE ^ GetName*(VAR name: ARRAY OF CHAR); 
		PROCEDURE ^ Register0*(VAR res: WORD); 
		PROCEDURE ^ Update*; 
	END File; 

	PROCEDURE ^ Collect(f: ANY); 
	PROCEDURE ^ GetSector(vol: Files.Volume; src: DiskAdr; VAR dest: DiskSector); 
	PROCEDURE ^ PutSector(vol: Files.Volume; dest: DiskAdr; VAR src: DiskSector); 
	PROCEDURE ^ AllocSector(vol: Files.Volume; hint: DiskAdr; VAR sec: DiskAdr); 
	PROCEDURE ^ MarkSector(vol: Files.Volume; sec: LONGINT); 
	PROCEDURE ^ FreeSector(vol: Files.Volume; sec: LONGINT); 
	PROCEDURE ^ Marked(vol: Files.Volume; sec: LONGINT): BOOLEAN; 
	PROCEDURE ^ Match*(mask, name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ enumerate(fs: Files.FileSystem; VAR mask: ARRAY OF CHAR; dpg: DiskAdr; flags: SET; enum: Files.Enumerator; VAR continue: BOOLEAN; VAR fh: FileHeader; VAR fn: ARRAY OF CHAR); 
	PROCEDURE ^ Check(VAR s: ARRAY OF CHAR; VAR name: FileName; VAR res: WORD); 
	PROCEDURE ^ UpdateHeader(f: File; VAR h: FileHeader); 
	PROCEDURE ^ ReadBuf(f: File; buf: Buffer; pos: LONGINT); 
	PROCEDURE ^ NewSuper(f: File); 
	PROCEDURE ^ WriteBuf(f: File; buf: Buffer); 
	PROCEDURE ^ SearchBuf(f: File; pos: LONGINT): Buffer; 
	PROCEDURE ^ GetBuf(f: File; pos: LONGINT): Buffer; 
	PROCEDURE ^ Unbuffer(f: File); 
	PROCEDURE ^ NewSub(f: File); 
	PROCEDURE ^ NewFS*(context: Files.Parameters); 
	PROCEDURE ^ Cleanup; 
BEGIN
END DiskFS.
