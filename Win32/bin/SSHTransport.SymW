MODULE SSHTransport;
	IMPORT TCP, IP, DNS, Out := KernelLog, Ciphers := CryptoCiphers, B := CryptoBigNumbers, DH := CryptoDiffieHellman, HMAC := CryptoHMAC, SHA1 := CryptoSHA1, U := CryptoUtils, G := SSHGlobals, SSHKeys;
CONST 
	ClientVersion = \"SSH-2.0-A2 SSH-1.7"\; 
	SSHport = 22; 
	KEXAlgorythms = \"diffie-hellman-group14-sha1,diffie-hellman-group1-sha1,diffie-hellman-group-exchange-sha1"\; 
	SHKAlgorythms = \"ssh-rsa,ssh-dss"\; 
	ComprAlgorythms = \"none"\; 
	Languages = \""\; 
	CR = 0DX; 
	NL = 0AX; 
	Disconn = 1X; 
	Ignore = 2X; 
	Unimpl = 3X; 
	Debug = 4X; 
	ServiceRequest = 5X; 
	ServiceAccept = 6X; 
	KEXInit = 14X; 
	NewKeys = 15X; 
	Closed* = 0; 
	Connected* = 1; 
	Keyexchange* = 2; 
TYPE 
	Key = ARRAY 20 OF CHAR; 

	Connection* = OBJECT 
	TYPE 
		; 
	VAR 
		state-: SHORTINT; 
		tcp: TCP.Connection; 
		servername: ARRAY 128 OF CHAR; 
		cvers, svers: ARRAY 260 OF CHAR; 
		sessionId-, hash: Key; 
		secret: ARRAY 1024 OF CHAR; 
		incount, outcount: LONGINT; 
		inhkey, outhkey: Key; 
		incipher, outcipher: Ciphers.Cipher; 
		inmac, outmac: HMAC.HMac; 
		inmaclen, outmaclen: LONGINT; 
		new: RECORD 
			incipher, outcipher: Ciphers.Cipher; 
			inkeybits, outkeybits: LONGINT; 
			inmode, outmode: SHORTINT; 
			inmac, outmac: HMAC.HMac; 
			inmaclen, outmaclen: LONGINT; 
		END; 
		cipherList, hmacList: ARRAY 1024 OF CHAR; 
		clientChannelNo: LONGINT; 

		PROCEDURE ^  & Open*(CONST hostname: ARRAY OF CHAR); 
		PROCEDURE ^ ReceiveServerVersion(): BOOLEAN; 
		PROCEDURE ^ SendClientVersion; 
		PROCEDURE ^ SendPacket*(p: Packet); 
		PROCEDURE ^ ReceivePacket*(VAR buf: ARRAY OF CHAR; VAR size: SIZE): CHAR; 
		PROCEDURE ^ SendDebug*; 
		PROCEDURE ^ Disconnect*(reason: SHORTINT; CONST msg: ARRAY OF CHAR); 
		PROCEDURE ^ GetChannelNo*(): LONGINT; 
		PROCEDURE ^ PacketAvailable*(): BOOLEAN; 
		PROCEDURE ^ NegotiateAlgorythms; 
		PROCEDURE ^ ClientAlgorythms(): Packet; 
		PROCEDURE ^ Group1(sha1: SHA1.Hash); 
		PROCEDURE ^ Group14(sha1: SHA1.Hash); 
		PROCEDURE ^ CheckSHK(CONST buf: ARRAY OF CHAR; shk, sig: SIZE); 
		PROCEDURE ^ GroupExchange(sha1: SHA1.Hash); 
		PROCEDURE ^ ActivateNewKeys; 
		PROCEDURE ^ DeriveKey(keykind: CHAR; keylen: LONGINT; VAR key: ARRAY OF CHAR); 
	END Connection; 

	Packet* = OBJECT 
	VAR 
		buf-: POINTER TO ARRAY OF CHAR; 
		len-: SIZE; 

		PROCEDURE ^  & Init*(type: CHAR; size: SIZE); 
		PROCEDURE ^ AppChar*(c: CHAR); 
		PROCEDURE ^ AppInteger*(v: LONGINT); 
		PROCEDURE ^ AppString*(CONST str: ARRAY OF CHAR); 
		PROCEDURE ^ AppArray*(CONST arr: ARRAY OF CHAR; pos, arrlen: SIZE); 
	END Packet; 
VAR 
	hexd: ARRAY 17 OF CHAR; 

	PROCEDURE ^ Int2Chars(v: LONGINT; VAR buf: ARRAY OF CHAR); 
	PROCEDURE ^ Head(CONST buf, s: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ ReceiveLine(tcp: TCP.Connection; VAR buf: ARRAY OF CHAR): SIZE; 
	PROCEDURE ^ algoMatch(CONST cstr, sstr: ARRAY OF CHAR; VAR match: ARRAY OF CHAR); 
BEGIN
END SSHTransport.
