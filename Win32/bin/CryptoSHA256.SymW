MODULE CryptoSHA256;
	IMPORT S := SYSTEM, Hashes := CryptoHashes, U := CryptoUtils;
CONST 
	BlockSize = 64; 
TYPE 
	Hash* = OBJECT (Hashes.Hash)
	VAR 
		hash: ARRAY 8 OF LONGINT; 
		Nl, Nh: LONGINT; 
		cdata: ARRAY BlockSize OF CHAR; 
		cn: LONGINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Initialize*; 
		PROCEDURE ^ HashBlock(CONST buf: ARRAY OF CHAR; pos: LONGINT); 
		PROCEDURE ^ HashContextBlock; 
		PROCEDURE ^ Update*(CONST data: ARRAY OF CHAR; pos, len: LONGINT); 
		PROCEDURE ^ GetHash*(VAR buf: ARRAY OF CHAR; pos: LONGINT); 
	END Hash; 
VAR 
	K256: ARRAY 64 OF LONGINT; 

	PROCEDURE ^ NewHash*(): Hashes.Hash; 
	PROCEDURE  - Sigma0Maj(px, py, pz: LONGINT): LONGINT;
	VAR 
		x, y, z, a, b: SET32; 
	BEGIN
		x := S.VAL(SET32, px); 
		y := S.VAL(SET32, py); 
		z := S.VAL(SET32, pz); 
		a := ((ROT(x, 30) / ROT(x, 19)) / ROT(x, 10)); 
		b := (((x * y) / (x * z)) / (y * z)); 
		RETURN (S.VAL(LONGINT, a) + S.VAL(LONGINT, b))
	END Sigma0Maj; 
	PROCEDURE  - Sigma1Ch(px, py, pz: LONGINT): LONGINT;
	VAR 
		x, y, z, a, b: SET32; 
	BEGIN
		x := S.VAL(SET32, px); 
		y := S.VAL(SET32, py); 
		z := S.VAL(SET32, pz); 
		a := ((ROT(x, 26) / ROT(x, 21)) / ROT(x, 7)); 
		b := ((x * y) / ( -x * z)); 
		RETURN (S.VAL(LONGINT, a) + S.VAL(LONGINT, b))
	END Sigma1Ch; 
	PROCEDURE  - sigma0(px: LONGINT): LONGINT;
	VAR 
		x: SET32; 
	BEGIN
		x := S.VAL(SET32, px); 
		RETURN S.VAL(LONGINT, ((ROT(x, 25) / ROT(x, 14)) / LSH(x,  -3)))
	END sigma0; 
	PROCEDURE  - sigma1(px: LONGINT): LONGINT;
	VAR 
		x: SET32; 
	BEGIN
		x := S.VAL(SET32, px); 
		RETURN S.VAL(LONGINT, ((ROT(x, 15) / ROT(x, 13)) / LSH(x,  -10)))
	END sigma1; 
	PROCEDURE ^ InitializeK; 
BEGIN
END CryptoSHA256.
