MODULE WMBuilderTransformer;
	IMPORT KernelLog, Modules, Streams, Commands, Options, Strings, Files, XML, XMLObjects, Repositories, UTF8Strings, Texts, TextUtilities, WMRectangles, WMGraphics, WMProperties, WMComponents;
CONST 
	TAB = 9X; 
	VariableDeclarationIndent = 2; 
	CreateFormIndent = 3; 
	HandlersWiringIndent = 3; 
	HandlersIndent = 2; 
	DefaultBaseName = \"TemplateMultiInstanceBase.txt"\; 
	DefaultSkeletonName = \"TemplateMultiInstance.txt"\; 
	FileSuffixBase = \"Base"\; 
	FileExtension = \".Mod"\; 
TYPE 
	Identifier = ARRAY 64 OF CHAR; 

	ComponentIdentifier = RECORD 
		name: Identifier; 
		component: ANY; 
	END; 

	IdentifierArray = POINTER TO ARRAY OF ComponentIdentifier; 

	VariableDeclaration = OBJECT 
	VAR 
		moduleName, typeName: Modules.Name; 
		identifiers: IdentifierArray; 
		nofIdentifiers: SIZE; 
		next: VariableDeclaration; 

		PROCEDURE ^  & Init(CONST moduleName, typeName: Modules.Name); 
		PROCEDURE ^ AddIdentifier(CONST ident: Identifier); 
		PROCEDURE ^ ToStream(w: Streams.Writer); 
		PROCEDURE ^ Resize; 
	END VariableDeclaration; 

	VariableDeclarations = OBJECT 
	VAR 
		variables: VariableDeclaration; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Add(CONST identifier: Identifier; CONST moduleName, typeName: Modules.Name; component: ANY); 
		PROCEDURE ^ FindByType(CONST moduleName, typeName: Modules.Name): VariableDeclaration; 
		PROCEDURE ^ ToStream(w: Streams.Writer); 
	END VariableDeclarations; 

	ImportList = OBJECT 
	VAR 
		imports: ARRAY 128 OF Modules.Name; 
		nofImports: SIZE; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ IndexOf(CONST import: Modules.Name): SIZE; 
		PROCEDURE ^ Add(CONST moduleName: Modules.Name); 
		PROCEDURE ^ ToStream(w: Streams.Writer); 
	END ImportList; 

	Names = OBJECT 
	VAR 
		names: IdentifierArray; 
		nofNames: SIZE; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Add(CONST name: ARRAY OF CHAR; component: ANY); 
		PROCEDURE ^ IndexOf(CONST identifier: ARRAY OF CHAR): SIZE; 
		PROCEDURE ^ GetNameOf(component: ANY; VAR name: ARRAY OF CHAR); 
		PROCEDURE ^ GenerateIdentifier(caption: ARRAY OF CHAR; CONST moduleName, typeName: ARRAY OF CHAR; component: ANY): Identifier; 
		PROCEDURE ^ Resize; 
	END Names; 

	Transformer = OBJECT 
	VAR 
		names: Names; 
		declarations: VariableDeclarations; 
		importList: ImportList; 
		variableDecl: Strings.Buffer; 
		variableDeclWriter: Streams.Writer; 
		createForm: Strings.Buffer; 
		createFormWriter: Streams.Writer; 
		handlersWiring: Strings.Buffer; 
		handlersWiringWriter: Streams.Writer; 
		handlers: Strings.Buffer; 
		handlersWriter: Streams.Writer; 
		imports: Strings.Buffer; 
		importsWriter: Streams.Writer; 
		createFormReturnIdent: Identifier; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Transform(component, parent: WMComponents.Component; VAR res: INTEGER); 
		PROCEDURE ^ GenerateCode(CONST targetName, templateName, skeletonName, moduleName: ARRAY OF CHAR; VAR res: INTEGER); 
		PROCEDURE ^ ApplyBase(text: Texts.Text; CONST moduleName: ARRAY OF CHAR; VAR res: INTEGER); 
		PROCEDURE ^ ApplySkeleton(text: Texts.Text; CONST moduleName: ARRAY OF CHAR; VAR res: INTEGER); 
	END Transformer; 

	PROCEDURE ^ GetUCS32String(string: Strings.String): Texts.PUCS32String; 
	PROCEDURE ^ Replace(CONST pattern: ARRAY OF CHAR; by: Strings.Buffer; text: Texts.Text; VAR error: BOOLEAN); 
	PROCEDURE ^ ReplaceString(CONST string, by: ARRAY OF CHAR; text: Texts.Text; VAR error: BOOLEAN); 
	PROCEDURE ^ AlignmentToStream(alignment: SIGNED32; w: Streams.Writer); 
	PROCEDURE ^ GetPropertyNameAsString(property: WMProperties.Property; VAR value: ARRAY OF CHAR); 
	PROCEDURE ^ Indent(writer: Streams.Writer; level: SIGNED32); 
	PROCEDURE ^ TypeToSuffix(CONST moduleName, typeName: ARRAY OF CHAR; VAR suffix: ARRAY OF CHAR); 
	PROCEDURE ^ GetTypeAsString(component: Repositories.Component; VAR typeString: ARRAY OF CHAR); 
	PROCEDURE ^ TransformComponent*(component: WMComponents.Component; CONST base, skeleton, fileName, moduleName: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ Transform*(context: Commands.Context); 
BEGIN
END WMBuilderTransformer.
