MODULE ADVAPI32;
	IMPORT SYSTEM, Kernel32, Modules, KernelLog;
CONST 
	HKEYClassesRoot* = SIGNED32(2147483648); 
	HKEYCurrentUser* = SIGNED32(2147483649); 
	RegNone* = 0; 
	RegSZ* = 1; 
	KeyQueryValue* = 0; 
	KeySetValue* = 1; 
	KeyCreateSubKey* = 2; 
	KeyEnumerateSubKeys* = 3; 
	KeyAllAccess* = {19, 18, 17, 16, 5, 4, 3, 2, 1, 0}; 
	RegOptionNonVolatile* = {}; 
	Success* = 0; 
	ErrorMoreData* = 234; 
	SC_MANAGER_CREATE_SERVICE* = 2; 
	SC_MANAGER_ALL_ACCESS* = 983103; 
	SERVICE_ALL_ACCESS* = 983551; 
	SERVICE_WIN32_OWN_PROCESS* = 16; 
	SERVICE_AUTO_START* = 2; 
	SERVICE_ERROR_NORMAL* = 1; 
	SERVICE_WIN32* = 48; 
	SERVICE_START_PENDING* = 2; 
	SERVICE_ACCEPT_STOP* = 1; 
	SERVICE_ACCEPT_SHUTDOWN* = 4; 
	SERVICE_RUNNING* = 4; 
	SERVICE_CONTROL_STOP* = 1; 
	SERVICE_CONTROL_SHUTDOWN* = 5; 
	SERVICE_STOPPED* = 1; 
TYPE 
	HKEY* = ADDRESS; 

	LPSTR* = ADDRESS; 

	LPCSTR* = ARRAY OF CHAR; 

	HWND* = Kernel32.HANDLE; 

	HINSTANCE* = Kernel32.HINSTANCE; 

	INT* = SIGNED32; 

	LPCTSTR* = LPCSTR; 

	SC_HANDLE* = Kernel32.HANDLE; 

	DWORD* = SIGNED32; 

	LPDWORD* = ADDRESS; 

	BOOL* = Kernel32.BOOL; 

	LPSERVICE_MAIN_FUNCTIONA = PROCEDURE {WINAPI}(dwNumServicesArgs: DWORD; VAR lpServiceArgVectors: ARRAY OF CHAR):BOOL; 

	LPSERVICE_MAIN_FUNCTION* = LPSERVICE_MAIN_FUNCTIONA; 

	SERVICE_TABLE_ENTRYA = RECORD 
		lpServiceName*: LPSTR; 
		lpServiceProc*: LPSERVICE_MAIN_FUNCTIONA; 
	END; 

	SERVICE_TABLE_ENTRY* = SERVICE_TABLE_ENTRYA; 

	LPHANDLER_FUNCTION* = PROCEDURE {WINAPI}(dwControl: DWORD); 

	SERVICE_STATUS_HANDLE* = Kernel32.HANDLE; 

	SERVICE_STATUS* = RECORD 
		dwServiceType*, dwCurrentState*, dwControlsAccepted*, dwWin32ExitCode*, dwServiceSpecificExitCode*, dwCheckPoint*, dwWaitHint*: DWORD; 
	END; 
VAR 
	GetUserName-: PROCEDURE {WINAPI}(VAR lpBuffer: ARRAY OF CHAR; VAR nSize: SIGNED32):Kernel32.BOOL; 
	RegCloseKey-: PROCEDURE {WINAPI}(hKey: HKEY):SIGNED32; 
	RegCreateKeyEx-: PROCEDURE {WINAPI}(hKey: HKEY; lpSubKey: ARRAY OF CHAR; Reserved: SIGNED32; lpClass: ARRAY OF CHAR; dwOptions, samDesired: SET; lpSecurityAttributes: ANY ; VAR phkResult: HKEY; VAR lpdwDisposition: SIGNED32):SIGNED32; 
	RegDeleteKey-: PROCEDURE {WINAPI}(hKey: HKEY; lpSubKey: ARRAY OF CHAR):SIGNED32; 
	RegDeleteValue-: PROCEDURE {WINAPI}(hKey: HKEY; lpValueName: ARRAY OF CHAR):SIGNED32; 
	RegEnumKeyEx-: PROCEDURE {WINAPI}(hKey: HKEY; dwIndex: SIGNED32; VAR lpName: ARRAY OF CHAR; VAR lpcbName: SIGNED32; VAR lpReserved: SIGNED32; VAR lpClass: ARRAY OF CHAR; VAR lpcbClass: SIGNED32; VAR lpftLastWriteTime: Kernel32.FileTime):SIGNED32; 
	RegEnumValue-: PROCEDURE {WINAPI}(hKey: HKEY; dwIndex: SIGNED32; VAR lpValueName: ARRAY OF CHAR; VAR lpcbValueName: SIGNED32; VAR lpReserved, type: SIGNED32; VAR lpData: ARRAY OF SYSTEM.BYTE; VAR lpcbData: SIGNED32):SIGNED32; 
	RegOpenKeyEx-: PROCEDURE {WINAPI}(hKey: HKEY; lpSubKey: ARRAY OF CHAR; ulOptions: SIGNED32; samDesired: SET; VAR phkResult: HKEY):SIGNED32; 
	RegQueryValueEx-: PROCEDURE {WINAPI}(hKey: HKEY; lpValueName: ARRAY OF CHAR; VAR lpReserved, lpType: SIGNED32; VAR lpData: ARRAY OF SYSTEM.BYTE; VAR lpcbData: SIGNED32):SIGNED32; 
	RegSetValueEx-: PROCEDURE {WINAPI}(hKey: HKEY; lpValueName: ARRAY OF CHAR; Reserved, dwType: SIGNED32; VAR lpData: ARRAY OF SYSTEM.BYTE; cbData: SIGNED32):SIGNED32; 
	GetFileVersionInfo-: PROCEDURE {WINAPI}(lpstrFilename: ARRAY OF CHAR; dwHandle, dwLen: SIGNED32; VAR lpDate: ARRAY OF SYSTEM.BYTE):Kernel32.BOOL; 
	GetFileVersionInfoSize-: PROCEDURE {WINAPI}(lpstrFilename: ARRAY OF CHAR; VAR lpdwHandle: SIGNED32):SIGNED32; 
	VerQueryValue-: PROCEDURE {WINAPI}(pBlock: ARRAY OF SYSTEM.BYTE; lpSubBlock: ARRAY OF CHAR; VAR lplpBuffer: ADDRESS; VAR puLen: SIGNED32):Kernel32.BOOL; 
	CloseServiceHandle-: PROCEDURE {WINAPI}(hSCObject: SC_HANDLE):BOOL; 
	CreateService-: PROCEDURE {WINAPI}(hSCManager: SC_HANDLE; VAR lpServiceName, lpDisplayName: LPCTSTR; dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl: DWORD; VAR lpBinaryPathName, lpLoadOrderGroup: LPCTSTR; lpdwTagId: LPDWORD; VAR lpDependencies, lpServiceStartName, lpPassword: LPCTSTR):SC_HANDLE; 
	DeleteService-: PROCEDURE {WINAPI}(hService: SC_HANDLE):BOOL; 
	OpenSCManager-: PROCEDURE {WINAPI}(VAR lpMachineName, lpDatabaseName: LPCTSTR; dwDesiredAccess: DWORD):SC_HANDLE; 
	OpenService-: PROCEDURE {WINAPI}(hSCManager: SC_HANDLE; VAR lpServiceName: LPCTSTR; dwDesiredAccess: DWORD):SC_HANDLE; 
	RegisterServiceCtrlHandler-: PROCEDURE {WINAPI}(VAR lpServiceName: ARRAY OF CHAR; lpHandlerProc: LPHANDLER_FUNCTION):SERVICE_STATUS_HANDLE; 
	SetServiceStatus-: PROCEDURE {WINAPI}(hServiceStatus: SERVICE_STATUS_HANDLE; VAR lpServiceStatus: SERVICE_STATUS):BOOL; 
	StartService-: PROCEDURE {WINAPI}(hService: SC_HANDLE; dwNumServiceArgs: DWORD; VAR lpServiceArgVectors: LPCTSTR):BOOL; 
	StartServiceCtrlDispatcher-: PROCEDURE {WINAPI}(VAR lpServiceTable: ARRAY OF SYSTEM.BYTE):BOOL; 
	advapi32: Kernel32.HMODULE; 

	PROCEDURE ^ InstallService*(srvName, serviceDesc, exeFile: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ UninstallService*(srvName: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ OutError*(funcName: ARRAY OF CHAR): SIGNED32; 
	PROCEDURE ^ TermMod; 
	PROCEDURE ^ GetProcAddress(hModule: ADDRESS; VAR adr: ADDRESS; procName: ARRAY OF CHAR); 
	PROCEDURE ^ Init; 
BEGIN
END ADVAPI32.
