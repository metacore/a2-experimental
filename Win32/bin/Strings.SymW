MODULE Strings;
	IMPORT Streams, Dates, RC := RealConversions;
CONST 
	Ok* = 0; 
TYPE 
	String* = POINTER TO ARRAY OF CHAR; 

	StringArray* = POINTER TO ARRAY OF String; 

	Buffer* = OBJECT 
	VAR 
		length: LONGINT; 
		data: String; 
		w: Streams.Writer; 

		PROCEDURE ^  & Init*(initialSize: SIZE); 
		PROCEDURE ^ Add*(CONST buf: ARRAY OF CHAR; ofs, len: LONGINT; propagate: BOOLEAN; VAR res: WORD); 
		PROCEDURE ^ Clear*; 
		PROCEDURE ^ GetWriter*(): Streams.Writer; 
		PROCEDURE ^ GetLength*(): LONGINT; 
		PROCEDURE ^ GetString*(): String; 
		PROCEDURE ^ Write*(out: Streams.Writer); 
	END Buffer; 
VAR 
	DateFormat*, TimeFormat*: ARRAY 32 OF CHAR; 

	OPERATOR ^ "+"-(a: String; CONST b: ARRAY OF CHAR): String; 
	OPERATOR ^ "+"-(a: String; b: CHAR): String; 
	OPERATOR ^ "+"-(a, b: String): String; 
	OPERATOR ^ "+"-(a: String; b: HUGEINT): String; 
	OPERATOR ^ "+"-(a: String; b: LONGREAL): String; 
	PROCEDURE ^ Length*(CONST string: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ Find*(CONST string: ARRAY OF CHAR; pos: SIZE; ch: CHAR): SIZE; 
	PROCEDURE ^ Count*(CONST string: ARRAY OF CHAR; ch: CHAR): SIZE; 
	PROCEDURE ^ Truncate*(VAR string: ARRAY OF CHAR; length: SIZE); 
	PROCEDURE ^ Pos*(CONST pattern, string: ARRAY OF CHAR): SIZE; 
	PROCEDURE ^ GenericPos*(CONST pattern: ARRAY OF CHAR; from: SIZE; CONST string: ARRAY OF CHAR; ignoreCase, backwards: BOOLEAN): SIZE; 
	PROCEDURE ^ Match*(CONST mask, name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ Move*(CONST src: ARRAY OF CHAR; soff, len: SIZE; VAR dst: ARRAY OF CHAR; doff: SIZE); 
	PROCEDURE ^ Concat*(CONST s1, s2: ARRAY OF CHAR; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ ConcatX*(CONST s1, s2: ARRAY OF CHAR; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ Append*(VAR s: ARRAY OF CHAR; CONST appendix: ARRAY OF CHAR); 
	PROCEDURE ^ AppendX*(VAR s: ARRAY OF CHAR; CONST appendix: ARRAY OF CHAR); 
	PROCEDURE ^ AppendInt*(VAR s: ARRAY OF CHAR; num: HUGEINT); 
	PROCEDURE ^ AppendChar*(VAR s: ARRAY OF CHAR; ch: CHAR); 
	PROCEDURE ^ Copy*(CONST src: ARRAY OF CHAR; index, len: SIZE; VAR dst: ARRAY OF CHAR); 
	PROCEDURE ^ Delete*(VAR s: ARRAY OF CHAR; index, count: SIZE); 
	PROCEDURE ^ Insert*(CONST src: ARRAY OF CHAR; VAR dst: ARRAY OF CHAR; index: SIZE); 
	PROCEDURE ^ TrimLeft*(VAR string: ARRAY OF CHAR; c: CHAR); 
	PROCEDURE ^ TrimRight*(VAR string: ARRAY OF CHAR; c: CHAR); 
	PROCEDURE ^ Trim*(VAR string: ARRAY OF CHAR; c: CHAR); 
	PROCEDURE ^ Split*(CONST string: ARRAY OF CHAR; separator: CHAR): StringArray; 
	PROCEDURE ^ Join*(CONST strings: StringArray; startIndex, endIndex: SIZE; separator: CHAR): String; 
	PROCEDURE ^ LOW*(ch: CHAR): CHAR; 
	PROCEDURE ^ LowerCase*(VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ UP*(ch: CHAR): CHAR; 
	PROCEDURE ^ UpperCaseChar*(VAR ch: CHAR); 
	PROCEDURE ^ UpperCase*(VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ IsPrintable*(ch: CHAR): BOOLEAN; 
	PROCEDURE ^ BoolToStr*(b: BOOLEAN; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ StrToBool*(CONST s: ARRAY OF CHAR; VAR b: BOOLEAN); 
	PROCEDURE ^ IntToStr*(x: HUGEINT; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ StrToInt*(CONST str: ARRAY OF CHAR; VAR val: LONGINT); 
	PROCEDURE ^ StrToIntPos*(CONST str: ARRAY OF CHAR; VAR val: LONGINT; VAR i: SIZE); 
	PROCEDURE ^ IntToHexStr*(h: HUGEINT; width: WORD; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ HexStrToInt*(CONST string: ARRAY OF CHAR; VAR val: LONGINT; VAR res: WORD); 
	PROCEDURE ^ FloatToStr*(x: LONGREAL; n, f, D: LONGINT; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ AddressToStr*(adr: ADDRESS; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ StrToFloat*(CONST s: ARRAY OF CHAR; VAR r: LONGREAL); 
	PROCEDURE ^ SetToStr*(set: SET; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ StrToSet*(CONST str: ARRAY OF CHAR; VAR set: SET); 
	PROCEDURE ^ TimeToStr*(time: Dates.DateTime; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ StrToTime*(CONST str: ARRAY OF CHAR; VAR dt: Dates.DateTime); 
	PROCEDURE ^ DateToStr*(date: Dates.DateTime; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ StrToDate*(CONST str: ARRAY OF CHAR; VAR dt: Dates.DateTime); 
	PROCEDURE ^ FormatDateTime*(CONST format: ARRAY OF CHAR; dt: Dates.DateTime; VAR result: ARRAY OF CHAR); 
	PROCEDURE ^ ShowTimeDifference*(t1, t2: Dates.DateTime; out: Streams.Writer); 
	PROCEDURE ^ NewString*(CONST str: ARRAY OF CHAR): String; 
	PROCEDURE ^ SetAOC*(CONST str: ARRAY OF CHAR; VAR s: String); 
	PROCEDURE ^ GetExtension*(CONST name: ARRAY OF CHAR; VAR file, ext: ARRAY OF CHAR); 
	PROCEDURE ^ ConcatToNew*(CONST s1, s2: ARRAY OF CHAR): String; 
	PROCEDURE ^ EndsWith*(CONST suffix, s: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ Equal*(s1, s2: String): BOOLEAN; 
	PROCEDURE ^ ContainsChar*(CONST string: ARRAY OF CHAR; ch: CHAR; ignoreCase: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ IndexOfByte2*(ch: CHAR; CONST s: ARRAY OF CHAR): SIZE; 
	PROCEDURE ^ IndexOfByte*(ch: CHAR; fromIndex: SIZE; CONST s: ARRAY OF CHAR): SIZE; 
	PROCEDURE ^ LastIndexOfByte2*(ch: CHAR; CONST s: ARRAY OF CHAR): SIZE; 
	PROCEDURE ^ LastIndexOfByte*(ch: CHAR; fromIndex: SIZE; CONST s: ARRAY OF CHAR): SIZE; 
	PROCEDURE ^ LowerCaseInNew*(CONST s: ARRAY OF CHAR): String; 
	PROCEDURE ^ StartsWith2*(CONST prefix, s: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ StartsWith*(CONST prefix: ARRAY OF CHAR; toffset: SIZE; CONST s: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ Substring2*(beginIndex: SIZE; CONST s: ARRAY OF CHAR): String; 
	PROCEDURE ^ Substring*(beginIndex: SIZE; endIndex: SIZE; CONST s: ARRAY OF CHAR): String; 
	PROCEDURE ^ TrimWS*(VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ UpperCaseInNew*(CONST s: ARRAY OF CHAR): String; 
BEGIN
END Strings.
