MODULE SVNAdmin;
	IMPORT SVNOutput, SVNUtil, Strings, Dates, Commands, Files, Kernel32, KernelLog;
CONST 
	EntryFileFormat* = 8; 
TYPE 
	EntryEntity* = RECORD 
		Format*: LONGINT; 
		Name*: ARRAY 256 OF CHAR; 
		NodeKind*: ARRAY 32 OF CHAR; 
		Revision*: LONGINT; 
		GlobalRemoval*: BOOLEAN; 
		Url*, UrlConst*: ARRAY 256 OF CHAR; 
		RepositoryRoot*: ARRAY 256 OF CHAR; 
		Schedule*: ARRAY 32 OF CHAR; 
		TextLastUpdated*: ARRAY 32 OF CHAR; 
		Checksum*: ARRAY 33 OF CHAR; 
		LastChangedDate*: ARRAY 32 OF CHAR; 
		LastChangedRevision*: LONGINT; 
		LastChangedAuthor*: ARRAY 256 OF CHAR; 
		Props*: ARRAY 256 OF CHAR; 
		RepositoryUUID*: ARRAY 37 OF CHAR; 
		VersionUrl*: ARRAY 256 OF CHAR; 
	END; 

	TraverseHandler* = PROCEDURE {DELEGATE}(CONST path: ARRAY OF CHAR; fileEntry: EntryEntity; data: ANY):BOOLEAN; 

	Entry* = OBJECT 
	VAR 
		adminDir: EntryEntity; 
		path: ARRAY 256 OF CHAR; 
		name: ARRAY 32 OF CHAR; 
		context: Commands.Context; 
		fAdmin, fAdminTemp: Files.File; 
		entriesfile, entriesfiletemp, svnpath: ARRAY 256 OF CHAR; 
		pathIsFile, readGlobalData, readFromTempfile: BOOLEAN; 
		r: Files.Reader; 
		w: Files.Writer; 
		pathLength: SIZE; 

		PROCEDURE ^  & Init*(c: Commands.Context); 
		PROCEDURE ^ ReadVersionUrl*(CONST filename: ARRAY OF CHAR); 
		PROCEDURE ^ SetPath*(CONST p: ARRAY OF CHAR; VAR res: WORD); 
		PROCEDURE ^ AnalyzePath(VAR res: WORD); 
		PROCEDURE ^ CreateTempfile*; 
		PROCEDURE ^ ReadFromTempfile*(b: BOOLEAN); 
		PROCEDURE ^ GetUrl*(VAR url: ARRAY OF CHAR); 
		PROCEDURE ^ GetRepo*(VAR repos: ARRAY OF CHAR); 
		PROCEDURE ^ GetVersion*(): LONGINT; 
		PROCEDURE ^ SkipGlobalData; 
		PROCEDURE ^ SkipReaderToEOE; 
		PROCEDURE ^ IsItemVersioned*(CONST filename: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ Add*(CONST path: ARRAY OF CHAR; CONST name: ARRAY OF CHAR; addGlobal: BOOLEAN; VAR res: WORD); 
		PROCEDURE ^ CreateDummy*(CONST path, urlRepoDir: ARRAY OF CHAR): Files.Writer; 
		PROCEDURE ^ ReadData*(VAR res: WORD); 
		PROCEDURE ^ ReadFileData(CONST name: ARRAY OF CHAR; VAR res: WORD); 
		PROCEDURE ^ PrintData*; 
		PROCEDURE ^ ReadWriteLines*(count: LONGINT); 
		PROCEDURE ^ ReadWriteLine*(VAR str: ARRAY OF CHAR); 
		PROCEDURE ^ ReadWriteRest*; 
		PROCEDURE ^ ReadWriteString*(CONST str: ARRAY OF CHAR); 
		PROCEDURE ^ ReadWriteToEOE*; 
		PROCEDURE ^ IsEOF*(): BOOLEAN; 
		PROCEDURE ^ WriteUpdate*; 
		PROCEDURE ^ ReadWriteEOE*; 
	END Entry; 

	PROCEDURE ^ WriteAddEntry*(w: Files.Writer; CONST name: ARRAY OF CHAR; file: BOOLEAN); 
	PROCEDURE ^ WriteString(w: Files.Writer; CONST line: ARRAY OF CHAR); 
	PROCEDURE ^ WriteInt(w: Files.Writer; line: LONGINT); 
	PROCEDURE ^ Write*(w: Files.Writer; data: EntryEntity); 
	PROCEDURE ^ WriteWCPROPS*(CONST path, filename, verurl: ARRAY OF CHAR); 
	PROCEDURE ^ CreateDirectory*(CONST path: ARRAY OF CHAR); 
	PROCEDURE ^ ReadChecksum*(CONST file: ARRAY OF CHAR): Strings.String; 
	PROCEDURE ^ CheckChecksum*(CONST file: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ Traverse*(CONST path: ARRAY OF CHAR; handler: TraverseHandler; data: ANY; verurl: BOOLEAN; VAR res: WORD); 
	PROCEDURE ^ CopyToBaseFile*(CONST file: ARRAY OF CHAR); 
	PROCEDURE ^ SetFileAttribute*(file: ARRAY OF CHAR); 
	PROCEDURE ^ RemoveFileAttribute*(file: ARRAY OF CHAR); 
	PROCEDURE ^ SetFileAttribute2*(file: ARRAY OF CHAR; f: Files.File); 
	PROCEDURE ^ RemoveFileAttribute2*(file: ARRAY OF CHAR; f: Files.File); 
BEGIN
END SVNAdmin.
