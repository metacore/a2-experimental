MODULE vyScanners IN Oberon;
	IMPORT Texts, vyBase, vyHost;
CONST 
	idversion* = \"vyScanner 0.0a2-1"\; 
	TAB = 9X; 
	CR = 0DX; 
	SPACE = 20X; 
	EOT = 0X; 
	maxNameLen = 256; 
	maxReserved = 65; 
	ccAny =  -1; 
	ccNOOP = 0; 
	ccDigit = 1; 
	ccAlpha = 2; 
	ccString = 3; 
	ccResStart = 5; 
	ccResSym = 6; 
	ccEOT = 7; 
	ccCR = 8; 
	ccComment = 9; 
	ctStuff* =  -1; 
	ctEOT* = 0; 
	ctId* = 1; 
	ctString* = 2; 
	ctSym* = 3; 
	ctNumber* = 4; 
	ctReal* = 5; 
	ctFixed* = 6; 
	ctNL* = 7; 
	ctComment* = 8; 
	csAny* =  -1; 
	csnull = 0; 
	csStar* = 1; 
	csSlash* = 2; 
	csDIV = 3; 
	csMOD = 4; 
	csAnd = 5; 
	csPlus* = 6; 
	csMinus* = 7; 
	csOR = 8; 
	csEq* = 9; 
	csNEq = 10; 
	csLess* = 11; 
	csLessT = 12; 
	csGreat* = 13; 
	csGreatT = 14; 
	csIN = 15; 
	csIS = 16; 
	csArrow = 17; 
	csDot* = 18; 
	csComma = 19; 
	csColon* = 20; 
	csDotDot = 21; 
	csRBrac = 22; 
	csRBrac1 = 23; 
	csRBrace = 24; 
	csOF = 25; 
	csTHEN = 26; 
	csDO = 27; 
	csTO = 28; 
	csLBrac = 29; 
	csLBrac1 = 30; 
	csLBrace = 31; 
	csNot = 32; 
	csAssign = 33; 
	csNumber = 34; 
	csNIL = 35; 
	csString = 36; 
	csIdent = 37; 
	csSemic = 38; 
	csEND = 40; 
	csELSE = 41; 
	csELSIF = 42; 
	sUNTIL = 43; 
	csIF = 44; 
	csCASE = 45; 
	csWHILE = 46; 
	csREPEAT = 47; 
	csLOOP = 48; 
	csWITH = 49; 
	csEXIT = 50; 
	csRETURN = 51; 
	csARRAY = 52; 
	csRECORD = 53; 
	csPOINTER = 54; 
	csBEGIN = 55; 
	csCONST = 56; 
	csTYPE = 57; 
	csVAR = 58; 
	csPROCEDURE = 59; 
	csIMPORT = 60; 
	csMODULE = 61; 
	csFOR = 62; 
	cseof = 63; 
	csAt = 64; 
	csExclam = 70; 
	csTicTic = 71; 
	csDollar = 72; 
	csPercent = 73; 
	csTic = 74; 
	csQuestion = 75; 
	csBackslash = 76; 
TYPE 
	tName = ARRAY maxNameLen OF CHAR; 

	tChTable = ARRAY 256 OF SIGNED8; 

	tReserved = POINTER TO tReservedTable; 

	tReservedTable = ARRAY maxReserved OF tName; 

	Scanner* = POINTER TO ScannerDesc; 

	tGetNext = PROCEDURE (VAR sc: Scanner):SIGNED16; 

	tSwitch = PROCEDURE (VAR sc: Scanner); 

	ScannerDesc* = RECORD (Texts.Reader)
		class*: SIGNED16; 
		v*: SIGNED16; 
		Switcher*: tSwitch; 
		GetNext*: tGetNext; 
		text-: Texts.Text; 
		ch-, chnext: CHAR; 
		chpos-, chnextpos: SIGNED32; 
		end: SIGNED32; 
		Start, Stop: tChTable; 
		prevScanner: Scanner; 
		curTokid: tName; 
		curTokPos-, curTokLen-: SIGNED32; 
		trailpos, traillen: SIGNED32; 
		TokDelLPos, TokDelLLen, TokDelRPos, TokDelRLen: SIGNED32; 
		minusExp: BOOLEAN; 
		ExpPos, ExpLen: SIGNED32; 
		tabcount: SIGNED32; 
	END; 
VAR 
	DefaultStart, DefaultStop: tChTable; 

	PROCEDURE ^ Dump*(VAR w: vyBase.TextsWriter; s: Scanner); 
	PROCEDURE ^ Ch*(VAR sc: Scanner); 
	PROCEDURE ^ getName(VAR sc: Scanner; pos: SIGNED32; len: SIGNED16; VAR s: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ getNumber(VAR sc: Scanner; pos: SIGNED32; len: SIGNED16; neg: BOOLEAN; VAR x: SIGNED32): BOOLEAN; 
	PROCEDURE ^ getReal(VAR sc: Scanner; pos: SIGNED32; len: SIGNED16; neg: BOOLEAN; VAR x: FLOAT32): BOOLEAN; 
	PROCEDURE ^ GetName*(VAR sc: Scanner; VAR s: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ GetNumber*(VAR sc: Scanner; neg: BOOLEAN; VAR x: SIGNED32): BOOLEAN; 
	PROCEDURE ^ GetReal*(VAR sc: Scanner; neg: BOOLEAN; VAR x: FLOAT32): BOOLEAN; 
	PROCEDURE ^ ExpectName*(VAR sc: Scanner; VAR s: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ ExpectNumber*(VAR sc: Scanner; VAR x: SIGNED32): BOOLEAN; 
	PROCEDURE ^ ExpectReal*(VAR sc: Scanner; VAR x: FLOAT32): BOOLEAN; 
	PROCEDURE ^ AddReserved(n: ARRAY OF CHAR; tok: SIGNED16; R: tReserved; VAR t: tChTable); 
	PROCEDURE ^ AddReservedSym(n: ARRAY OF CHAR; tok: SIGNED16; R: tReserved; VAR t: tChTable); 
	PROCEDURE ^ SetupDefaults; 
	PROCEDURE ^ GetCurTok(VAR sc: Scanner); 
	PROCEDURE ^ OneCh(VAR sc: Scanner); 
	PROCEDURE ^ TwoCh(VAR sc: Scanner); 
	PROCEDURE ^ Id(VAR sc: Scanner); 
	PROCEDURE ^ String(VAR sc: Scanner); 
	PROCEDURE ^ Number(VAR sc: Scanner); 
	PROCEDURE ^ Fixed(VAR sc: Scanner); 
	PROCEDURE ^ Real(VAR sc: Scanner); 
	PROCEDURE ^ NL(VAR sc: Scanner); 
	PROCEDURE ^ IsSym(VAR sc: Scanner): BOOLEAN; 
	PROCEDURE ^ Sym(VAR sc: Scanner); 
	PROCEDURE ^ IsComment(VAR sc: Scanner): BOOLEAN; 
	PROCEDURE ^ IsReserved(VAR sc: Scanner): BOOLEAN; 
	PROCEDURE ^ StopGet(VAR sc: Scanner): SIGNED16; 
	PROCEDURE ^ DefaultGetNext(VAR sc: Scanner): SIGNED16; 
	PROCEDURE ^ NewScanner*(VAR sc: Scanner); 
	PROCEDURE ^ OpenScanner*(VAR sc: Scanner; t: Texts.Text; beg, end: SIGNED32); 
	PROCEDURE ^ OpenParScanner*(VAR sc: Scanner); 
	PROCEDURE ^ OpenSelScanner*(VAR sc: Scanner); 
	PROCEDURE ^ OpenSelXScanner*(VAR sc: Scanner); 
	PROCEDURE ^ OpenMarkedScanner*(VAR sc: Scanner); 
	PROCEDURE ^ OpenNamedScanner*(VAR sc: Scanner; name: ARRAY OF CHAR); 
	PROCEDURE ^ NextToken*(VAR sc: Scanner): SIGNED16; 
	PROCEDURE ^ SuperSwitch(VAR sc: Scanner); 
	PROCEDURE ^ SwitchBack*(VAR sc: Scanner); 
	PROCEDURE ^ NewSScanner*(VAR sc: Scanner); 
BEGIN
END vyScanners.
