MODULE antsFilters IN Oberon;
	IMPORT antsFunctions, antsCommands, vyBase, Objects, antsSecurity, antsArrayObjects, vyName, antsPlots, antsNeighbourhoods, Math := MathL IN A2, vyRandom, vyLongreal, Files, Gadgets, antsObjects, antsToolbox, Attributes, Strings, vyInteger, aM := antsMessages;
CONST 
	mean = 0; 
	median = 1; 
	inf = 2; 
	sup = 3; 
TYPE 
	tFilter* = POINTER TO tFilterDesc; 

	tFilterDesc* = RECORD (vyBase.ObjDesc)
		weights: antsNeighbourhoods.Neighbours; 
		fct: antsFunctions.Function; 
		type: SIGNED16; 
	END; 

	PROCEDURE ^ HandleFileMsg(obj: tFilter; VAR msg: Objects.FileMsg); 
	PROCEDURE ^ HandleLinks(obj: tFilter; VAR msg: Objects.LinkMsg); 
	PROCEDURE ^ HandleAttributes(obj: tFilter; VAR msg: Objects.AttrMsg); 
	PROCEDURE ^ Handler*(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ Gen*; 
	PROCEDURE ^ New*; 
	PROCEDURE ^ ksmallest(VAR a: ARRAY OF FLOAT64; n, k: SIGNED32): FLOAT64; 
	PROCEDURE ^ Median(VAR a: ARRAY OF FLOAT64; n: SIGNED32): FLOAT64; 
	PROCEDURE ^ WeightsToMedian(filter: tFilter); 
	PROCEDURE ^ ApplyFilter(A: antsArrayObjects.tINTEGERArray; VAR res: antsArrayObjects.tINTEGERArray; filter: tFilter); 
	PROCEDURE ^ MinMax(VAR S: ARRAY OF ARRAY OF SIGNED16; VAR min, max: SIGNED16); 
	PROCEDURE ^ Rescale*(A: antsArrayObjects.tINTEGERArray; VAR depth: SIGNED32); 
	PROCEDURE ^ ApplyFilters(A: antsArrayObjects.tINTEGERArray; VAR res: antsArrayObjects.tINTEGERArray; filter: tFilter; VAR depth: SIGNED32; VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ Apply*; 
	PROCEDURE ^ Constant*; 
	PROCEDURE ^ DoApplyFunction(f: tFilter); 
	PROCEDURE ^ ApplyFunction*; 
	PROCEDURE ^ dist(n: antsNeighbourhoods.Neighbours; pos: SIGNED32; VAR xd, yd: SIGNED32); 
	PROCEDURE ^ Inverse*; 
BEGIN
END antsFilters.
