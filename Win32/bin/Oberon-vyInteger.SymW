MODULE vyInteger IN Oberon;
	IMPORT Files, vyBase;
CONST 
	idversion* = \" v0r0a3"\; 
	fmtany* = 0; 
	fmtend* = 0; 
	fmtplain* = 1; 
	fmtpacked* = 2; 
TYPE 
	int = SIGNED16; 

	index = SIGNED32; 

	PROCEDURE ^ Write*(VAR R: Files.Rider; count: index; VAR x: ARRAY OF int; start: index); 
	PROCEDURE ^ Read*(VAR R: Files.Rider; count: index; VAR x: ARRAY OF int; start: index); 
	PROCEDURE ^ WriteFmt*(prefform: SIGNED32; VAR R: Files.Rider; count: index; VAR x: ARRAY OF int; start: index); 
	PROCEDURE ^ ReadFmt*(VAR form: SIGNED32; VAR R: Files.Rider; count: index; VAR x: ARRAY OF int; start: index); 
	PROCEDURE ^ Fill*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; start: SIGNED32; val: SIGNED16); 
	PROCEDURE ^ FillPat*(count: SIGNED32; VAR x: ARRAY OF SIGNED16; start, step: SIGNED32; val: SIGNED16); 
	PROCEDURE ^ Copy*(len: SIGNED32; VAR src: ARRAY OF SIGNED16; srcstart: SIGNED32; VAR dest: ARRAY OF SIGNED16; deststart: SIGNED32); 
	PROCEDURE ^ CopyPat*(count: SIGNED32; VAR src: ARRAY OF SIGNED16; start, step: SIGNED32; VAR dest: ARRAY OF SIGNED16; deststart, deststep: SIGNED32); 
	PROCEDURE ^ Min*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; start: SIGNED32; VAR minpos: SIGNED32): SIGNED16; 
	PROCEDURE ^ Max*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; start: SIGNED32; VAR maxpos: SIGNED32): SIGNED16; 
	PROCEDURE ^ MinMax*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; start: SIGNED32; VAR min: SIGNED16; VAR minpos: SIGNED32; VAR max: SIGNED16; VAR maxpos: SIGNED32; VAR nans: SIGNED32); 
	PROCEDURE ^ sort5*(VAR data: ARRAY OF SIGNED16; start: SIGNED32); 
	PROCEDURE ^ Sort5*(VAR data: ARRAY OF SIGNED16; start: SIGNED32); 
	PROCEDURE ^ Sort*(count: SIGNED32; VAR x: ARRAY OF SIGNED16; start: SIGNED32); 
	PROCEDURE ^ MergeSort*(count: SIGNED32; VAR x: ARRAY OF SIGNED16; start: SIGNED32); 
	PROCEDURE ^ SortIndexed*(count: SIGNED32; VAR data: ARRAY OF SIGNED16; start: SIGNED32; VAR index: ARRAY OF SIGNED32); 
	PROCEDURE ^ Order*(count: index; x: ARRAY OF int; start: index; ith: index): int; 
	PROCEDURE ^ Summary*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; start: SIGNED32; VAR min, max: SIGNED16; VAR mean, ssq: FLOAT64); 
	PROCEDURE ^ MeanSSq*(len: SIGNED32; VAR x: ARRAY OF int; start: SIGNED32; VAR mean, ssq: FLOAT64; VAR nans: SIGNED32); 
	PROCEDURE ^ Abs*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; start: SIGNED32); 
	PROCEDURE ^ AddConst*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; start: SIGNED32; y: SIGNED16); 
	PROCEDURE ^ AddConstPat*(count: index; VAR x: ARRAY OF int; start, step: index; y: int); 
	PROCEDURE ^ SubConst*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; start: SIGNED32; y: SIGNED16); 
	PROCEDURE ^ SubConstPat*(count: index; VAR x: ARRAY OF int; start, step: index; y: int); 
	PROCEDURE ^ MulConst*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; start: SIGNED32; y: SIGNED16); 
	PROCEDURE ^ MulConstPat*(count: index; VAR x: ARRAY OF int; start, step: index; fact: int); 
	PROCEDURE ^ DivConst*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; start: SIGNED32; y: SIGNED16); 
	PROCEDURE ^ DivConstPat*(count: index; VAR x: ARRAY OF int; start, step: index; y: int); 
	PROCEDURE ^ ModConst*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; start: SIGNED32; y: SIGNED16); 
	PROCEDURE ^ ModConstPat*(count: index; VAR x: ARRAY OF int; start, step: index; y: int); 
	PROCEDURE ^ Add*(VAR x, y: ARRAY OF SIGNED16; VAR z: ARRAY OF SIGNED16; len: SIGNED32); 
	PROCEDURE ^ Sub*(VAR x, y: ARRAY OF SIGNED16; VAR z: ARRAY OF SIGNED16; len: SIGNED32); 
	PROCEDURE ^ Mul*(VAR x, y: ARRAY OF SIGNED16; VAR z: ARRAY OF SIGNED16; len: SIGNED32); 
	PROCEDURE ^ Div*(VAR x, y: ARRAY OF SIGNED16; VAR z: ARRAY OF SIGNED16; len: SIGNED32); 
	PROCEDURE ^ SSQxy*(VAR x, y: ARRAY OF SIGNED16; mx, my: FLOAT64; len: SIGNED32): FLOAT64; 
	PROCEDURE ^ Get2d*(VAR x: ARRAY OF SIGNED16; rows, row, column: SIGNED32): SIGNED16; 
	PROCEDURE ^ Set2d*(VAR x: ARRAY OF SIGNED16; rows, row, column: SIGNED32; val: SIGNED16); 
	PROCEDURE ^ Get2dM*(VAR x: ARRAY OF SIGNED16; rowoffset, coloffset, nrrows, nrcolumns: SIGNED32; VAR dest: ARRAY OF ARRAY OF SIGNED16); 
	PROCEDURE ^ Set2dM*(VAR x: ARRAY OF SIGNED16; rowoffset, coloffset, nrrows, nrcolumns: SIGNED32; VAR src: ARRAY OF ARRAY OF SIGNED16); 
	PROCEDURE ^ Get2dF*(VAR x: ARRAY OF SIGNED16; columns, row, column: SIGNED32): SIGNED16; 
	PROCEDURE ^ Set2dF*(VAR x: ARRAY OF SIGNED16; columns, row, column: SIGNED32; val: SIGNED16); 
	PROCEDURE ^ SkalProd*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; xstart: SIGNED32; VAR y: ARRAY OF SIGNED16; ystart: SIGNED32): SIGNED32; 
	PROCEDURE ^ SkalProdPat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index; VAR y: ARRAY OF int; ystart, ystep: index): index; 
	PROCEDURE ^ Norm2Sq*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; xstart: SIGNED32): SIGNED32; 
	PROCEDURE ^ Norm2SqPat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index): index; 
	PROCEDURE ^ Dist2Sq*(len: SIGNED32; VAR x: ARRAY OF SIGNED16; xstart: SIGNED32; VAR y: ARRAY OF SIGNED16; ystart: SIGNED32): SIGNED32; 
	PROCEDURE ^ Dist2SqPat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index; VAR y: ARRAY OF int; ystart, ystep: index): index; 
	PROCEDURE ^ Norm1*(len: index; VAR x: ARRAY OF int; xstart: index): index; 
	PROCEDURE ^ Norm1Pat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index): index; 
	PROCEDURE ^ Dist1*(len: index; VAR x: ARRAY OF int; xstart: index; VAR y: ARRAY OF int; ystart: index): index; 
	PROCEDURE ^ Dist1Pat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index; VAR y: ARRAY OF int; ystart, ystep: index): index; 
	PROCEDURE ^ NormSup*(len: index; VAR x: ARRAY OF int; xstart: index; VAR mindist: int): int; 
	PROCEDURE ^ NormSupPat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index; VAR mindist: int): int; 
	PROCEDURE ^ DistSup*(len: index; VAR x: ARRAY OF int; xstart: index; VAR y: ARRAY OF int; ystart: index; VAR mindist: index): index; 
	PROCEDURE ^ DistSupPat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index; VAR y: ARRAY OF int; ystart, ystep: index; VAR mindist: index): index; 
	PROCEDURE ^ Short*(len: index; VAR x: ARRAY OF int; start: index; VAR result: ARRAY OF SIGNED8); 
	PROCEDURE ^ Long*(len: index; VAR x: ARRAY OF SIGNED8; start: index; VAR result: ARRAY OF int); 
	PROCEDURE ^ Convolution*(len, start: index; VAR src, dest, kernel: ARRAY OF SIGNED16; kernelw: index); 
BEGIN
END vyInteger.
