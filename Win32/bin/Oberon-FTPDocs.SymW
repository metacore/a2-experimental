MODULE FTPDocs IN Oberon;
	IMPORT IP IN A2, Files, Objects, Fonts, Display, NetSystem, Strings, HyperDocs, NetTools, Input, Texts, Display3, Oberon, Links, Gadgets, Attributes, TextGadgets, Documents, TextDocs, Desktops, Streams, MIME;
CONST 
	DefConPort* = 21; 
	FixedFont = \"Courier10.Scn.Fnt"\; 
	Done* = NetTools.Done; 
	NotReady* = 1; 
	NotConnected* = 2; 
	WrongUser* = 3; 
	WrongPassword* = 4; 
	TimedOut* = 5; 
	LocFileNotFound* = 6; 
	Interrupted* = 7; 
	Disconnected* = 8; 
	Failed* = NetTools.Failed; 
	Unknown =  -1; 
	UNIX = 0; 
	VMS = 1; 
	TempFile = \"Temp.FTP"\; 
	Menu = \"HyperDocs.Back[Back] FTPDocs.DeleteDocFile[Del] FTPDocs.GetDocFile[Get] FTPDocs.PutDocFile[Put] TextDocs.Search[Search]"\; 
	SysMenu = \"HyperDocs.Back[Back] FTPDocs.GetDocFile[Get] FTPDocs.PutDocFile[Put]"\; 
	MinDataPort = 1100; 
	MaxDataPort = 1500; 
	FileActionOk = 250; 
	CommandOk = 200; 
	DataConnectionOpen = 125; 
	FileStatusOk = 150; 
	EnterPassword = 330; 
	NeedPassword = 331; 
	PathNameCreated = 257; 
	UserLoggedIn = 230; 
TYPE 
	Session* = POINTER TO SessionDesc; 

	SessionDesc* = RECORD (NetTools.SessionDesc)
		dataC: NetSystem.Connection; 
		log: Texts.Text; 
		curDir: ARRAY NetTools.PathStrLen OF CHAR; 
		system, dataPort: INTEGER; 
		dataIP: NetSystem.IPAdr; 
		portIPAddress: ARRAY 64 OF CHAR; 
		usr, passw, host: ARRAY NetTools.ServerStrLen OF CHAR; 
		port: INTEGER; 
		ack, bin: BOOLEAN; 
	END; 

	EnumProc* = PROCEDURE (entry: ARRAY OF CHAR); 

	Frame = POINTER TO FrameDesc; 

	FrameDesc = RECORD (TextGadgets.FrameDesc)
		S: Session; 
	END; 
VAR 
	system: INTEGER; 
	W, dirW: Texts.Writer; 
	line, link: ARRAY NetTools.MaxLine OF CHAR; 
	cacheS, curS: Session; 
	curF: Frame; 
	message: BOOLEAN; 
	proxyHost: ARRAY NetTools.ServerStrLen OF CHAR; 
	proxyPort, dataPort: INTEGER; 
	proxy: BOOLEAN; 

	PROCEDURE ^ ReadResponse(S: Session; VAR sline: ARRAY OF CHAR); 
	PROCEDURE ^ SendLine(C: NetSystem.Connection; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ SendCmd(S: Session; str: ARRAY OF CHAR); 
	PROCEDURE ^ Close*(S: Session); 
	PROCEDURE ^ Close2(S: Session); 
	PROCEDURE ^ QuerySystem(S: Session); 
	PROCEDURE ^ GetLogin(VAR host, usr, passw: ARRAY OF CHAR); 
	PROCEDURE ^ Open*(server, user, passwd: ARRAY OF CHAR; port: INTEGER; log: Texts.Text; VAR S: Session); 
	PROCEDURE ^ ChangeDir*(S: Session; newDir: ARRAY OF CHAR); 
	PROCEDURE ^ SetDataPort(S: Session); 
	PROCEDURE ^ WaitDataCon(S: Session): NetSystem.Connection; 
	PROCEDURE ^ EnumDir*(S: Session; enum: EnumProc); 
	PROCEDURE ^ ScanLen(VAR reply: ARRAY OF CHAR; VAR len: LONGINT); 
	PROCEDURE ^ GetF(S: Session; remName: ARRAY OF CHAR; VAR R: Files.Rider); 
	PROCEDURE ^ GetFile*(S: Session; remName, locName: ARRAY OF CHAR); 
	PROCEDURE ^ GetText*(S: Session; remName: ARRAY OF CHAR; VAR W: Texts.Writer); 
	PROCEDURE ^ PutFile*(S: Session; remName, locName: ARRAY OF CHAR); 
	PROCEDURE ^ PutText*(S: Session; remName: ARRAY OF CHAR; text: Texts.Text); 
	PROCEDURE ^ DeleteFile*(S: Session; remName: ARRAY OF CHAR); 
	PROCEDURE ^ RenameFile*(S: Session; remName, newName: ARRAY OF CHAR); 
	PROCEDURE ^ GetCurDir*(S: Session; VAR curdir: ARRAY OF CHAR); 
	PROCEDURE ^ MakeDir*(S: Session; newDir: ARRAY OF CHAR); 
	PROCEDURE ^ RmDir*(S: Session; dir: ARRAY OF CHAR); 
	PROCEDURE ^ DocHandler(D: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ RegisterFTPAdr*(host, path, user, passwd: ARRAY OF CHAR; type: CHAR; port: INTEGER): LONGINT; 
	PROCEDURE ^ SplitFTPAdr*(VAR url, host, path, user, passwd: ARRAY OF CHAR; VAR type: CHAR; VAR port: INTEGER): LONGINT; 
	PROCEDURE ^ LinkSchemeHandler(L: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewLinkScheme*; 
	PROCEDURE ^ TrimmVMS(VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ GetDoc(F: Frame; name: ARRAY OF CHAR; type: CHAR): Documents.Document; 
	PROCEDURE ^ ShowEntry(entry: ARRAY OF CHAR); 
	PROCEDURE ^ HorzRule(): Objects.Object; 
	PROCEDURE ^ DoDir(D: Documents.Document; F: Frame); 
	PROCEDURE ^ GetContext(VAR F: Frame; VAR D: Documents.Document); 
	PROCEDURE ^ ScanName(context: Objects.Object; VAR name: ARRAY OF CHAR; VAR bin: BOOLEAN); 
	PROCEDURE ^ GetDocFile*; 
	PROCEDURE ^ SkipPath(VAR pname, name: ARRAY OF CHAR); 
	PROCEDURE ^ PutDocFile*; 
	PROCEDURE ^ DeleteDocFile*; 
	PROCEDURE ^ TrimmCurDirVMS(VAR curDir: ARRAY OF CHAR); 
	PROCEDURE ^ ChangeDocDir*; 
	PROCEDURE ^ CopyFrame(VAR C: Objects.CopyMsg; from, to: Frame); 
	PROCEDURE ^ FrameHandler(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ CurrentS(VAR S: Session); 
	PROCEDURE ^ LoadDoc(D: Documents.Document); 
	PROCEDURE ^ NewDoc*; 
	PROCEDURE ^ Init; 
BEGIN
END FTPDocs.
