MODULE FoxSemanticChecker;
	IMPORT D := Debugging, Basic := FoxBasic, Scanner := FoxScanner, SyntaxTree := FoxSyntaxTree, Diagnostics, Global := FoxGlobal, Printout := FoxPrintout, Formats := FoxFormats, SYSTEM, Strings, Streams;
CONST 
	Trace = FALSE; 
	Infinity = MAX(SIZE); 
	UndefinedPhase = 0; 
	DeclarationPhase = 1; 
	ImplementationPhase = 2; 
	InliningSupport = TRUE; 
TYPE 
	Position = SyntaxTree.Position; 

	FileName = ARRAY 256 OF CHAR; 

	LateFix = POINTER TO RECORD 
		p: ANY; 
		scope: SyntaxTree.Scope; 
		next: LateFix; 
	END; 

	LateFixList = OBJECT 
	VAR 
		first, last: LateFix; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Get(VAR scope: SyntaxTree.Scope): ANY; 
		PROCEDURE ^ Add(p: ANY; scope: SyntaxTree.Scope); 
	END LateFixList; 

	WithEntry = POINTER TO RECORD 
		previous: WithEntry; 
		symbol: SyntaxTree.Symbol; 
		type: SyntaxTree.Type; 
	END; 

	Replacement* = POINTER TO RECORD 
		name*: Basic.SegmentedName; 
		expression*: SyntaxTree.Expression; 
		used*: BOOLEAN; 
		next*: Replacement; 
	END; 

	Checker* = OBJECT 
	VAR 
		module: SyntaxTree.Module; 
		diagnostics: Diagnostics.Diagnostics; 
		cooperative: BOOLEAN; 
		error-: BOOLEAN; 
		VerboseErrorMessage: BOOLEAN; 
		typeFixes: LateFixList; 
		importCache-: SyntaxTree.ModuleScope; 
		arrayBaseImported: BOOLEAN; 
		complexNumbersImported: BOOLEAN; 
		phase: SIGNED32; 
		system-: Global.System; 
		symbolFileFormat-: Formats.SymbolFileFormat; 
		backendName-: ARRAY 32 OF CHAR; 
		inConversion: SIGNED32; 
		currentScope-: SyntaxTree.Scope; 
		currentIsRealtime: BOOLEAN; 
		currentIsUnreachable: BOOLEAN; 
		currentIsCellNet: BOOLEAN; 
		currentIsBodyProcedure: BOOLEAN; 
		currentIsExclusive: BOOLEAN; 
		currentResultType: SyntaxTree.Type; 
		global: SyntaxTree.ModuleScope; 
		withEntries: WithEntry; 
		activeCellsStatement: BOOLEAN; 
		replacements*: Replacement; 
		cellsAreObjects: BOOLEAN; 
		variableAccessed: BOOLEAN; 
		inAwait: BOOLEAN; 
		inReturn: BOOLEAN; 
		awaitProcCounter := 0: SIZE; 

		PROCEDURE ^  & InitChecker*(diagnostics: Diagnostics.Diagnostics; verboseErrorMessage, cooperative: BOOLEAN; system: Global.System; symbolFileFormat: Formats.SymbolFileFormat; VAR importCache: SyntaxTree.ModuleScope; CONST backend: ARRAY OF CHAR); 
		PROCEDURE ^ Error(position: Position; CONST message: ARRAY OF CHAR); 
		PROCEDURE ^ Warning(position: Position; CONST message: ARRAY OF CHAR); 
		PROCEDURE ^ ErrorSS(position: Position; CONST msg, msg2: ARRAY OF CHAR); 
		PROCEDURE ^ InfoSS(position: Position; CONST msg1: ARRAY OF CHAR; CONST s: Basic.String); 
		PROCEDURE ^ Find(inScope: SyntaxTree.Scope; name: SyntaxTree.Identifier; traverse: BOOLEAN): SyntaxTree.Symbol; 
		PROCEDURE ^ ResolveNamedType(qualifiedIdentifier: SyntaxTree.QualifiedIdentifier; VAR typeDeclaration: SyntaxTree.TypeDeclaration): SyntaxTree.Type; 
		PROCEDURE ^ CheckEnumerationScope(x: SyntaxTree.EnumerationScope; VAR highest: Basic.Integer); 
		PROCEDURE ^ ResolveEnumerationType(x: SyntaxTree.EnumerationType); 
		PROCEDURE ^ ResolveQualifiedType(x: SyntaxTree.QualifiedType); 
		PROCEDURE ^ ResolveArrayType(x: SyntaxTree.ArrayType); 
		PROCEDURE ^ ImportModule(name: SyntaxTree.Identifier; position: Position); 
		PROCEDURE ^ ResolveMathArrayType(x: SyntaxTree.MathArrayType); 
		PROCEDURE ^ AnonymousTypeDeclaration(x: SyntaxTree.Type; CONST prefix: ARRAY OF CHAR); 
		PROCEDURE ^ FixPointerType(type: SyntaxTree.PointerType); 
		PROCEDURE ^ ResolvePointerType(x: SyntaxTree.PointerType); 
		PROCEDURE ^ ResolvePortType(x: SyntaxTree.PortType); 
		PROCEDURE ^ FixProcedureType(procedureType: SyntaxTree.ProcedureType); 
		PROCEDURE ^ HasFlag(VAR modifiers: SyntaxTree.Modifier; name: SyntaxTree.Identifier; VAR position: Position): BOOLEAN; 
		PROCEDURE ^ HasValue(modifiers: SyntaxTree.Modifier; name: SyntaxTree.Identifier; VAR position: Position; VAR value: Basic.Integer): BOOLEAN; 
		PROCEDURE ^ HasStringValue(modifiers: SyntaxTree.Modifier; name: SyntaxTree.Identifier; VAR position: Position; VAR value: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ SkipImplementation*(x: SyntaxTree.CellType): BOOLEAN; 
		PROCEDURE ^ CheckModifiers(modifiers: SyntaxTree.Modifier; checkUse: BOOLEAN); 
		PROCEDURE ^ ResolveProcedureType(procedureType: SyntaxTree.ProcedureType); 
		PROCEDURE ^ ResolveRecordType(x: SyntaxTree.RecordType); 
		PROCEDURE ^ ResolveCellType(x: SyntaxTree.CellType); 
		PROCEDURE ^ TypeNeedsResolution(x: SyntaxTree.Type): BOOLEAN; 
		PROCEDURE ^ ResolveType*(x: SyntaxTree.Type): SyntaxTree.Type; 
		PROCEDURE ^ FixTypes; 
		PROCEDURE ^ RegularType(position: Position; type: SyntaxTree.Type): SyntaxTree.Type; 
		PROCEDURE ^ SignatureCompatible(position: Position; this, to: SyntaxTree.ProcedureType): BOOLEAN; 
		PROCEDURE ^ ParameterCompatible(formal: SyntaxTree.Parameter; actual: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ AssignmentCompatible(left: SyntaxTree.Designator; right: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ ResolveSet(set: SyntaxTree.Set): SyntaxTree.Expression; 
		PROCEDURE ^ ResolveMathArrayExpression(x: SyntaxTree.MathArrayExpression): SyntaxTree.Expression; 
		PROCEDURE ^ ResolveUnaryExpression(unaryExpression: SyntaxTree.UnaryExpression): SyntaxTree.Expression; 
		PROCEDURE ^ MathArrayConversion(position: Position; expression: SyntaxTree.Expression; type: SyntaxTree.Type): SyntaxTree.Expression; 
		PROCEDURE ^ ConvertValue(position: Position; expression: SyntaxTree.Value; type: SyntaxTree.Type): SyntaxTree.Expression; 
		PROCEDURE ^ NewConversion(position: Position; expression: SyntaxTree.Expression; type: SyntaxTree.Type; reference: SyntaxTree.Expression): SyntaxTree.Expression; 
		PROCEDURE ^ CompatibleConversion(position: Position; expression: SyntaxTree.Expression; type: SyntaxTree.Type): SyntaxTree.Expression; 
		PROCEDURE ^ ConvertOperands(VAR left, right: SyntaxTree.Expression); 
		PROCEDURE ^ FindOperator(system: Global.System; operator: SIGNED32; actualParameters: SyntaxTree.ExpressionList; returnType: SyntaxTree.Type): SyntaxTree.Operator; 
		PROCEDURE ^ SetCurrentScope*(scope: SyntaxTree.Scope); 
		PROCEDURE ^ NewOperatorCall*(position: Position; original: SyntaxTree.Expression; op: SIGNED32; leftExpression, rightExpression: SyntaxTree.Expression; resultType: SyntaxTree.Type): SyntaxTree.Expression; 
		PROCEDURE ^ ResolveBinaryExpression(binaryExpression: SyntaxTree.BinaryExpression): SyntaxTree.Expression; 
		PROCEDURE ^ ResolveRangeExpression(x: SyntaxTree.RangeExpression): SyntaxTree.Expression; 
		PROCEDURE ^ ResolveDesignator(d: SyntaxTree.Expression): SyntaxTree.Designator; 
		PROCEDURE ^ ResolveSelfDesignator(x: SyntaxTree.SelfDesignator): SyntaxTree.Expression; 
		PROCEDURE ^ ResolveResultDesignator(x: SyntaxTree.ResultDesignator): SyntaxTree.Expression; 
		PROCEDURE ^ NewSymbolDesignator*(position: Position; original: SyntaxTree.Expression; left: SyntaxTree.Expression; symbol: SyntaxTree.Symbol): SyntaxTree.Expression; 
		PROCEDURE ^ ResolveIdentifierDesignator(identifierDesignator: SyntaxTree.IdentifierDesignator): SyntaxTree.Expression; 
		PROCEDURE ^ ResolveSelectorDesignator(selectorDesignator: SyntaxTree.SelectorDesignator): SyntaxTree.Expression; 
		PROCEDURE ^ IndexCheck(index, length: SyntaxTree.Expression); 
		PROCEDURE ^ SetIndexBaseType(indexDesignator: SyntaxTree.IndexDesignator; newBaseType: SyntaxTree.Type); 
		PROCEDURE ^ AppendMathIndex(position: Position; indexDesignator: SyntaxTree.IndexDesignator; indexListItem: SyntaxTree.Expression; sourceArray: SyntaxTree.MathArrayType); 
		PROCEDURE ^ AppendIndex(position: Position; index: SyntaxTree.IndexDesignator; expression: SyntaxTree.Expression; over: SyntaxTree.Type); 
		PROCEDURE ^ NewObjectOperatorCall*(position: Position; left: SyntaxTree.Expression; oper: SIGNED32; parameters: SyntaxTree.ExpressionList; rhs: SyntaxTree.Expression): SyntaxTree.Designator; 
		PROCEDURE ^ ResolveBracketDesignator(bracketDesignator: SyntaxTree.BracketDesignator): SyntaxTree.Expression; 
		PROCEDURE ^ ExpressionList(expressionList: SyntaxTree.ExpressionList): BOOLEAN; 
		PROCEDURE ^ NewProcedureCallDesignator(position: Position; original: SyntaxTree.Expression; left: SyntaxTree.Expression; actualParameters: SyntaxTree.ExpressionList): SyntaxTree.Designator; 
		PROCEDURE ^ ResolveBuiltinCallDesignator(x: SyntaxTree.BuiltinCallDesignator): SyntaxTree.Expression; 
		PROCEDURE ^ CheckVariable(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckBasicType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckNumberType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckNonComplexNumberSizeType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckAddressType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckSizeType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckObjectType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckIntegerType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckCharacterType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckRealType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckRangeType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckBooleanType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckSetType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckStringType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckTypeDeclarationType(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckIntegerValue(x: SyntaxTree.Expression; VAR value: Basic.Integer): BOOLEAN; 
		PROCEDURE ^ CheckStringValue(x: SyntaxTree.Expression; VAR value: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ IsUnsignedValue(x: SyntaxTree.Expression; maxSizeInBits: SIZE): BOOLEAN; 
		PROCEDURE ^ IsAddressValue(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ IsAddressExpression(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ IsSizeExpression(x: SyntaxTree.Expression): BOOLEAN; 
		PROCEDURE ^ CheckEnumerationValue(x: SyntaxTree.Expression; VAR value: Basic.Integer): BOOLEAN; 
		PROCEDURE ^ CheckCharacterValue(x: SyntaxTree.Expression; VAR value: CHAR): BOOLEAN; 
		PROCEDURE ^ CheckPositiveIntegerValue(x: SyntaxTree.Expression; VAR value: Basic.Integer; includeZero: BOOLEAN): BOOLEAN; 
		PROCEDURE ^ CheckPortType(x: SyntaxTree.Expression; VAR portType: SyntaxTree.PortType): BOOLEAN; 
		PROCEDURE ^ NewBuiltinCallDesignator(position: Position; original: SyntaxTree.Expression; builtin: SyntaxTree.Builtin; actualParameters: SyntaxTree.ExpressionList; left: SyntaxTree.Expression; returnType: SyntaxTree.Type; expression: SyntaxTree.Expression): SyntaxTree.Expression; 
		PROCEDURE ^ NewTypeGuardDesignator(position: Position; original: SyntaxTree.Expression; left: SyntaxTree.Expression; type: SyntaxTree.Type; typeExpression: SyntaxTree.Expression): SyntaxTree.Designator; 
		PROCEDURE ^ ResolveParameterDesignator(designator: SyntaxTree.ParameterDesignator): SyntaxTree.Expression; 
		PROCEDURE ^ NewDereferenceDesignator(position: Position; original: SyntaxTree.Expression; left: SyntaxTree.Expression): SyntaxTree.Designator; 
		PROCEDURE ^ NewSupercallDesignator(position: Position; original: SyntaxTree.Designator; left: SyntaxTree.Designator): SyntaxTree.Designator; 
		PROCEDURE ^ ResolveArrowDesignator(arrowDesignator: SyntaxTree.ArrowDesignator): SyntaxTree.Expression; 
		PROCEDURE ^ ResolveExpression*(x: SyntaxTree.Expression): SyntaxTree.Expression; 
		PROCEDURE ^ ConstantExpression(expression: SyntaxTree.Expression): SyntaxTree.Expression; 
		PROCEDURE ^ ConstantInteger(expression: SyntaxTree.Expression): SyntaxTree.Expression; 
		PROCEDURE ^ ConstantIntegerGeq0(expression: SyntaxTree.Expression): SyntaxTree.Expression; 
		PROCEDURE ^ ResolveCondition(expression: SyntaxTree.Expression): SyntaxTree.Expression; 
		PROCEDURE ^ ResolveSymbol*(x: SyntaxTree.Symbol); 
		PROCEDURE ^ CheckSymbolVisibility(symbol: SyntaxTree.Symbol); 
		PROCEDURE ^ SymbolNeedsResolution(x: SyntaxTree.Symbol): BOOLEAN; 
		PROCEDURE ^ ResolveTypeDeclaration(typeDeclaration: SyntaxTree.TypeDeclaration); 
		PROCEDURE ^ ResolveConstant(constant: SyntaxTree.Constant); 
		PROCEDURE ^ AdaptStackAlignment(procedure: SyntaxTree.Procedure; alignment: SIZE); 
		PROCEDURE ^ ResolveVariable(variable: SyntaxTree.Variable); 
		PROCEDURE ^ ResolveParameter(parameter: SyntaxTree.Parameter); 
		PROCEDURE ^ ResolveProcedure(procedure: SyntaxTree.Procedure); 
		PROCEDURE ^ ResolveAlias(x: SyntaxTree.Alias); 
		PROCEDURE ^ ResolveBuiltin(builtinProcedure: SyntaxTree.Builtin); 
		PROCEDURE ^ ResolveOperator(operator: SyntaxTree.Operator); 
		PROCEDURE ^ AddImport*(module: SyntaxTree.Module; x: SyntaxTree.Import): BOOLEAN; 
		PROCEDURE ^ GetImportModuleName(x: SyntaxTree.Import): SyntaxTree.Identifier; 
		PROCEDURE ^ ResolveTemplateImport(x: SyntaxTree.Import); 
		PROCEDURE ^ ResolveImport(x: SyntaxTree.Import); 
		PROCEDURE ^ ResolveStatement*(x: SyntaxTree.Statement): SyntaxTree.Statement; 
		PROCEDURE ^ StatementSequence(statementSequence: SyntaxTree.StatementSequence); 
		PROCEDURE ^ ResolveDeclarationStatement(x: SyntaxTree.DeclarationStatement): SyntaxTree.Statement; 
		PROCEDURE ^ ResolveProcedureCallStatement(procedureCall: SyntaxTree.ProcedureCallStatement): SyntaxTree.Statement; 
		PROCEDURE ^ ResolveAssignment(assignment: SyntaxTree.Assignment): SyntaxTree.Statement; 
		PROCEDURE ^ ResolveCommunicationStatement(communication: SyntaxTree.CommunicationStatement): SyntaxTree.Statement; 
		PROCEDURE ^ IfPart(ifPart: SyntaxTree.IfPart; VAR true: BOOLEAN); 
		PROCEDURE ^ ResolveIfStatement(ifStatement: SyntaxTree.IfStatement): SyntaxTree.Statement; 
		PROCEDURE ^ WithPart(withPart: SyntaxTree.WithPart; variable: SyntaxTree.Designator); 
		PROCEDURE ^ ResolveWithStatement(withStatement: SyntaxTree.WithStatement): SyntaxTree.Statement; 
		PROCEDURE ^ CasePart(casePart: SyntaxTree.CasePart; type: SyntaxTree.Type; VAR allcases: SyntaxTree.CaseConstant; VAR min, max: Basic.Integer); 
		PROCEDURE ^ ResolveCaseStatement(caseStatement: SyntaxTree.CaseStatement): SyntaxTree.Statement; 
		PROCEDURE ^ ResolveWhileStatement(whileStatement: SyntaxTree.WhileStatement): SyntaxTree.Statement; 
		PROCEDURE ^ ResolveRepeatStatement(repeatStatement: SyntaxTree.RepeatStatement): SyntaxTree.Statement; 
		PROCEDURE ^ GetGuard(symbol: SyntaxTree.Symbol; VAR type: SyntaxTree.Type): BOOLEAN; 
		PROCEDURE ^ ResolveForStatement(forStatement: SyntaxTree.ForStatement): SyntaxTree.Statement; 
		PROCEDURE ^ ResolveLoopStatement(loopStatement: SyntaxTree.LoopStatement): SyntaxTree.Statement; 
		PROCEDURE ^ ResolveExitableBlock(exitableBlock: SyntaxTree.ExitableBlock): SyntaxTree.Statement; 
		PROCEDURE ^ ResolveExitStatement(exitStatement: SyntaxTree.ExitStatement): SyntaxTree.Statement; 
		PROCEDURE ^ ResolveReturnStatement(returnStatement: SyntaxTree.ReturnStatement): SyntaxTree.Statement; 
		PROCEDURE ^ MakeAwaitProcedure(x: SyntaxTree.AwaitStatement): SyntaxTree.Procedure; 
		PROCEDURE ^ ResolveAwaitStatement(awaitStatement: SyntaxTree.AwaitStatement): SyntaxTree.Statement; 
		PROCEDURE ^ CheckSystemImport(position: Position); 
		PROCEDURE ^ ResolveCode(code: SyntaxTree.Code); 
		PROCEDURE ^ BlockFlags(block: SyntaxTree.StatementBlock); 
		PROCEDURE ^ ResolveStatementBlock(statementBlock: SyntaxTree.StatementBlock); 
		PROCEDURE ^ Body(body: SyntaxTree.Body); 
		PROCEDURE ^ Register(symbol: SyntaxTree.Symbol; scope: SyntaxTree.Scope; allowDuplicate: BOOLEAN); 
		PROCEDURE ^ Implementation(scope: SyntaxTree.Scope); 
		PROCEDURE ^ Implementations(x: SyntaxTree.Module); 
		PROCEDURE ^ Declarations(scope: SyntaxTree.Scope; skipImplementation: BOOLEAN; phases: SET); 
		PROCEDURE ^ CheckInterOperatorConformity(thisModuleScope, thatModuleScope: SyntaxTree.ModuleScope); 
		PROCEDURE ^ Module*(x: SyntaxTree.Module); 
	END Checker; 

	Warnings* = OBJECT 
	VAR 
		diagnostics: Diagnostics.Diagnostics; 
		module: SyntaxTree.Module; 

		PROCEDURE ^  & InitWarnings*(diagnostics: Diagnostics.Diagnostics); 
		PROCEDURE ^ Type(CONST x: SyntaxTree.Type); 
		PROCEDURE ^ Warning(x: SyntaxTree.Symbol; CONST text: ARRAY OF CHAR); 
		PROCEDURE ^ Symbol(x: SyntaxTree.Symbol); 
		PROCEDURE ^ Scope(scope: SyntaxTree.Scope); 
		PROCEDURE ^ Module*(x: SyntaxTree.Module); 
	END Warnings; 

	PROCEDURE ^ IsOberonInline(procedure: SyntaxTree.Procedure): BOOLEAN; 
	PROCEDURE ^ SideEffectFree(e: SyntaxTree.Expression): BOOLEAN; 
	PROCEDURE ^ Resolved(x: SyntaxTree.Type): SyntaxTree.Type; 
	PROCEDURE ^ PowerOf2(x: Basic.Integer): BOOLEAN; 
	PROCEDURE ^ IsCellNetScope(scope: SyntaxTree.Scope): BOOLEAN; 
	PROCEDURE ^ IsCellScope(scope: SyntaxTree.Scope): BOOLEAN; 
	PROCEDURE ^ InCellNetScope(scope: SyntaxTree.Scope): BOOLEAN; 
	PROCEDURE ^ ToMemoryUnits(system: Global.System; size: SIZE): SIZE; 
	PROCEDURE ^ GetProcedureAllowed*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ RemoveModuleFromCache*(importCache: SyntaxTree.ModuleScope; x: SyntaxTree.Module); 
	PROCEDURE ^ CompatibleTo(system: Global.System; this, to: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ StaticArrayCompatible(formal: SyntaxTree.Type; actual: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ OpenArrayCompatible(formalType: SyntaxTree.ArrayType; actualType: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ MathArrayCompatible(formalType: SyntaxTree.MathArrayType; actualType: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ MathArrayTypeDistance(system: Global.System; from, to: SyntaxTree.MathArrayType; varpar: BOOLEAN): SIZE; 
	PROCEDURE ^ ArrayTypeDistance(system: Global.System; from, to: SyntaxTree.ArrayType): SIZE; 
	PROCEDURE ^ Distance(system: Global.System; procedureType: SyntaxTree.ProcedureType; actualParameters: SyntaxTree.ExpressionList): SIZE; 
	PROCEDURE ^ ProcedureTypeDistance(system: Global.System; procedureType: SyntaxTree.ProcedureType; right: SyntaxTree.ProcedureType): SIZE; 
	PROCEDURE ^ TypeDistance(system: Global.System; from, to: SyntaxTree.Type; varpar: BOOLEAN): SIZE; 
	PROCEDURE ^ IsIntegerType*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsNumberType*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsAddressType*(type: SyntaxTree.Type; addressWidth: SIGNED32): BOOLEAN; 
	PROCEDURE ^ IsSizeType(type: SyntaxTree.Type; addressWidth: SIGNED32): BOOLEAN; 
	PROCEDURE ^ IsSignedIntegerType*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsUnsignedIntegerType*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsIntegerValue(x: SyntaxTree.Expression; VAR value: Basic.Integer): BOOLEAN; 
	PROCEDURE ^ IsEnumerationValue(x: SyntaxTree.Expression; VAR value: Basic.Integer): BOOLEAN; 
	PROCEDURE ^ IsRealValue(x: SyntaxTree.Expression; VAR value: FLOAT64): BOOLEAN; 
	PROCEDURE ^ IsComplexValue(x: SyntaxTree.Expression; VAR realValue, imagValue: FLOAT64): BOOLEAN; 
	PROCEDURE ^ IsCharacterValue(x: SyntaxTree.Expression; VAR value: CHAR): BOOLEAN; 
	PROCEDURE ^ IsBooleanValue*(x: SyntaxTree.Expression; VAR value: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ IsSetValue(x: SyntaxTree.Expression; VAR value: Basic.Set): BOOLEAN; 
	PROCEDURE ^ IsStringValue(x: SyntaxTree.Expression; VAR value: Scanner.StringType): BOOLEAN; 
	PROCEDURE ^ Indexable(x: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ SameType(t1, t2: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ ArrayBase*(t: SyntaxTree.Type; max: SIZE): SyntaxTree.Type; 
	PROCEDURE ^ IsOpenArray*(type: SyntaxTree.Type; VAR base: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsOpenArrayRecursive*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsStaticArray*(type: SyntaxTree.Type; VAR base: SyntaxTree.Type; VAR dim: SIGNED32): BOOLEAN; 
	PROCEDURE ^ IsDynamicArray*(type: SyntaxTree.Type; VAR base: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ Dimension*(t: SyntaxTree.Type; form: SET): SIGNED32; 
	PROCEDURE ^ IsVariable(expression: SyntaxTree.Expression): BOOLEAN; 
	PROCEDURE ^ IsReferenceType*(kind: SIGNED32; type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsReference*(symbol: SyntaxTree.Symbol): BOOLEAN; 
	PROCEDURE ^ IsPointerType*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsUnsafePointer*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsDisposable*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsPointerToRecord(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsFinalRecord(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsPointerToObject(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ ContainsPointer*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsStringType*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsCharacterType*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsSetType*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsEnumerationType*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsValidTypeTest(base, extension: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsTypeExtension(base, extension: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsEnumerationExtension(base, extension: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsCallable(expression: SyntaxTree.Expression): BOOLEAN; 
	PROCEDURE ^ RecordTypeDistance(from, to: SyntaxTree.RecordType): SIZE; 
	PROCEDURE ^ PointerTypeDistance(from, to: SyntaxTree.PointerType): SIZE; 
	PROCEDURE ^ IsTypeDesignator(expression: SyntaxTree.Expression; VAR typeDeclaration: SyntaxTree.TypeDeclaration): BOOLEAN; 
	PROCEDURE ^ IsExtensibleType(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsIndexOperator*(expression: SyntaxTree.Expression): BOOLEAN; 
	PROCEDURE ^ IsUnextensibleRecord(d: SyntaxTree.Expression): BOOLEAN; 
	PROCEDURE ^ IsExtensibleDesignator(d: SyntaxTree.Expression): BOOLEAN; 
	PROCEDURE ^ IsBasicType(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ RecordBase*(record: SyntaxTree.RecordType): SyntaxTree.RecordType; 
	PROCEDURE ^ FindSuperProcedure*(scope: SyntaxTree.RecordScope; procedure: SyntaxTree.Procedure): SyntaxTree.Procedure; 
	PROCEDURE ^ GetConstructor(record: SyntaxTree.RecordType): SyntaxTree.Procedure; 
	PROCEDURE ^ EnterCase(VAR root: SyntaxTree.CaseConstant; min, max: Basic.Integer): BOOLEAN; 
	PROCEDURE ^ NewChecker*(diagnostics: Diagnostics.Diagnostics; verboseErrorMessage, cooperative: BOOLEAN; system: Global.System; symbolFileFormat: Formats.SymbolFileFormat; VAR importCache: SyntaxTree.ModuleScope; CONST backend: ARRAY OF CHAR): Checker; 
	PROCEDURE ^ NewWarnings*(diagnostics: Diagnostics.Diagnostics): Warnings; 
	PROCEDURE ^ IsRangeType(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsMathArrayType(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ BaseType(type: SyntaxTree.Type): SyntaxTree.Type; 
	PROCEDURE ^ IsArrayType(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsComplexType(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsStaticRange(x: SyntaxTree.Expression; VAR firstValue, lastValue, stepValue: Basic.Integer): BOOLEAN; 
	PROCEDURE ^ IsTensor*(type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ IsStaticMathArray*(type: SyntaxTree.Type; VAR length: SIGNED32; VAR baseType: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ SymbolHasAddress*(system: Global.System; CONST symbol: SyntaxTree.Symbol): BOOLEAN; 
	PROCEDURE ^ HasAddress*(system: Global.System; CONST expression: SyntaxTree.Expression): BOOLEAN; 
	PROCEDURE ^ IsLocalVariable*(e: SyntaxTree.Expression): BOOLEAN; 
	PROCEDURE ^ IsStaticProcedure*(procedure: SyntaxTree.Procedure): BOOLEAN; 
	PROCEDURE ^ InMethodTable*(procedure: SyntaxTree.Procedure): BOOLEAN; 
	PROCEDURE ^ CanPassInRegister*(system: Global.System; type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ ReturnedAsParameter*(system: Global.System; type: SyntaxTree.Type): BOOLEAN; 
	PROCEDURE ^ StructuredReturnType*(system: Global.System; procedureType: SyntaxTree.ProcedureType): BOOLEAN; 
	PROCEDURE ^ ReplaceCharacter(VAR dst: ARRAY OF CHAR; this, by: CHAR); 
BEGIN
END FoxSemanticChecker.
