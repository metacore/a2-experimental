MODULE FoxARMBackend;
	IMPORT Basic := FoxBasic, SyntaxTree := FoxSyntaxTree, Global := FoxGlobal, Backend := FoxBackend, Sections := FoxSections, IntermediateCode := FoxIntermediateCode, IntermediateBackend := FoxIntermediateBackend, CodeGenerators := FoxCodeGenerators, BinaryCode := FoxBinaryCode, SemanticChecker := FoxSemanticChecker, Formats := FoxFormats, Assembler := FoxARMAssembler, InstructionSet := FoxARMInstructionSet, SYSTEM, Diagnostics, Streams, Options, Strings, ObjectFile, Scanner := FoxScanner, ObjectFileFormat := FoxGenericObjectFile, Compiler, D := Debugging;
CONST 
	Trace = FALSE; 
	SupportMovW = TRUE; 
	None =  -1; 
	Low = 0; 
	High = 1; 
	opADC = InstructionSet.opADC; 
	opADD = InstructionSet.opADD; 
	opAND = InstructionSet.opAND; 
	opB = InstructionSet.opB; 
	opBIC = InstructionSet.opBIC; 
	opBKPT = InstructionSet.opBKPT; 
	opBL = InstructionSet.opBL; 
	opBLX = InstructionSet.opBLX; 
	opBX = InstructionSet.opBX; 
	opCDP = InstructionSet.opCDP; 
	opCDP2 = InstructionSet.opCDP2; 
	opCLZ = InstructionSet.opCLZ; 
	opCMN = InstructionSet.opCMN; 
	opCMP = InstructionSet.opCMP; 
	opEOR = InstructionSet.opEOR; 
	opFABSD = InstructionSet.opFABSD; 
	opFABSS = InstructionSet.opFABSS; 
	opFADDD = InstructionSet.opFADDD; 
	opFADDS = InstructionSet.opFADDS; 
	opFCMPD = InstructionSet.opFCMPD; 
	opFCMPED = InstructionSet.opFCMPED; 
	opFCMPES = InstructionSet.opFCMPES; 
	opFCMPEZD = InstructionSet.opFCMPEZD; 
	opFCMPEZS = InstructionSet.opFCMPEZS; 
	opFCMPS = InstructionSet.opFCMPS; 
	opFCMPZD = InstructionSet.opFCMPZD; 
	opFCMPZS = InstructionSet.opFCMPZS; 
	opFCPYD = InstructionSet.opFCPYD; 
	opFCPYS = InstructionSet.opFCPYS; 
	opFCVTDS = InstructionSet.opFCVTDS; 
	opFCVTSD = InstructionSet.opFCVTSD; 
	opFDIVD = InstructionSet.opFDIVD; 
	opFDIVS = InstructionSet.opFDIVS; 
	opFLDD = InstructionSet.opFLDD; 
	opFLDMIAD = InstructionSet.opFLDMIAD; 
	opFLDMIAS = InstructionSet.opFLDMIAS; 
	opFLDMIAX = InstructionSet.opFLDMIAX; 
	opFLDMDBD = InstructionSet.opFLDMDBD; 
	opFLDMDBS = InstructionSet.opFLDMDBS; 
	opFLDMDBX = InstructionSet.opFLDMDBX; 
	opFLDS = InstructionSet.opFLDS; 
	opFMACD = InstructionSet.opFMACD; 
	opFMACS = InstructionSet.opFMACS; 
	opFMDHR = InstructionSet.opFMDHR; 
	opFMDLR = InstructionSet.opFMDLR; 
	opFMRDH = InstructionSet.opFMRDH; 
	opFMRDL = InstructionSet.opFMRDL; 
	opFMRS = InstructionSet.opFMRS; 
	opFMRX = InstructionSet.opFMRX; 
	opFMSCD = InstructionSet.opFMSCD; 
	opFMSCS = InstructionSet.opFMSCS; 
	opFMSR = InstructionSet.opFMSR; 
	opFMSTAT = InstructionSet.opFMSTAT; 
	opFMULD = InstructionSet.opFMULD; 
	opFMULS = InstructionSet.opFMULS; 
	opFMXR = InstructionSet.opFMXR; 
	opFNEGD = InstructionSet.opFNEGD; 
	opFNEGS = InstructionSet.opFNEGS; 
	opFNMACD = InstructionSet.opFNMACD; 
	opFNMACS = InstructionSet.opFNMACS; 
	opFNMSCD = InstructionSet.opFNMSCD; 
	opFNMSCS = InstructionSet.opFNMSCS; 
	opFNMULD = InstructionSet.opFNMULD; 
	opFNMULS = InstructionSet.opFNMULS; 
	opFSITOD = InstructionSet.opFSITOD; 
	opFSITOS = InstructionSet.opFSITOS; 
	opFSQRTD = InstructionSet.opFSQRTD; 
	opFSQRTS = InstructionSet.opFSQRTS; 
	opFSTD = InstructionSet.opFSTD; 
	opFSTMIAD = InstructionSet.opFSTMIAD; 
	opFSTMIAS = InstructionSet.opFSTMIAS; 
	opFSTMIAX = InstructionSet.opFSTMIAX; 
	opFSTMDBD = InstructionSet.opFSTMDBD; 
	opFSTMDBS = InstructionSet.opFSTMDBS; 
	opFSTMDBX = InstructionSet.opFSTMDBX; 
	opFSTS = InstructionSet.opFSTS; 
	opFSUBD = InstructionSet.opFSUBD; 
	opFSUBS = InstructionSet.opFSUBS; 
	opFTOSID = InstructionSet.opFTOSID; 
	opFTOSIZD = InstructionSet.opFTOSIZD; 
	opFTOSIS = InstructionSet.opFTOSIS; 
	opFTOSIZS = InstructionSet.opFTOSIZS; 
	opFTOUID = InstructionSet.opFTOUID; 
	opFTOUIZD = InstructionSet.opFTOUIZD; 
	opFTOUIS = InstructionSet.opFTOUIS; 
	opFTOUIZS = InstructionSet.opFTOUIZS; 
	opFUITOD = InstructionSet.opFUITOD; 
	opFUITOS = InstructionSet.opFUITOS; 
	opLDC = InstructionSet.opLDC; 
	opLDC2 = InstructionSet.opLDC2; 
	opLDM = InstructionSet.opLDM; 
	opLDR = InstructionSet.opLDR; 
	opLDREX = InstructionSet.opLDREX; 
	opSTREX = InstructionSet.opSTREX; 
	opMCR = InstructionSet.opMCR; 
	opMCR2 = InstructionSet.opMCR2; 
	opMCRR = InstructionSet.opMCRR; 
	opMLA = InstructionSet.opMLA; 
	opMOV = InstructionSet.opMOV; 
	opMRC = InstructionSet.opMRC; 
	opMOVW = InstructionSet.opMOVW; 
	opMRC2 = InstructionSet.opMRC2; 
	opMRRC = InstructionSet.opMRRC; 
	opMRS = InstructionSet.opMRS; 
	opMSR = InstructionSet.opMSR; 
	opMUL = InstructionSet.opMUL; 
	opMVN = InstructionSet.opMVN; 
	opORR = InstructionSet.opORR; 
	opPLD = InstructionSet.opPLD; 
	opQADD = InstructionSet.opQADD; 
	opQDADD = InstructionSet.opQDADD; 
	opQDSUB = InstructionSet.opQDSUB; 
	opQSUB = InstructionSet.opQSUB; 
	opRSB = InstructionSet.opRSB; 
	opRSC = InstructionSet.opRSC; 
	opSBC = InstructionSet.opSBC; 
	opSMLABB = InstructionSet.opSMLABB; 
	opSMLABT = InstructionSet.opSMLABT; 
	opSMLAL = InstructionSet.opSMLAL; 
	opSMLATB = InstructionSet.opSMLATB; 
	opSMLATT = InstructionSet.opSMLATT; 
	opSMLALBB = InstructionSet.opSMLALBB; 
	opSMLALBT = InstructionSet.opSMLALBT; 
	opSMLALTB = InstructionSet.opSMLALTB; 
	opSMLALTT = InstructionSet.opSMLALTT; 
	opSMLAWB = InstructionSet.opSMLAWB; 
	opSMLAWT = InstructionSet.opSMLAWT; 
	opSMULBB = InstructionSet.opSMULBB; 
	opSMULBT = InstructionSet.opSMULBT; 
	opSMULTB = InstructionSet.opSMULTB; 
	opSMULTT = InstructionSet.opSMULTT; 
	opSMULWB = InstructionSet.opSMULWB; 
	opSMULWT = InstructionSet.opSMULWT; 
	opSMULL = InstructionSet.opSMULL; 
	opSTC = InstructionSet.opSTC; 
	opSTC2 = InstructionSet.opSTC2; 
	opSTM = InstructionSet.opSTM; 
	opSTR = InstructionSet.opSTR; 
	opSUB = InstructionSet.opSUB; 
	opSWI = InstructionSet.opSWI; 
	opSWP = InstructionSet.opSWP; 
	opTEQ = InstructionSet.opTEQ; 
	opTST = InstructionSet.opTST; 
	opUMLAL = InstructionSet.opUMLAL; 
	opUMULL = InstructionSet.opUMULL; 
	GetSP = 0; 
	SetSP = 1; 
	GetFP = 2; 
	SetFP = 3; 
	GetLNK = 4; 
	SetLNK = 5; 
	GetPC = 6; 
	SetPC = 7; 
	LDPSR = 8; 
	STPSR = 9; 
	LDCPR = 10; 
	STCPR = 11; 
	FLUSH = 12; 
	NULL = 13; 
	XOR = 14; 
	MULD = 15; 
	ADDC = 16; 
	PACK = 17; 
	UNPK = 18; 
	UseFPU32Flag = \"useFPU32"\; 
	UseFPU64Flag = \"useFPU64"\; 
TYPE 
	Operand = InstructionSet.Operand; 

	Ticket = CodeGenerators.Ticket; 

	Citation = OBJECT 
	VAR 
		pc: LONGINT; 
		bits: LONGINT; 
		shift: LONGINT; 
		next: Citation; 
	END Citation; 

	Reference = OBJECT 
	VAR 
		firstCitation, lastCitation: Citation; 
		next: Reference; 
		size: LONGINT; 

		PROCEDURE ^  & Init(size: LONGINT); 
		PROCEDURE ^ Emit(out: BinaryCode.Section); 
		PROCEDURE ^ AddCitation(pc: LONGINT; bits: LONGINT; shift: LONGINT); 
	END Reference; 

	ImmediateReference = OBJECT (Reference)
	VAR 
		value: LONGINT; 

		PROCEDURE ^  & InitImm(v: LONGINT); 
		PROCEDURE ^ Emit(out: BinaryCode.Section); 
	END ImmediateReference; 

	ImmediateHReference = OBJECT (Reference)
	VAR 
		value: HUGEINT; 

		PROCEDURE ^  & InitImm(v: HUGEINT); 
		PROCEDURE ^ Emit(out: BinaryCode.Section); 
	END ImmediateHReference; 

	SymbolReference = OBJECT (Reference)
	VAR 
		identifier: ObjectFile.Identifier; 
		symbolOffset: LONGINT; 

		PROCEDURE ^  & InitSym(s: Sections.SectionName; fp: Basic.Fingerprint; offs: LONGINT); 
		PROCEDURE ^ Emit(out: BinaryCode.Section); 
	END SymbolReference; 

	ListOfReferences = OBJECT 
	VAR 
		firstReference, lastReference: Reference; 
		size: LONGINT; 
		due: LONGINT; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ UpdateDue(pc: LONGINT; bits: LONGINT; shift: LONGINT); 
		PROCEDURE ^ AddCitation(reference: Reference; pc: LONGINT; bits: LONGINT; shift: LONGINT); 
		PROCEDURE ^ AddReference(reference: Reference): Reference; 
		PROCEDURE ^ AddSymbol(symbol: Sections.SectionName; fingerprint: Basic.Fingerprint; symbolOffset: LONGINT; pc: LONGINT; bits: LONGINT); 
		PROCEDURE ^ AddImmediate(value: LONGINT; pc: LONGINT; bits: LONGINT); 
		PROCEDURE ^ AddHImmediate(value: HUGEINT; pc: LONGINT; bits: LONGINT); 
	END ListOfReferences; 

	PhysicalRegisters* = OBJECT (CodeGenerators.PhysicalRegisters)
	VAR 
		toVirtual: ARRAY InstructionSet.NumberRegisters OF Ticket; 
		reserved: ARRAY InstructionSet.NumberRegisters OF BOOLEAN; 
		unusable: Ticket; 
		blocked: Ticket; 
		hint: LONGINT; 
		useFPU32: BOOLEAN; 
		useFPU64: BOOLEAN; 

		PROCEDURE ^  & InitPhysicalRegisters(supportFramePointer, useFPU32, useFPU64, cooperative: BOOLEAN); 
		PROCEDURE ^ NumberRegisters*(): LONGINT; 
		PROCEDURE ^ Allocate*(physicalRegisterNumber: LONGINT; ticket: Ticket); 
		PROCEDURE ^ SetReserved*(physicalRegisterNumber: LONGINT; isReserved: BOOLEAN); 
		PROCEDURE ^ Reserved*(physicalRegisterNumber: LONGINT): BOOLEAN; 
		PROCEDURE ^ Free*(physicalRegisterNumber: LONGINT); 
		PROCEDURE ^ NextFree*(CONST type: IntermediateCode.Type): LONGINT; 
		PROCEDURE ^ AllocationHint*(physicalRegisterNumber: LONGINT); 
		PROCEDURE ^ Mapped*(physicalRegisterNumber: LONGINT): Ticket; 
		PROCEDURE ^ Dump*(w: Streams.Writer); 
	END PhysicalRegisters; 

	CodeGeneratorARM = OBJECT (CodeGenerators.GeneratorWithTickets)
	VAR 
		builtinsModuleName: SyntaxTree.IdentifierString; 
		backend: BackendARM; 
		opSP, opFP, opPC, opLR, opRES, opRESHI, opRESFS, opRESFD, fpscr: InstructionSet.Operand; 
		listOfReferences: ListOfReferences; 
		spillStackStart, pushChainLength: LONGINT; 
		stackSize: LONGINT; 
		stackSizeKnown: BOOLEAN; 
		inStackAllocation: BOOLEAN; 

		PROCEDURE ^  & InitGeneratorARM(CONST builtinsModuleName: SyntaxTree.IdentifierString; diagnostics: Diagnostics.Diagnostics; backend: BackendARM); 
		PROCEDURE ^ Section*(in: IntermediateCode.Section; out: BinaryCode.Section); 
		PROCEDURE ^ Supported*(CONST irInstruction: IntermediateCode.Instruction; VAR moduleName, procedureName: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ GetRuntimeProcedureName(CONST irInstruction: IntermediateCode.Instruction; VAR resultingName: ARRAY OF CHAR); 
		PROCEDURE ^ CheckStackPointer(CONST destination: Operand); 
		PROCEDURE ^ Emit(opCode, condition: LONGINT; flags: SET; CONST operands: ARRAY InstructionSet.MaxOperands OF Operand); 
		PROCEDURE ^ Emit0(opCode: LONGINT); 
		PROCEDURE ^ Emit1(opCode: LONGINT; op: Operand); 
		PROCEDURE ^ Emit2(opCode: LONGINT; op1, op2: Operand); 
		PROCEDURE ^ Emit3(opCode: LONGINT; op1, op2, op3: Operand); 
		PROCEDURE ^ Emit4(opCode: LONGINT; op1, op2, op3, op4: Operand); 
		PROCEDURE ^ Emit6(opCode: LONGINT; op1, op2, op3, op4, op5, op6: Operand); 
		PROCEDURE ^ Emit2WithFlags(opCode: LONGINT; op1, op2: Operand; flags: SET); 
		PROCEDURE ^ Emit3WithFlags(opCode: LONGINT; op1, op2, op3: Operand; flags: SET); 
		PROCEDURE ^ Emit1WithCondition(opCode: LONGINT; op1: Operand; condition: LONGINT); 
		PROCEDURE ^ Emit2WithCondition(opCode: LONGINT; op1, op2: Operand; condition: LONGINT); 
		PROCEDURE ^ Emit3WithCondition(opCode: LONGINT; op1, op2, op3: Operand; condition: LONGINT); 
		PROCEDURE ^ ValueComposition(value: LONGINT; doEmit: BOOLEAN; CONST targetRegister: Operand): LONGINT; 
		PROCEDURE ^ ValueComposition2(value: LONGINT; doEmit: BOOLEAN; CONST targetRegister: Operand): LONGINT; 
		PROCEDURE ^ PhysicalRegisterNumber(virtualRegisterNumber: LONGINT; part: LONGINT): LONGINT; 
		PROCEDURE ^ GetSpillOperand(ticket: Ticket): Operand; 
		PROCEDURE ^ OperandFromTicket(ticket: Ticket): Operand; 
		PROCEDURE ^ GetFreeRegister(CONST type: IntermediateCode.Type): Operand; 
		PROCEDURE ^ GetFreeRegisterOrHint(CONST type: IntermediateCode.Type; CONST registerHint: Operand): Operand; 
		PROCEDURE ^ IsRegisterForType(registerNumber: LONGINT; CONST type: IntermediateCode.Type): BOOLEAN; 
		PROCEDURE ^ RegisterAfterAppliedOffset(register: Operand; offset: LONGINT; registerHint: Operand): Operand; 
		PROCEDURE ^ RegisterFromIrRegister(CONST irRegisterOperand: IntermediateCode.Operand; part: LONGINT; registerHint: Operand): Operand; 
		PROCEDURE ^ Load(targetRegister, memoryOperand: Operand; irType: IntermediateCode.Type); 
		PROCEDURE ^ Store(sourceRegister, memoryOperand: Operand; type: IntermediateCode.Type); 
		PROCEDURE ^ RegisterFromSymbol(symbol: Sections.SectionName; fingerprint: Basic.Fingerprint; resolved: Sections.Section; symbolOffset: LONGINT; CONST registerHint: Operand): Operand; 
		PROCEDURE ^ MemoryOperandFromIrMemoryOperand(VAR irMemoryOperand: IntermediateCode.Operand; part: LONGINT; CONST registerHint: Operand): Operand; 
		PROCEDURE ^ RegisterOrImmediateFromIrOperand(VAR irOperand: IntermediateCode.Operand; part: LONGINT; registerHint: Operand): Operand; 
		PROCEDURE ^ RegisterFromIrOperand(VAR irOperand: IntermediateCode.Operand; part: LONGINT; registerHint: Operand): Operand; 
		PROCEDURE ^ IsComplex(CONST irOperand: IntermediateCode.Operand): BOOLEAN; 
		PROCEDURE ^ IsSinglePrecisionFloat(CONST irOperand: IntermediateCode.Operand): BOOLEAN; 
		PROCEDURE ^ IsDoublePrecisionFloat(CONST irOperand: IntermediateCode.Operand): BOOLEAN; 
		PROCEDURE ^ IsFloat(CONST irOperand: IntermediateCode.Operand): BOOLEAN; 
		PROCEDURE ^ IsInteger(CONST irOperand: IntermediateCode.Operand): BOOLEAN; 
		PROCEDURE ^ IsNonComplexInteger(CONST irOperand: IntermediateCode.Operand): BOOLEAN; 
		PROCEDURE ^ IsInteger64(CONST irOperand: IntermediateCode.Operand): BOOLEAN; 
		PROCEDURE ^ PartType(CONST type: IntermediateCode.Type; part: LONGINT): IntermediateCode.Type; 
		PROCEDURE ^ GetPartType*(CONST type: IntermediateCode.Type; part: LONGINT; VAR partType: IntermediateCode.Type); 
		PROCEDURE ^ ValueOfPart(value: HUGEINT; part: LONGINT): LONGINT; 
		PROCEDURE ^ ValueIsDirectlyEncodable(value: LONGINT): BOOLEAN; 
		PROCEDURE ^ IrOperandIsDirectlyEncodable(irOperand: IntermediateCode.Operand; part: LONGINT): BOOLEAN; 
		PROCEDURE ^ NegatedIrOperandIsDirectlyEncodable(irOperand: IntermediateCode.Operand; part: LONGINT): BOOLEAN; 
		PROCEDURE ^ Generate*(VAR irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ PostGenerate*(CONST instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitFinalFixupBlock; 
		PROCEDURE ^ EmitFixupBlockIfNeeded; 
		PROCEDURE ^ EmitFixupBlock; 
		PROCEDURE ^ OperandFromValue(value: LONGINT; registerHint: Operand): Operand; 
		PROCEDURE ^ SinglePrecisionFloatRegisterFromValue(value: REAL; registerHint: Operand): Operand; 
		PROCEDURE ^ DoublePrecisionFloatRegisterFromValue(value: LONGREAL; registerHint: Operand): Operand; 
		PROCEDURE ^ RegisterFromValue(value: LONGINT; registerHint: Operand): Operand; 
		PROCEDURE ^ AllocateStack(allocationSize: LONGINT; doUpdateStackSize: BOOLEAN; clear: BOOLEAN); 
		PROCEDURE ^ IsSameRegister(CONST a, b: Operand): BOOLEAN; 
		PROCEDURE ^ MovIfDifferent(CONST a, b: Operand); 
		PROCEDURE ^ AcquireDestinationRegister(CONST irDestinationOperand: IntermediateCode.Operand; part: LONGINT; registerHint: Operand): Operand; 
		PROCEDURE ^ WriteBack(VAR irDestinationOperand: IntermediateCode.Operand; part: LONGINT; register: Operand); 
		PROCEDURE ^ ZeroExtendOperand(operand: Operand; sizeInBits: LONGINT); 
		PROCEDURE ^ SignExtendOperand(operand: Operand; sizeInBits: LONGINT); 
		PROCEDURE ^ SignOrZeroExtendOperand(operand: Operand; irType: IntermediateCode.Type); 
		PROCEDURE ^ EmitPush(VAR irOperand: IntermediateCode.Operand; part: LONGINT); 
		PROCEDURE ^ EmitPop(VAR irOperand: IntermediateCode.Operand; part: LONGINT); 
		PROCEDURE ^ Resolve(VAR op: IntermediateCode.Operand); 
		PROCEDURE ^ EmitCall(VAR irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitEnter(CONST irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitLeave(CONST irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitExit(CONST irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitMov(VAR irInstruction: IntermediateCode.Instruction; part: LONGINT); 
		PROCEDURE ^ EmitNot(VAR irInstruction: IntermediateCode.Instruction; part: LONGINT); 
		PROCEDURE ^ EmitAndP(VAR irInstruction: IntermediateCode.Instruction; part: LONGINT); 
		PROCEDURE ^ EmitAnd(VAR irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitOr(VAR irInstruction: IntermediateCode.Instruction; part: LONGINT); 
		PROCEDURE ^ EmitXor(VAR irInstruction: IntermediateCode.Instruction; part: LONGINT); 
		PROCEDURE ^ EmitAddOrSub(VAR irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitPartialAddOrSub(CONST irInstruction: IntermediateCode.Instruction; part: LONGINT; doUpdateFlags: BOOLEAN); 
		PROCEDURE ^ EmitMul(VAR irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitDiv(VAR irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitMod(CONST irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitAbs(VAR irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitNeg(VAR irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitShiftOrRotation(VAR irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitAsm(CONST irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitSpecial(VAR instruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitBr(VAR irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ RoundDown(VAR fpstatus: Operand); 
		PROCEDURE ^ ResetRounding(VAR fpstatus: Operand); 
		PROCEDURE ^ EmitConv(VAR irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ ResultRegister(part: LONGINT; type: IntermediateCode.Type): InstructionSet.Operand; 
		PROCEDURE ^ EmitReturn(VAR irInstruction: IntermediateCode.Instruction; part: LONGINT); 
		PROCEDURE ^ EmitResult(VAR irInstruction: IntermediateCode.Instruction; part: LONGINT); 
		PROCEDURE ^ EmitTrap(CONST irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitCas(VAR irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitCopy(VAR irInstruction: IntermediateCode.Instruction); 
		PROCEDURE ^ EmitFill(CONST irInstruction: IntermediateCode.Instruction; down: BOOLEAN); 
		PROCEDURE ^ SwapIrOperands(VAR left, right: IntermediateCode.Operand); 
		PROCEDURE ^ PrepareSingleSourceOp(VAR irInstruction: IntermediateCode.Instruction; part: LONGINT; VAR destinationRegister, sourceOperand: Operand); 
		PROCEDURE ^ PrepareSingleSourceOpWithImmediate(VAR irInstruction: IntermediateCode.Instruction; part: LONGINT; VAR destinationRegister, sourceOperand: Operand); 
		PROCEDURE ^ PrepareDoubleSourceOpWithImmediate(CONST irInstruction: IntermediateCode.Instruction; part: LONGINT; VAR destinationRegister, leftSourceOperand, rightSourceOperand: Operand; VAR isSwapped: BOOLEAN); 
		PROCEDURE ^ PrepareDoubleSourceOp(CONST irInstruction: IntermediateCode.Instruction; part: LONGINT; VAR destinationRegister, leftSourceOperand, rightSourceOperand: Operand); 
	END CodeGeneratorARM; 

	BackendARM = OBJECT (IntermediateBackend.IntermediateBackend)
	VAR 
		cg: CodeGeneratorARM; 
		system: Global.System; 
		useFPU32: BOOLEAN; 
		useFPU64: BOOLEAN; 
		initLocals: BOOLEAN; 

		PROCEDURE ^  & InitBackendARM; 
		PROCEDURE ^ Initialize*(diagnostics: Diagnostics.Diagnostics; log: Streams.Writer; flags: SET; checker: SemanticChecker.Checker; system: Global.System); 
		PROCEDURE ^ EnterCustomBuiltins; 
		PROCEDURE ^ GetSystem*(): Global.System; 
		PROCEDURE ^ SupportedInstruction*(CONST irInstruction: IntermediateCode.Instruction; VAR moduleName, procedureName: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ SupportedImmediate*(CONST irImmediateOperand: IntermediateCode.Operand): BOOLEAN; 
		PROCEDURE ^ GenerateBinary(module: Sections.Module; dump: Streams.Writer); 
		PROCEDURE ^ ProcessIntermediateCodeModule*(intermediateCodeModule: Formats.GeneratedModule): Formats.GeneratedModule; 
		PROCEDURE ^ DefineOptions*(options: Options.Options); 
		PROCEDURE ^ GetOptions*(options: Options.Options); 
		PROCEDURE ^ DefaultObjectFileFormat*(): Formats.ObjectFileFormat; 
		PROCEDURE ^ DefaultSymbolFileFormat*(): Formats.SymbolFileFormat; 
		PROCEDURE ^ GetDescription*(VAR instructionSet: ARRAY OF CHAR); 
		PROCEDURE ^ FindPC*(x: SyntaxTree.Module; CONST sectionName: ARRAY OF CHAR; sectionOffset: LONGINT); 
	END BackendARM; 
VAR 
	emptyOperand: Operand; 
	rFixupPattern: ObjectFile.FixupPatterns; 

	PROCEDURE ^ Assert(condition: BOOLEAN; CONST message: ARRAY OF CHAR); 
	PROCEDURE ^ Halt(CONST message: ARRAY OF CHAR); 
	PROCEDURE ^ ResolvedSection(irSection: IntermediateCode.Section): BinaryCode.Section; 
	PROCEDURE ^ Init; 
	PROCEDURE ^ Get*(): Backend.Backend; 
	PROCEDURE ^ Test*; 
	PROCEDURE ^ DBin*(value: HUGEINT; numberDigits: LONGINT); 
BEGIN
END FoxARMBackend.
