MODULE Decoder IN Oberon;
	IMPORT SYSTEM, Modules, Files, Fonts, Texts, Objects, Display, Oberon, Strings, Out;
CONST 
	pCS = 46; 
	pDS = 62; 
	pES = 38; 
	pFS = 100; 
	pGS = 101; 
	pSS = 54; 
	AdrSize = 103; 
	OpSize = 102; 
	none =  -1; 
	PCpos = 0; 
	HexPos = 7; 
	OpPosC = 43; 
	RMPosC = 52; 
	Pos1 = 4; 
	OffPos = 35; 
	Reg = 0; 
	Mem1 = 1; 
	Mem2 = 2; 
	RegImm = 3; 
	MemImm = 4; 
	MemFull = 5; 
	EAX = 0; 
	ECX = 1; 
	EDX = 2; 
	EBX = 3; 
	ESP = 4; 
	EBP = 5; 
	ESI = 6; 
	EDI = 7; 
	AX = 0; 
	CX = 1; 
	DX = 2; 
	BX = 3; 
	SP = 4; 
	BP = 5; 
	SI = 6; 
	DI = 7; 
	AL = 0; 
	CL = 1; 
	DL = 2; 
	BL = 3; 
	AH = 4; 
	CH = 5; 
	DH = 6; 
	BH = 7; 
	ES = 20; 
	CS = 21; 
	SS = 22; 
	DS = 23; 
	FS = 24; 
	GS = 25; 
	CR = 0; 
	DR = 8; 
	TR = 16; 
	SReal = 0; 
	LReal = 1; 
	EReal = 2; 
	WInt = 3; 
	SInt = 4; 
	LInt = 5; 
	Byte14 = 6; 
	Byte28 = 7; 
	Byte94 = 8; 
	Byte108 = 9; 
	Decimal = 10; 
	nothing = 11; 
	Byte = 0; 
	SignExt = 1; 
	BUG = 40; 
	VarEntriesStr = \"VarEntries:"\; 
	EntriesStr = \"Entries:"\; 
	CommandsStr = \"Commands:"\; 
	PointersStr = \"Pointers:"\; 
	DataStr = \"Data:"\; 
	ConstStr = \"Const:     "\; 
	CodeStr = \"Code:     "\; 
	nofEntriesStr = \"  nofEntries:      "\; 
	nofCmdsStr = \"  nofCmds:         "\; 
	nofPtrsStr = \"  nofPtrs:         "\; 
	nofTypesStr = \"  nofTds:          "\; 
	nofImpsStr = \"  nofImps:         "\; 
	dataSizeStr = \"  dataSize:        "\; 
	constSizeStr = \"  conSize:         "\; 
	codeSizeStr = \"  codeSize:        "\; 
	refSizeStr = \"  refSize:         "\; 
	exTableSizeStr = \"  exTableSize:      "\; 
	Priv = 16; 
	i486 = 1; 
	Pentium = 2; 
	PPro = 3; 
TYPE 
	ProcEntry* = RECORD 
		name*: ARRAY 64 OF CHAR; 
		point*: SIGNED32; 
	END; 

	ProcArray* = POINTER TO ARRAY OF ProcEntry; 

	EntryArray = POINTER TO ARRAY OF SIGNED32; 

	DecodeHandler* = PROCEDURE (VAR pc: SIGNED32; VAR r: Files.Rider; VAR w: Texts.Writer); 

	HeaderCallback* = PROCEDURE (VAR dataSize, constSize, codeSize: SIGNED32); 
VAR 
	R: Files.Rider; 
	W: Texts.Writer; 
	pc, breakpos: SIGNED32; 
	column: SIGNED16; 
	prefix, w: SIGNED16; 
	adrPrefix, opPrefix: BOOLEAN; 
	defaultFont, titleFont: Fonts.Font; 
	PE*: ProcArray; 
	nofPE*: SIGNED32; 
	memory, compilable, raw, suppressOut, suppressH, noOutput: BOOLEAN; 
	ReadAdr: ADDRESS; 
	target: SET; 
	objSuffix: ARRAY 8 OF CHAR; 
	OpPos, RMPos: SIGNED8; 
	decoder: DecodeHandler; 
	headerCallback: HeaderCallback; 
	addressFactor: SIGNED32; 

	PROCEDURE ^ Bug(no: SIGNED16); 
	PROCEDURE ^ Next(VAR ch: CHAR); 
	PROCEDURE ^ GetByte(VAR b: SIGNED16); 
	PROCEDURE ^ GetWord(VAR w: SIGNED32); 
	PROCEDURE ^ GetDWord(VAR dw: SIGNED32); 
	PROCEDURE ^ GetNum(VAR x: SIGNED32); 
	PROCEDURE ^ WriteLn; 
	PROCEDURE ^ WriteString(str: ARRAY OF CHAR); 
	PROCEDURE ^ Write(ch: CHAR); 
	PROCEDURE ^ WriteInt(x: SIGNED32); 
	PROCEDURE ^ WriteByte(byte: SIGNED16); 
	PROCEDURE ^ WriteWord(word: SIGNED32); 
	PROCEDURE ^ WriteDWord(dword: SIGNED32); 
	PROCEDURE ^ WriteWHex(word: SIGNED32); 
	PROCEDURE ^ WriteDWHex(dword: SIGNED32); 
	PROCEDURE ^ WriteDisp(disp: SIGNED32); 
	PROCEDURE ^ Tab(pos: SIGNED16); 
	PROCEDURE ^ WriteOp(opStr: ARRAY OF CHAR); 
	PROCEDURE ^ WriteReg(reg: SIGNED16); 
	PROCEDURE ^ WriteAdrReg(reg: SIGNED16); 
	PROCEDURE ^ WriteSpecialReg(reg: SIGNED16); 
	PROCEDURE ^ WritePrefix(prefix: SIGNED16); 
	PROCEDURE ^ WriteRegReg(d, reg1, reg2: SIGNED16); 
	PROCEDURE ^ WriteMem(base, inx, scale: SIGNED16; disp: SIGNED32); 
	PROCEDURE ^ WriteMem1(d, reg, base: SIGNED16; disp: SIGNED32); 
	PROCEDURE ^ WriteMem2(d, reg, base, inx: SIGNED16; scale: SIGNED8; disp: SIGNED32); 
	PROCEDURE ^ WriteRegImm(reg: SIGNED16; imm: SIGNED32; hex: BOOLEAN); 
	PROCEDURE ^ WriteMemImm(reg, base, inx: SIGNED16; scale: SIGNED8; disp, imm: SIGNED32; hex: BOOLEAN); 
	PROCEDURE ^ WriteRM(mode: SIGNED8; d, reg, base, inx, scale: SIGNED16; disp, imm: SIGNED32; hex: BOOLEAN); 
	PROCEDURE ^ GetImm(w: SIGNED16; VAR imm: SIGNED32); 
	PROCEDURE ^ ModRm(VAR mode: SIGNED8; VAR reg, base, inx: SIGNED16; VAR scale: SIGNED8; VAR disp: SIGNED32); 
	PROCEDURE ^ Type1(op: SIGNED16; VAR mode: SIGNED8; VAR d, reg, base, inx: SIGNED16; VAR scale: SIGNED8; VAR disp, imm: SIGNED32); 
	PROCEDURE ^ Add(op: SIGNED16); 
	PROCEDURE ^ Push(op: SIGNED16); 
	PROCEDURE ^ Push2(op: SIGNED16); 
	PROCEDURE ^ Pop(op: SIGNED16); 
	PROCEDURE ^ Pop2(op: SIGNED16); 
	PROCEDURE ^ Or(op: SIGNED16); 
	PROCEDURE ^ Adc(op: SIGNED16); 
	PROCEDURE ^ Sbb(op: SIGNED16); 
	PROCEDURE ^ And(op: SIGNED16); 
	PROCEDURE ^ Sub(op: SIGNED16); 
	PROCEDURE ^ Xor(op: SIGNED16); 
	PROCEDURE ^ Cmp(op: SIGNED16); 
	PROCEDURE ^ Inc(op: SIGNED16); 
	PROCEDURE ^ Dec(op: SIGNED16); 
	PROCEDURE ^ Bound(op: SIGNED16); 
	PROCEDURE ^ Imul(op: SIGNED16); 
	PROCEDURE ^ Imul2(op: SIGNED16); 
	PROCEDURE ^ Ins(op: SIGNED16); 
	PROCEDURE ^ Outs(op: SIGNED16); 
	PROCEDURE ^ Jcc(op: SIGNED16); 
	PROCEDURE ^ Jcc2(op: SIGNED16); 
	PROCEDURE ^ Test(op: SIGNED16); 
	PROCEDURE ^ Xchg(op: SIGNED16); 
	PROCEDURE ^ Mov(op: SIGNED16); 
	PROCEDURE ^ Mov2(op: SIGNED16); 
	PROCEDURE ^ Movx(op: SIGNED16); 
	PROCEDURE ^ Lea(op: SIGNED16); 
	PROCEDURE ^ Call(op: SIGNED16); 
	PROCEDURE ^ Movs(op: SIGNED16); 
	PROCEDURE ^ Cmps(op: SIGNED16); 
	PROCEDURE ^ Stos(op: SIGNED16); 
	PROCEDURE ^ Lods(op: SIGNED16); 
	PROCEDURE ^ Scas(op: SIGNED16); 
	PROCEDURE ^ Ret(op: SIGNED16); 
	PROCEDURE ^ Enter(op: SIGNED16); 
	PROCEDURE ^ Les(op: SIGNED16); 
	PROCEDURE ^ Lds(op: SIGNED16); 
	PROCEDURE ^ Ldseg(op: SIGNED16); 
	PROCEDURE ^ Int(op: SIGNED16); 
	PROCEDURE ^ Loop(op: SIGNED16); 
	PROCEDURE ^ InOut(op: SIGNED16); 
	PROCEDURE ^ Jmp(op: SIGNED16); 
	PROCEDURE ^ Lar(op: SIGNED16); 
	PROCEDURE ^ Lsl(op: SIGNED16); 
	PROCEDURE ^ Setcc(op: SIGNED16); 
	PROCEDURE ^ Bit(op: SIGNED16); 
	PROCEDURE ^ Shift(op: SIGNED16); 
	PROCEDURE ^ Bswap(op: SIGNED16); 
	PROCEDURE ^ Xadd(op: SIGNED16); 
	PROCEDURE ^ Cmpxchg(op: SIGNED16); 
	PROCEDURE ^ Cmov(op: SIGNED16); 
	PROCEDURE ^ Grp1(op: SIGNED16); 
	PROCEDURE ^ Grp2(op: SIGNED16); 
	PROCEDURE ^ Grp3(op: SIGNED16); 
	PROCEDURE ^ Grp4(op: SIGNED16); 
	PROCEDURE ^ Grp5(op: SIGNED16); 
	PROCEDURE ^ Grp6(op: SIGNED16); 
	PROCEDURE ^ Grp7(op: SIGNED16); 
	PROCEDURE ^ Grp8(op: SIGNED16); 
	PROCEDURE ^ Grp9(op: SIGNED16); 
	PROCEDURE ^ Escape(op: SIGNED16); 
	PROCEDURE ^ WriteFReg(freg: SIGNED16); 
	PROCEDURE ^ WriteFloat(form: SIGNED8; base, inx: SIGNED16; scale: SIGNED8; disp: SIGNED32); 
	PROCEDURE ^ Float0(op: SIGNED16); 
	PROCEDURE ^ Float1(op: SIGNED16); 
	PROCEDURE ^ Float2(op: SIGNED16); 
	PROCEDURE ^ Float3(op: SIGNED16); 
	PROCEDURE ^ Float4(op: SIGNED16); 
	PROCEDURE ^ Float5(op: SIGNED16); 
	PROCEDURE ^ Float6(op: SIGNED16); 
	PROCEDURE ^ Float7(op: SIGNED16); 
	PROCEDURE ^ Prefix(VAR op: SIGNED16); 
	PROCEDURE ^ IA32Decoder(VAR PC: SIGNED32; VAR r: Files.Rider; VAR w: Texts.Writer); 
	PROCEDURE ^ Dump(size: SIZE); 
	PROCEDURE ^ Reference(size: SIGNED32); 
	PROCEDURE ^ Check(ch: CHAR; str: ARRAY OF CHAR); 
	PROCEDURE ^ DumpData(VAR a: ARRAY OF CHAR; len: SIGNED32); 
	PROCEDURE ^ ReadExport; 
	PROCEDURE ^ ReadUse; 
	PROCEDURE ^ WriteProc(pc: SIGNED32); 
	PROCEDURE ^ DecodeObjFile*(objName: ARRAY OF CHAR; VAR T: Texts.Text); 
	PROCEDURE ^ Decode*; 
	PROCEDURE ^ DecodeThis*(dest: Texts.Text; VAR code: ARRAY OF CHAR); 
	PROCEDURE ^ ThisFrame(X, Y: SIGNED16; VAR F: Display.Frame); 
	PROCEDURE ^ GetText(VAR par: Display.Frame): Texts.Text; 
	PROCEDURE ^ Locate(F: Display.Frame; T: Texts.Text; pos: SIGNED32); 
	PROCEDURE ^ Scan(s: ARRAY OF CHAR): SIGNED32; 
	PROCEDURE ^ GetLine(VAR r: Texts.Reader; VAR buf: ARRAY OF CHAR); 
	PROCEDURE ^ Find*; 
	PROCEDURE ^ SetObjSuffix*(suffix: ARRAY OF CHAR); 
	PROCEDURE ^ SetSuffix*; 
	PROCEDURE ^ InstallDecoder*(decodeHandler: DecodeHandler; suffix: ARRAY OF CHAR; adrFactor: SIGNED32); 
	PROCEDURE ^ InstallHeaderCallback*(hdrCallback: HeaderCallback); 
	PROCEDURE ^ ActiveDecoder*(): DecodeHandler; 
	PROCEDURE ^ InstallIA32Decoder*; 
BEGIN
END Decoder.
