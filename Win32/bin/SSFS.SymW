MODULE SSFS;
	IMPORT SYSTEM, KernelLog, Commands, Plugins, Dates, Strings, Disks, Files;
CONST 
	Ok* = 0; 
	InvalidBlockNumber* = 1000; 
	InvalidFilePosition* = 1001; 
	BlockSizeNotSupported* = 2000; 
	NotFormatted* = 2001; 
	WrongVersion* = 2002; 
	VolumeFull* = 3000; 
	DeviceNotFound* = 4000; 
	DeviceError* = 4001; 
	PartitionTooSmall* = 5000; 
	SSFS_MagicNumber = LONGINT(2575857510); 
	SSFS_Version = 1; 
	BlockSize = 4096; 
	DirectoryEntrySize = 256; 
	DirectoryEntriesPerBlock = (BlockSize DIV DirectoryEntrySize); 
	Offset_SuperBlock = 0; 
	BlockNotAllocated = 0; 
	MinVolumeSize = 5; 
	BitsPerSET = (SIZEOF(SET) * 8); 
	Trace = FALSE; 
TYPE 
	Block = ARRAY BlockSize OF CHAR; 

	Volume = OBJECT 
	VAR 
		device: Disks.Device; 
		partition: LONGINT; 
		nofBlocks: LONGINT; 
		sectorsPerBlock: LONGINT; 

		PROCEDURE ^ ReadBlock(blockNumber: LONGINT; VAR block: Block; VAR res: WORD); 
		PROCEDURE ^ WriteBlock(blockNumber: LONGINT; VAR block: Block; VAR res: WORD); 
		PROCEDURE ^ Finalize; 
		PROCEDURE ^  & Init*(device: Disks.Device; partition: LONGINT; VAR res: WORD); 
	END Volume; 

	BlockBitmap = OBJECT {EXCLUSIVE} 
	VAR 
		bitmap: POINTER TO ARRAY OF SET; 
		hint: LONGINT; 
		fileSystem: FileSystem; 

		PROCEDURE ^ FreeBlock(blockNumber: LONGINT; VAR res: WORD); 
		PROCEDURE ^ AllocateBlock(VAR res: WORD): LONGINT; 
		PROCEDURE ^ FindFreeBlock(VAR res: WORD; useHint: BOOLEAN): LONGINT; 
		PROCEDURE ^ IsUsed(blockNumber: LONGINT): BOOLEAN; 
		PROCEDURE ^ SetUsed(blockNumber: LONGINT; used: BOOLEAN); 
		PROCEDURE ^ WriteBack(blockNumber: LONGINT; VAR res: WORD); 
		PROCEDURE ^ LoadFromDisk(VAR res: WORD); 
		PROCEDURE ^ Show; 
		PROCEDURE ^  & Init*(fileSystem: FileSystem); 
	END BlockBitmap; 

	DirectoryEntry = RECORD 
		name: ARRAY 252 OF CHAR; 
		inode: LONGINT; 
	END; 

	DirectoryBlock = ARRAY DirectoryEntriesPerBlock OF DirectoryEntry; 

	SuperBlock = RECORD 
		magicNumber: LONGINT; 
		version: LONGINT; 
		rootDirectory: LONGINT; 
		freeBlockBitmapFirst: LONGINT; 
		freeBlockBitmapSize: LONGINT; 
		firstDataBlock: LONGINT; 
		filler: ARRAY (BlockSize - (6 * 4)) OF CHAR; 
	END; 

	Inode = RECORD 
		size: LONGINT; 
		attributes: SET; 
		date, time: LONGINT; 
		unused: LONGINT; 
		direct: ARRAY ((BlockSize - (5 * 4)) DIV 4) OF LONGINT; 
	END; 

	Dnode = Block; 

	FileSystem = OBJECT {EXCLUSIVE} (Files.FileSystem)
	VAR 
		volume: Volume; 
		superBlock: SuperBlock; 
		rootDirectory: DirectoryBlock; 
		bitmap: BlockBitmap; 

		PROCEDURE ^  & Init*(volume: Volume; VAR res: WORD); 
		PROCEDURE ^ New0*(name: ARRAY OF CHAR): Files.File; 
		PROCEDURE ^ Old0*(name: ARRAY OF CHAR): Files.File; 
		PROCEDURE ^ UpdateInode(inode: Inode; inodeAdr: LONGINT); 
		PROCEDURE ^ GetFilename(name: ARRAY OF CHAR; VAR filename: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ FindEntry(CONST name: ARRAY OF CHAR): LONGINT; 
		PROCEDURE ^ Delete0*(name: ARRAY OF CHAR; VAR key, res: LONGINT); 
		PROCEDURE ^ DeleteFile(inode: Inode; inodeAdr: LONGINT; VAR res: WORD); 
		PROCEDURE ^ DeleteDnodes(inode: Inode; VAR res: WORD); 
		PROCEDURE ^ Rename0*(old, new: ARRAY OF CHAR; f: Files.File; VAR res: WORD); 
		PROCEDURE ^ Enumerate0*(mask: ARRAY OF CHAR; flags: SET; enum: Files.Enumerator); 
		PROCEDURE ^ FileKey*(name: ARRAY OF CHAR): LONGINT; 
		PROCEDURE ^ CreateDirectory0*(name: ARRAY OF CHAR; VAR res: WORD); 
		PROCEDURE ^ RemoveDirectory0*(name: ARRAY OF CHAR; force: BOOLEAN; VAR key, res: LONGINT); 
		PROCEDURE ^ Format(VAR res: WORD); 
		PROCEDURE ^ Finalize*; 
	END FileSystem; 

	File = OBJECT {EXCLUSIVE} (Files.File)
	VAR 
		inode: Inode; 
		inodeModified: BOOLEAN; 
		fileSystem: FileSystem; 
		name: Files.FileName; 

		PROCEDURE ^  & Init*(CONST name: ARRAY OF CHAR; inode: Inode; inodeAddress: LONGINT; fileSystem: FileSystem); 
		PROCEDURE ^ Set*(VAR r: Files.Rider; pos: LONGINT); 
		PROCEDURE ^ Pos*(VAR r: Files.Rider): LONGINT; 
		PROCEDURE ^ Read*(VAR r: Files.Rider; VAR x: CHAR); 
		PROCEDURE ^ ReadBytes*(VAR r: Files.Rider; VAR x: ARRAY OF CHAR; ofs, len: LONGINT); 
		PROCEDURE ^ Write*(VAR r: Files.Rider; x: CHAR); 
		PROCEDURE ^ WriteBytes*(VAR r: Files.Rider; CONST x: ARRAY OF CHAR; ofs, len: LONGINT); 
		PROCEDURE ^ Length*(): LONGINT; 
		PROCEDURE ^ GetDate*(VAR t, d: LONGINT); 
		PROCEDURE ^ SetDate*(t, d: LONGINT); 
		PROCEDURE ^ GetName*(VAR name: ARRAY OF CHAR); 
		PROCEDURE ^ Register0*(VAR res: WORD); 
		PROCEDURE ^ Update*; 
	END File; 

	PROCEDURE ^ ClearBlock(VAR block: Block); 
	PROCEDURE ^ ClearInode(VAR inode: Inode); 
	PROCEDURE ^ GetFileSystem(context: Commands.Context; VAR res: WORD): FileSystem; 
	PROCEDURE ^ Format*(context: Commands.Context); 
	PROCEDURE ^ Mount*(context: Commands.Context); 
	PROCEDURE ^ Unmount*(context: Commands.Context); 
BEGIN
END SSFS.
