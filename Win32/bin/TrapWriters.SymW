MODULE TrapWriters;
	IMPORT Streams, Kernel, KernelLog, Trace, Modules;
CONST 
	TrapMaxCharacters = (32 * 1024); 
TYPE 
	Entry = POINTER TO RECORD 
		factory: WriterFactory; 
		next: Entry; 
	END; 

	WriterFactory = PROCEDURE ():Streams.Writer; 

	TrapWriter = OBJECT {EXCLUSIVE} (Streams.StringWriter)
	VAR 
		trapped: BOOLEAN; 
		first, last: Entry; 
		timer: Kernel.Timer; 
		contents: ARRAY TrapMaxCharacters OF CHAR; 

		PROCEDURE ^ Trapped; 
		PROCEDURE ^ Char*(ch: CHAR); 
		PROCEDURE ^  & InitTrapWriter(f: WriterFactory); 
		PROCEDURE ^ Add(f: WriterFactory); 
		PROCEDURE ^ Remove(f: WriterFactory); 
		PROCEDURE ^ RemoveAll; 
		PROCEDURE ^ Write; 
	BEGIN{ACTIVE} 
	END TrapWriter; 
VAR 
	defaultWriter: Streams.Writer; 
	traceWriter, logWriter: Streams.Writer; 
	trapWriter: TrapWriter; 

	PROCEDURE ^ InstallTrapWriterFactory*(factory: WriterFactory); 
	PROCEDURE ^ UninstallTrapWriterFactory*(factory: WriterFactory); 
	PROCEDURE ^ GetWriter*(): Streams.Writer; 
	PROCEDURE ^ Trapped*; 
	PROCEDURE ^ TraceFactory(): Streams.Writer; 
	PROCEDURE ^ LogFactory(): Streams.Writer; 
	PROCEDURE ^ InstallTraceWriter*; 
	PROCEDURE ^ RemoveTraceWriter*; 
	PROCEDURE ^ InstallLogWriter*; 
	PROCEDURE ^ RemoveLogWriter*; 
	PROCEDURE ^ RemoveAll*; 
	PROCEDURE ^ Cleanup; 
BEGIN
END TrapWriters.
