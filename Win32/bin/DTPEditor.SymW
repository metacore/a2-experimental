MODULE DTPEditor;
	IMPORT KernelLog, Modules, Commands, Files, WMRestorable, XML, WMStandardComponents, WMGraphics, WMComponents, WMRectangles, WMMessages, WMDialogs, WMEditors, Strings, Texts, WMWindowManager, WMPopups, Raster, XMLObjects, XMLParser, XMLScanner, DTPData, DTPView, DTPUtilities;
CONST 
	WINDOWWIDTH = 850; 
	WINDOWHEIGHT = 700; 
TYPE 
	pluginButtons = POINTER TO ARRAY OF WMStandardComponents.Button; 

	KillerMsg = OBJECT 
	END KillerMsg; 

	Window* = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		vc: WMComponents.VisualComponent; 
		vScrollbar-: WMStandardComponents.Scrollbar; 
		hScrollbar-: WMStandardComponents.Scrollbar; 
		drawPanel*: DTPView.DrawPanel; 
		styleEditor: DTPUtilities.StyleEditor; 
		topToolbar, sideToolbar, workspace, pluginPanel: WMStandardComponents.Panel; 
		masterLabel: WMStandardComponents.Label; 
		filenameEdit, pageNumber, masterNumber: WMEditors.Editor; 
		fileMenu, objectMenu, pageMenu, miscMenu: WMStandardComponents.Button; 
		select, frame, cbutton: WMStandardComponents.Button; 
		modePreview, modeMaster: WMStandardComponents.Button; 
		popup: WMPopups.Popup; 
		nDialog: NewDialog; 
		nDiagOpen: BOOLEAN; 
		scrollbar: BOOLEAN; 
		currentDocument: DTPData.Document; 
		cpage: DTPData.PageObject; 
		cframe: DTPData.FrameObject; 
		cguide: DTPData.GuideObject; 
		plugName: ARRAY 32 OF CHAR; 
		previewON, masterON, gridON: BOOLEAN; 
		pbuttons: pluginButtons; 
		numberOfPlugs: LONGINT; 
		fileFormat: LONGINT; 
		modified: BOOLEAN; 
		fullScreen-: BOOLEAN; 
		currentWidth, currentHeight: LONGINT; 
		XMLdocLayout, XMLdocStyle, XMLdocContent: XML.Document; 

		PROCEDURE ^ CreatePluginButton(CONST pluginName: ARRAY OF CHAR): WMStandardComponents.Button; 
		PROCEDURE ^ LoadPlugins; 
		PROCEDURE ^ AddPlugins(): WMStandardComponents.Panel; 
		PROCEDURE ^ CreateFormWindow(): WMComponents.VisualComponent; 
		PROCEDURE ^  & New*(c: WMRestorable.Context); 
		PROCEDURE ^ CheckScrollbars*; 
		PROCEDURE ^ SetActive*; 
		PROCEDURE ^ SetDocument(newdocument: DTPData.Document); 
		PROCEDURE ^ SelectHandler(sender, data: ANY); 
		PROCEDURE ^ SetPluginHandler(sender, data: ANY); 
		PROCEDURE ^ CreateContent*(): DTPData.ContentObject; 
		PROCEDURE ^ TestHandler(sender, data: ANY); 
		PROCEDURE ^ MasterHandler(sender, data: ANY); 
		PROCEDURE ^ PreviewHandler(sender, data: ANY); 
		PROCEDURE ^ FileMenuHandler(x, y: LONGINT; keys: SET; VAR handled: BOOLEAN); 
		PROCEDURE ^ ObjectMenuHandler(x, y: LONGINT; keys: SET; VAR handled: BOOLEAN); 
		PROCEDURE ^ PageMenuHandler(x, y: LONGINT; keys: SET; VAR handled: BOOLEAN); 
		PROCEDURE ^ MiscMenuHandler(x, y: LONGINT; keys: SET; VAR handled: BOOLEAN); 
		PROCEDURE ^ ZoomHandler(sender, data: ANY); 
		PROCEDURE ^ ZoomUserHandler(sender, data: ANY); 
		PROCEDURE ^ GridHandler(sender, data: ANY); 
		PROCEDURE ^ SnapHandler(sender, data: ANY); 
		PROCEDURE ^ FullScreenHandler*(sender, data: ANY); 
		PROCEDURE ^ EscFullScreen*; 
		PROCEDURE ^ LoadHandler(sender, data: ANY); 
		PROCEDURE ^ LoadCharacterStyle(cstyle: DTPData.CharacterStyleObject); 
		PROCEDURE ^ LoadParagraphStyle(pstyle: DTPData.ParagraphStyleObject); 
		PROCEDURE ^ Load(CONST filename: ARRAY OF CHAR; format: LONGINT); 
		PROCEDURE ^ BuildDocFromXML; 
		PROCEDURE ^ StoreHandler(sender, data: ANY); 
		PROCEDURE ^ Store(CONST filename: ARRAY OF CHAR; format: LONGINT); 
		PROCEDURE ^ ExportHandler(sender, data: ANY); 
		PROCEDURE ^ NewHandler(sender, data: ANY); 
		PROCEDURE ^ CreateNew; 
		PROCEDURE ^ CreateDoc(w, h, mt, mb, ml, mr: REAL; fp: BOOLEAN); 
		PROCEDURE ^ ObjectCutHandler(sender, data: ANY); 
		PROCEDURE ^ ObjectCopyHandler(sender, data: ANY); 
		PROCEDURE ^ ObjectPasteHandler(sender, data: ANY); 
		PROCEDURE ^ ObjectDeleteHandler(sender, data: ANY); 
		PROCEDURE ^ ObjectToFrontHandler(sender, data: ANY); 
		PROCEDURE ^ ObjectFrontStepHandler(sender, data: ANY); 
		PROCEDURE ^ ObjectToBackHandler(sender, data: ANY); 
		PROCEDURE ^ ObjectBackStepHandler(sender, data: ANY); 
		PROCEDURE ^ ObjectPrevHandler(sender, data: ANY); 
		PROCEDURE ^ ObjectNextHandler(sender, data: ANY); 
		PROCEDURE ^ AddBeforePageHandler(sender, data: ANY); 
		PROCEDURE ^ AddAfterPageHandler(sender, data: ANY); 
		PROCEDURE ^ DeletePageHandler(sender, data: ANY); 
		PROCEDURE ^ NextPageHandler(sender, data: ANY); 
		PROCEDURE ^ PrevPageHandler(sender, data: ANY); 
		PROCEDURE ^ LastPageHandler(sender, data: ANY); 
		PROCEDURE ^ FirstPageHandler(sender, data: ANY); 
		PROCEDURE ^ GoToPageHandler(sender, data: ANY); 
		PROCEDURE ^ UpdatePageNumber; 
		PROCEDURE ^ MiscStyleEditorHandler(sender, data: ANY); 
		PROCEDURE ^ TextPropUpdateHandler*; 
		PROCEDURE ^ PropsHandler(sender, data: ANY); 
		PROCEDURE ^ SetMasterHandler(sender, data: ANY); 
		PROCEDURE ^ Close*; 
	END Window; 

	NewDialog* = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		content: WMComponents.VisualComponent; 
		result: LONGINT; 
		dhe, dwe, dmte, dmbe, dmle, dmre, dfpe: WMEditors.Editor; 
		dhs, dws, dmts, dmbs, dmls, dmrs, dfps: ARRAY 256 OF CHAR; 
		dhr, dwr, dmtr, dmbr, dmlr, dmrr, dfpr: LONGREAL; 
		fpCheck: DTPUtilities.Checkbox; 
		facep: BOOLEAN; 
		theCaller: Window; 

		PROCEDURE ^  & New*(caller: Window); 
		PROCEDURE ^ CreateNewDialog; 
		PROCEDURE ^ FocusNextField(sender, data: ANY); 
		PROCEDURE ^ Show*; 
		PROCEDURE ^ InitFieldValues; 
		PROCEDURE ^ Ok(sender, data: ANY); 
		PROCEDURE ^ Cancel(sender, data: ANY); 
	END NewDialog; 

	PleaseWaitWindow* = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		label: WMStandardComponents.Label; 
		status: WMStandardComponents.Label; 
		spacer: WMStandardComponents.Panel; 
		panel: WMStandardComponents.Panel; 
		container: WMStandardComponents.Panel; 
		button*: WMStandardComponents.Button; 
		mode: LONGINT; 
		shown: BOOLEAN; 
		x, y: LONGINT; 
		progress: LONGINT; 

		PROCEDURE ^ CreateForm(): WMComponents.VisualComponent; 
		PROCEDURE ^  & New*; 
		PROCEDURE ^ SetMessage(CONST msg: ARRAY OF CHAR); 
		PROCEDURE ^ SetColor(color: LONGINT); 
		PROCEDURE ^ Show*; 
		PROCEDURE ^ Hide*; 
	BEGIN{ACTIVE} 
	END PleaseWaitWindow; 

	PluginListEntry = OBJECT 
	VAR 
		pname: ARRAY 16 OF CHAR; 
		next: PluginListEntry; 
	END PluginListEntry; 

	PluginList = OBJECT 
	VAR 
		first: PluginListEntry; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Add(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ Remove(CONST name: ARRAY OF CHAR); 
	END PluginList; 

	PluginEntry = OBJECT 
	VAR 
		generator: DTPData.ContentFactory; 
		generatorName: Modules.Name; 
	END PluginEntry; 

	PluginRegistry* = OBJECT 
	VAR 
		generators: XMLObjects.Dictionary; 
		plugList: PluginList; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ RegisterPlugin*(CONST name: ARRAY OF CHAR; generator: DTPData.ContentFactory); 
		PROCEDURE ^ RegisterPluginByName*(CONST name: ARRAY OF CHAR; CONST generatorName: Modules.Name); 
		PROCEDURE ^ UnregisterPlugin*(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ InstantiatePlugin*(CONST name: ARRAY OF CHAR): DTPData.ContentObject; 
		PROCEDURE ^ GetNumberOfPlugins*(): LONGINT; 
		PROCEDURE ^ GetPluginList*(): PluginList; 
		PROCEDURE ^ GetPlugins*(): XMLObjects.Enumerator; 
	END PluginRegistry; 
VAR 
	nofWindows: LONGINT; 
	plugRegistry*: PluginRegistry; 
	Unassigned: DTPData.ContentFactory; 

	PROCEDURE ^ OpenNew*; 
	PROCEDURE ^ OpenEmptyA4portrait*; 
	PROCEDURE ^ OpenEmptyA4landscape*; 
	PROCEDURE ^ OpenEmptyA5portrait*; 
	PROCEDURE ^ OpenEmptyA5landscape*; 
	PROCEDURE ^ OpenEmpty*(context: Commands.Context); 
	PROCEDURE ^ Open*(context: Commands.Context); 
	PROCEDURE ^ Restore*(context: WMRestorable.Context); 
	PROCEDURE ^ IncCount; 
	PROCEDURE ^ DecCount; 
	PROCEDURE ^ Cleanup; 
BEGIN
END DTPEditor.
