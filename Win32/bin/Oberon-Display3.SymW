MODULE Display3 IN Oberon;
	IMPORT Display, Objects, Fonts, Pictures, Oberon, Texts;
CONST 
	replace* = Display.replace; 
	paint* = Display.paint; 
	invert* = Display.invert; 
	filled* = 1; 
	maxcoord = 8192; 
	add = 1; 
	subtract = 2; 
	BrushSize = 100; 
TYPE 
	Mask* = POINTER TO MaskDesc; 

	OverlapMsg* = RECORD (Display.FrameMsg)
		M*: Mask; 
	END; 

	UpdateMaskMsg* = RECORD (Display.FrameMsg)
	END; 

	Run = POINTER TO RunDesc; 

	RunDesc = RECORD 
		x, w, right: SIGNED16; 
		value: SIGNED16; 
		next, prev: Run; 
	END; 

	ScanLine = POINTER TO ScanLineDesc; 

	ScanLineDesc = RECORD 
		y, h, top: SIGNED16; 
		maymerge: BOOLEAN; 
		run: Run; 
		next, prev: ScanLine; 
	END; 

	MaskDesc* = RECORD 
		x*, y*: SIGNED16; 
		X*, Y*, W*, H*: SIGNED16; 
		sX, sY, sW, sH: SIGNED16; 
		simple: BOOLEAN; 
		scanline: ScanLine; 
	END; 

	EnumProc* = PROCEDURE (X, Y, W, H: SIGNED16); 

	Brush = RECORD 
		brul, brur: ARRAY BrushSize OF SIGNED16; 
		bufl, bufr: ARRAY BrushSize OF SIGNED16; 
		bufh, brushr: SIGNED16; 
		x, y, mode: SIGNED16; 
		col: Display.Color; 
		M: Mask; 
		pat: Display.Pattern; 
	END; 
VAR 
	selectpat*: Display.Pattern; 
	FG*, BG*: SIGNED16; 
	red*, green*, blue*: SIGNED16; 
	black*, white*: SIGNED16; 
	topC*: SIGNED16; 
	bottomC*: SIGNED16; 
	upC*: SIGNED16; 
	downC*: SIGNED16; 
	groupC*: SIGNED16; 
	invertC*: SIGNED16; 
	textC*: SIGNED16; 
	textbackC*: SIGNED16; 
	textmode*: SIGNED16; 
	typ: SIGNED16; 
	aM, bM: Mask; 
	tmpP: Pictures.Picture; 
	tmpM, dX, dY: SIGNED16; 
	compactionflag: BOOLEAN; 
	drawingPolygon: BOOLEAN; 
	brush: Brush; 

	PROCEDURE ^ Min(x, y: SIGNED16): SIGNED16; 
	PROCEDURE ^ Max(x, y: SIGNED16): SIGNED16; 
	PROCEDURE ^ ClipAgainst(VAR x, y, w, h: SIGNED16; x1, y1, w1, h1: SIGNED16); 
	PROCEDURE ^ Clip(M: Mask; VAR x, y, w, h: SIGNED16); 
	PROCEDURE ^ Open0(M: Mask); 
	PROCEDURE ^ Open*(M: Mask); 
	PROCEDURE ^ Enum*(M: Mask; enum: EnumProc); 
	PROCEDURE ^ EnumInvert*(M: Mask; enum: EnumProc); 
	PROCEDURE ^ EnumRect*(M: Mask; X, Y, W, H: SIGNED16; enum: EnumProc); 
	PROCEDURE ^ SplitScan(s: ScanLine; y: SIGNED16); 
	PROCEDURE ^ MergeScanLine(s: ScanLine); 
	PROCEDURE ^ Compact(M: Mask); 
	PROCEDURE ^ DoLine(s: ScanLine; x, y, w, h: SIGNED16); 
	PROCEDURE ^ ExclLine(s: ScanLine; x, y, w, h: SIGNED16); 
	PROCEDURE ^ Copy*(from: Mask; VAR to: Mask); 
	PROCEDURE ^ Add*(M: Mask; X, Y, W, H: SIGNED16); 
	PROCEDURE ^ AdjustMask*(M: Mask; X, Y, W, H: SIGNED16); 
	PROCEDURE ^ Subtract*(M: Mask; X, Y, W, H: SIGNED16); 
	PROCEDURE ^ Intersect*(M: Mask; X, Y, W, H: SIGNED16); 
	PROCEDURE ^ IntersectMasks1(x, y, w, h: SIGNED16); 
	PROCEDURE ^ IntersectMasks0(X, Y, W, H: SIGNED16); 
	PROCEDURE ^ IntersectMasks*(A, B: Mask; VAR R: Mask); 
	PROCEDURE ^ SubtractMasks*(A, B: Mask; VAR R: Mask); 
	PROCEDURE ^ Shift*(M: Mask); 
	PROCEDURE ^ Rectangular*(M: Mask; VAR X, Y, W, H: SIGNED16): BOOLEAN; 
	PROCEDURE ^ CopyMask*(M: Mask; X, Y: SIGNED16; mode: SIGNED16); 
	PROCEDURE ^ ReplConst*(M: Mask; col: Display.Color; X, Y, W, H, mode: SIGNED16); 
	PROCEDURE ^ Visible*(M: Mask; X, Y, W, H: SIGNED16): BOOLEAN; 
	PROCEDURE ^ Dot*(M: Mask; col: Display.Color; X, Y, mode: SIGNED16); 
	PROCEDURE ^ FillPattern*(M: Mask; col: Display.Color; pat: Display.Pattern; pX, pY, X, Y, W, H, mode: SIGNED16); 
	PROCEDURE ^ CopyPattern*(M: Mask; col: Display.Color; pat: Display.Pattern; X, Y, mode: SIGNED16); 
	PROCEDURE ^ Rect*(M: Mask; col: Display.Color; pat: Display.Pattern; X, Y, W, H, width, mode: SIGNED16); 
	PROCEDURE ^ Rect3D*(M: Mask; topcol, botcol: Display.Color; X, Y, W, H, width, mode: SIGNED16); 
	PROCEDURE ^ FilledRect3D*(M: Mask; topcol, botcol, incol: Display.Color; X, Y, W, H, width, mode: SIGNED16); 
	PROCEDURE ^ BrushJump(VAR b: Brush; x, y: SIGNED16); 
	PROCEDURE ^ BrushWalk(VAR b: Brush; x, y: SIGNED16); 
	PROCEDURE ^ BrushFlush(VAR b: Brush); 
	PROCEDURE ^ InitBrush(VAR b: Brush; M: Mask; pat: Display.Pattern; col: Display.Color; w, mode: SIGNED16); 
	PROCEDURE ^ Line*(M: Mask; col: Display.Color; pat: Display.Pattern; X, Y, X1, Y1, width, mode: SIGNED16); 
	PROCEDURE ^ FilledPoly(M: Mask; col: Display.Color; pat: Display.Pattern; VAR X, Y: ARRAY OF SIGNED16; n, mode: SIGNED16); 
	PROCEDURE ^ Poly*(M: Mask; col: Display.Color; pat: Display.Pattern; VAR X, Y: ARRAY OF SIGNED16; n, width: SIGNED16; style: SET; mode: SIGNED16); 
	PROCEDURE ^ Ellipse*(M: Mask; col: Display.Color; pat: Display.Pattern; X, Y, a, b, width: SIGNED16; style: SET; mode: SIGNED16); 
	PROCEDURE ^ Circle*(M: Mask; col: Display.Color; pat: Display.Pattern; X, Y, r, width: SIGNED16; style: SET; mode: SIGNED16); 
	PROCEDURE ^ String*(M: Mask; col: Display.Color; X, Y: SIGNED16; fnt: Fonts.Font; s: ARRAY OF CHAR; mode: SIGNED16); 
	PROCEDURE ^ CenterString*(M: Mask; col: Display.Color; X, Y, W, H: SIGNED16; fnt: Fonts.Font; s: ARRAY OF CHAR; mode: SIGNED16); 
	PROCEDURE ^ StringSize*(s: ARRAY OF CHAR; fnt: Fonts.Font; VAR w, h, dsr: SIGNED16); 
	PROCEDURE ^ EnumPict(X, Y, W, H: SIGNED16); 
	PROCEDURE ^ Pict*(M: Mask; P: Pictures.Picture; X, Y, W, H, DX, DY, mode: SIGNED16); 
	PROCEDURE ^ ReplPict*(M: Mask; P: Pictures.Picture; px, py, X, Y, W, H, mode: SIGNED16); 
	PROCEDURE ^ Init; 
BEGIN
END Display3.
