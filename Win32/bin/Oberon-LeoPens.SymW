MODULE LeoPens IN Oberon;
	IMPORT Files, Objects, Display, Strings, Gadgets, Colors, Images, GfxMatrix, GfxPaths, Gfx, Leonardo;
CONST 
	CacheSize = 4; 
TYPE 
	DistArray* = POINTER TO ARRAY OF REAL; 

	Methods* = POINTER TO MethodBlock; 

	Pen* = POINTER TO PenDesc; 

	PenDesc* = RECORD (Objects.ObjDesc)
		do*: Methods; 
		ctxt*: Gfx.Context; 
		destructive*: BOOLEAN; 
		needDist*: BOOLEAN; 
		zeroDistOnly*: BOOLEAN; 
	END; 

	MethodBlock* = RECORD 
		begin*: PROCEDURE (pen: Pen; ctxt: Gfx.Context); 
		end*: PROCEDURE (pen: Pen); 
		enter*: PROCEDURE (pen: Pen; x, y, dxi, dyi, bdist: REAL); 
		exit*: PROCEDURE (pen: Pen; dxo, dyo, edist: REAL); 
		line*: PROCEDURE (pen: Pen; x, y: REAL); 
		arc*: PROCEDURE (pen: Pen; x, y, x0, y0, x1, y1, x2, y2: REAL); 
		bezier*: PROCEDURE (pen: Pen; x, y, x1, y1, x2, y2: REAL); 
		render*: PROCEDURE (pen: Pen; ctxt: Gfx.Context; VAR bdist, edist: ARRAY OF REAL; n: LONGINT); 
	END; 

	WidePen* = POINTER TO WidePenDesc; 

	WidePenDesc* = RECORD (PenDesc)
		width*: REAL; 
		limit*: REAL; 
		capstyle*: Gfx.CapStyle; 
		joinstyle*: Gfx.JoinStyle; 
	END; 

	Recorder* = POINTER TO RecorderDesc; 

	RecorderDesc* = RECORD (PenDesc)
		path*: GfxPaths.Path; 
	END; 

	Stroker* = POINTER TO StrokerDesc; 

	StrokerDesc* = RECORD (WidePenDesc)
		col*: Gfx.Color; 
		img*: Images.Image; 
		px*, py*: REAL; 
		pat: Gfx.Pattern; 
	END; 

	Filler* = POINTER TO FillerDesc; 

	FillerDesc* = RECORD (PenDesc)
		col*: Gfx.Color; 
		img*: Images.Image; 
		px*, py*: REAL; 
		pat: Gfx.Pattern; 
	END; 

	Dasher* = POINTER TO DasherDesc; 

	DasherDesc* = RECORD (PenDesc)
		base*: Pen; 
		on*, off*, onbak, offbak: ARRAY Gfx.MaxDashPatSize OF REAL; 
		len*, lenbak: LONGINT; 
		phase*, phasebak: REAL; 
		continuous*: BOOLEAN; 
	END; 

	Forker* = POINTER TO ForkerDesc; 

	ForkerDesc* = RECORD (PenDesc)
		lower*, upper*: Pen; 
		bdist, edist: DistArray; 
		n: LONGINT; 
	END; 

	UpdateMsg* = RECORD (Leonardo.BroadcastMsg)
		pen*: Pen; 
	END; 
VAR 
	Default*: Pen; 
	RecorderMethods, StrokerMethods, FillerMethods, DasherMethods, ForkerMethods: Methods; 
	Path: ARRAY CacheSize OF GfxPaths.Path; 
	PathNo: LONGINT; 

	PROCEDURE ^ Append*(VAR d: DistArray; pos: LONGINT; val: REAL); 
	PROCEDURE ^ Update*(pen: Pen); 
	PROCEDURE ^ Copy*(VAR msg: Objects.CopyMsg; from, to: Pen); 
	PROCEDURE ^ Handle*(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ Begin*(pen: Pen; ctxt: Gfx.Context); 
	PROCEDURE ^ End*(pen: Pen); 
	PROCEDURE ^ Enter*(pen: Pen; x, y, dxi, dyi, bdist: REAL); 
	PROCEDURE ^ Exit*(pen: Pen; dxo, dyo, edist: REAL); 
	PROCEDURE ^ Line*(pen: Pen; x, y: REAL); 
	PROCEDURE ^ Arc*(pen: Pen; x, y, x0, y0, x1, y1, x2, y2: REAL); 
	PROCEDURE ^ Bezier*(pen: Pen; x, y, x1, y1, x2, y2: REAL); 
	PROCEDURE ^ GetTempPath*(VAR path: GfxPaths.Path); 
	PROCEDURE ^ ReleaseTempPath*(path: GfxPaths.Path); 
	PROCEDURE ^ RenderPath*(pen: Pen; ctxt: Gfx.Context; VAR bdist, edist: ARRAY OF REAL; n: LONGINT); 
	PROCEDURE ^ CopyWidePen*(VAR msg: Objects.CopyMsg; from, to: WidePen); 
	PROCEDURE ^ WidePenAttr*(pen: WidePen; VAR msg: Objects.AttrMsg); 
	PROCEDURE ^ WriteWidePen*(pen: WidePen; VAR r: Files.Rider); 
	PROCEDURE ^ ReadWidePen*(pen: WidePen; VAR r: Files.Rider); 
	PROCEDURE ^ HandleRecorder*(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ InitRecorder*(pen: Recorder); 
	PROCEDURE ^ NewRecorder*; 
	PROCEDURE ^ BeginRecorder(pen: Pen; ctxt: Gfx.Context); 
	PROCEDURE ^ EnterRecorder(pen: Pen; x, y, dxi, dyi, bdist: REAL); 
	PROCEDURE ^ ExitRecorder(pen: Pen; dxo, dyo, edist: REAL); 
	PROCEDURE ^ RecordLine(pen: Pen; x, y: REAL); 
	PROCEDURE ^ RecordArc(pen: Pen; x, y, x0, y0, x1, y1, x2, y2: REAL); 
	PROCEDURE ^ RecordBezier(pen: Pen; x, y, x1, y1, x2, y2: REAL); 
	PROCEDURE ^ RecordPath(pen: Pen; ctxt: Gfx.Context; VAR bdist, edist: ARRAY OF REAL; n: LONGINT); 
	PROCEDURE ^ InitRecorders; 
	PROCEDURE ^ HandleStroker*(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ InitStroker*(pen: Stroker; col: Gfx.Color; width: REAL); 
	PROCEDURE ^ NewStroker*; 
	PROCEDURE ^ UseStroker(pen: Stroker; ctxt: Gfx.Context); 
	PROCEDURE ^ BeginStroker(pen: Pen; ctxt: Gfx.Context); 
	PROCEDURE ^ EndStroker(pen: Pen); 
	PROCEDURE ^ RenderStroker(pen: Pen; ctxt: Gfx.Context; VAR bdist, edist: ARRAY OF REAL; n: LONGINT); 
	PROCEDURE ^ InitStrokers; 
	PROCEDURE ^ HandleFiller*(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ InitFiller*(pen: Filler; col: Gfx.Color); 
	PROCEDURE ^ NewFiller*; 
	PROCEDURE ^ UseFiller(pen: Filler; ctxt: Gfx.Context); 
	PROCEDURE ^ BeginFiller(pen: Pen; ctxt: Gfx.Context); 
	PROCEDURE ^ EndFiller(pen: Pen); 
	PROCEDURE ^ RenderFiller(pen: Pen; ctxt: Gfx.Context; VAR bdist, edist: ARRAY OF REAL; n: LONGINT); 
	PROCEDURE ^ InitFillers; 
	PROCEDURE ^ HandleDasher*(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ InitDasher*(pen: Dasher; base: Pen; on, off: ARRAY OF REAL; len: LONGINT); 
	PROCEDURE ^ NewDasher*; 
	PROCEDURE ^ BeginDasher(pen: Pen; ctxt: Gfx.Context); 
	PROCEDURE ^ EndDasher(pen: Pen); 
	PROCEDURE ^ DashSubpath(pen: Pen; bdist, edist: REAL); 
	PROCEDURE ^ EnterDasher(pen: Pen; x, y, dxi, dyi, bdist: REAL); 
	PROCEDURE ^ ExitDasher(pen: Pen; dxo, dyo, edist: REAL); 
	PROCEDURE ^ RenderDasher(pen: Pen; ctxt: Gfx.Context; VAR bdist, edist: ARRAY OF REAL; n: LONGINT); 
	PROCEDURE ^ InitDashers; 
	PROCEDURE ^ HandleForker*(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ InitForker*(pen: Forker; lower, upper: Pen); 
	PROCEDURE ^ NewForker*; 
	PROCEDURE ^ BeginForker(pen: Pen; ctxt: Gfx.Context); 
	PROCEDURE ^ ForkPath(pen: Pen; ctxt: Gfx.Context; VAR bdist, edist: ARRAY OF REAL; n: LONGINT); 
	PROCEDURE ^ EndForker(pen: Pen); 
	PROCEDURE ^ EnterForker(pen: Pen; x, y, dx, dy, bdist: REAL); 
	PROCEDURE ^ ExitForker(pen: Pen; dx, dy, edist: REAL); 
	PROCEDURE ^ InitForkers; 
BEGIN
END LeoPens.
