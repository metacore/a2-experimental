MODULE SearchTools;
	IMPORT Streams, Commands, Options, Files, Strings, UTF8Strings, Texts, TextUtilities;
CONST 
TYPE 
	SearchString = ARRAY 256 OF CHAR; 

	SearchStringUCS = ARRAY 256 OF Texts.Char32; 

	Parameters = POINTER TO RECORD 
		repeat: BOOLEAN; 
		subdirectory: BOOLEAN; 
	END; 

	PatternParameters = POINTER TO RECORD (Parameters)
		searchString: SearchString; 
		replaceString: SearchString; 
	END; 

	Statistics = OBJECT 
	VAR 
		nofFiles: LONGINT; 
		nofMatches, nofConflicts, nofErrors: LONGINT; 
		verbose: BOOLEAN; 
		abort: BOOLEAN; 

		PROCEDURE ^  & Reset*; 
		PROCEDURE ^ Show(w: Streams.Writer); 
	END Statistics; 

	EnumProc = PROCEDURE (CONST filename: Files.FileName; param: Parameters; stats: Statistics; context: Commands.Context); 

	PROCEDURE ^ FindString(CONST filename: Files.FileName; param: Parameters; stats: Statistics; context: Commands.Context); 
	PROCEDURE ^ ReplaceString(CONST filename: Files.FileName; param: Parameters; stats: Statistics; context: Commands.Context); 
	PROCEDURE ^ FindStringRaw(CONST filename: Files.FileName; param: Parameters; stats: Statistics; context: Commands.Context); 
	PROCEDURE ^ SearchPatternRaw*(r: Streams.Reader; w: Streams.Writer; CONST pattern: ARRAY OF CHAR); 
	PROCEDURE ^ Enumerate(CONST path, pattern: ARRAY OF CHAR; param: Parameters; proc: EnumProc; stats: Statistics; context: Commands.Context); 
	PROCEDURE ^ Unescape(CONST source: ARRAY OF CHAR; VAR dest: ARRAY OF CHAR); 
	PROCEDURE ^ Find*(context: Commands.Context); 
	PROCEDURE ^ Replace*(context: Commands.Context); 
BEGIN
END SearchTools.
