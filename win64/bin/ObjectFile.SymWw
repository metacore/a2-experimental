MODULE ObjectFile;
	IMPORT Streams, BitSets, StringPool;
CONST 
	Absolute* = 0; 
	Relative* = 1; 
	InitCode* = 0; 
	BodyCode* = 1; 
	Code* = 2; 
	Data* = 3; 
	Const* = 4; 
	Aligned = 0; 
	Fixed = 1; 
	DefaultExtension* = \".Gof"\; 
	SegmentedNameLength = 8; 
TYPE 
	Unit* = LONGINT; 

	Bits* = LONGINT; 

	SectionType = INTEGER; 

	SegmentedName* = ARRAY SegmentedNameLength OF StringPool.Index; 

	SectionName* = ARRAY 128 OF CHAR; 

	FixupPattern* = RECORD 
		offset*, bits*: Bits; 
	END; 

	FixupPatterns* = POINTER TO ARRAY OF FixupPattern; 

	Identifier* = RECORD 
		name*: SegmentedName; 
		fingerprint*: LONGINT; 
	END; 

	Pattern* = POINTER TO RECORD 
		mode-: INTEGER; 
		scale-: Bits; 
		patterns-: LONGINT; 
		pattern-: FixupPatterns; 
	END; 

	Patch* = RECORD 
		offset-, displacement-: Unit; 
	END; 

	Patches* = POINTER TO ARRAY OF Patch; 

	Fixup* = RECORD 
		identifier*: Identifier; 
		pattern-: Pattern; 
		index*: LONGINT; 
		patches*: LONGINT; 
		patch*: Patches; 
	END; 

	Alias* = RECORD 
		identifier*: Identifier; 
		offset-: Unit; 
	END; 

	Fixups* = POINTER TO ARRAY OF Fixup; 

	Aliases* = POINTER TO ARRAY OF Alias; 

	Section* = RECORD 
		type*: SectionType; 
		priority*: LONGINT; 
		identifier*: Identifier; 
		unit*: Bits; 
		fixed*: BOOLEAN; 
		alignment*: Unit; 
		fixups-: LONGINT; 
		fixup-: Fixups; 
		aliases-: LONGINT; 
		alias-: Aliases; 
		bits*: BitSets.BitSet; 
	END; 

	PoolMapItem = RECORD 
		key, value: LONGINT; 
	END; 

	PoolMapArray* = POINTER TO ARRAY OF PoolMapItem; 

	PoolMap* = OBJECT 
	VAR 
		table: PoolMapArray; 
		size: LONGINT; 
		used: LONGINT; 
		maxLoadFactor: REAL; 
		writer: Streams.Writer; 

		PROCEDURE ^  & Init*(initialSize: LONGINT); 
		PROCEDURE ^ Put(key, value: LONGINT); 
		PROCEDURE ^ Get*(key: LONGINT): LONGINT; 
		PROCEDURE ^ Has*(key: LONGINT): BOOLEAN; 
		PROCEDURE ^ Clear*; 
		PROCEDURE ^ HashValue(key: LONGINT): LONGINT; 
		PROCEDURE ^ Grow; 
		PROCEDURE ^ Read*(reader: Streams.Reader); 
		PROCEDURE ^ PutGlobal*(key: LONGINT); 
		PROCEDURE ^ PutSegmentedName*(CONST name: SegmentedName); 
		PROCEDURE ^ BeginWriting*(w: Streams.Writer); 
		PROCEDURE ^ EndWriting*; 
	END PoolMap; 

	NameList* = POINTER TO ARRAY OF SegmentedName; 
VAR 
	categories: ARRAY 6 OF ARRAY 10 OF CHAR; 
	modes: ARRAY 2 OF ARRAY 4 OF CHAR; 
	relocatabilities: ARRAY 2 OF ARRAY 8 OF CHAR; 
	statHeaders, statHeadersSize: LONGINT; 
	statFixups, statFixupsSize, statFixupPatterns, statFixupPatches: LONGINT; 
	statAliases, statAliasesSize: LONGINT; 
	statSegments, statSegmentsSize: LONGINT; 
	statCodeSections, statCodeSectionsSize: LONGINT; 
	statDataSections, statDataSectionsSize: LONGINT; 
	statConstSections, statConstSectionsSize: LONGINT; 
	statInitSections, statInitSectionsSize: LONGINT; 
	statBodySections, statBodySectionsSize: LONGINT; 
	statSections, statSectionsTotalSize: LONGINT; 

	PROCEDURE ^ IsCode*(type: SectionType): BOOLEAN; 
	PROCEDURE ^ Matches*(CONST this, that: Identifier): BOOLEAN; 
	PROCEDURE ^ CopyIdentifier(CONST source: Identifier; VAR dest: Identifier); 
	PROCEDURE ^ CopyPattern(source: Pattern; VAR dest: Pattern); 
	PROCEDURE ^ CopyPatches(sourcePatches: LONGINT; source: Patches; VAR destPatches: LONGINT; VAR dest: Patches); 
	PROCEDURE ^ CopyFixup*(source: Fixup; VAR dest: Fixup); 
	PROCEDURE ^ CopyAlias*(CONST source: Alias; VAR dest: Alias); 
	PROCEDURE ^ CopySection*(CONST source: Section; VAR dest: Section); 
	PROCEDURE ^ InitSection*(VAR dest: Section); 
	PROCEDURE ^ NibbleToCharacter*(value: LONGINT): CHAR; 
	PROCEDURE ^ CharacterToNibble*(char: CHAR): LONGINT; 
	PROCEDURE ^ WriteSectionTextual(writer: Streams.Writer; CONST section: Section); 
	PROCEDURE ^ ReadSectionTextual(reader: Streams.Reader; VAR section: Section); 
	PROCEDURE ^ ReadNameList*(reader: Streams.Reader; VAR nameList: NameList; binary: BOOLEAN; poolMap: PoolMap); 
	PROCEDURE ^ WriteNameList*(writer: Streams.Writer; nameList: NameList; binary: BOOLEAN; poolMap: PoolMap); 
	PROCEDURE ^ WriteSectionBinary(writer: Streams.Writer; CONST section: Section; poolMap: PoolMap); 
	PROCEDURE ^ ReadSectionBinary(reader: Streams.Reader; VAR section: Section; poolMap: PoolMap); 
	PROCEDURE ^ ReadSection*(reader: Streams.Reader; VAR section: Section; binary: BOOLEAN; poolMap: PoolMap); 
	PROCEDURE ^ WriteSection*(writer: Streams.Writer; CONST section: Section; binary: BOOLEAN; poolMap: PoolMap); 
	PROCEDURE ^ SetFixups*(VAR section: Section; fixups: LONGINT; fixup: Fixups); 
	PROCEDURE ^ SetAliases*(VAR section: Section; aliases: LONGINT; alias: Aliases); 
	PROCEDURE ^ AddPatch*(VAR patches: LONGINT; VAR patch: Patches; disp, ofs: LONGINT); 
	PROCEDURE ^ SameFixupPattern(patterns: LONGINT; left, right: FixupPatterns): BOOLEAN; 
	PROCEDURE ^ SamePattern(left, right: Pattern): BOOLEAN; 
	PROCEDURE ^ HasPattern(pat: Pattern; mode, scale: LONGINT; patterns: LONGINT; pattern: FixupPatterns): BOOLEAN; 
	PROCEDURE ^ AddFixup*(VAR fixups: LONGINT; VAR fixup: Fixups; CONST name: SegmentedName; fingerprint: LONGINT; mode: INTEGER; scale: LONGINT; patterns: LONGINT; pattern: FixupPatterns): LONGINT; 
	PROCEDURE ^ AddAlias*(VAR aliases: LONGINT; VAR alias: Aliases; CONST name: SegmentedName; fingerprint, offset: LONGINT): LONGINT; 
	PROCEDURE ^ StringToSegmentedName*(CONST name: ARRAY OF CHAR; VAR segmentedName: SegmentedName); 
	PROCEDURE ^ SegmentedNameToString*(CONST segmentedName: SegmentedName; VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ CompareSegmentedNames*(CONST s1, s2: SegmentedName): LONGINT; 
	OPERATOR ^ "="-(CONST l, r: SegmentedName): BOOLEAN; 
	OPERATOR ^ "="-(CONST l, r: Identifier): BOOLEAN; 
	OPERATOR ^ "#"-(CONST l, r: Identifier): BOOLEAN; 
	OPERATOR ^ ":="-(VAR l: SegmentedName; CONST r: ARRAY OF CHAR); 
	OPERATOR ^ ":="-(VAR l: ARRAY OF CHAR; CONST r: SegmentedName); 
	OPERATOR ^ "="-(CONST l: SegmentedName; CONST r: ARRAY OF CHAR): BOOLEAN; 
	OPERATOR ^ "="-(CONST l: ARRAY OF CHAR; r: SegmentedName): BOOLEAN; 
	OPERATOR ^ "#"-(CONST l: SegmentedName; CONST r: ARRAY OF CHAR): BOOLEAN; 
	OPERATOR ^ "#"-(CONST l: ARRAY OF CHAR; r: SegmentedName): BOOLEAN; 
	OPERATOR ^ "#"-(CONST l, r: SegmentedName): BOOLEAN; 
	PROCEDURE ^ Statistics*; 
	PROCEDURE ^ ResetStatistics*; 
BEGIN
END ObjectFile.
