MODULE Streams IN Oberon;
	IMPORT SYSTEM, Files;
CONST 
	closed* = 0; 
	error* = 1; 
	in* = 2; 
	out* = 3; 
	inout* = 4; 
	binary* = 0; 
	oberon* = 1; 
	iso8859* = 2; 
TYPE 
	Stream* = POINTER TO StreamDesc; 

	StreamDesc* = RECORD 
		ReadBytes*, WriteBytes*: PROCEDURE (S: Stream; VAR x: ARRAY OF SYSTEM.BYTE; n: LONGINT); 
		Available*: PROCEDURE (S: Stream):LONGINT; 
		State*: PROCEDURE (S: Stream):INTEGER; 
		Flush*: PROCEDURE (S: Stream); 
		Close*: PROCEDURE (S: Stream); 
		res*: LONGINT; 
		mode*: INTEGER; 
		eos*, buffer*: BOOLEAN; 
	END; 

	FileStream* = POINTER TO FileStreamDesc; 

	FileStreamDesc = RECORD (StreamDesc)
		R: Files.Rider; 
		state: INTEGER; 
		ch: CHAR; 
	END; 
VAR 
	NULL*: Stream; 

	PROCEDURE ^ Read*(S: Stream; VAR x: CHAR); 
	PROCEDURE ^ Write*(S: Stream; x: CHAR); 
	PROCEDURE ^ ReadBool*(S: Stream; VAR x: BOOLEAN); 
	PROCEDURE ^ ReadInt*(S: Stream; VAR x: INTEGER); 
	PROCEDURE ^ ReadLInt*(S: Stream; VAR x: LONGINT); 
	PROCEDURE ^ ReadLReal*(S: Stream; VAR x: LONGREAL); 
	PROCEDURE ^ ReadNum*(S: Stream; VAR x: LONGINT); 
	PROCEDURE ^ ReadReal*(S: Stream; VAR x: REAL); 
	PROCEDURE ^ ReadSet*(S: Stream; VAR x: SET); 
	PROCEDURE ^ ReadString*(S: Stream; VAR x: ARRAY OF CHAR); 
	PROCEDURE ^ WriteBool*(S: Stream; x: BOOLEAN); 
	PROCEDURE ^ WriteInt*(S: Stream; x: INTEGER); 
	PROCEDURE ^ WriteLInt*(S: Stream; x: LONGINT); 
	PROCEDURE ^ WriteLReal*(S: Stream; x: LONGREAL); 
	PROCEDURE ^ WriteNum*(S: Stream; x: LONGINT); 
	PROCEDURE ^ WriteReal*(S: Stream; x: REAL); 
	PROCEDURE ^ WriteSet*(S: Stream; x: SET); 
	PROCEDURE ^ WriteString*(S: Stream; x: ARRAY OF CHAR); 
	PROCEDURE ^ NULLReadBytes(S: Stream; VAR x: ARRAY OF SYSTEM.BYTE; n: LONGINT); 
	PROCEDURE ^ NULLWriteBytes(S: Stream; VAR x: ARRAY OF SYSTEM.BYTE; n: LONGINT); 
	PROCEDURE ^ NULLAvailable(S: Stream): LONGINT; 
	PROCEDURE ^ NULLState(S: Stream): INTEGER; 
	PROCEDURE ^ NULLFlush(S: Stream); 
	PROCEDURE ^ NULLClose(S: Stream); 
	PROCEDURE ^ ReadFileBytes(S: Stream; VAR x: ARRAY OF SYSTEM.BYTE; n: LONGINT); 
	PROCEDURE ^ WriteFileBytes(S: Stream; VAR x: ARRAY OF SYSTEM.BYTE; n: LONGINT); 
	PROCEDURE ^ FileAvailable(S: Stream): LONGINT; 
	PROCEDURE ^ FileState(S: Stream): INTEGER; 
	PROCEDURE ^ FileFlush(S: Stream); 
	PROCEDURE ^ FileClose(S: Stream); 
	PROCEDURE ^ OpenFileReader*(F: Files.File; pos: LONGINT): Stream; 
	PROCEDURE ^ OpenFileWriter*(F: Files.File; pos: LONGINT): Stream; 
	PROCEDURE ^ FilePos*(S: FileStream): LONGINT; 
	PROCEDURE ^ Copy*(src, dest: Stream); 
BEGIN
END Streams.
