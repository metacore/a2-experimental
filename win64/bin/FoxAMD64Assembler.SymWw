MODULE FoxAMD64Assembler;
	IMPORT Basic := FoxBasic, Scanner := FoxScanner, SyntaxTree := FoxSyntaxTree, Global := FoxGlobal, InstructionSet := FoxAMD64InstructionSet, Sections := FoxSections, BinaryCode := FoxBinaryCode, SYSTEM, Streams, Strings, Commands, KernelLog, Diagnostics, IntermediateCode := FoxIntermediateCode, ObjectFile;
CONST 
	Trace = FALSE; 
	none* = InstructionSet.none; 
	rexB = 0; 
	rexX = 1; 
	rexR = 2; 
	rexW = 3; 
	rex = 4; 
	RAX* = 0; 
	EAX* = 0; 
	AX* = 0; 
	AL* = 0; 
	RCX* = 1; 
	ECX* = 1; 
	CX* = 1; 
	CL* = 1; 
	RDX* = 2; 
	EDX* = 2; 
	DX* = 2; 
	DL* = 2; 
	RBX* = 3; 
	EBX* = 3; 
	BX* = 3; 
	BL* = 3; 
	RSP* = 4; 
	ESP* = 4; 
	SP* = 5; 
	SPL* = 4; 
	AH* = 4; 
	RBP* = 5; 
	EBP* = 5; 
	BP* = 5; 
	BPL* = 5; 
	CH* = 5; 
	RSI* = 6; 
	ESI* = 6; 
	SI* = 6; 
	SIL* = 6; 
	DH* = 6; 
	RDI* = 7; 
	EDI* = 7; 
	DI* = 7; 
	DIL* = 7; 
	BH* = 7; 
	R8* = 8; 
	R8D* = 8; 
	R8W* = 8; 
	R8B* = 8; 
	R9* = 9; 
	R9D* = 9; 
	R9W* = 9; 
	R9B* = 9; 
	R10* = 10; 
	R10D* = 10; 
	R10W* = 10; 
	R10B* = 10; 
	R11* = 11; 
	R11D* = 11; 
	R11W* = 11; 
	R11B* = 11; 
	R12* = 12; 
	R12D* = 12; 
	R12W* = 12; 
	R12B* = 12; 
	R13* = 13; 
	R13D* = 13; 
	R13W* = 13; 
	R13B* = 13; 
	R14* = 14; 
	R14D* = 14; 
	R14W* = 14; 
	R14B* = 14; 
	R15* = 15; 
	R15D* = 15; 
	R15W* = 15; 
	R15B* = 15; 
	RIP* = 16; 
	segES = 0; 
	segCS = 1; 
	segSS = 2; 
	segDS = 3; 
	segFS = 4; 
	segGS = 5; 
	bitsDefault* = 0; 
	bits8* = 1; 
	bits16* = 2; 
	bits32* = 4; 
	bits64* = 8; 
	bits128* = 16; 
	opCode = InstructionSet.opCode; 
	modRMExtension = InstructionSet.modRMExtension; 
	modRMBoth = InstructionSet.modRMBoth; 
	cb = InstructionSet.cb; 
	cw = InstructionSet.cw; 
	cd = InstructionSet.cd; 
	cp = InstructionSet.cp; 
	ib = InstructionSet.ib; 
	iw = InstructionSet.iw; 
	id = InstructionSet.id; 
	iq = InstructionSet.iq; 
	rb = InstructionSet.rb; 
	rw = InstructionSet.rw; 
	rd = InstructionSet.rd; 
	rq = InstructionSet.rq; 
	mem64Operand = InstructionSet.mem64Operand; 
	mem128Operand = InstructionSet.mem128Operand; 
	fpStackOperand = InstructionSet.fpStackOperand; 
	directMemoryOffset = InstructionSet.directMemoryOffset; 
	maxNumberOperands = InstructionSet.maxNumberOperands; 
	reg8* = InstructionSet.reg8; 
	reg16* = InstructionSet.reg16; 
	reg32* = InstructionSet.reg32; 
	reg64* = InstructionSet.reg64; 
	CRn* = InstructionSet.CRn; 
	DRn* = InstructionSet.DRn; 
	segReg* = InstructionSet.segReg; 
	mmx* = InstructionSet.mmx; 
	xmm* = InstructionSet.xmm; 
	mem* = InstructionSet.mem; 
	sti* = InstructionSet.sti; 
	imm* = InstructionSet.imm; 
	ioffset* = InstructionSet.ioffset; 
	pntr1616* = InstructionSet.pntr1616; 
	pntr1632* = InstructionSet.pntr1632; 
	TAB = 9X; 
	LF = 0AX; 
	CR = 0DX; 
	SPACE = 20X; 
	symNone = 0; 
	symIdent = 1; 
	symLabel = 2; 
	symNumber = 3; 
	symSemicolon = 4; 
	symColon = 5; 
	symLn = 6; 
	symComma = 7; 
	symString = 8; 
	symPlus = 9; 
	symMinus = 10; 
	symTimes = 11; 
	symDiv = 12; 
	symLParen = 13; 
	symRParen = 14; 
	symLBrace = 15; 
	symRBrace = 16; 
	symLBraket = 17; 
	symRBraket = 18; 
	symPC = 19; 
	symPCOffset = 20; 
	symNegate = 21; 
	symMod = 22; 
	symPeriod = 23; 
	symAt = 24; 
	symEnd = 25; 
TYPE 
	Name = Scanner.IdentifierString; 

	Size = SHORTINT; 

	Register* = LONGINT; 

	Operand* = RECORD 
		type-: SHORTINT; 
		register-: Register; 
		sizeInBytes-: Size; 
		segment-, index-: Register; 
		scale-, displacement-: LONGINT; 
		symbol-: ObjectFile.Identifier; 
		symbolOffset-: LONGINT; 
		val-: HUGEINT; 
		pc-: LONGINT; 
		selector-, offset-: LONGINT; 
	END; 

	Code* = BinaryCode.Section; 

	NamedLabel* = OBJECT 
	VAR 
		offset: LONGINT; 
		name-: SyntaxTree.IdentifierString; 
		nextNamedLabel-: NamedLabel; 
		index-: LONGINT; 

		PROCEDURE ^  & InitNamedLabel(offset: LONGINT; CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ SetOffset*(ofs: LONGINT); 
	END NamedLabel; 

	NamedLabelList* = OBJECT 
	VAR 
		first-, last-: NamedLabel; 
		number-: LONGINT; 

		PROCEDURE ^  & InitNamedLabelList; 
		PROCEDURE ^ Add*(n: NamedLabel); 
		PROCEDURE ^ Find*(CONST name: ARRAY OF CHAR): NamedLabel; 
	END NamedLabelList; 

	Emitter* = OBJECT 
	VAR 
		code-: Code; 
		error-: BOOLEAN; 
		diagnostics: Diagnostics.Diagnostics; 
		assembly: Assembly; 
		cpuBits: Size; 
		cpuOptions: InstructionSet.CPUOptions; 
		dump: Streams.Writer; 

		PROCEDURE ^  & InitEmitter*(diagnostics: Diagnostics.Diagnostics); 
		PROCEDURE ^ SetCode*(code: BinaryCode.Section); 
		PROCEDURE ^ SetBits*(numberBits: LONGINT): BOOLEAN; 
		PROCEDURE ^ Error(CONST message: ARRAY OF CHAR); 
		PROCEDURE ^ ErrorSS(CONST msg1, msg2: ARRAY OF CHAR); 
		PROCEDURE ^ ErrorSI(CONST msg1: ARRAY OF CHAR; mnemonic: LONGINT; CONST operands: ARRAY OF Operand); 
		PROCEDURE ^ AddFixup(mode: SHORTINT; size: SHORTINT; pc: LONGINT; symbol: ObjectFile.Identifier; symbolOffset, displacement: LONGINT); 
		PROCEDURE ^ EmitInstruction(mnem: LONGINT; VAR operands: ARRAY OF Operand; lastPass: BOOLEAN): BOOLEAN; 
		PROCEDURE ^ EmitPrefix*(prefix: LONGINT); 
		PROCEDURE ^ Emit*(mnem: LONGINT; VAR op1, op2, op3: Operand); 
		PROCEDURE ^ EmitAt*(pc: LONGINT; mnem: LONGINT; VAR op1, op2, op3: Operand); 
		PROCEDURE ^ StartEmitAt*(VAR pc: LONGINT): LONGINT; 
		PROCEDURE ^ EndEmitAt*(pc: LONGINT); 
		PROCEDURE ^ Emit0*(mnem: LONGINT); 
		PROCEDURE ^ Emit1*(mnem: LONGINT; VAR op1: Operand); 
		PROCEDURE ^ Emit2*(mnem: LONGINT; VAR op1, op2: Operand); 
		PROCEDURE ^ Emit3*(mnem: LONGINT; VAR op1, op2, op3: Operand); 
	END Emitter; 

	RegisterMapEntry* = POINTER TO RECORD 
		name-: Strings.String; 
		register-: LONGINT; 
		next: RegisterMapEntry; 
	END; 

	RegisterMap* = OBJECT 
	VAR 
		first: RegisterMapEntry; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Find*(CONST name: ARRAY OF CHAR): LONGINT; 
		PROCEDURE ^ Add*(name: Strings.String; register: LONGINT); 
	END RegisterMap; 

	Assembly* = OBJECT 
	VAR 
		errPos: Basic.Position; 
		error-: BOOLEAN; 
		useLineNumbers*: BOOLEAN; 
		emitter: Emitter; 
		diagnostics: Diagnostics.Diagnostics; 
		dump: Streams.Writer; 
		fixup: BinaryCode.Fixup; 
		type: SHORTINT; 
		currentFixup: Sections.SectionName; 
		currentLabel: NamedLabel; 
		sourceName: Basic.FileName; 

		PROCEDURE ^  & InitAssembly*(diagnostics: Diagnostics.Diagnostics; emit: Emitter); 
		PROCEDURE ^ Error(CONST message: ARRAY OF CHAR); 
		PROCEDURE ^ ErrorSS(CONST msg1, msg2: ARRAY OF CHAR); 
		PROCEDURE ^ Assemble*(reader: Streams.Reader; orgPos: Basic.Position; scope: SyntaxTree.Scope; in: IntermediateCode.Section; out: IntermediateCode.Section; module: Sections.Module; exported, inlined: BOOLEAN; map: RegisterMap); 
	END Assembly; 
VAR 
	kernelWriter: Streams.Writer; 

	PROCEDURE ^ Ord(ch: CHAR): INTEGER; 
	PROCEDURE ^ HexOrd(ch: CHAR): INTEGER; 
	PROCEDURE ^ IsRegisterOperand*(CONST op: Operand): BOOLEAN; 
	PROCEDURE ^ IsMemoryOperand*(CONST op: Operand): BOOLEAN; 
	PROCEDURE ^ IsImmediateOperand*(CONST op: Operand): BOOLEAN; 
	PROCEDURE ^ DumpType*(w: Streams.Writer; type: LONGINT); 
	PROCEDURE ^ DumpOperand*(w: Streams.Writer; CONST operand: Operand); 
	PROCEDURE ^ DumpInstruction(w: Streams.Writer; mnemonic: LONGINT; CONST operands: ARRAY OF Operand); 
	PROCEDURE ^ Matches(CONST operand: Operand; type: InstructionSet.OperandType): BOOLEAN; 
	PROCEDURE ^ ValueInByteRange(value: HUGEINT): BOOLEAN; 
	PROCEDURE ^ ValueInWordRange(value: HUGEINT): BOOLEAN; 
	PROCEDURE ^ InitOperand*(VAR operand: Operand); 
	PROCEDURE ^ InitRegister*(VAR operand: Operand; register: Register); 
	PROCEDURE ^ NewRegister*(register: Register): Operand; 
	PROCEDURE ^ InitMem*(VAR operand: Operand; size: Size; reg: Register; displacement: LONGINT); 
	PROCEDURE ^ SetIndexScale*(VAR operand: Operand; index: Register; scale: LONGINT); 
	PROCEDURE ^ NewMem*(size: Size; reg: Register; displacement: LONGINT): Operand; 
	PROCEDURE ^ InitMem8*(VAR operand: Operand; reg: Register; displacement: LONGINT); 
	PROCEDURE ^ NewMem8*(reg: Register; displacement: LONGINT): Operand; 
	PROCEDURE ^ InitMem16*(VAR operand: Operand; reg: Register; displacement: LONGINT); 
	PROCEDURE ^ NewMem16*(reg: Register; displacement: LONGINT): Operand; 
	PROCEDURE ^ InitMem32*(VAR operand: Operand; reg: Register; displacement: LONGINT); 
	PROCEDURE ^ NewMem32*(reg: Register; displacement: LONGINT): Operand; 
	PROCEDURE ^ InitMem64*(VAR operand: Operand; reg: Register; displacement: LONGINT); 
	PROCEDURE ^ NewMem64*(reg: Register; displacement: LONGINT): Operand; 
	PROCEDURE ^ InitMem128*(VAR operand: Operand; reg: Register; displacement: LONGINT); 
	PROCEDURE ^ NewMem128*(reg: Register; displacement: LONGINT): Operand; 
	PROCEDURE ^ SetSymbol*(VAR operand: Operand; symbol: Sections.SectionName; fingerprint: LONGINT; symbolOffset, displacement: LONGINT); 
	PROCEDURE ^ InitImm*(VAR operand: Operand; size: SHORTINT; val: HUGEINT); 
	PROCEDURE ^ InitImm8*(VAR operand: Operand; val: HUGEINT); 
	PROCEDURE ^ NewImm8*(val: HUGEINT): Operand; 
	PROCEDURE ^ InitImm16*(VAR operand: Operand; val: HUGEINT); 
	PROCEDURE ^ NewImm16*(val: HUGEINT): Operand; 
	PROCEDURE ^ InitImm32*(VAR operand: Operand; val: HUGEINT); 
	PROCEDURE ^ NewImm32*(val: HUGEINT): Operand; 
	PROCEDURE ^ InitImm64*(VAR operand: Operand; val: HUGEINT); 
	PROCEDURE ^ NewImm64*(val: HUGEINT): Operand; 
	PROCEDURE ^ InitOffset*(VAR operand: Operand; size: SHORTINT; val: HUGEINT); 
	PROCEDURE ^ InitOffset8*(VAR operand: Operand; val: HUGEINT); 
	PROCEDURE ^ NewOffset8*(val: HUGEINT): Operand; 
	PROCEDURE ^ InitOffset16*(VAR operand: Operand; val: HUGEINT); 
	PROCEDURE ^ NewOffset16*(val: HUGEINT): Operand; 
	PROCEDURE ^ InitOffset32*(VAR operand: Operand; val: HUGEINT); 
	PROCEDURE ^ NewOffset32*(val: HUGEINT): Operand; 
	PROCEDURE ^ InitOffset64*(VAR operand: Operand; val: HUGEINT); 
	PROCEDURE ^ NewOffset64*(val: HUGEINT): Operand; 
	PROCEDURE ^ InitPntr1616*(VAR operand: Operand; s, o: LONGINT); 
	PROCEDURE ^ InitPntr1632*(VAR operand: Operand; s, o: LONGINT); 
	PROCEDURE ^ SetSize*(VAR operand: Operand; sizeInBytes: Size); 
	PROCEDURE ^ SameOperand*(CONST left, right: Operand): BOOLEAN; 
	PROCEDURE ^ Test*(context: Commands.Context); 
BEGIN
END FoxAMD64Assembler.
