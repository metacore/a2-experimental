MODULE BasicFigures IN Oberon;
	IMPORT Math IN A2, Files, Display, Display3, Printer, Printer3, Effects, Objects, Gadgets, Oberon;
CONST 
	filled* = 0; 
	closed* = 1; 
	editpoints* = 3; 
	trackmode* = 3; 
	PointOffset = 2; 
	PointSize = 5; 
TYPE 
	Point* = POINTER TO PointDesc; 

	PointDesc* = RECORD 
		prev*, next*: Point; 
		x*, y*: SIGNED16; 
	END; 

	Figure* = POINTER TO FigureDesc; 

	Methods* = POINTER TO MethodDesc; 

	MethodDesc* = RECORD 
		Draw*: PROCEDURE (F: Figure; M: Display3.Mask; x, y: SIGNED16; hint: Point; mode: SIGNED16); 
		Print*: PROCEDURE (F: Figure; M: Display3.Mask; x, y: SIGNED16); 
		Normalize*: PROCEDURE (F: Figure; VAR x, y, w, h: SIGNED16); 
		Modify*: PROCEDURE (F: Figure; nw, nh: SIGNED16); 
		HitTest*: PROCEDURE (F: Figure; x, y, mx, my: SIGNED16):BOOLEAN; 
	END; 

	FigureDesc* = RECORD (Gadgets.FrameDesc)
		p*: Point; 
		width*: SIGNED16; 
		state0*: SET; 
		col*: SIGNED16; 
		patno*: SIGNED16; 
		do*: Methods; 
	END; 
VAR 
	CircleMethods*, LineMethods*, RectMethods*, Rect3DMethods*, SplineMethods*: Methods; 
	u, v: ARRAY 2048 OF SIGNED16; 

	PROCEDURE ^ Distance(x, y, x0, y0: SIGNED16): SIGNED16; 
	PROCEDURE ^ Min(x, y: SIGNED16): SIGNED16; 
	PROCEDURE ^ Max(x, y: SIGNED16): SIGNED16; 
	PROCEDURE ^ Dev(x: SIGNED16): SIGNED16; 
	PROCEDURE ^ GetPat(no: SIGNED16): Display.Pattern; 
	PROCEDURE ^ Inside(p: Point; x, y: SIGNED16; X, Y: SIGNED32): BOOLEAN; 
	PROCEDURE ^ FigureAttr(F: Figure; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ RestoreFigure(F: Figure; M: Display3.Mask; x, y, w, h: SIGNED16); 
	PROCEDURE ^ PrintFigure(F: Figure; VAR M: Display.DisplayMsg); 
	PROCEDURE ^ CopyFigure*(VAR M: Objects.CopyMsg; from, to: Figure); 
	PROCEDURE ^ ThisPoint*(F: Figure; x, y, mx, my: SIGNED16): Point; 
	PROCEDURE ^ EmptyHandler(obj: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ ThisFrame(not: Display.Frame; X, Y: SIGNED16; VAR F: Display.Frame; VAR u, v: SIGNED16); 
	PROCEDURE ^ HasCmdAttr(F: Display.Frame; attr: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ Track*(F: Figure; x, y: SIGNED16; VAR M: Oberon.InputMsg); 
	PROCEDURE ^ ModifyFigure(F: Figure; VAR M: Display.ModifyMsg); 
	PROCEDURE ^ FigureHandler*(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ AddPoint*(F: Figure; x, y: SIGNED16); 
	PROCEDURE ^ DrawLine*(F: Figure; M: Display3.Mask; x, y: SIGNED16; hint: Point; mode: SIGNED16); 
	PROCEDURE ^ PrintLine*(F: Figure; M: Display3.Mask; x, y: SIGNED16); 
	PROCEDURE ^ HitTestLine*(F: Figure; x, y, mx, my: SIGNED16): BOOLEAN; 
	PROCEDURE ^ NormalizeLine*(F: Figure; VAR x, y, w, h: SIGNED16); 
	PROCEDURE ^ ModifyLine*(F: Figure; nw, nh: SIGNED16); 
	PROCEDURE ^ LineHandler*(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitLine*(F: Figure; x, y, x0, y0: SIGNED16); 
	PROCEDURE ^ NewLine*; 
	PROCEDURE ^ DrawCircle*(F: Figure; M: Display3.Mask; x, y: SIGNED16; hint: Point; mode: SIGNED16); 
	PROCEDURE ^ PrintCircle*(F: Figure; M: Display3.Mask; x, y: SIGNED16); 
	PROCEDURE ^ NormalizeCircle*(F: Figure; VAR x, y, w, h: SIGNED16); 
	PROCEDURE ^ ModifyCircle*(F: Figure; nw, nh: SIGNED16); 
	PROCEDURE ^ HitTestCircle*(F: Figure; x, y, mx, my: SIGNED16): BOOLEAN; 
	PROCEDURE ^ CircleHandler*(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitCircle*(F: Figure; r: SIGNED16); 
	PROCEDURE ^ NewCircle*; 
	PROCEDURE ^ DrawRect*(F: Figure; M: Display3.Mask; x, y: SIGNED16; hint: Point; mode: SIGNED16); 
	PROCEDURE ^ PrintRect*(F: Figure; M: Display3.Mask; x, y: SIGNED16); 
	PROCEDURE ^ NormalizeRect*(F: Figure; VAR x, y, w, h: SIGNED16); 
	PROCEDURE ^ ModifyRect*(F: Figure; nw, nh: SIGNED16); 
	PROCEDURE ^ HitTestRect*(F: Figure; x, y, mx, my: SIGNED16): BOOLEAN; 
	PROCEDURE ^ RectHandler*(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitRect*(F: Figure; w, h: SIGNED16); 
	PROCEDURE ^ NewRect*; 
	PROCEDURE ^ DrawRect3D*(F: Figure; M: Display3.Mask; x, y: SIGNED16; hint: Point; mode: SIGNED16); 
	PROCEDURE ^ PrintRect3D*(F: Figure; M: Display3.Mask; x, y: SIGNED16); 
	PROCEDURE ^ Rect3DHandler*(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitRect3D*(F: Figure; w, h: SIGNED16); 
	PROCEDURE ^ NewRect3D*; 
	PROCEDURE ^ MakePoly(VAR RX, RY, RXstrich, RYstrich, RS: ARRAY OF FLOAT32; n: SIGNED16; VAR X, Y: ARRAY OF SIGNED16; VAR k: SIGNED16); 
	PROCEDURE ^ SplineToPoly(c: Point; closed: BOOLEAN; VAR X, Y: ARRAY OF SIGNED16; VAR k: SIGNED16); 
	PROCEDURE ^ DrawSpline*(F: Figure; M: Display3.Mask; x, y: SIGNED16; hint: Point; mode: SIGNED16); 
	PROCEDURE ^ PrintSpline*(F: Figure; M: Display3.Mask; x, y: SIGNED16); 
	PROCEDURE ^ NormalizeSpline*(F: Figure; VAR x, y, w, h: SIGNED16); 
	PROCEDURE ^ ModifySpline*(F: Figure; nw, nh: SIGNED16); 
	PROCEDURE ^ HitTestSpline*(F: Figure; x, y, mx, my: SIGNED16): BOOLEAN; 
	PROCEDURE ^ SplineHandler*(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitSpline*(F: Figure); 
	PROCEDURE ^ NewSpline*; 
BEGIN
END BasicFigures.
