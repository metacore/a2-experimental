MODULE PCLIR;
	IMPORT Machine, KernelLog, PCM, PCBT;
CONST 
	Statistics = FALSE; 
	Debug = FALSE; 
	NoSize* = 0; 
	Int8* = 1; 
	Int16* = 2; 
	Int32* = 3; 
	Int64* = 4; 
	Float32* = 5; 
	Float64* = 6; 
	IntSize* = {Int8 .. Int64}; 
	FloatSize* = {Float32 .. Float64}; 
	none* =  -1; 
	FP* =  -2; 
	SP* =  -3; 
	Absolute* =  -4; 
	HwReg* =  -16; 
	form00* = 0; 
	form0C* = 1; 
	form01* = 2; 
	form10* = 3; 
	form1C* = 4; 
	form11* = 5; 
	form1M* = 6; 
	formM1* = 7; 
	form02* = 8; 
	form12* = 9; 
	form02C* = 10; 
	form03* = 11; 
	formXX* = 12; 
	form1X* = {form1C, form1M, form10, form11, form12}; 
	barrier* = 0; 
	commutative* = 1; 
	load* = 0; 
	loadc* = 1; 
	store* = 2; 
	in* = 3; 
	out* = 4; 
	nop* = 5; 
	saveregs* = 6; 
	loadregs* = 7; 
	label* = 8; 
	je* = 9; 
	jne* = 10; 
	jlt* = 11; 
	jle* = 12; 
	jgt* = 13; 
	jge* = 14; 
	jb* = 15; 
	jbe* = 16; 
	ja* = 17; 
	jae* = 18; 
	jf* = 19; 
	jnf* = 20; 
	jmp* = 21; 
	call* = 22; 
	syscall* = 23; 
	enter* = 24; 
	exit* = 25; 
	trap* = 26; 
	tae* = 27; 
	tne* = 28; 
	sete* = 29; 
	setne* = 30; 
	setlt* = 31; 
	setle* = 32; 
	setgt* = 33; 
	setge* = 34; 
	setb* = 35; 
	setbe* = 36; 
	seta* = 37; 
	setae* = 38; 
	setf* = 39; 
	setnf* = 40; 
	result* = 41; 
	result2* = 42; 
	pop* = 43; 
	ret* = 44; 
	ret2* = 45; 
	push* = 46; 
	callreg* = 47; 
	kill* = 48; 
	loadsp* = 49; 
	convs* = 50; 
	convu* = 51; 
	copy* = 52; 
	not* = 53; 
	neg* = 54; 
	abs* = 55; 
	mul* = 56; 
	div* = 57; 
	mod* = 58; 
	sub* = 59; 
	add* = 60; 
	and* = 61; 
	or* = 62; 
	xor* = 63; 
	bts* = 64; 
	btc* = 65; 
	ash* = 66; 
	bsh* = 67; 
	rot* = 68; 
	phi* = 69; 
	move* = 70; 
	inline* = 71; 
	case* = 72; 
	casel* = 73; 
	casee* = 74; 
	loadfp* = 75; 
	moveDown* = 76; 
	finallylabel* = 77; 
	saveregsaligned* = 78; 
	NofOpcodes* = (saveregsaligned + 1); 
	PieceLen = 128; 
TYPE 
	Opcode* = SHORTINT; 

	Register* = LONGINT; 

	Size* = SHORTINT; 

	InstructionAttribute* = OBJECT 
	END InstructionAttribute; 

	Instruction* = RECORD 
		op*: Opcode; 
		src1*, src2*, src3*: Register; 
		val*: LONGINT; 
		adr-: PCM.Attribute; 
		barrier-: LONGINT; 
		suppress*: BOOLEAN; 
		dstCount*: SHORTINT; 
		dstSize-: Size; 
		dstSigned-: BOOLEAN; 
		info*: InstructionAttribute; 
	END; 

	InstructionSetDescription* = ARRAY NofOpcodes OF RECORD 
		format-: SHORTINT; 
		flags-: SET; 
		name-: ARRAY 9 OF CHAR; 
		emit-: EmitProc; 
	END; 

	Piece* = OBJECT 
	VAR 
		instr*: ARRAY PieceLen OF Instruction; 
		len: LONGINT; 
		next, prev: Piece; 

		PROCEDURE ^  & Init*; 
	END Piece; 

	CodeAttributes* = POINTER TO RECORD 
	END; 

	Code* = OBJECT (PCM.Attribute)
	VAR 
		pc-: LONGINT; 
		first, last: Piece; 
		barrier-: LONGINT; 
		info-: CodeAttributes; 
		name*: ARRAY 32 OF CHAR; 

		PROCEDURE ^ NewInstruction; 
		PROCEDURE ^ GetPiece*(VAR src: LONGINT; VAR p: Piece); 
		PROCEDURE ^ Traverse*(proc: TraverseProc; reversed: BOOLEAN; context: ANY); 
		PROCEDURE ^  & Init*; 
	END Code; 

	EmitProc* = PROCEDURE (code: Code; VAR instr: Instruction; pc: LONGINT); 

	TraverseProc* = PROCEDURE (code: Code; VAR instr: Instruction; pc: LONGINT; context: ANY); 

	AsmFixup* = POINTER TO RECORD 
		offset*: LONGINT; 
		adr*: PCM.Attribute; 
		next*: AsmFixup; 
	END; 

	AsmBlock* = POINTER TO RECORD 
		len*: LONGINT; 
		code*: ARRAY 256 OF CHAR; 
		next*: AsmBlock; 
	END; 

	AsmInline* = OBJECT (PCM.Attribute)
	VAR 
		code*: AsmBlock; 
		fixup*: AsmFixup; 
	END AsmInline; 

	CodeArray* = POINTER TO ARRAY OF CHAR; 

	InitHandler* = PROCEDURE ():BOOLEAN; 

	DoneHandler* = PROCEDURE (VAR res: WORD); 

	GetCodeHandler* = PROCEDURE (VAR code: CodeArray; VAR codelength, hdrlength, addressFactor: LONGINT); 

	CodeGenerator* = RECORD 
		MaxCodeSize*: LONGINT; 
		SysCallMap*: POINTER TO ARRAY OF CHAR; 
		Init*: InitHandler; 
		Done*: DoneHandler; 
		Optimize*: PROCEDURE (code: Code); 
		GetCode*: GetCodeHandler; 
		DumpCode*: TraverseProc; 
		ParamAlign*: LONGINT; 
	END; 

	; 
VAR 
	InstructionSet*: InstructionSetDescription; 
	InstructionInit*: PROCEDURE (VAR instr: Instruction); 
	CG*: CodeGenerator; 
	Address*, Set*, SizeType*: Size; 
	RegName: ARRAY 8 OF CHAR; 
	aTotalInstructions, aSuppressedInstructions, aCodeCount, aPieceCount: LONGINT; 
	aInstrCount, aSupprInstrCount: ARRAY NofOpcodes OF LONGINT; 

	PROCEDURE ^ InitInstr(VAR instr: Instruction; op: Opcode; size: Size; signed: BOOLEAN; val: LONGINT; src1, src2, src3: Register; adr: PCM.Attribute; barrier: LONGINT); 
	PROCEDURE ^ Use(code: Code; reg: Register); 
	PROCEDURE ^ SizeOf*(code: Code; reg: Register): Size; 
	PROCEDURE ^ Signed*(code: Code; reg: Register): BOOLEAN; 
	PROCEDURE ^ NofBytes*(size: Size): SHORTINT; 
	PROCEDURE ^ NewInstr(code: Code; op: Opcode; size: Size; signed: BOOLEAN; val: LONGINT; s1, s2, s3: Register; adr: PCM.Attribute); 
	PROCEDURE ^ EmitStoreAbsolute*(code: Code; offset: LONGINT; addr: PCM.Attribute; source: Register); 
	PROCEDURE ^ EmitStoreRelative*(code: Code; offset: LONGINT; base, source: Register); 
	PROCEDURE ^ EmitStoreReg*(code: Code; dst, source: Register); 
	PROCEDURE ^ EmitLoadAbsolute*(code: Code; size: Size; signed: BOOLEAN; VAR dest: Register; offs: LONGINT; addr: PCM.Attribute); 
	PROCEDURE ^ EmitLoadRelative*(code: Code; size: Size; signed: BOOLEAN; VAR dest: Register; offset: LONGINT; base: Register); 
	PROCEDURE ^ EmitLoadConst*(code: Code; VAR dest: Register; size: Size; signed: BOOLEAN; value: LONGINT); 
	PROCEDURE ^ EmitLoadAddr*(code: Code; VAR dest: Register; offset: LONGINT; addr: PCM.Attribute); 
	PROCEDURE ^ Emit0C*(code: Code; op: Opcode; val: LONGINT); 
	PROCEDURE ^ EmitCall*(code: Code; proc: PCM.Attribute); 
	PROCEDURE ^ EmitEnter*(code: Code; callconv: LONGINT; attr: PCM.Attribute); 
	PROCEDURE ^ EmitFinallyLabel*(code: Code; attr: PCM.Attribute); 
	PROCEDURE ^ EmitExit*(code: Code; callconv, parSize: LONGINT; attr: PCM.Attribute); 
	PROCEDURE ^ Emit00*(code: Code; op: Opcode); 
	PROCEDURE ^ Emit01*(code: Code; op: Opcode; src: Register); 
	PROCEDURE ^ Emit10*(code: Code; op: Opcode; VAR dest: Register; size: Size; signed: BOOLEAN); 
	PROCEDURE ^ EmitConv*(code: Code; op: Opcode; VAR dest: Register; size: Size; signed: BOOLEAN; src: Register); 
	PROCEDURE ^ Emit11*(code: Code; op: Opcode; VAR dest: Register; src1: Register); 
	PROCEDURE ^ Emit02*(code: Code; op: Opcode; src1, src2: Register); 
	PROCEDURE ^ Emit02C*(code: Code; op: Opcode; src1, src2: Register; val: LONGINT); 
	PROCEDURE ^ Emit03*(code: Code; op: Opcode; src1, src2, src3: Register); 
	PROCEDURE ^ Emit12*(code: Code; op: Opcode; VAR dest: Register; src1, src2: Register); 
	PROCEDURE ^ Emit12Sized*(code: Code; op: Opcode; VAR dest: Register; size: Size; src1, src2: Register); 
	PROCEDURE ^ EmitInline*(code: Code; adr: PCM.Attribute); 
	PROCEDURE ^ EmitCase*(code: Code; VAR dst: Register; src: Register); 
	PROCEDURE ^ EmitCaseLine*(code: Code; base: Register; val: LONGINT); 
	PROCEDURE ^ EmitCaseElse*(code: Code; base: Register); 
	PROCEDURE ^ EmitPhi*(code: Code; VAR dest: Register; src1, src2: Register); 
	PROCEDURE ^ PatchPhi*(code: Code; dest: Register; src2: Register); 
	PROCEDURE ^ FixList*(code: Code; VAR pos: LONGINT; val: LONGINT); 
	PROCEDURE ^ MergeList*(code: Code; l1, l2: LONGINT): LONGINT; 
	PROCEDURE ^ SwapSources*(VAR instr: Instruction); 
	PROCEDURE ^ DumpCode*(code: Code; VAR instr: Instruction; pc: LONGINT; context: ANY); 
	PROCEDURE ^ Emit*(code: Code); 
	PROCEDURE ^ SetMethods*(op: Opcode; p: EmitProc); 
	PROCEDURE ^ CGInit(): BOOLEAN; 
	PROCEDURE ^ CGDone(VAR res: WORD); 
	PROCEDURE ^ CGGetCode(VAR code: CodeArray; VAR codelen, hdrlen, addressFactor: LONGINT); 
	PROCEDURE ^ CGDumpCode(code: Code; VAR instr: Instruction; pc: LONGINT; context: ANY); 
	PROCEDURE ^ InitDefaultSyscalls*; 
	PROCEDURE ^ ShowStatistics*; 
	PROCEDURE ^ InitModule; 
BEGIN
END PCLIR.
