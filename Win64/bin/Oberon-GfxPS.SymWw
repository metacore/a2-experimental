MODULE GfxPS IN Oberon;
	IMPORT Files, Texts, Oberon, Math IN A2, Strings, BIT IN A2, Colors, Images, GfxMatrix, GfxImages, GfxPaths, GfxFonts, Gfx;
CONST 
	Inch* = 9.14400000000000E+1; 
	mm* = (Inch / 2.54000000000000E+1); 
	A4W* = (2.09900000000000E+2 * mm); 
	A4H* = (297 * mm); 
	LetterW* = (2.15899999999999E+2 * mm); 
	LetterH* = (279 * mm); 
	ScreenDPI = 9.14400000000000E+1; 
	PSDPI = 72; 
	LF = 0AX; 
	CR = 0DX; 
	RLEBufLen = 128; 
	NofSets = 8; 
	PrologName = \"GfxProlog.ps"\; 
	Red = Images.r; 
	Green = Images.g; 
	Blue = Images.b; 
TYPE 
	ClipPath = POINTER TO RECORD (Gfx.ClipAreaDesc)
		path: GfxPaths.Path; 
		llx, lly, urx, ury: REAL; 
		evenOdd: BOOLEAN; 
		next: ClipPath; 
	END; 

	Image = POINTER TO ImageDesc; 

	ImageDesc = RECORD 
		next: Image; 
		img: Images.Image; 
	END; 

	Pattern = POINTER TO PatternDesc; 

	PatternDesc = RECORD (Gfx.PatternDesc)
		next: Pattern; 
		no: INTEGER; 
	END; 

	T1Font = POINTER TO T1FontDesc; 

	T1FontDesc = RECORD 
		next: T1Font; 
		name: GfxFonts.FontName; 
	END; 

	T3Font = POINTER TO T3FontDesc; 

	T3FontDesc = RECORD 
		next: T3Font; 
		name: GfxFonts.FontName; 
		font: GfxFonts.Font; 
		used: ARRAY NofSets OF SET; 
	END; 

	Context* = POINTER TO ContextDesc; 

	ContextDesc* = RECORD (Gfx.ContextDesc)
		psfile*: Files.File; 
		out*: Files.Rider; 
		width*, height*: REAL; 
		left*, bot*, right*, top*: REAL; 
		level2*, landscape*, eps*: BOOLEAN; 
		res*: LONGINT; 
		cp: GfxPaths.Path; 
		llx, lly, urx, ury: REAL; 
		fileLen: LONGINT; 
		pages: INTEGER; 
		defMatrix: GfxMatrix.Matrix; 
		clip: ClipPath; 
		sx, sy, cx, cy: REAL; 
		color: Gfx.Color; 
		pattern: Gfx.Pattern; 
		images: Image; 
		patterns: Pattern; 
		t1fonts: T1Font; 
		t3fonts: T3Font; 
		fontname: GfxFonts.FontName; 
		fontmat: GfxMatrix.Matrix; 
	END; 

	RLEData = RECORD 
		len, n: INTEGER; 
		buf: ARRAY RLEBufLen OF CHAR; 
	END; 
VAR 
	Methods: Gfx.Methods; 
	TmpPath: GfxPaths.Path; 

	PROCEDURE ^ Ch(VAR r: Files.Rider; ch: CHAR); 
	PROCEDURE ^ Blank(VAR r: Files.Rider); 
	PROCEDURE ^ Ln(VAR r: Files.Rider); 
	PROCEDURE ^ Hex(VAR r: Files.Rider; n: LONGINT); 
	PROCEDURE ^ HexCol(VAR r: Files.Rider; col: Images.Pixel); 
	PROCEDURE ^ Str(VAR r: Files.Rider; s: ARRAY OF CHAR); 
	PROCEDURE ^ Int(VAR r: Files.Rider; l: LONGINT); 
	PROCEDURE ^ Real(VAR r: Files.Rider; x: REAL); 
	PROCEDURE ^ Point(VAR r: Files.Rider; x, y: REAL); 
	PROCEDURE ^ Matrix(VAR r: Files.Rider; VAR m: GfxMatrix.Matrix); 
	PROCEDURE ^ Array(VAR r: Files.Rider; VAR a: ARRAY OF REAL; len: LONGINT); 
	PROCEDURE ^ Literal(VAR r: Files.Rider; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ Arc(VAR r: Files.Rider; sx, sy, ex, ey, x0, y0, dx1, dy1, dx2, dy2: REAL); 
	PROCEDURE ^ Path(VAR r: Files.Rider; path: GfxPaths.Path; connect: BOOLEAN); 
	PROCEDURE ^ Rect(VAR r: Files.Rider; lx, ly, rx, uy: REAL); 
	PROCEDURE ^ RLEStart(VAR d: RLEData); 
	PROCEDURE ^ RLECh(VAR r: Files.Rider; x: CHAR; VAR d: RLEData); 
	PROCEDURE ^ RLEStop(VAR r: Files.Rider; VAR d: RLEData); 
	PROCEDURE ^ Grey(r, g, b: INTEGER): INTEGER; 
	PROCEDURE ^ PatternNo(psc: Context; pattern: Gfx.Pattern): INTEGER; 
	PROCEDURE ^ ImageMask(VAR r: Files.Rider; mask: Images.Image); 
	PROCEDURE ^ Palette(VAR r: Files.Rider; VAR col: ARRAY OF Images.Pixel; size: LONGINT); 
	PROCEDURE ^ DPalette(VAR r: Files.Rider); 
	PROCEDURE ^ DefImage(psc: Context; img: Images.Image); 
	PROCEDURE ^ UseImage(psc: Context; img: Images.Image; no: INTEGER); 
	PROCEDURE ^ RegisterImage(psc: Context; VAR img: Images.Image; VAR no: INTEGER); 
	PROCEDURE ^ ECh(VAR r: Files.Rider; x: CHAR; VAR ekey, epos: LONGINT); 
	PROCEDURE ^ ELn(VAR r: Files.Rider; VAR ekey, epos: LONGINT); 
	PROCEDURE ^ EStr(VAR r: Files.Rider; s: ARRAY OF CHAR; VAR ekey, epos: LONGINT); 
	PROCEDURE ^ EECh(VAR r: Files.Rider; x: CHAR; VAR eekey, ekey, epos: LONGINT); 
	PROCEDURE ^ GetName(ch: LONGINT; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ Private(VAR r: Files.Rider; VAR ekey, epos: LONGINT); 
	PROCEDURE ^ Char(VAR r: Files.Rider; font: GfxFonts.Font; ch: LONGINT; VAR ekey, epos: LONGINT); 
	PROCEDURE ^ CharStrings(VAR r: Files.Rider; font: GfxFonts.Font; VAR ekey, epos: LONGINT); 
	PROCEDURE ^ Type1*(VAR r: Files.Rider; VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ Type3(VAR r: Files.Rider; VAR t3: T3Font; scale: REAL); 
	PROCEDURE ^ SelectFont(psc: Context; VAR name: ARRAY OF CHAR; VAR m: GfxMatrix.Matrix); 
	PROCEDURE ^ SetOutlineFont(psc: Context); 
	PROCEDURE ^ Prolog(VAR r: Files.Rider); 
	PROCEDURE ^ Setup(psc: Context); 
	PROCEDURE ^ InitClip(psc: Context); 
	PROCEDURE ^ AdjustClip(psc: Context); 
	PROCEDURE ^ Reset(ctxt: Gfx.Context); 
	PROCEDURE ^ SetCTM(ctxt: Gfx.Context; VAR mat: GfxMatrix.Matrix); 
	PROCEDURE ^ ResetCTM(ctxt: Gfx.Context); 
	PROCEDURE ^ Translate(ctxt: Gfx.Context; dx, dy: REAL); 
	PROCEDURE ^ Scale(ctxt: Gfx.Context; sx, sy: REAL); 
	PROCEDURE ^ Rotate(ctxt: Gfx.Context; sin, cos: REAL); 
	PROCEDURE ^ Concat(ctxt: Gfx.Context; VAR mat: GfxMatrix.Matrix); 
	PROCEDURE ^ ResetClip(ctxt: Gfx.Context); 
	PROCEDURE ^ GetClipRect(ctxt: Gfx.Context; VAR llx, lly, urx, ury: REAL); 
	PROCEDURE ^ GetClip(ctxt: Gfx.Context): Gfx.ClipArea; 
	PROCEDURE ^ SetClip(ctxt: Gfx.Context; clip: Gfx.ClipArea); 
	PROCEDURE ^ SetLineWidth(ctxt: Gfx.Context; width: REAL); 
	PROCEDURE ^ SetDashPattern(ctxt: Gfx.Context; VAR on, off: ARRAY OF REAL; len: LONGINT; phase: REAL); 
	PROCEDURE ^ SetCapStyle(ctxt: Gfx.Context; style: Gfx.CapStyle); 
	PROCEDURE ^ SetJoinStyle(ctxt: Gfx.Context; style: Gfx.JoinStyle); 
	PROCEDURE ^ SetStyleLimit(ctxt: Gfx.Context; limit: REAL); 
	PROCEDURE ^ SetFlatness(ctxt: Gfx.Context; flatness: REAL); 
	PROCEDURE ^ GetWidth(ctxt: Gfx.Context; VAR str: ARRAY OF CHAR; VAR dx, dy: REAL); 
	PROCEDURE ^ IncludeBox(psc: Context; llx, lly, urx, ury: REAL); 
	PROCEDURE ^ SetColor(psc: Context; col: Gfx.Color; pattern: Gfx.Pattern); 
	PROCEDURE ^ FillPattern(psc: Context; llx, lly, urx, ury: REAL; pat: Pattern); 
	PROCEDURE ^ Simplify(src, dst: GfxPaths.Path; VAR connected: BOOLEAN); 
	PROCEDURE ^ RenderPath(psc: Context; path: GfxPaths.Path); 
	PROCEDURE ^ Begin(ctxt: Gfx.Context; mode: SET); 
	PROCEDURE ^ End(ctxt: Gfx.Context); 
	PROCEDURE ^ Enter(ctxt: Gfx.Context; x, y, dx, dy: REAL); 
	PROCEDURE ^ Exit(ctxt: Gfx.Context; dx, dy: REAL); 
	PROCEDURE ^ ClosePath(ctxt: Gfx.Context); 
	PROCEDURE ^ LineTo(ctxt: Gfx.Context; x, y: REAL); 
	PROCEDURE ^ ArcTo(ctxt: Gfx.Context; x, y, x0, y0, x1, y1, x2, y2: REAL); 
	PROCEDURE ^ BezierTo(ctxt: Gfx.Context; x, y, x1, y1, x2, y2: REAL); 
	PROCEDURE ^ ShowOutline(psc: Context; x, y: REAL; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ ShowRaster(psc: Context; x, y: REAL; VAR str: ARRAY OF CHAR; font: GfxFonts.Font; VAR m: GfxMatrix.Matrix); 
	PROCEDURE ^ Show(ctxt: Gfx.Context; x, y: REAL; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ Flatten(ctxt: Gfx.Context); 
	PROCEDURE ^ Outline(ctxt: Gfx.Context); 
	PROCEDURE ^ Render(ctxt: Gfx.Context; mode: SET); 
	PROCEDURE ^ ImageM(ctxt: Gfx.Context; x, y: REAL; img: Images.Image; VAR filter: GfxImages.Filter); 
	PROCEDURE ^ NewPattern(ctxt: Gfx.Context; img: Images.Image; px, py: REAL): Gfx.Pattern; 
	PROCEDURE ^ InitMethods; 
	PROCEDURE ^ Init*(psc: Context; level2, landscape: BOOLEAN; width, height, left, right, bot, top: REAL; res: WORD); 
	PROCEDURE ^ InitEPS*(psc: Context; level2: BOOLEAN; res: WORD); 
	PROCEDURE ^ Open*(psc: Context; file: Files.File); 
	PROCEDURE ^ ShowPage*(psc: Context); 
	PROCEDURE ^ Close*(psc: Context); 
BEGIN
END GfxPS.
