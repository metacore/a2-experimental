MODULE WebHTTP;
	IMPORT IP, TFLog, Streams, Dates, Strings;
CONST 
	HTTPPort* = 80; 
	HTTPSPort* = 443; 
	Continue* = 100; 
	SwitchingProtocols* = 101; 
	Processing* = 102; 
	OK* = 200; 
	Created* = 201; 
	Accepted* = 202; 
	NonAuthoritativeInformation* = 203; 
	NoContent* = 204; 
	ResetContent* = 205; 
	PartialContent* = 206; 
	MultiStatus* = 207; 
	MultipleChoices* = 300; 
	ObjectMoved* = 301; 
	ObjectMovedTemporarily* = 302; 
	SeeOther* = 303; 
	NotModified* = 304; 
	UseProxy* = 305; 
	TemporaryRedirect* = 307; 
	BadRequest* = 400; 
	Unauthorized* = 401; 
	PaymentRequired* = 402; 
	Forbidden* = 403; 
	NotFound* = 404; 
	MethodNotAllowed* = 405; 
	NotAcceptable* = 406; 
	ProxyAuthenticationRequested* = 407; 
	RequestTimeout* = 408; 
	Conflict* = 409; 
	Gone* = 410; 
	LengthRequired* = 411; 
	PreconditionFailed* = 412; 
	RequestEntityTooLarge* = 413; 
	RequestURITooLong* = 414; 
	UnsupportedMediaType* = 415; 
	RequestedRangeNotSatisfiable* = 416; 
	ExpectationFailed* = 417; 
	UnprocessableEntity* = 422; 
	Locked* = 423; 
	FailedDependency* = 424; 
	InternalServerError* = 500; 
	NotImplemented* = 501; 
	BadGateway* = 502; 
	ServiceUnavailable* = 503; 
	GatewayTimeout* = 504; 
	VersionNotSupported* = 505; 
	InsufficientStorage* = 507; 
	UnknownM* = 0; 
	GetM* = 1; 
	HeadM* = 2; 
	PutM* = 3; 
	PostM* = 4; 
	OptionsM* = 5; 
	TraceM* = 6; 
	DeleteM* = 7; 
	ConnectM* = 8; 
	PropfindM* = 10; 
	ProppatchM* = 11; 
	MkcolM* = 12; 
	CopyM* = 13; 
	MoveM* = 14; 
	LockM* = 15; 
	UnlockM* = 16; 
	VersionControlM* = 17; 
	ReportM* = 18; 
	CheckoutM* = 19; 
	CheckinM* = 20; 
	UncheckoutM* = 21; 
	MkworkspaceM* = 22; 
	UpdateM* = 23; 
	LabelM* = 24; 
	MergeM* = 25; 
	BaselineControlM* = 26; 
	MkactivityM* = 27; 
	DateTimeFormat* = \"www, dd mmm yyyy hh:nn:ss GMT"\; 
	BufSize = 1024; 
	TokenSize = 16; 
	MaxRequestHeaderFields* = (47 + 10); 
	DocType* = \"<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">"\; 
TYPE 
	AdditionalField* = POINTER TO RECORD 
		key*: ARRAY 64 OF CHAR; 
		value*: ARRAY 1024 OF CHAR; 
		next*: AdditionalField; 
	END; 

	RequestHeader* = RECORD 
		fadr*: IP.Adr; 
		fport*: LONGINT; 
		method*: LONGINT; 
		maj*, min*: LONGINT; 
		uri*: ARRAY 4096 OF CHAR; 
		host*: ARRAY 256 OF CHAR; 
		referer*: ARRAY 256 OF CHAR; 
		useragent*: ARRAY 256 OF CHAR; 
		accept*: ARRAY 256 OF CHAR; 
		transferencoding*: ARRAY 64 OF CHAR; 
		additionalFields*: AdditionalField; 
	END; 

	ResponseHeader* = RECORD 
		maj*, min*: LONGINT; 
		statuscode*: LONGINT; 
		reasonphrase*: ARRAY 256 OF CHAR; 
		server*: ARRAY 256 OF CHAR; 
		date*: ARRAY 32 OF CHAR; 
		location*: ARRAY 1024 OF CHAR; 
		contenttype*: ARRAY 64 OF CHAR; 
		contentlength*: SIZE; 
		contentlocation*: ARRAY 1024 OF CHAR; 
		transferencoding*: ARRAY 64 OF CHAR; 
		lastmodified*: ARRAY 32 OF CHAR; 
		additionalFields*: AdditionalField; 
	END; 

	ChunkedOutStream* = OBJECT 
	VAR 
		outW: Streams.Writer; 
		buf: ARRAY BufSize OF CHAR; 
		bufPos: LONGINT; 
		chunked: BOOLEAN; 
		token: ARRAY TokenSize OF CHAR; 

		PROCEDURE ^  & Init*(VAR inW: Streams.Writer; outW: Streams.Writer; VAR request: RequestHeader; VAR reply: ResponseHeader); 
		PROCEDURE ^ Sender(CONST inBuf: ARRAY OF CHAR; ofs, len: SIZE; propagate: BOOLEAN; VAR res: WORD); 
		PROCEDURE ^ WriteChunked; 
		PROCEDURE ^ Update*; 
		PROCEDURE ^ Close*; 
	END ChunkedOutStream; 

	ChunkedInStream* = OBJECT 
	VAR 
		inR: Streams.Reader; 
		remain: LONGINT; 
		eof: BOOLEAN; 
		chunkSize: LONGINT; 
		first: BOOLEAN; 

		PROCEDURE ^  & Init*(VAR inR, outR: Streams.Reader); 
		PROCEDURE ^ Receiver(VAR buf: ARRAY OF CHAR; ofs, size, min: SIZE; VAR len: SIZE; VAR res: WORD); 
	END ChunkedInStream; 

	LimitedOutStream* = OBJECT 
	VAR 
		outW: Streams.Writer; 
		buf: ARRAY BufSize OF CHAR; 
		bufPos: LONGINT; 
		remain-: LONGINT; 

		PROCEDURE ^  & Init*(VAR inW, outW: Streams.Writer; size: LONGINT); 
		PROCEDURE ^ Sender(CONST outBuf: ARRAY OF CHAR; ofs, len: SIZE; propagate: BOOLEAN; VAR res: WORD); 
		PROCEDURE ^ Write; 
		PROCEDURE ^ Update*; 
		PROCEDURE ^ Padding*(ch: CHAR); 
	END LimitedOutStream; 

	LimitedInStream* = OBJECT 
	VAR 
		inR: Streams.Reader; 
		remain-: SIZE; 

		PROCEDURE ^  & Init*(VAR inR, outR: Streams.Reader; size: SIZE); 
		PROCEDURE ^ Receiver(VAR buf: ARRAY OF CHAR; ofs, size, min: SIZE; VAR len: SIZE; VAR res: WORD); 
	END LimitedInStream; 

	PROCEDURE ^ EOL(VAR in: Streams.Reader): BOOLEAN; 
	PROCEDURE ^ GetToken(VAR in: Streams.Reader; VAR token: ARRAY OF CHAR); 
	PROCEDURE ^ GetInt(VAR i: LONGINT; CONST buf: ARRAY OF CHAR; VAR x: LONGINT); 
	PROCEDURE ^ Match(CONST buf: ARRAY OF CHAR; with: ARRAY OF CHAR; VAR i: LONGINT): BOOLEAN; 
	PROCEDURE ^ EqualsI(CONST buf: ARRAY OF CHAR; with: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ HasAdditionalField*(af: AdditionalField; fieldName: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ GetAdditionalField*(af: AdditionalField; fieldName: ARRAY OF CHAR): AdditionalField; 
	PROCEDURE ^ GetAdditionalFieldValue*(af: AdditionalField; fieldName: ARRAY OF CHAR; VAR value: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ GetRequestPropertyValue*(VAR header: RequestHeader; propertyName: ARRAY OF CHAR; VAR result: ARRAY OF CHAR); 
	PROCEDURE ^ SetAdditionalFieldValue*(VAR af: AdditionalField; fieldName, value: ARRAY OF CHAR); 
	PROCEDURE ^ GetVersion(VAR ver: ARRAY OF CHAR; VAR maj, min: LONGINT): BOOLEAN; 
	PROCEDURE ^ Version*(VAR h: RequestHeader; Maj, Min: LONGINT): BOOLEAN; 
	PROCEDURE ^ GetMethod*(VAR s: ARRAY OF CHAR; VAR method: LONGINT); 
	PROCEDURE ^ GetMethodName*(code: LONGINT; VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ ParseRequest*(VAR in: Streams.Reader; VAR header: RequestHeader; VAR res: WORD; log: TFLog.Log); 
	PROCEDURE ^ ParseRequestHeaderFields*(VAR in: Streams.Reader; VAR header: RequestHeader; VAR res: WORD); 
	PROCEDURE ^ ParseReply*(VAR in: Streams.Reader; VAR header: ResponseHeader; VAR res: WORD; log: TFLog.Log); 
	PROCEDURE ^ ModifyReply*(VAR in: Streams.Reader; VAR header: ResponseHeader; VAR res: WORD; log: TFLog.Log); 
	PROCEDURE ^ LogRequestHeader*(log: TFLog.Log; VAR header: RequestHeader); 
	PROCEDURE ^ LogResponseHeader*(log: TFLog.Log; VAR header: ResponseHeader); 
	PROCEDURE ^ WriteRequestLine*(s: Streams.Writer; maj, min: LONGINT; method: LONGINT; uri, host: ARRAY OF CHAR); 
	PROCEDURE ^ GetReasonPhrase*(code: LONGINT; VAR phrase: ARRAY OF CHAR); 
	PROCEDURE ^ WriteStatus*(VAR h: ResponseHeader; VAR dst: Streams.Writer); 
	PROCEDURE ^ WriteHTMLStatus*(VAR h: ResponseHeader; dst: Streams.Writer); 
	PROCEDURE ^ SendResponseHeader*(VAR h: ResponseHeader; VAR dst: Streams.Writer); 
	PROCEDURE ^ SendStatusReply*(code: LONGINT; VAR request: RequestHeader; VAR reply: ResponseHeader; VAR out: Streams.Writer); 
	PROCEDURE ^ GetPath*(VAR url, path: ARRAY OF CHAR); 
	PROCEDURE ^ SplitHTTPAdr*(url: ARRAY OF CHAR; VAR host, path: ARRAY OF CHAR; VAR port: LONGINT): BOOLEAN; 
BEGIN
END WebHTTP.
