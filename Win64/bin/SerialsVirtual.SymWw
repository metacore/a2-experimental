MODULE SerialsVirtual;
	IMPORT KernelLog, Strings, Modules, Commands, Streams, Files, Kernel, Random, Serials;
CONST 
	Verbose = TRUE; 
	BufferSize = 1024; 
	EnableSendSpeedLimitation = TRUE; 
	ModuleName = \"SerialsVirtual"\; 
TYPE 
	SendProcedure = PROCEDURE {DELEGATE}(ch: CHAR; VAR res: WORD); 

	VirtualPort = OBJECT {EXCLUSIVE} (Serials.Port)
	VAR 
		buffer: ARRAY BufferSize OF CHAR; 
		head, tail: LONGINT; 
		open: BOOLEAN; 
		bps, data, parity, stop: LONGINT; 
		mc: SET; 
		sender: SendProcedure; 
		eachNCharacters, waitForMs: LONGINT; 
		timer: Kernel.Timer; 

		PROCEDURE ^ PutChar(ch: CHAR; VAR res: WORD); 
		PROCEDURE ^ Open*(bps, data, parity, stop: LONGINT; VAR res: WORD); 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ SendChar*(ch: CHAR; VAR res: WORD); 
		PROCEDURE ^ ReceiveChar*(VAR ch: CHAR; VAR res: WORD); 
		PROCEDURE ^ Available*(): SIZE; 
		PROCEDURE ^ SetPortState(bps, data, parity, stop: LONGINT; VAR res: WORD); 
		PROCEDURE ^ GetPortState*(VAR openstat: BOOLEAN; VAR bps, data, parity, stop: LONGINT); 
		PROCEDURE ^ ClearMC*(s: SET); 
		PROCEDURE ^ SetMC*(s: SET); 
		PROCEDURE ^ GetMC*(VAR s: SET); 
		PROCEDURE ^  & Init*; 
	END VirtualPort; 

	PortSniffer = OBJECT {EXCLUSIVE} (Serials.Port)
	VAR 
		port: Serials.Port; 
		in, out: Streams.Writer; 

		PROCEDURE ^ Open*(bps, data, parity, stop: LONGINT; VAR res: WORD); 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ SendChar*(ch: CHAR; VAR res: WORD); 
		PROCEDURE ^ ReceiveChar*(VAR ch: CHAR; VAR res: WORD); 
		PROCEDURE ^ Available*(): SIZE; 
		PROCEDURE ^ GetPortState*(VAR openstat: BOOLEAN; VAR bps, data, parity, stop: LONGINT); 
		PROCEDURE ^ ClearMC*(s: SET); 
		PROCEDURE ^ SetMC*(s: SET); 
		PROCEDURE ^ GetMC*(VAR s: SET); 
		PROCEDURE ^  & Init*(port: Serials.Port; in, out: Streams.Writer); 
	END PortSniffer; 
VAR 
	active: ARRAY (Serials.MaxPorts + 1) OF BOOLEAN; 
	errorRate: LONGREAL; 
	random: Random.Generator; 

	PROCEDURE ^ ShowModule; 
	PROCEDURE ^ GetSlowdownValues(bps: LONGINT; VAR eachNCharacters, waitForMs: LONGINT; VAR res: WORD); 
	PROCEDURE ^ IsValidPortNumber(portNbr: LONGINT): BOOLEAN; 
	PROCEDURE ^ SendFileIntern(portNbr: LONGINT; CONST filename: ARRAY OF CHAR; loop: BOOLEAN; context: Commands.Context); 
	PROCEDURE ^ SendFile*(context: Commands.Context); 
	PROCEDURE ^ StopSendFile*(context: Commands.Context); 
	PROCEDURE ^ Install*(context: Commands.Context); 
	PROCEDURE ^ InstallSniffer*(context: Commands.Context); 
	PROCEDURE ^ Cleanup; 
	PROCEDURE ^ SetErrorRate*(context: Commands.Context); 
BEGIN
END SerialsVirtual.
