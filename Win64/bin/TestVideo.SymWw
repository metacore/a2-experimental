MODULE TestVideo;
	IMPORT Kernel, Modules, Raster, VideoExample, Commands, Options, KernelLog, Random, WMGraphics, WMRectangles, Kernel32, SYSTEM, Vectors := W3dVectors, Math := MathL;
CONST 
	Ok* = 0; 
	TooManyLabels* = 1; 
	PathTooLong* = 2; 
	DirN = 0; 
	DirNE = 1; 
	DirE = 2; 
	DirSE = 3; 
	DirS = 4; 
	DirSW = 5; 
	DirW = 6; 
	DirNW = 7; 
	DebugLabeler = FALSE; 
	DebugTracer = FALSE; 
	DebugLiner = FALSE; 
TYPE 
	LabelInfo* = RECORD 
		firstPos: LONGINT; 
		nofPixels: LONGINT; 
		label: INTEGER; 
	END; 

	Point = RECORD 
		x, y: INTEGER; 
	END; 
VAR 
	threshold, pixThreshold: LONGINT; 
	labelBuffer: POINTER TO ARRAY OF INTEGER; 
	equivalence: ARRAY (32 * 1024) OF INTEGER; 
	labelInfo: ARRAY (32 * 1024) OF LabelInfo; 
	labelColor: ARRAY (32 * 1024) OF LONGINT; 
	g: WMGraphics.BufferCanvas; 
	dirX, dirY: ARRAY 8 OF LONGINT; 
	rectified: VideoExample.PreviewWindow; 
	intensityBuffer, thresholdBuffer: POINTER TO ARRAY OF CHAR; 

	PROCEDURE ^ RGBToYUVReal(r, g, b: LONGINT; VAR y, u, v: LONGINT); 
	PROCEDURE ^ CalculateUnitSquareHomography(CONST p: ARRAY OF Point; VAR H, inverse: ARRAY OF LONGREAL); 
	PROCEDURE ^ MapProjective(CONST H: ARRAY OF LONGREAL; u, v: LONGREAL; VAR x, y: LONGREAL); 
	PROCEDURE ^ MapInverseProjective(CONST H: ARRAY OF LONGREAL; u, v: LONGREAL; VAR x, y: LONGREAL); 
	PROCEDURE ^ Transform(src, dst: Raster.Image; CONST points: ARRAY OF Point); 
	PROCEDURE ^ SearchHVLines(buffer: Raster.Image); 
	PROCEDURE ^ IsEmptyField(buffer: Raster.Image; x, y, w, h: LONGINT): BOOLEAN; 
	PROCEDURE ^ Dist(buffer: Raster.Image; x0, y0, x1, y1, w, h: LONGINT): LONGINT; 
	PROCEDURE ^ CheckFields(buffer: Raster.Image); 
	PROCEDURE ^ BinaryLabler*(buffer: Raster.Image; VAR labelBuffer, equivalence: ARRAY OF INTEGER; colorThreshold, pixelThreshold, maxLabels: LONGINT; VAR labelInfo: ARRAY OF LabelInfo; unifyLabels: BOOLEAN; VAR nofFLabels: LONGINT; VAR res: WORD); 
	PROCEDURE ^ Trace(buffer: Raster.Image; CONST labelBuffer: ARRAY OF INTEGER; VAR labelInfo: LabelInfo; VAR length: LONGINT; VAR path: ARRAY OF Point; VAR res: WORD); 
	PROCEDURE ^ SimplifyPoly(VAR path: ARRAY OF Point; nofPoints, tolerance: LONGINT; VAR resultPoint: LONGINT); 
	PROCEDURE ^ ExtractLines(buffer: Raster.Image; CONST path: ARRAY OF Point; pathLength: LONGINT; VAR poly: ARRAY OF Point; VAR nofPoints: LONGINT); 
	PROCEDURE ^ GetTimer(): HUGEINT; 
	PROCEDURE ^ GetFreq(): HUGEINT; 
	PROCEDURE ^ Label2(buffer: Raster.Image); 
	PROCEDURE ^ YUVFilter(buffer: Raster.Image); 
	PROCEDURE ^ SetYUVFilter*; 
	PROCEDURE ^ BWFilter(buffer: Raster.Image); 
	PROCEDURE ^ SetBWFilter*; 
	PROCEDURE ^ RedDotFilter(buffer: Raster.Image); 
	PROCEDURE ^ SetRedDotFilter*; 
	PROCEDURE ^ ThresholdFilter(buffer: Raster.Image); 
	PROCEDURE ^ SetThresholdFilter*(context: Commands.Context); 
	PROCEDURE ^ AdaptiveThresholdFilter(buffer: Raster.Image); 
	PROCEDURE ^ SetAdaptiveThresholdFilter*(context: Commands.Context); 
	PROCEDURE ^ FineAdaptiveThresholdFilter(buffer: Raster.Image); 
	PROCEDURE ^ SetFineAdaptiveThresholdFilter*(context: Commands.Context); 
	PROCEDURE ^ SetLabelFilter*(context: Commands.Context); 
	PROCEDURE ^ Uninstall*; 
	PROCEDURE ^ Init; 
	PROCEDURE ^ Cleanup; 
BEGIN
END TestVideo.
