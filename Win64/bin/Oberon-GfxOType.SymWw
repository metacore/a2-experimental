MODULE GfxOType IN Oberon;
	IMPORT Math IN A2, Display, Strings, Images, GfxMatrix, GfxPaths, GfxFonts, OType;
TYPE 
	Font* = POINTER TO FontDesc; 

	FontDesc* = RECORD (GfxFonts.FontDesc)
		fam*: OType.Font; 
		inst*: OType.Instance; 
		glyph*: OType.Glyph; 
		grey*: BOOLEAN; 
	END; 

	OutlineData = RECORD (OType.OutlineData)
		path: GfxPaths.Path; 
		dx, dy: REAL; 
		x, y: REAL; 
	END; 

	RasterData = RECORD (OType.RasterData)
		map: Images.Image; 
	END; 
VAR 
	Class: GfxFonts.Methods; 

	PROCEDURE ^ OpenInstance(fam: OType.Font; glyph: OType.Glyph; ptsize: INTEGER; VAR mat: GfxMatrix.Matrix): Font; 
	PROCEDURE ^ Open(VAR family, style: ARRAY OF CHAR; ptsize: INTEGER; VAR mat: GfxMatrix.Matrix): GfxFonts.Font; 
	PROCEDURE ^ Install*; 
	PROCEDURE ^ Derive(gfont: GfxFonts.Font; ptsize: INTEGER; VAR mat: GfxMatrix.Matrix): GfxFonts.Font; 
	PROCEDURE ^ GetWidth(gfont: GfxFonts.Font; ch: CHAR; VAR dx, dy: REAL); 
	PROCEDURE ^ FillRect(llx, lly, urx, ury, opacity: INTEGER; VAR data: OType.RasterData0); 
	PROCEDURE ^ GetMap(gfont: GfxFonts.Font; ch: CHAR; VAR x, y, dx, dy: REAL; VAR map: Images.Image); 
	PROCEDURE ^ MoveTo(x, y: OType.F26D6; VAR data: OType.OutlineData0); 
	PROCEDURE ^ LineTo(x, y: OType.F26D6; VAR data: OType.OutlineData0); 
	PROCEDURE ^ BezierTo(x, y: ARRAY OF OType.F26D6; n: INTEGER; VAR data: OType.OutlineData0); 
	PROCEDURE ^ GetOutline(gfont: GfxFonts.Font; ch: CHAR; x, y: REAL; path: GfxPaths.Path); 
	PROCEDURE ^ InitClass; 
BEGIN
END GfxOType.
