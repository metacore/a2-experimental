MODULE CryptoDES;
	IMPORT U := CryptoUtils, Ciphers := CryptoCiphers;
CONST 
	Mask01 = SET32(2863311530); 
	Mask02 = SET32(858993459); 
	Mask04 = SET32(252645135); 
	Mask08 = SET32(16711935); 
	Mask16 = SET32(65535); 
TYPE 
	Sandbox = ARRAY 64 OF SET32; 

	BitSwap = ARRAY 16 OF SET32; 

	Ind4 = RECORD 
		a, b, c, d: SIGNED32; 
	END; 

	Cipher* = OBJECT (Ciphers.Cipher)
	VAR 
		ske, skd: ARRAY 32 OF SET32; 
		ki: SIGNED32; 
		ivx, ivy: SET32; 

		PROCEDURE ^ InitKey*(CONST src: ARRAY OF CHAR; keybits: SIZE); 
		PROCEDURE ^ SetIV*(CONST src: ARRAY OF CHAR; mode: SIGNED8); 
		PROCEDURE ^ Encrypt*(VAR buf: ARRAY OF CHAR; ofs, len: SIZE); 
		PROCEDURE ^ Decrypt*(VAR buf: ARRAY OF CHAR; ofs, len: SIZE); 
		PROCEDURE ^ RoundE*(VAR x, y: SET32); 
		PROCEDURE ^ RoundD*(VAR x, y: SET32); 
		PROCEDURE ^  & Init*; 
	END Cipher; 
VAR 
	sb1-, sb2-, sb3-, sb4-, sb5-, sb6-, sb7-, sb8-: Sandbox; 
	LHs, RHs: BitSwap; 

	PROCEDURE  - Split(x: SET32; VAR i4: Ind4);
	BEGIN
		i4.a := (SIGNED32(x) MOD 64); 
		i4.b := ((SIGNED32(x) DIV 256) MOD 64); 
		i4.c := ((SIGNED32(x) DIV 65536) MOD 64); 
		i4.d := ((SIGNED32(x) DIV 16777216) MOD 64)
	END Split; 
	PROCEDURE ^ NewCipher*(): Ciphers.Cipher; 
	PROCEDURE ^ IP*(VAR x, y: SET32); 
	PROCEDURE ^ FP*(VAR x, y: SET32); 
	PROCEDURE ^ ComputeSubkeys*(x, y: SET32; VAR sk: ARRAY OF SET32; ofs: SIGNED32); 
	PROCEDURE ^ InitializeSandboxes; 
BEGIN
END CryptoDES.
