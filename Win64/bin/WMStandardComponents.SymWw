MODULE WMStandardComponents;
	IMPORT KernelLog, Kernel, Types, Models, Repositories, WMComponents, Strings, Files, WMGraphics, WMGraphicUtilities, WMRectangles, WMEvents, XML, Inputs, WMProperties, WMWindowManager, Modules;
CONST 
	None =  -1; 
	MinusButton = 0; 
	MinusPage = 1; 
	Tracker = 2; 
	PlusPage = 3; 
	PlusButton = 4; 
	Default* =  -1; 
	Unchecked* = 0; 
	Checked* = 1; 
	Left* = 0; 
	Right* = 1; 
TYPE 
	String = Strings.String; 

	EventSource = WMEvents.EventSource; 

	EventListener = WMEvents.EventListener; 

	EventListenerInfo = WMEvents.EventListenerInfo; 

	Canvas = WMGraphics.Canvas; 

	Timer* = OBJECT {EXCLUSIVE} (WMComponents.Component)
	VAR 
		onTimer-: EventSource; 
		eStart-, eStop-: EventListenerInfo; 
		interval-, delay-: WMProperties.Int32Property; 
		wait-: SIGNED32; 
		alive: BOOLEAN; 
		timer: Kernel.Timer; 
		internalEnabled: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
		PROCEDURE ^ Start*(sender, par: ANY); 
		PROCEDURE ^ Stop*(sender, par: ANY); 
		PROCEDURE ^ Finalize*; 
	BEGIN{ACTIVE} 
	END Timer; 

	CursorBlinkerCallback = PROCEDURE {DELEGATE}(sender, data: ANY); 

	Blinker* = OBJECT {EXCLUSIVE} 
	VAR 
		events-: WMEvents.EventSource; 
		interval: SIGNED32; 
		visible-: BOOLEAN; 
		alive, dead: BOOLEAN; 
		timer: Kernel.Timer; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ SetInterval*(ms: SIGNED32); 
		PROCEDURE ^ Finalize; 
	BEGIN{ACTIVE} 
	END Blinker; 

	InternalTimer* = OBJECT {EXCLUSIVE} 
	VAR 
		onTimer: WMEvents.EventListener; 
		interval: SIGNED32; 
		timer: Kernel.Timer; 
		alive, dead, enabled: BOOLEAN; 

		PROCEDURE ^  & Init*(onTimer: WMEvents.EventListener); 
		PROCEDURE ^ SetInterval*(ms: SIGNED32); 
		PROCEDURE ^ Start*; 
		PROCEDURE ^ Stop*; 
		PROCEDURE ^ Finalize*; 
	BEGIN{ACTIVE} 
	END InternalTimer; 

	SystemCommand* = OBJECT {EXCLUSIVE} (WMComponents.Component)
	VAR 
		commandString-: WMProperties.StringProperty; 
		eRun-: EventListenerInfo; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Run*(sender, par: ANY); 
	END SystemCommand; 

	Event* = OBJECT {EXCLUSIVE} (WMComponents.Component)
	VAR 
		commandString-: WMProperties.StringProperty; 
		eRun-: EventListenerInfo; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Run*(sender, par: ANY); 
	END Event; 

	Panel* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		blinking-: WMProperties.BooleanProperty; 
		blink: BOOLEAN; 
		show-: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ SetBlinker(sender, data: ANY); 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
		PROCEDURE ^ Finalize*; 
	END Panel; 

	Decoration = POINTER TO RECORD 
		TL, T, TR, L, M, R, BL, B, BR: WMGraphics.Image; 
	END; 

	Label* = OBJECT {EXCLUSIVE} (Panel)
	VAR 
		caption-: WMProperties.StringProperty; 
		textColor-: WMProperties.ColorProperty; 
		alignH-: WMProperties.Int32Property; 
		alignV-: WMProperties.Int32Property; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
		PROCEDURE ^ SetCaption*(CONST x: ARRAY OF CHAR); 
		PROCEDURE ^ LinkChanged*(sender, data: ANY); 
		PROCEDURE ^ DrawBackground*(canvas: Canvas); 
	END Label; 

	Button* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	CONST 
		TextBorder = 0; 
	VAR 
		caption-: WMProperties.StringProperty; 
		isRepeating-, isToggle-, indicateToggle-: WMProperties.BooleanProperty; 
		isInverse-: WMProperties.BooleanProperty; 
		onClickHandler-: WMProperties.StringProperty; 
		clDefault-, clHover-, clPressed-, clInactive-, clTextDefault-, clTextHover-, clTextPressed-, clTextInactive-: WMProperties.ColorProperty; 
		effect3D-: WMProperties.Int32Property; 
		imgDefaultName-, imgInactiveName-, imgHoverName-, imgPressedName-, imageName-: WMProperties.StringProperty; 
		imgDefault, imgInactive, imgHover, imgPressed: WMGraphics.Image; 
		useBgBitmaps-, isHorizontal-, repeatMiddleImg-: WMProperties.BooleanProperty; 
		imgDefaultNameLeft-, imgDefaultNameRight-, imgDefaultNameMiddle-, imgHoverNameLeft-, imgHoverNameRight-, imgHoverNameMiddle-, imgPressedNameLeft-, imgPressedNameRight-, imgPressedNameMiddle-: WMProperties.StringProperty; 
		imgDefaultLeft, imgDefaultRight, imgDefaultMiddle, imgHoverLeft, imgHoverRight, imgHoverMiddle, imgPressedLeft, imgPressedRight, imgPressedMiddle: WMGraphics.Image; 
		imgDefaultNameTop-, imgDefaultNameBottom-, imgHoverNameTop-, imgHoverNameBottom-, imgPressedNameTop-, imgPressedNameBottom-: WMProperties.StringProperty; 
		imgDefaultTop, imgDefaultBottom, imgHoverTop, imgHoverBottom, imgPressedTop, imgPressedBottom: WMGraphics.Image; 
		useDeco-: WMProperties.BooleanProperty; 
		decoDefaultName-, decoHoverName-, decoPressedName-: WMProperties.StringProperty; 
		decoDefault-, decoHover-, decoPressed-: Decoration; 
		onClick-: EventSource; 
		image: WMGraphics.Image; 
		pressed, keyboardPressed, mouseOver: BOOLEAN; 
		handler: WMEvents.EventListener; 
		invert3d: BOOLEAN; 
		repeater: Timer; 
		userData*: ANY; 
		textAlignH-: WMProperties.Int32Property; 
		textAlignV-: WMProperties.Int32Property; 
		horizontalFit: WMProperties.BooleanProperty; 
		textBorder: WMProperties.Int32Property; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ CheckClickHandler; 
		PROCEDURE ^ ExecuteClickHandler; 
		PROCEDURE ^ ScaleFont*(height: SIZE; percent: INTEGER); 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ LinkChanged*(sender, data: ANY); 
		PROCEDURE ^ ChangeModel(value: BOOLEAN); 
		PROCEDURE ^ PropertyChanged*(sender, data: ANY); 
		PROCEDURE ^ CheckRepeating(start: BOOLEAN); 
		PROCEDURE ^ SetInvert3d*(invert: BOOLEAN); 
		PROCEDURE ^ SetPressed*(down: BOOLEAN); 
		PROCEDURE ^ GetPressed*(): BOOLEAN; 
		PROCEDURE ^ FocusReceived*; 
		PROCEDURE ^ FocusLost*; 
		PROCEDURE ^ Down; 
		PROCEDURE ^ Up; 
		PROCEDURE ^ PointerDown*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerMove*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerUp*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerLeave*; 
		PROCEDURE ^ SetCaption*(CONST x: ARRAY OF CHAR); 
		PROCEDURE ^ IsHit*(x, y: SIZE): BOOLEAN; 
		PROCEDURE ^ IsHitHorizontal(x, y: SIZE): BOOLEAN; 
		PROCEDURE ^ IsHitVertical(x, y: SIZE): BOOLEAN; 
		PROCEDURE ^ GetHorizontalImages(VAR a, b, c: WMGraphics.Image); 
		PROCEDURE ^ GetVerticalImages(VAR a, b, c: WMGraphics.Image); 
		PROCEDURE ^ GetDecorationImage(name: String; CONST suffix: ARRAY OF CHAR; VAR image: WMGraphics.Image); 
		PROCEDURE ^ GetDecoration(name: String; VAR d: Decoration); 
		PROCEDURE ^ GetThisDecoration(VAR d: Decoration); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ DrawDecoBackground(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ DrawHorizontalBackground(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ DrawVerticalBackground(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ KeyEvent*(ucs: SIZE; flags: SET; VAR keyCode: SIZE); 
		PROCEDURE ^ Click*(sender, par: ANY); 
	END Button; 

	Area = RECORD 
		rect: WMRectangles.Rectangle; 
	END; 

	Scrollbar* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		min-, max-, pos-, pageSize-, width-: WMProperties.SizeProperty; 
		vertical-: WMProperties.BooleanProperty; 
		minTrackerSize-: WMProperties.SizeProperty; 
		clDefault-, clHover-, clPressed-: WMProperties.ColorProperty; 
		clBtnDefault-, clBtnHover-, clBtnPressed-: WMProperties.ColorProperty; 
		effect3D-: WMProperties.Int32Property; 
		useBgBitmaps-, repeatBgBitmap-: WMProperties.BooleanProperty; 
		hBgDefaultName-, hBgHoverName-, hBgPressedName-, vBgDefaultName-, vBgHoverName-, vBgPressedName-: WMProperties.StringProperty; 
		hBgDefault, hBgHover, hBgPressed, vBgDefault, vBgHover, vBgPressed: WMGraphics.Image; 
		useTrackerImages-, repeatMiddleBitmap-: WMProperties.BooleanProperty; 
		hTrackerDefaultNameLeft-, hTrackerHoverNameLeft-, hTrackerPressedNameLeft-, hTrackerDefaultNameMiddle-, hTrackerHoverNameMiddle-, hTrackerPressedNameMiddle-, hTrackerDefaultNameRight-, hTrackerHoverNameRight-, hTrackerPressedNameRight-: WMProperties.StringProperty; 
		hTrackerDefaultLeft, hTrackerHoverLeft, hTrackerPressedLeft, hTrackerDefaultMiddle, hTrackerHoverMiddle, hTrackerPressedMiddle, hTrackerDefaultRight, hTrackerHoverRight, hTrackerPressedRight: WMGraphics.Image; 
		vTrackerDefaultNameTop-, vTrackerHoverNameTop-, vTrackerPressedNameTop-, vTrackerDefaultNameMiddle-, vTrackerHoverNameMiddle-, vTrackerPressedNameMiddle-, vTrackerDefaultNameBottom-, vTrackerHoverNameBottom-, vTrackerPressedNameBottom-: WMProperties.StringProperty; 
		vTrackerDefaultTop, vTrackerHoverTop, vTrackerPressedTop, vTrackerDefaultMiddle, vTrackerHoverMiddle, vTrackerPressedMiddle, vTrackerDefaultBottom, vTrackerHoverBottom, vTrackerPressedBottom: WMGraphics.Image; 
		useArrowImages: WMProperties.BooleanProperty; 
		arrowLeftDefaultName-, arrowLeftHoverName-, arrowLeftPressedName-, arrowUpDefaultName-, arrowUpHoverName-, arrowUpPressedName-, arrowRightDefaultName-, arrowRightHoverName-, arrowRightPressedName-, arrowDownDefaultName-, arrowDownHoverName-, arrowDownPressedName-: WMProperties.StringProperty; 
		arrowLeftDefault, arrowLeftHover, arrowLeftPressed, arrowUpDefault, arrowUpHover, arrowUpPressed, arrowRightDefault, arrowRightHover, arrowRightPressed, arrowDownDefault, arrowDownHover, arrowDownPressed: WMGraphics.Image; 
		onPositionChanged-: EventSource; 
		areas: ARRAY 5 OF Area; 
		down, pressed, hover: SIGNED8; 
		timer: InternalTimer; 
		ts, tp, tDownX, tDownY: SIZE; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Resized*; 
		PROCEDURE ^ LinkChanged*(sender, data: ANY); 
		PROCEDURE ^ ChangeModel(value: SIZE); 
		PROCEDURE ^ TimerCallback(sender, data: ANY); 
		PROCEDURE ^ CheckRepeating(start: BOOLEAN); 
		PROCEDURE ^ Down(area: SIGNED8); 
		PROCEDURE ^ PointerDown*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerMove*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerUp*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerLeave*; 
		PROCEDURE ^ FindArea(x, y: SIZE): SIGNED8; 
		PROCEDURE ^ TrackerMove(x, y: SIZE; keys: SET); 
		PROCEDURE ^ RecacheImages; 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
		PROCEDURE ^ DecPos*(sender, par: ANY); 
		PROCEDURE ^ IncPos*(sender, par: ANY); 
		PROCEDURE ^ PageUp*(sender, par: ANY); 
		PROCEDURE ^ PageDown*(sender, par: ANY); 
		PROCEDURE ^ UpdateLayout; 
		PROCEDURE ^ GetButtonColor(area: SIGNED8): WMGraphics.Color; 
		PROCEDURE ^ GetPageColor(area: SIGNED8): WMGraphics.Color; 
		PROCEDURE ^ GetMinusButtonImage(vertical: BOOLEAN; area: SIGNED8; VAR image: WMGraphics.Image); 
		PROCEDURE ^ GetPlusButtonImage(vertical: BOOLEAN; area: SIGNED8; VAR image: WMGraphics.Image); 
		PROCEDURE ^ GetTrackerImages(vertical: BOOLEAN; area: SIGNED8; VAR a, b, c: WMGraphics.Image); 
		PROCEDURE ^ GetBgImage(vertical: BOOLEAN; area: SIGNED8; VAR image: WMGraphics.Image); 
		PROCEDURE ^ DrawHorizontalBackground(canvas: WMGraphics.Canvas; rect: WMRectangles.Rectangle; image, imgLeft, imgMiddle, imgRight: WMGraphics.Image); 
		PROCEDURE ^ DrawVerticalBackground(canvas: WMGraphics.Canvas; rect: WMRectangles.Rectangle; image, imgTop, imgMiddle, imgBottom: WMGraphics.Image); 
		PROCEDURE ^ DrawSimpleRepresentation(canvas: WMGraphics.Canvas; area: SIGNED32; rect: WMRectangles.Rectangle; color: WMGraphics.Color; effect3D: SIGNED32); 
		PROCEDURE ^ DrawImage(canvas: WMGraphics.Canvas; rect: WMRectangles.Rectangle; image: WMGraphics.Image; repeat, vertical: BOOLEAN); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
	END Scrollbar; 

	Slider* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		min-, max-, pos-, pageSize-, trackerSize-: WMProperties.SizeProperty; 
		vertical-: WMProperties.BooleanProperty; 
		clDefault-, clHover-, clPressed-, clBar: WMProperties.ColorProperty; 
		useBgBitmaps-, repeatBgBitmap-: WMProperties.BooleanProperty; 
		hBgDefaultName-, hBgHoverName-, hBgPressedName-, vBgDefaultName-, vBgHoverName-, vBgPressedName-: WMProperties.StringProperty; 
		useTrackerImages-: WMProperties.BooleanProperty; 
		hTrackerDefaultName-, hTrackerHoverName-, hTrackerPressedName-, vTrackerDefaultName-, vTrackerHoverName-, vTrackerPressedName-: WMProperties.StringProperty; 
		onPositionChanged-: WMEvents.EventSource; 
		minusPage, plusPage, tracker: Button; 
		ts, tp, lx, ly: SIZE; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ LinkChanged*(sender, link: ANY); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ TrackerPointerDown(x, y: SIZE; keys: SET; VAR handled: BOOLEAN); 
		PROCEDURE ^ TrackerPointerUp(x, y: SIZE; keys: SET; VAR handled: BOOLEAN); 
		PROCEDURE ^ ChangeModel; 
		PROCEDURE ^ TrackerPointerMove(x, y: SIZE; keys: SET; VAR handled: BOOLEAN); 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
		PROCEDURE ^ DecPos*(sender, par: ANY); 
		PROCEDURE ^ IncPos*(sender, par: ANY); 
		PROCEDURE ^ PageUp*(sender, par: ANY); 
		PROCEDURE ^ PageDown*(sender, par: ANY); 
		PROCEDURE ^ AlignSubComponents*; 
		PROCEDURE ^ SetDirection; 
		PROCEDURE ^ SetTrackerDirection; 
		PROCEDURE ^ SetBackgroundDirection; 
	END Slider; 

	Resizer* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		clDefault-: WMProperties.ColorProperty; 
		isFlat-: WMProperties.BooleanProperty; 
		dnx, dny: SIZE; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ PropertyChanged*(sender, data: ANY); 
		PROCEDURE ^ PointerDown*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerMove*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
	END Resizer; 

	GroupPanel* = OBJECT {EXCLUSIVE} (Panel)
	VAR 
		caption-: WMProperties.StringProperty; 
		textColor-: WMProperties.ColorProperty; 
		border: WMRectangles.Rectangle; 
		captionFont: WMGraphics.Font; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ AlignSubComponents*; 
	END GroupPanel; 

	Checkbox* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		caption-, onClickHandler-: WMProperties.StringProperty; 
		hasThreeStates-, useImages-, scaleImages-: WMProperties.BooleanProperty; 
		state-: WMProperties.Int32Property; 
		clBack-, clCheck-, clDefault-, clInactive-: WMProperties.ColorProperty; 
		imgCheckedName-, imgUncheckedName-, imgDefaultName-, imgCheckedInactiveName-, imgUncheckedInactiveName-, imgDefaultInactiveName-: WMProperties.StringProperty; 
		imgChecked, imgUnchecked, imgDefault, imgCheckedInactive, imgUncheckedInactive, imgDefaultInactive: WMGraphics.Image; 
		mouseOver: BOOLEAN; 
		onClick-: EventSource; 
		handler: WMEvents.EventListener; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ CheckClickHandler; 
		PROCEDURE ^ PropertyChanged*(sender, data: ANY); 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ FocusReceived*; 
		PROCEDURE ^ FocusLost*; 
		PROCEDURE ^ PointerDown*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerMove*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerLeave*; 
		PROCEDURE ^ Click*(sender, par: ANY); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
	END Checkbox; 

	Image* = OBJECT {EXCLUSIVE} (Panel)
	VAR 
		imageName-: WMProperties.StringProperty; 
		image-: WMGraphics.Image; 
		scaleImage-: WMProperties.BooleanProperty; 
		scaleImageI: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ SetImage*(sender, data: ANY); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
	END Image; 

	ImagePanel* = OBJECT {EXCLUSIVE} (Panel)
	VAR 
		imgName-: WMProperties.StringProperty; 
		img-: WMGraphics.Image; 
		vScrollbar, hScrollbar: Scrollbar; 
		dx, dy: SIZE; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Resized*; 
		PROCEDURE ^ GetOffsets*(VAR x, y: SIZE); 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ ScrollbarsChanged(sender, data: ANY); 
		PROCEDURE ^ SetImage*(sender, data: ANY); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
	END ImagePanel; 
VAR 
	manager: WMWindowManager.WindowManager; 
	blinker-: Blinker; 
	GSonTimer, GSonTimerInfo, GSStart, GSStartTimerInfo, GSStop, GSStopTimerInfo: String; 
	GSRun, GSRunSystemCommandInfo, GSCallEventInfo: String; 
	GSonClick, GSonClickButtonInfo, GSonClickCheckboxInfo: String; 
	GSonPositionChanged, GSonPositionChangedInfo: String; 
	PrototypeDelay*, PrototypeInterval*: WMProperties.Int32Property; 
	PrototypeCommandString*, PrototypeCaption*: WMProperties.StringProperty; 
	PrototypeFont-: WMProperties.FontProperty; 
	PrototypeTextColor*: WMProperties.ColorProperty; 
	PrototypeAlignH*, PrototypeButtonAlignH*: WMProperties.Int32Property; 
	PrototypeAlignV*, PrototypeButtonAlignV*: WMProperties.Int32Property; 
	ColorPrototype: WMProperties.ColorProperty; 
	BooleanPrototype: WMProperties.BooleanProperty; 
	StringPrototype: WMProperties.StringProperty; 
	Int32Prototype: WMProperties.Int32Property; 
	SizePrototype: WMProperties.SizeProperty; 
	RectanglePrototype: WMProperties.RectangleProperty; 
	PrototypeBlinking*: WMProperties.BooleanProperty; 
	PrototypeBBounds*: WMProperties.RectangleProperty; 
	PrototypeBUseBgImages*: WMProperties.BooleanProperty; 
	PrototypeBclDefault*, PrototypeBclHover*, PrototypeBclPressed*, PrototypeBclInactive*, PrototypeBclTextDefault*, PrototypeBclTextHover*, PrototypeBclTextPressed*, PrototypeBclTextInactive*: WMProperties.ColorProperty; 
	PrototypeBRepeatMiddleImg*, PrototypeBisRepeating*, PrototypeBisToggle*, PrototypeBisInverse*, PrototypeBindicateToggle*, PrototypeBIsHorizontal*: WMProperties.BooleanProperty; 
	PrototypeBcaption*, PrototypeBonClickHandler*: WMProperties.StringProperty; 
	PrototypeBimgDefaultName*, PrototypeBimgInactiveName*, PrototypeBimgHoverName*, PrototypeBimgPressedName*, PrototypeBimageName*: WMProperties.StringProperty; 
	PrototypeImgDefaultNameLeft*, PrototypeImgDefaultNameRight*, PrototypeImgDefaultNameMiddle*, PrototypeImgDefaultNameTop*, PrototypeImgDefaultNameBottom*, PrototypeImgHoverNameLeft*, PrototypeImgHoverNameRight*, PrototypeImgHoverNameMiddle*, PrototypeImgHoverNameTop*, PrototypeImgHoverNameBottom*, PrototypeImgPressedNameLeft*, PrototypeImgPressedNameRight*, PrototypeImgPressedNameMiddle*, PrototypeImgPressedNameTop*, PrototypeImgPressedNameBottom*: WMProperties.StringProperty; 
	PrototypeBEffect3D: WMProperties.Int32Property; 
	PrototypeUseDeco*: WMProperties.BooleanProperty; 
	PrototypeDecoDefaultName*, PrototypeDecoHoverName*, PrototypeDecoPressedName*: WMProperties.StringProperty; 
	PrototypeSvertical*: WMProperties.BooleanProperty; 
	PrototypeSmin*, PrototypeSmax*, PrototypeSpos*, PrototypeSpageSize*, PrototypeTrackerSize*, PrototypeSWidth*, PrototypeSMinTrackerSize*: WMProperties.SizeProperty; 
	PrototypeSUseArrowImages*, PrototypeSUseTrackerImages*, PrototypeSRepeatMiddleBitmap*: WMProperties.BooleanProperty; 
	PrototypeSUseBgBitmaps*, PrototypeSRepeateBgBitmap*: WMProperties.BooleanProperty; 
	PrototypeSClDefault*, PrototypeSClHover*, PrototypeSClPressed*, PrototypeSClBtnDefault*, PrototypeSClBtnHover*, PrototypeSClBtnPressed*: WMProperties.ColorProperty; 
	PrototypeSEffect3D*: WMProperties.Int32Property; 
	PrototypeSvBgDefault*, PrototypeSvBgHover*, PrototypeSvBgPressed*, PrototypeShBgDefault*, PrototypeShBgHover*, PrototypeShBgPressed*: WMProperties.StringProperty; 
	PrototypeSArrowLeftDefault*, PrototypeSArrowLeftHover*, PrototypeSArrowLeftPressed*, PrototypeSArrowUpDefault*, PrototypeSArrowUpHover*, PrototypeSArrowUpPressed*, PrototypeSArrowRightDefault*, PrototypeSArrowRightHover*, PrototypeSArrowRightPressed*, PrototypeSArrowDownDefault*, PrototypeSArrowDownHover*, PrototypeSArrowDownPressed*: WMProperties.StringProperty; 
	PrototypeShTrackerDefaultLeft*, PrototypeShTrackerHoverLeft*, PrototypeShTrackerPressedLeft*, PrototypeShTrackerDefaultMiddle*, PrototypeShTrackerHoverMiddle*, PrototypeShTrackerPressedMiddle*, PrototypeShTrackerDefaultRight*, PrototypeShTrackerHoverRight*, PrototypeShTrackerPressedRight*, PrototypeSvTrackerDefaultTop*, PrototypeSvTrackerHoverTop*, PrototypeSvTrackerPressedTop*, PrototypeSvTrackerDefaultMiddle*, PrototypeSvTrackerHoverMiddle*, PrototypeSvTrackerPressedMiddle*, PrototypeSvTrackerDefaultBottom*, PrototypeSvTrackerHoverBottom*, PrototypeSvTrackerPressedBottom*: WMProperties.StringProperty; 
	PrototypeSlhTrackerDefault*, PrototypeSlhTrackerHover*, PrototypeSlhTrackerPressed*, PrototypeSlvTrackerDefault*, PrototypeSlvTrackerHover*, PrototypeSlvTrackerPressed*, PrototypeSlhBgDefault*, PrototypelShBgHover*, PrototypeSlhBgPressed*, PrototypeSlvBgDefault*, PrototypeSlvBgHover*, PrototypeSlvBgPressed*: WMProperties.StringProperty; 
	PrototypeSlUseTrackerImages*, PrototypeSlUseBgBitmaps*, PrototypeSlRepeatBgBitmap*: WMProperties.BooleanProperty; 
	PrototypeSlClDefault*, PrototypeSlClHover*, PrototypeSlClPressed*, PrototypeSlClBar*: WMProperties.ColorProperty; 
	PrototypeSlvertical*: WMProperties.BooleanProperty; 
	PrototypeSlmin*, PrototypeSlmax*, PrototypeSlpos*, PrototypeSlpageSize*, PrototypeSlMinTrackerSize*: WMProperties.Int32Property; 
	PrototypeRclDefault*: WMProperties.ColorProperty; 
	PrototypeRisFlat*: WMProperties.BooleanProperty; 
	PrototypeRBounds*: WMProperties.RectangleProperty; 
	ProtCBBounds*: WMProperties.RectangleProperty; 
	ProtCBCaption*, PrototypeCBonClickHandler*: WMProperties.StringProperty; 
	ProtCBCaptionPos*: WMProperties.Int32Property; 
	ProtCBHasThreeStates*: WMProperties.BooleanProperty; 
	ProtCBState*: WMProperties.Int32Property; 
	ProtCBclBack*, ProtCBclCheck*, ProtCBclDefault*, ProtCBclInactive*: WMProperties.ColorProperty; 
	ProtCBUseImages*: WMProperties.BooleanProperty; 
	ProtCBScaleImages*: WMProperties.BooleanProperty; 
	ProtCBImgCheckedN*, ProtCBImgUncheckedN*, ProtCBImgDefaultN*, ProtCBImgCheckedInactiveN*, ProtCBImgUncheckedInactiveN*, ProtCBImgDefaultInactiveN*: WMProperties.StringProperty; 
	ProtGPCaption*: WMProperties.StringProperty; 
	ProtGPTextColor*: WMProperties.ColorProperty; 
	PrototypeImageName-: WMProperties.StringProperty; 
	PrototypeScaleImage: WMProperties.BooleanProperty; 
	ProtoIpImgName*: WMProperties.StringProperty; 
	PrototypeHorizontalFit: WMProperties.BooleanProperty; 
	PrototypeTextBorder: WMProperties.Int32Property; 
	StrTimer*, StrSystemCommand*, StrEvent*, StrPanel*, StrDecoratorPanel*, StrLabel*, StrButton*, StrScrollbar*, StrResizer*, StrCheckbox, StrGroupPanel, StrImagePanel, StrModel, StrModelInfo, StrImage: String; 

	PROCEDURE ^ InitStrings; 
	PROCEDURE ^ InitPrototypes; 
	PROCEDURE ^ GenTimer*(): XML.Element; 
	PROCEDURE ^ GenSystemCommand*(): XML.Element; 
	PROCEDURE ^ GenEvent*(): XML.Element; 
	PROCEDURE ^ GenPanel*(): XML.Element; 
	PROCEDURE ^ GenLabel*(): XML.Element; 
	PROCEDURE ^ GenButton*(): XML.Element; 
	PROCEDURE ^ GenScrollbar*(): XML.Element; 
	PROCEDURE ^ GenSlider*(): XML.Element; 
	PROCEDURE ^ GenResizer*(): XML.Element; 
	PROCEDURE ^ GenCheckbox*(): XML.Element; 
	PROCEDURE ^ GenGroupPanel*(): XML.Element; 
	PROCEDURE ^ GenImage*(): XML.Element; 
	PROCEDURE ^ GenImagePanel*(): XML.Element; 
	PROCEDURE ^ FindLabel*(CONST uid: ARRAY OF CHAR; component: WMComponents.Component): Label; 
	PROCEDURE ^ FindButton*(CONST uid: ARRAY OF CHAR; component: WMComponents.Component): Button; 
	PROCEDURE ^ FindCheckbox*(CONST uid: ARRAY OF CHAR; component: WMComponents.Component): Checkbox; 
	PROCEDURE ^ NewString*(CONST x: ARRAY OF CHAR): String; 
	PROCEDURE ^ Cleanup; 
BEGIN
END WMStandardComponents.
