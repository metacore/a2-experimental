MODULE WinFS;
	IMPORT SYSTEM, Machine, Kernel32, KernelLog, Modules, Kernel, Files, Commands;
CONST 
	PathDelimiter = \"\\"\; 
	BufferSize = 4096; 
	ReadOnly* = Files.ReadOnly; 
	Directory* = Files.Directory; 
	Hidden* = Files.Hidden; 
	System* = Files.System; 
	Archive* = Files.Archive; 
	Temporary* = Files.Temporary; 
	TraceFile = 0; 
	TraceFileSystem = 1; 
	TraceCollection = 2; 
	TraceSearch = 3; 
	Trace = {}; 
	TraceMounting = FALSE; 
	deviceArrival* = 32768; 
	deviceRemove* = 32772; 
TYPE 
	FileName = ARRAY Kernel32.MaxPath OF CHAR; 

	PFileName = POINTER TO FileName; 

	NotificationProc* = PROCEDURE (type: SIGNED32; drives: SET); 

	Notification = POINTER TO RECORD 
		p: NotificationProc; 
		next: Notification; 
	END; 

	SearchByName = OBJECT 
	VAR 
		sname: FileName; 
		found: File; 

		PROCEDURE ^ Init(name: ARRAY OF CHAR); 
		PROCEDURE ^ EnumFile(f: ANY; VAR cont: BOOLEAN); 
	END SearchByName; 

	Collection = OBJECT {EXCLUSIVE} 
	VAR 
		oldFiles, newFiles: Kernel.FinalizedCollection; 
		search: SearchByName; 
		fileKey: SIGNED32; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetNextFileKey(): SIGNED32; 
		PROCEDURE ^ Register(F: File); 
		PROCEDURE ^ Unregister(F: File); 
		PROCEDURE ^ AddNew(F: File); 
		PROCEDURE ^ AddOld(F: File); 
		PROCEDURE ^ ByName(VAR fname: ARRAY OF CHAR): File; 
		PROCEDURE ^ ByNameNotGC(VAR fname: ARRAY OF CHAR): File; 
		PROCEDURE ^ Finalize; 
		PROCEDURE ^ FinalizeFile(obj: ANY); 
	END Collection; 

	AliasFileSystem* = OBJECT (Files.FileSystem)
	VAR 
		fs: WinFileSystem; 
		useprefix*: BOOLEAN; 

		PROCEDURE ^ Prefix(CONST name: ARRAY OF CHAR; VAR res: ARRAY OF CHAR); 
		PROCEDURE ^  & Init*; 
		PROCEDURE ^ New0*(CONST name: ARRAY OF CHAR): Files.File; 
		PROCEDURE ^ Old0*(CONST name: ARRAY OF CHAR): Files.File; 
		PROCEDURE ^ Delete0*(CONST name: ARRAY OF CHAR; VAR key: SIGNED32; VAR res: INTEGER); 
		PROCEDURE ^ Rename0*(CONST old, new: ARRAY OF CHAR; fold: Files.File; VAR res: INTEGER); 
		PROCEDURE ^ Enumerate0*(CONST mask: ARRAY OF CHAR; flags: SET; enum: Files.Enumerator); 
		PROCEDURE ^ FileKey*(CONST name: ARRAY OF CHAR): SIGNED32; 
		PROCEDURE ^ CreateDirectory0*(CONST name: ARRAY OF CHAR; VAR res: INTEGER); 
		PROCEDURE ^ RemoveDirectory0*(CONST name: ARRAY OF CHAR; force: BOOLEAN; VAR key: SIGNED32; VAR res: INTEGER); 
		PROCEDURE ^ Has*(CONST name: ARRAY OF CHAR; VAR fullName: ARRAY OF CHAR; VAR flags: SET): BOOLEAN; 
	END AliasFileSystem; 

	WinFileSystem = OBJECT {EXCLUSIVE} 
	VAR 
		collection: Collection; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ New0(name: ARRAY OF CHAR): Files.File; 
		PROCEDURE ^ Old0(name: ARRAY OF CHAR): Files.File; 
		PROCEDURE ^ Delete0(name: ARRAY OF CHAR; VAR key: SIGNED32; VAR res: INTEGER); 
		PROCEDURE ^ Rename0(old, new: ARRAY OF CHAR; fold: Files.File; VAR res: INTEGER); 
		PROCEDURE ^ Enumerate1(mask: ARRAY OF CHAR; flags: SET; enum: Files.Enumerator; useprefix: BOOLEAN); 
		PROCEDURE ^ FileKey(name: ARRAY OF CHAR): SIGNED32; 
		PROCEDURE ^ CreateDirectory0(name: ARRAY OF CHAR; VAR res: INTEGER); 
		PROCEDURE ^ RemoveDirectory0(name: ARRAY OF CHAR; force: BOOLEAN; VAR key: SIGNED32; VAR res: INTEGER); 
		PROCEDURE ^ Finalize; 
		PROCEDURE ^ Has*(CONST fileName: ARRAY OF CHAR; VAR fullName: ARRAY OF CHAR; VAR flags: SET): BOOLEAN; 
	END WinFileSystem; 

	Buffer = POINTER TO RECORD 
		data: ARRAY BufferSize OF CHAR; 
		apos, len: SIGNED32; 
		dirty: BOOLEAN; 
	END; 

	File* = OBJECT {EXCLUSIVE} (Files.File)
	VAR 
		fname: FileName; 
		tfname: PFileName; 
		hfile: Kernel32.HANDLE; 
		buffer: Buffer; 
		fsize, fpos: SIGNED32; 
		fileSystem: WinFileSystem; 

		PROCEDURE ^  & Init*(VAR name: ARRAY OF CHAR; hfile: Kernel32.HANDLE; key: SIGNED32; fs: WinFileSystem); 
		PROCEDURE ^ Set*(VAR r: Files.Rider; pos: Files.Position); 
		PROCEDURE ^ Pos*(VAR r: Files.Rider): Files.Position; 
		PROCEDURE ^ WriteBuffer; 
		PROCEDURE ^ ReadBuffer(apos: SIGNED32); 
		PROCEDURE ^ Read*(VAR r: Files.Rider; VAR x: CHAR); 
		PROCEDURE ^ ReadBytes*(VAR r: Files.Rider; VAR x: ARRAY OF CHAR; ofs, len: SIZE); 
		PROCEDURE ^ Write*(VAR r: Files.Rider; x: CHAR); 
		PROCEDURE ^ WriteBytes*(VAR r: Files.Rider; CONST x: ARRAY OF CHAR; ofs, len: SIZE); 
		PROCEDURE ^ Length*(): Files.Size; 
		PROCEDURE ^ GetDate*(VAR t, d: SIGNED32); 
		PROCEDURE ^ SetDate*(t, d: SIGNED32); 
		PROCEDURE ^ GetAttributes*(): SET; 
		PROCEDURE ^ SetAttributes*(a: SET); 
		PROCEDURE ^ GetName*(VAR name: ARRAY OF CHAR); 
		PROCEDURE ^ ToTemp(): BOOLEAN; 
		PROCEDURE ^ Register0*(VAR res: INTEGER); 
		PROCEDURE ^ Update*; 
		PROCEDURE ^ Finalize*; 
		PROCEDURE ^ Close*; 
	END File; 
VAR 
	searchPath: ARRAY (4 * Kernel32.MaxPath) OF CHAR; 
	workPath, tempPath: FileName; 
	notifications: Notification; 
	winFS: WinFileSystem; 

	PROCEDURE ^ EnumFinalize(f: ANY; VAR cont: BOOLEAN); 
	PROCEDURE ^ DebugFile(f: File); 
	PROCEDURE ^ IsLocalPath(path: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ FixDriveLetter(VAR path: ARRAY OF CHAR); 
	PROCEDURE ^ MoveFile(VAR from, to: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ UpperCase(VAR src, dst: ARRAY OF CHAR); 
	PROCEDURE ^ TempName(VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ FullPathName(name: ARRAY OF CHAR; VAR fname: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ FileFlags(flags: INTEGERSET): SET; 
	PROCEDURE ^ WindowsFlags(flags: SET): INTEGERSET; 
	PROCEDURE ^ NewFS*(context: Files.Parameters); 
	PROCEDURE ^ Join(a1, a2, a3: ARRAY OF CHAR; VAR res: ARRAY OF CHAR); 
	PROCEDURE ^ MountDrive(CONST drive: ARRAY OF CHAR; context: Commands.Context); 
	PROCEDURE ^ AutoMountWindowsLogicalDrives(drives: SET); 
	PROCEDURE ^ UnmountDrive(CONST drive: ARRAY OF CHAR; context: Commands.Context); 
	PROCEDURE ^ AutoUnmountLogicalDrives(drives: SET); 
	PROCEDURE ^ Finalization; 
	PROCEDURE ^ FindFile*(name: ARRAY OF CHAR; VAR fullname: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ ConvertChar*(VAR name: ARRAY OF CHAR; from, to: CHAR); 
	PROCEDURE ^ SetPaths; 
	PROCEDURE ^ SameName*(VAR a, b: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ CheckPath(fullName: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ CheckName*(name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ GetAttributes*(file: ARRAY OF CHAR): INTEGERSET; 
	PROCEDURE ^ SetAttributes*(file: ARRAY OF CHAR; attrs: INTEGERSET); 
	PROCEDURE ^ SetFileAttributes*(file: ARRAY OF CHAR; attrs: INTEGERSET); 
	PROCEDURE ^ GetWorkingDirectory*(VAR path: ARRAY OF CHAR); 
	PROCEDURE ^ ChangeDirectory*(path: ARRAY OF CHAR; VAR done: BOOLEAN); 
	PROCEDURE ^ GetTempDirectory*(VAR path: ARRAY OF CHAR); 
	PROCEDURE ^ RelFileName*(fileName: ARRAY OF CHAR; VAR relFileName: ARRAY OF CHAR); 
	PROCEDURE ^ DeviceNotification*(type: SIGNED32; drives: SET); 
	PROCEDURE ^ RegisterNotification*(p: NotificationProc); 
	PROCEDURE ^ Init; 
	PROCEDURE ^ AddSearchPath*(context: Commands.Context); 
	PROCEDURE ^ SetWorkPath*(context: Commands.Context); 
	PROCEDURE ^ Mount*(context: Commands.Context); 
	PROCEDURE ^ Unmount*(context: Commands.Context); 
BEGIN
END WinFS.
