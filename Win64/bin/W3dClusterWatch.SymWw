MODULE W3dClusterWatch;
	IMPORT KernelLog, Kernel, MathL, Streams, Modules, Files, Commands, Strings, WM := WMWindowManager, Rect := WMRectangles, Raster, WMGraphics, IP, DNS, TCP, Classes := TFClasses, Vectors := W3dVectors, Matrix := W3dMatrix, AbstractWorld := W3dAbstractWorld, World := W3dWorld, ObjectGenerator := W3dObjectGenerator, XML, Scanner := XMLScanner, XMLParser, Objects := XMLObjects;
CONST 
	CATPort = 9999; 
	NoCAT = 0; 
	AosCAT = 1; 
	LinuxCAT = 2; 
	WindowsCAT = 3; 
	SuseCAT = 4; 
	UnknownCAT = 5; 
	BoxDistance = 250; 
TYPE 
	UpdateProc = PROCEDURE {DELEGATE}; 

	Info = OBJECT {EXCLUSIVE} 
	VAR 
		pos: Vectors.TVector3d; 
		host: ARRAY 64 OF CHAR; 
		os, oldos: ARRAY 32 OF CHAR; 
		load: ARRAY 32 OF CHAR; 
		running, oldrunning: SIGNED32; 
		obj: AbstractWorld.Object; 
		timer: Kernel.Timer; 
		interval: SIGNED32; 
		world: AbstractWorld.World; 
		connection: TCP.Connection; 
		alive: BOOLEAN; 
		index: SIGNED32; 
		render: UpdateProc; 

		PROCEDURE ^  & Init*(world: AbstractWorld.World; pos: Vectors.TVector3d; host: ARRAY OF CHAR; interval: SIGNED32; update: UpdateProc); 
		PROCEDURE ^ RefreshInfo(host: ARRAY OF CHAR; VAR osName, osLoad: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ Update; 
		PROCEDURE ^ Kill; 
	BEGIN{ACTIVE} 
	END Info; 

	Window = OBJECT {EXCLUSIVE} (WM.BufferWindow)
	VAR 
		alive, dead: BOOLEAN; 
		timer: Kernel.Timer; 
		interval: SIGNED32; 
		lookat: Vectors.TVector3d; 
		radius, angle, height: FLOAT64; 
		mouseKeys: SET; 
		oldX, oldY: SIZE; 
		world: World.World; 
		mx, my, mz: FLOAT64; 
		infoList: Classes.List; 
		index: SIGNED32; 

		PROCEDURE ^ ParseLine(line: XML.Element; pos: Vectors.TVector3d); 
		PROCEDURE ^ ParseLayer(layer: XML.Element; pos: Vectors.TVector3d); 
		PROCEDURE ^ Load(filename: ARRAY OF CHAR); 
		PROCEDURE ^  & New*(interval: SIGNED32; fileName: ARRAY OF CHAR); 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ Render; 
		PROCEDURE ^ PointerDown*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerMove*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerUp*(x, y: SIZE; keys: SET); 
	END Window; 
VAR 
	OSColor: ARRAY 6 OF SIGNED32; 
	OSImg: ARRAY 6 OF Raster.Image; 
	w: Window; 
	timg: Raster.Image; 
	mode: Raster.Mode; 

	PROCEDURE ^ MatchI(VAR buf: ARRAY OF CHAR; with: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ Watch*(context: Commands.Context); 
	PROCEDURE ^ Cleanup; 
BEGIN
END W3dClusterWatch.
