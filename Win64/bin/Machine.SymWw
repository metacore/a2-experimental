MODULE Machine;
	IMPORT SYSTEM, Trace, Kernel32;
CONST 
	Version = \"WinA2 (64bit) "\; 
	DefaultConfigFile = \"aos.ini"\; 
	DefaultGenericConfigFile = \"aosg.ini"\; 
	UserConfigFile = \"myaos.ini"\; 
	MaxCPU* = 8; 
	DefaultObjectFileExtension* = \".GofWw"\; 
	MTTR* = 12; 
	MMX* = 23; 
	debug* = FALSE; 
	StaticBlockSize = (8 * SIZEOF(ADDRESS)); 
	TraceOutput* = 0; 
	Memory* = 1; 
	Heaps* = 2; 
	Interrupts* = 3; 
	Modules* = 4; 
	Objects* = 5; 
	Processors* = 6; 
	KernelLog* = 7; 
	GC* = 8; 
	MaxLocks = 9; 
	StrongChecks = FALSE; 
	MemBlockSize = ((32 * 1024) * 1024); 
	NilVal = 0; 
	Second* = 1000; 
	Ok* = 0; 
	NilAdr* =  -1; 
	IsCooperative* = FALSE; 
TYPE 
	Vendor* = ARRAY 13 OF CHAR; 

	IDMap* = ARRAY 16 OF SHORTINT; 

	Range* = RECORD 
		adr*, size*: LONGINT; 
	END; 

	MemoryBlock* = POINTER {UNSAFE, UNTRACED} TO MemoryBlockDesc; 

	MemoryBlockDesc* = RECORD 
		next-: MemoryBlock; 
		startAdr-: ADDRESS; 
		size-: SIZE; 
		beginBlockAdr-, endBlockAdr-: ADDRESS; 
	END; 

	Stack* = RECORD 
		low: ADDRESS; 
		adr*: ADDRESS; 
		high*: ADDRESS; 
	END; 

	; 
VAR 
	LastAddress: RECORD 
	END; 
	stackBottom-: ADDRESS; 
	MMXSupport*: BOOLEAN; 
	SSESupport*: BOOLEAN; 
	SSE2Support*: BOOLEAN; 
	SSE3Support-: BOOLEAN; 
	SSSE3Support-: BOOLEAN; 
	SSE41Support-: BOOLEAN; 
	SSE42Support-: BOOLEAN; 
	SSE5Support-: BOOLEAN; 
	AVXSupport-: BOOLEAN; 
	version*: ARRAY 64 OF CHAR; 
	features*, features2*: SET; 
	fcr*: SET; 
	mhz*: HUGEINT; 
	boottime-: HUGEINT; 
	commandLine-: ARRAY 256 OF CHAR; 
	hin, hout: Kernel32.HANDLE; 
	lock-: ARRAY MaxLocks OF CHAR; 
	cs: ARRAY MaxLocks OF Kernel32.CriticalSection; 
	defaultConfigFile, userConfigFile, traceName: ARRAY Kernel32.MaxPath OF CHAR; 
	gcThreshold-: SIZE; 
	memBlockHead-{UNTRACED} , memBlockTail-{UNTRACED} : MemoryBlock; 

	PROCEDURE ^ StrToInt*(VAR i: LONGINT; CONST s: ARRAY OF CHAR): LONGINT; 
	PROCEDURE {Fingerprint(-4906166419077515203)}  - AtomicInc*(VAR x: LONGINT);
	CODE

		POP RAX
		LOCK
		INC DWORD [RAX]

	
	END AtomicInc; 
	PROCEDURE {Fingerprint(-4906166419489605579)}  - AtomicDec*(VAR x: LONGINT);
	CODE

		POP RAX
		LOCK
		DEC DWORD [RAX]

	
	END AtomicDec; 
	PROCEDURE ^ AtomicExcl*(VAR s: SET; bit: LONGINT); 
	PROCEDURE {Fingerprint(-8128385309809622434)}  - AtomicAdd*(VAR x: LONGINT; y: LONGINT);
	CODE

		POP EBX
		POP RAX
		LOCK
		ADD DWORD [RAX], EBX

	
	END AtomicAdd; 
	PROCEDURE {Fingerprint(3527218884401619127)}  - AtomicTestSet*(VAR x: BOOLEAN): BOOLEAN;
	CODE

		POP RBX
		MOV AL, 1
		XCHG [RBX], AL

	
	END AtomicTestSet; 
	PROCEDURE {Fingerprint(-519038113181393041)}  - AtomicCAS*(VAR x: LONGINT; old, new: LONGINT): LONGINT;
	CODE

		POP EBX		; new
		POP EAX		; old
		POP RCX		; address of x
		LOCK CMPXCHG [RCX], EBX	; atomicly compare x with old and set it to new if equal

	
	END AtomicCAS; 
	PROCEDURE {Fingerprint(7628482207854476747)}  - SpinHint*;
	CODE
		PAUSE
	
	END SpinHint; 
	PROCEDURE ^ CurrentPC*(): ADDRESS; 
	PROCEDURE {Fingerprint(4803519866585645229)}  - CurrentBP*(): ADDRESS;
	CODE

		MOV RAX, RBP

	
	END CurrentBP; 
	PROCEDURE {Fingerprint(5764612334986991996)}  - SetBP*(bp: ADDRESS);
	CODE

		POP RBP

	
	END SetBP; 
	PROCEDURE {Fingerprint(7340254540714668729)}  - CurrentSP*(): ADDRESS;
	CODE

		MOV RAX, RSP

	
	END CurrentSP; 
	PROCEDURE {Fingerprint(-3458759701867783819)}  - SetSP*(sp: ADDRESS);
	CODE {SYSTEM.AMD64}

		POP RSP

	
	END SetSP; 
	PROCEDURE ^ Fill32*(destAdr: ADDRESS; size: SIZE; filler: LONGINT); 
	PROCEDURE {Fingerprint(5082109869366590970)}  - SetFCR(s: SET);
	CODE
	END SetFCR; 
	PROCEDURE {Fingerprint(5376736950748288)}  - FCR(): SET;
	CODE
	END FCR; 
	PROCEDURE {Fingerprint(7631660203431244919)}  - InitFPU;
	CODE
	END InitFPU; 
	PROCEDURE ^ SetupFPU*; 
	PROCEDURE ^ CPUID*(VAR vendor: Vendor; VAR version: LONGINT; VAR features1, features2: SET); 
	PROCEDURE ^ GetConfig*(CONST name: ARRAY OF CHAR; VAR val: ARRAY OF CHAR); 
	PROCEDURE ^ Shutdown*(restart: BOOLEAN); 
	PROCEDURE {Fingerprint(6112430532310118778)}  - GetTimer*(): HUGEINT;
	CODE {SYSTEM.Pentium}
	RDTSC	; set EDX:EAX

	END GetTimer; 
	PROCEDURE ^ ID*(): LONGINT; 
	PROCEDURE ^ FlushDCacheRange*(adr: ADDRESS; len: LONGINT); 
	PROCEDURE ^ InvalidateDCacheRange*(adr: ADDRESS; len: LONGINT); 
	PROCEDURE ^ InvalidateICacheRange*(adr: ADDRESS; len: LONGINT); 
	PROCEDURE ^ SetupSSE2Ext; 
	PROCEDURE ^ ReadCommandLine(VAR commandLine: ARRAY OF CHAR); 
	PROCEDURE ^ ParseLine(VAR c: ARRAY OF CHAR; VAR iniFile: ARRAY OF CHAR); 
	PROCEDURE ^ TraceChar(c: CHAR); 
	PROCEDURE ^ SetTraceFile*; 
	PROCEDURE ^ SetTraceConsole*; 
	PROCEDURE ^ SetupTraceName(VAR traceName: ARRAY OF CHAR); 
	PROCEDURE ^ RemoveTraceFile; 
	PROCEDURE ^ ToExecutablePath(CONST name: ARRAY OF CHAR; VAR fullName: ARRAY OF CHAR); 
	PROCEDURE ^ Append(VAR s: ARRAY OF CHAR; CONST t: ARRAY OF CHAR); 
	PROCEDURE ^ Init*; 
	PROCEDURE ^ Start*; 
	PROCEDURE ^ InitLocks; 
	PROCEDURE ^ CleanupLocks*; 
	PROCEDURE ^ Acquire*(level: LONGINT); 
	PROCEDURE ^ Release*(level: LONGINT); 
	PROCEDURE ^ GetMemStatus(VAR stat: Kernel32.MemoryStatusEx): BOOLEAN; 
	PROCEDURE ^ GetKernelStacks*(VAR stack: ARRAY OF Stack); 
	PROCEDURE ^ SetGCParams*; 
	PROCEDURE ^ GetStaticHeap*(VAR beginBlockAdr, endBlockAdr, freeBlockAdr: ADDRESS); 
	PROCEDURE ^ ValidHeapAddress*(p: ADDRESS): BOOLEAN; 
	PROCEDURE ^ GetFreeK*(VAR total, lowFree, highFree: SIZE); 
	PROCEDURE ^ TraceMemBlocks*; 
	PROCEDURE ^ InsertMemoryBlock(memBlock: MemoryBlock); 
	PROCEDURE ^ ExpandHeap*(dummy: LONGINT; size: SIZE; VAR memoryBlock: MemoryBlock; VAR beginBlockAdr, endBlockAdr: ADDRESS); 
	PROCEDURE ^ SetMemoryBlockEndAddress*(memBlock: MemoryBlock; endBlockAdr: ADDRESS); 
	PROCEDURE ^ FreeMemBlock*(memBlock: MemoryBlock); 
	PROCEDURE ^ PhysicalAdr*(adr: ADDRESS; size: SIZE): ADDRESS; 
	PROCEDURE ^ NumberOfProcessors*(): LONGINT; 
	PROCEDURE ^ ChangeByteOrder*(n: LONGINT): LONGINT; 
	PROCEDURE ^ Portin8*(port: LONGINT; VAR val: CHAR); 
	PROCEDURE ^ Portin16*(port: LONGINT; VAR val: INTEGER); 
	PROCEDURE ^ Portin32*(port: LONGINT; VAR val: LONGINT); 
	PROCEDURE ^ Portout8*(port: LONGINT; val: CHAR); 
	PROCEDURE ^ Portout16*(port: LONGINT; val: INTEGER); 
	PROCEDURE ^ Portout32*(port: LONGINT; val: LONGINT); 
BEGIN
END Machine.
