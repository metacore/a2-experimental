MODULE DynamicStrings;
	IMPORT SYSTEM, Streams, Strings;
CONST 
	CR* = 0DX; 
	Tab* = 9X; 
	LF* = 0AX; 
	InitialSize = 256; 
	HashTableSize = 256; 
	InitialStringArraySize = 8; 
	Statistics = TRUE; 
TYPE 
	String* = Strings.String; 

	DynamicString* = OBJECT 
	VAR 
		buffer: String; 
		bufferSize: SIZE; 
		length: SIZE; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Clear*; 
		PROCEDURE ^ AdjustBufferSize(minSize: SIZE); 
		PROCEDURE ^ Put*(ch: CHAR; at: SIZE); 
		PROCEDURE ^ Get*(at: SIZE): CHAR; 
		PROCEDURE ^ AppendCharacter*(ch: CHAR); 
		PROCEDURE ^ Append*(CONST this: ARRAY OF CHAR); 
		PROCEDURE ^ Extract*(offset, len: SIZE): String; 
		PROCEDURE ^ Length*(): SIZE; 
		PROCEDURE ^ ToArrOfChar*(): String; 
		PROCEDURE ^ FromArrOfChar*(s: String); 
		PROCEDURE ^ CopyFrom*(ds: DynamicString; offset, len: SIZE); 
		PROCEDURE ^ EqualsTo*(CONST string: ARRAY OF CHAR; ignoreCase: BOOLEAN): BOOLEAN; 
	END DynamicString; 

	StringEntry = RECORD 
		value: String; 
		length: SIZE; 
	END; 

	StringEntryArray = POINTER TO ARRAY OF StringEntry; 

	HashTableEntry = RECORD 
		strings: StringEntryArray; 
		nofStrings: SIZE; 
	END; 

	Pool* = OBJECT 
	VAR 
		hashtable: ARRAY HashTableSize OF HashTableEntry; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Clear*; 
		PROCEDURE ^ Hash(ds: DynamicString): SIZE; 
		PROCEDURE ^ Find(ds: DynamicString): Strings.String; 
		PROCEDURE ^ Grow(VAR strings: StringEntryArray); 
		PROCEDURE ^ Add(ds: DynamicString; index: SIZE; VAR string: String); 
		PROCEDURE ^ Get*(ds: DynamicString): Strings.String; 
		PROCEDURE ^ Dump*(out: Streams.Writer); 
	END Pool; 
VAR 
	NnofRequests, NnofHits, NnofAdded: SIZE; 

	PROCEDURE ^ LessThan(ds: DynamicString; CONST entry: StringEntry): BOOLEAN; 
	PROCEDURE ^ GreaterThan(ds: DynamicString; CONST entry: StringEntry): BOOLEAN; 
	PROCEDURE ^ Equals(ds: DynamicString; CONST entry: StringEntry): BOOLEAN; 
	PROCEDURE ^ StringLength*(CONST str: ARRAY OF CHAR): SIZE; 
	PROCEDURE ^ StringAppend*(VAR to: ARRAY OF CHAR; CONST this: ARRAY OF CHAR); 
	PROCEDURE ^ Lower*(CONST str: ARRAY OF CHAR; VAR lstr: ARRAY OF CHAR); 
	PROCEDURE ^ LowerCh*(ch: CHAR): CHAR; 
	PROCEDURE ^ IntToStr*(val: LONGINT; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ StrToInt*(CONST str: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ HexStrToInt*(CONST str: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ Search*(CONST pat, src: ARRAY OF CHAR; VAR pos: SIZE); 
	PROCEDURE ^ ClearStatistics*; 
BEGIN
END DynamicStrings.
