MODULE FATScavenger;
	IMPORT SYSTEM, KernelLog, Streams, Files, FATVolumes, Disks, FATFiles, UTF8Strings, Strings, PartitionsLib, Clock;
CONST 
	Trace = FALSE; 
	Details = FALSE; 
	OK = Disks.Ok; 
	LongName = 15; 
	EntryFree = 0E5X; 
	EntryFreeLast = 0X; 
	FREE = FATVolumes.FREE; 
	EOC = FATVolumes.EOC; 
	BAD = FATVolumes.BAD; 
	FAT12* = 0; 
	FAT16* = 1; 
	FAT32* = 2; 
	fat32CleanShutdown = {27}; 
	fat32IOError = {26}; 
	fat16CleanShutdown = {15}; 
	fat16IOError = {14}; 
	SectorSize = 512; 
	BufferSize = 512; 
	BitmapSize = 65536; 
	BS = PartitionsLib.BS; 
	BsJmpBoot = 0; 
	BsOEMName = 3; 
	BpbBytsPerSec = 11; 
	BpbSecPerClus = 13; 
	BpbRsvdSecCnt = 14; 
	BpbNumFATs = 16; 
	BpbRootEntCnt = 17; 
	BpbTotSec16 = 19; 
	BpbMedia = 21; 
	BpbFATSz16 = 22; 
	BpbSecPerTrk = 24; 
	BpbNumHeads = 26; 
	BpbHiddSec = 28; 
	BpbTotSec32 = 32; 
	BsDrvNum = 36; 
	BsReserved1 = 37; 
	BsBootSig = 38; 
	BsVolID = 39; 
	BsVolLab = 43; 
	BsFilSysType = 54; 
	BpbFATSz32 = 36; 
	BpbExtFlags = 40; 
	BpbFSVer = 42; 
	BpbRootClus = 44; 
	BpbFSInfo = 48; 
	BpbBkBootSec = 50; 
	BpbReserved = 52; 
	Bs32DrvNum = 64; 
	Bs32Reserved1 = 65; 
	Bs32BootSig = 66; 
	Bs32VolID = 67; 
	Bs32VolLab = 71; 
	Bs32FilSysType = 82; 
	FsiLeadSig = 0; 
	FsiReserved1 = 4; 
	FsiStrucSig = 484; 
	FsiFreeCount = 488; 
	FsiNxtFree = 492; 
	FsiReserved2 = 496; 
	FsiTrailSig = 508; 
TYPE 
	Block = PartitionsLib.Block; 

	String = PartitionsLib.String; 

	Node = POINTER TO RECORD 
		cluster, offset: SIGNED32; 
		parent, first: SIGNED32; 
		next: Node; 
	END; 

	STACK = OBJECT 
	VAR 
		head: Node; 

		PROCEDURE ^ PushCluster(cluster: Cluster); 
		PROCEDURE ^ Push(node: Node); 
		PROCEDURE ^ ReplaceTop(cluster: Cluster); 
		PROCEDURE ^ RemoveTop; 
		PROCEDURE ^ GetTop(): Node; 
		PROCEDURE ^ Empty(): BOOLEAN; 
		PROCEDURE ^  & Init*; 
	END STACK; 

	LongEntryList = OBJECT 
	VAR 
		head, current: LongEntry; 

		PROCEDURE ^ Insert(entry: LongEntry); 
		PROCEDURE ^ GetNext(): LongEntry; 
		PROCEDURE ^ SetCurrent; 
		PROCEDURE ^ HasNext(): BOOLEAN; 
		PROCEDURE ^ Clear; 
		PROCEDURE ^  & Init*; 
	END LongEntryList; 

	Entry = OBJECT 
	VAR 
		rawEntry, correctedEntry: ARRAY 32 OF CHAR; 
		cluster: Files.Address; 
		offset: SIGNED32; 

		PROCEDURE ^ ParseRawEntry; 
		PROCEDURE ^ Print; 
	END Entry; 

	ShortEntry = OBJECT (Entry)
	VAR 
		shortName: ARRAY 12 OF CHAR; 
		attr: SET; 
		crtTime, crtDate: SIGNED32; 
		lstAccDate: SIGNED32; 
		firstCluster: SIGNED32; 
		wrtTime, wrtDate: SIGNED32; 
		fileSize: SIGNED32; 
		directory: BOOLEAN; 

		PROCEDURE ^ ParseRawEntry; 
		PROCEDURE ^ GetChecksum(): SIGNED32; 
		PROCEDURE ^ Print; 
	END ShortEntry; 

	LongEntry = OBJECT (Entry)
	VAR 
		order: SIGNED16; 
		name: ARRAY 13 OF SIGNED32; 
		type: SIGNED16; 
		chksum: SIGNED32; 
		FstClusLO: SIGNED32; 
		next: LongEntry; 
		last: BOOLEAN; 

		PROCEDURE ^ ParseRawEntry; 
		PROCEDURE ^ Print; 
		PROCEDURE ^  & Init*; 
	END LongEntry; 

	Bitmap = POINTER TO ARRAY OF SET; 

	ClusterBitmap = OBJECT 
	VAR 
		maxClusters: SIGNED32; 
		bitmaps: POINTER TO ARRAY OF Bitmap; 
		bitmapsPos, bmPos, bmOffset: SIGNED32; 

		PROCEDURE ^  & Init*(MaxClusters: SIGNED32); 
		PROCEDURE ^ CalcAddress(pos: SIGNED32); 
		PROCEDURE ^ SetBit(pos: SIGNED32; VAR collision: BOOLEAN); 
		PROCEDURE ^ IsSet(pos: SIGNED32): BOOLEAN; 
	END ClusterBitmap; 

	Cluster = OBJECT 
	VAR 
		cluster: SIGNED32; 
		parent, first: SIGNED32; 
		clusterSize: SIGNED32; 
		currentEntry, maxEntries: SIGNED32; 
		data: POINTER TO ARRAY OF CHAR; 
		next: SIGNED32; 

		PROCEDURE ^  & Init*(csize: SIGNED32); 
		PROCEDURE ^ SetPos(pos: SIGNED32); 
		PROCEDURE ^ GetPos(): SIGNED32; 
		PROCEDURE ^ GetNext(): Entry; 
		PROCEDURE ^ HasNext(): BOOLEAN; 
	END Cluster; 

	PathName = POINTER TO RECORD 
		name: POINTER TO ARRAY OF CHAR; 
		next: PathName; 
	END; 

	Path = OBJECT 
	VAR 
		head: PathName; 
		prefix: Files.Prefix; 

		PROCEDURE ^  & Init*(CONST prefix: Files.Prefix); 
		PROCEDURE ^ Append(CONST dirname: ARRAY OF CHAR); 
		PROCEDURE ^ RemoveLast; 
		PROCEDURE ^ Get(VAR result: ARRAY OF CHAR); 
		PROCEDURE ^ Print; 
	END Path; 

	LostCluster = POINTER TO RECORD 
		cluster, link: SIGNED32; 
		next: LostCluster; 
		chain: LostCluster; 
		terminated, crosslink: BOOLEAN; 
	END; 

	ClusterList = OBJECT 
	VAR 
		head, tail, previous, current: LostCluster; 
		size: SIGNED32; 
		currentDeleted: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Insert(lost: LostCluster); 
		PROCEDURE ^ Append(lost: LostCluster); 
		PROCEDURE ^ SetCurrent; 
		PROCEDURE ^ GetNext(): LostCluster; 
		PROCEDURE ^ HasNext(): BOOLEAN; 
		PROCEDURE ^ RemoveCurrent; 
		PROCEDURE ^ Empty(): BOOLEAN; 
		PROCEDURE ^ Print; 
	END ClusterList; 

	FATScavenger* = OBJECT {EXCLUSIVE} (PartitionsLib.Operation)
	VAR 
		doSurfaceScan, doCompareFATs, doLostClusters, doWrite: BOOLEAN; 
		filesScanned-, directoriesScanned-: SIGNED32; 
		longEntriesScanned-, shortEntriesScanned-, emptyEntriesScanned-: SIGNED32; 
		freeClusters-, badClusters-, lostClusters-, lostClusterChains-: SIGNED32; 
		nbrFreeFragments: SIGNED32; 
		errorsFound: SIGNED32; 
		ioError: BOOLEAN; 
		curOp, maxOp: SIGNED32; 
		vol: FATVolumes.Volume; 
		dev: Disks.Device; 
		path: Path; 
		cluster, baseCluster: Cluster; 
		processStack: STACK; 
		longList: LongEntryList; 
		lostList, lostErrorList, fileList, xlinkedList: ClusterList; 
		fsType: SIGNED32; 
		FAT1216rootDir: Cluster; 
		clusterBitmap: ClusterBitmap; 
		fsinfo: ARRAY FATVolumes.BS OF CHAR; 
		fsinfoAddress: SIGNED32; 
		fsInfoLoaded: BOOLEAN; 
		deleted: SIGNED32; 

		PROCEDURE ^ SetParameters*(doSurfaceScan, doCompareFATs, doLostClusters, doWrite: BOOLEAN); 
		PROCEDURE ^ ValidParameters*(): BOOLEAN; 
		PROCEDURE ^ DoOperation*; 
		PROCEDURE ^  & Init*(disk: PartitionsLib.Disk; partition: SIGNED32; out: Streams.Writer); 
		PROCEDURE ^ BuildInfo; 
		PROCEDURE ^ GetFSInfo(VAR freeCount, nextFree: SIGNED32): BOOLEAN; 
		PROCEDURE ^ SetFSInfo(freeCount, nextFree: SIGNED32); 
		PROCEDURE ^ CompareFATs; 
		PROCEDURE ^ TraverseFAT; 
		PROCEDURE ^ SurfaceScan; 
		PROCEDURE ^ DeleteLostClusters; 
		PROCEDURE ^ CheckLostClusters; 
		PROCEDURE ^ CheckLongEntries(shortEntry: ShortEntry); 
		PROCEDURE ^ CheckDotDot(shortEntry: ShortEntry); 
		PROCEDURE ^ ProcessShortEntry(shortEntry: ShortEntry); 
		PROCEDURE ^ ProcessHead*; 
		PROCEDURE ^ WriteEntry(entry: Entry); 
		PROCEDURE ^ GetString(cur, max: SIGNED32; CONST unit, status: ARRAY OF CHAR): String; 
		PROCEDURE ^ ReportTransferError(name: ARRAY OF CHAR; op, adr: SIGNED32; res: INTEGER); 
		PROCEDURE ^ ValidShortChar(ch: CHAR): BOOLEAN; 
		PROCEDURE ^ ValidLongChar(ch: CHAR): BOOLEAN; 
		PROCEDURE ^ Equals(CONST op1, op2: ARRAY OF CHAR): BOOLEAN; 
	END FATScavenger; 

	FormatPartition* = OBJECT {EXCLUSIVE} (PartitionsLib.Operation)
	VAR 
		quickFormat: BOOLEAN; 
		volumeName: Strings.String; 
		fs: SIGNED32; 
		oemName: ARRAY 9 OF CHAR; 
		rsvdSecCnt1216, rsvdSecCnt32: SIGNED32; 
		numFATs: SIGNED32; 
		rootEntCnt: SIGNED32; 
		fatsize: SIGNED32; 
		volLab: ARRAY 12 OF CHAR; 
		rootCluster32: SIGNED32; 
		fsinfo: SIGNED32; 
		backupBoot: SIGNED32; 

		PROCEDURE ^ SetParameters*(volumeName: Strings.String; quickFormat: BOOLEAN); 
		PROCEDURE ^ ValidParameters*(): BOOLEAN; 
		PROCEDURE ^ DoOperation*; 
		PROCEDURE ^ ClearSectors(from, to: SIGNED32); 
		PROCEDURE ^ BuildBPB(secPerClus: SIGNED32): Block; 
		PROCEDURE ^ BuildFSInfo(freecount, nextfree: SIGNED32): Block; 
		PROCEDURE ^ GetFatSize(sectorPerCluster: SIGNED32): SIGNED32; 
		PROCEDURE ^ GetSectorPerCluster(disksize: SIGNED32): SIGNED32; 
		PROCEDURE ^ ValidClusterSize(clusterSize: SIGNED32): BOOLEAN; 
		PROCEDURE ^  & Init*(disk: PartitionsLib.Disk; partition: SIGNED32; out: Streams.Writer); 
	END FormatPartition; 
VAR 
	fsType2: SIGNED32; 

	PROCEDURE ^ GetVolume(dev: Disks.Device; partIdx: SIGNED32; bpb: Block): FATVolumes.Volume; 
BEGIN
END FATScavenger.
