MODULE PCM;
	IMPORT SYSTEM, KernelLog, Modules, Objects, Streams, Files, Diagnostics, StringPool, PCDebug, Strings, Reflection, Machine;
CONST 
	nilval* = 0; 
	MinSInt* =  -128; 
	MinInt* =  -32768; 
	MinLInt* = LONGINT(2147483648); 
	MaxSInt* = 127; 
	MaxInt* = 32767; 
	MaxLInt* = 2147483647; 
	MaxSet* = 31; 
	MaxHDig* = 8; 
	MaxHHDig* = 16; 
	MaxRExp* = 38; 
	MaxLExp* = 308; 
	ArrayCheck* = 0; 
	OverflowCheck* = 1; 
	NilCheck* = 2; 
	TypeCheck* = 3; 
	PtrInit* = 5; 
	AssertCheck* = 6; 
	Optimize* = 13; 
	FullStackInit* = 20; 
	AlignedStack* = 21; 
	ExportDefinitions* = 30; 
	UseDefinitions* = 31; 
	NewSF* = 16; 
	ExtSF* = 17; 
	Breakpoint* = 18; 
	CacheImports* = 19; 
	NoFiles* = 21; 
	NoOpOverloading* = 22; 
	BigEndian* = 23; 
	Warnings* = 24; 
	SkipOldSFImport* = 25; 
	MultipleModules* = 26; 
	Untraced* = 4; 
	WinAPIParam* = 13; 
	CParam* = 14; 
	ReadOnly* = 15; 
	RealtimeProc* = 21; 
	RealtimeProcType* = 21; 
	WithTrap* = 1; 
	CaseTrap* = 2; 
	ReturnTrap* = 3; 
	TypeEqualTrap* = 5; 
	TypeCheckTrap* = 6; 
	IndexCheckTrap* = 7; 
	AssertTrap* = 8; 
	ArraySizeTrap* = 9; 
	ArrayFormTrap* = 10; 
	FileTag = 0BBX; 
	NoZeroCompress = 0ADX; 
	FileVersion* = 0B1X; 
	FileVersionOC* = 0B2X; 
	LocalUnicodeSupport* = TRUE; 
	ExportedUnicodeSupport* = FALSE; 
	InitErrMsgSize = 300; 
	MaxErrors = 100; 
	MaxWarnings = 100; 
TYPE 
	SymReader* = Files.Reader; 

	Rider* = RECORD 
		symmodF, symF, objF, refF: Files.File; 
		symmod, sym, obj, ref: Files.Writer; 
	END; 

	Attribute* = OBJECT 
	END Attribute; 

	ErrorMsgs = POINTER TO ARRAY OF StringPool.Index; 
VAR 
	bigEndian*: BOOLEAN; 
	tracebackOnError: BOOLEAN; 
	codeOptions*, parserOptions*: SET; 
	error*: BOOLEAN; 
	errors, warnings: LONGINT; 
	errMsg: ErrorMsgs; 
	breakpc*: LONGINT; 
	breakpos*: LONGINT; 
	prefix*, suffix*: ARRAY 128 OF CHAR; 
	dump*: ARRAY 32 OF CHAR; 
	source-: Files.FileName; 
	log-: Streams.Writer; 
	diagnostics-: Diagnostics.Diagnostics; 

	PROCEDURE ^ GetProcessID*(): ADDRESS; 
	PROCEDURE ^ MakeFileName(VAR file: ARRAY OF CHAR; CONST name, prefix, suffix: ARRAY OF CHAR); 
	PROCEDURE ^ WriteString(w: Streams.Writer; CONST s: ARRAY OF CHAR); 
	PROCEDURE ^ OpenSymFile*(CONST name: ARRAY OF CHAR; VAR r: SymReader; VAR version: CHAR; VAR zeroCompress: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ SymW*(VAR R: Rider; ch: CHAR); 
	PROCEDURE ^ SymWNum*(VAR R: Rider; i: LONGINT); 
	PROCEDURE ^ SymWSet*(VAR R: Rider; s: SET); 
	PROCEDURE ^ SymWString*(VAR R: Rider; CONST str: ARRAY OF CHAR); 
	PROCEDURE ^ SymWMod*(VAR R: Rider; CONST str: ARRAY OF CHAR); 
	PROCEDURE ^ SymWReal*(VAR R: Rider; r: REAL); 
	PROCEDURE ^ SymWLReal*(VAR R: Rider; r: LONGREAL); 
	PROCEDURE ^ ObjWGetPos*(VAR R: Rider; VAR pos: LONGINT); 
	PROCEDURE ^ ObjW*(VAR R: Rider; ch: CHAR); 
	PROCEDURE ^ ObjWNum*(VAR R: Rider; i: LONGINT); 
	PROCEDURE ^ ObjWInt*(VAR R: Rider; i: INTEGER); 
	PROCEDURE ^ ObjWIntAt*(VAR R: Rider; pos: LONGINT; i: INTEGER); 
	PROCEDURE ^ ObjWLInt*(VAR R: Rider; i: LONGINT); 
	PROCEDURE ^ ObjWLIntAt*(VAR R: Rider; pos: LONGINT; i: LONGINT); 
	PROCEDURE ^ ObjWName*(VAR R: Rider; CONST str: ARRAY OF CHAR); 
	PROCEDURE ^ RefW*(VAR R: Rider; ch: CHAR); 
	PROCEDURE ^ RefWNum*(VAR R: Rider; i: LONGINT); 
	PROCEDURE ^ RefWString*(VAR R: Rider; CONST str: ARRAY OF CHAR); 
	PROCEDURE ^ Open*(CONST name: ARRAY OF CHAR; VAR R: Rider; VAR version: CHAR); 
	PROCEDURE ^ AppendFile(f: Files.File; to: Streams.Writer); 
	PROCEDURE ^ CloseSym*(VAR R: Rider); 
	PROCEDURE ^ CloseObj*(VAR R: Rider); 
	PROCEDURE ^ RefSize*(VAR R: Rider): LONGINT; 
	PROCEDURE ^ GetMessage(err: LONGINT; CONST msg: ARRAY OF CHAR; VAR res: ARRAY OF CHAR); 
	PROCEDURE ^ TraceBackThis(eip, ebp: ADDRESS); 
	PROCEDURE ^ TraceBack*; 
	PROCEDURE ^ Error*(err, pos: LONGINT; CONST msg: ARRAY OF CHAR); 
	PROCEDURE ^ ErrorN*(err, pos: LONGINT; msg: StringPool.Index); 
	PROCEDURE ^ Warning*(err, pos: LONGINT; CONST msg: ARRAY OF CHAR); 
	PROCEDURE ^ LogW*(ch: CHAR); 
	PROCEDURE ^ LogWStr*(CONST str: ARRAY OF CHAR); 
	PROCEDURE ^ LogWStr0*(str: StringPool.Index); 
	PROCEDURE ^ LogWHex*(i: LONGINT); 
	PROCEDURE ^ LogWNum*(i: LONGINT); 
	PROCEDURE ^ LogWBool*(b: BOOLEAN); 
	PROCEDURE ^ LogWType*(p: ANY); 
	PROCEDURE ^ LogWLn*; 
	PROCEDURE ^ LogFlush*; 
	PROCEDURE ^ Init*(CONST s: ARRAY OF CHAR; l: Streams.Writer; d: Diagnostics.Diagnostics); 
	PROCEDURE ^ Reset*; 
	PROCEDURE ^ SetErrorMsg*(n: LONGINT; CONST msg: ARRAY OF CHAR); 
	PROCEDURE ^ Expand(VAR oldAry: ErrorMsgs); 
	PROCEDURE ^ InitMod; 
	PROCEDURE ^ SwapBytes*(VAR p: ARRAY OF SYSTEM.BYTE; offset, len: LONGINT); 
	PROCEDURE ^ MakeErrorFile*; 
	PROCEDURE ^ TracebackOnError*; 
BEGIN
END PCM.
