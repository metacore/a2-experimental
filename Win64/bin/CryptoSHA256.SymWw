MODULE CryptoSHA256;
	IMPORT Hashes := CryptoHashes, U := CryptoUtils;
CONST 
	BlockSize = 64; 
TYPE 
	Hash* = OBJECT (Hashes.Hash)
	VAR 
		hash: ARRAY 8 OF SIGNED32; 
		bitlen: SIGNED64; 
		cdata: ARRAY BlockSize OF CHAR; 
		cn: SIGNED32; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Initialize*; 
		PROCEDURE ^ HashBlock; 
		PROCEDURE ^ Update*(CONST data: ARRAY OF CHAR; pos, len: SIZE); 
		PROCEDURE ^ GetHash*(VAR buf: ARRAY OF CHAR; pos: SIZE); 
	END Hash; 
VAR 
	K256: ARRAY 64 OF SIGNED32; 

	PROCEDURE ^ NewHash*(): Hashes.Hash; 
	PROCEDURE  - Sigma0Maj(x, y, z: SET32): SIGNED32;
	VAR 
		a, b: SET32; 
	BEGIN
		a := ((ROT(x, 30) / ROT(x, 19)) / ROT(x, 10)); 
		b := (((x * y) / (x * z)) / (y * z)); 
		RETURN (SIGNED32(a) + SIGNED32(b))
	END Sigma0Maj; 
	PROCEDURE  - Sigma1Ch(x, y, z: SET32): SIGNED32;
	VAR 
		a, b: SET32; 
	BEGIN
		a := ((ROT(x, 26) / ROT(x, 21)) / ROT(x, 7)); 
		b := ((x * y) / ( -x * z)); 
		RETURN (SIGNED32(a) + SIGNED32(b))
	END Sigma1Ch; 
	PROCEDURE  - sigma0(x: SET32): SIGNED32;
	BEGIN
		RETURN SIGNED32(((ROT(x, 25) / ROT(x, 14)) / LSH(x,  -3)))
	END sigma0; 
	PROCEDURE  - sigma1(x: SET32): SIGNED32;
	BEGIN
		RETURN SIGNED32(((ROT(x, 15) / ROT(x, 13)) / LSH(x,  -10)))
	END sigma1; 
	PROCEDURE ^ InitializeK; 
BEGIN
END CryptoSHA256.
