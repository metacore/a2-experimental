MODULE WMDropDownLists;
	IMPORT Objects, Inputs, Strings, XML, Plugins, WMRectangles, WMGraphics, WMGraphicUtilities, WMProperties, WMEvents, WMWindowManager, WMComponents, WMStandardComponents, WMEditors, WMGrids, WMStringGrids;
CONST 
	Mode_SelectOnly* = 0; 
	Mode_Editable* = 1; 
	Mode_Eager* = 2; 
	Ok* = 0; 
	NotFound* = 1; 
	DuplicateEntry* = 2; 
	NoKey* = MIN(SIGNED32); 
	InitialEntryArraySize = 4; 
	ShadowWidth = 5; 
TYPE 
	Window = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		grid: WMStringGrids.StringGrid; 
		dropDownList: DropDownList; 
		isClosed: BOOLEAN; 
		shadowRect, borderRect: WMRectangles.Rectangle; 

		PROCEDURE ^  & New(x, y, width, height: SIZE; grid: WMStringGrids.StringGrid; dropDownList: DropDownList); 
		PROCEDURE ^ Draw*(canvas: WMGraphics.Canvas; w, h: SIZE; q: SIGNED32); 
		PROCEDURE ^ Clicked(sender, data: ANY ); 
		PROCEDURE ^ PropagateSelection; 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ SelectEntry(next: BOOLEAN); 
		PROCEDURE ^ KeyEvent*(ucs: SIZE; flags: SET; keysym: SIZE); 
		PROCEDURE ^ FocusLost*; 
	END Window; 

	Entry* = POINTER TO RECORD 
		key-: SIGNED32; 
		name-: Strings.String; 
	END; 

	EntryArray = POINTER TO ARRAY OF Entry; 

	EnumeratorProcedure* = PROCEDURE {DELEGATE}(entry: Entry; index: SIGNED32); 

	DropDownListModel* = OBJECT {EXCLUSIVE} 
	VAR 
		onChanged-: WMEvents.EventSource; 
		entries: EntryArray; 
		nofEntries: SIGNED32; 
		lockLevel: SIGNED32; 
		lockedBy: ANY ; 
		viewChanged: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Acquire*; 
		PROCEDURE ^ Release*; 
		PROCEDURE ^ GetNofEntries*(): SIGNED32; 
		PROCEDURE ^ Add*(key: SIGNED32; CONST name: ARRAY OF CHAR; VAR res: INTEGER); 
		PROCEDURE ^ Remove*(CONST name: ARRAY OF CHAR; VAR res: INTEGER); 
		PROCEDURE ^ Enumerate*(CONST mask: ARRAY OF CHAR; proc: EnumeratorProcedure); 
		PROCEDURE ^ GetNofMatches*(CONST mask: ARRAY OF CHAR): SIGNED32; 
		PROCEDURE ^ FindDuplicate*(key: SIGNED32; CONST name: ARRAY OF CHAR): Entry; 
		PROCEDURE ^ FindByName*(CONST name: ARRAY OF CHAR): Entry; 
		PROCEDURE ^ FindByKey*(key: SIGNED32): Entry; 
		PROCEDURE ^ ResizeEntryArray; 
	END DropDownListModel; 

	DropDownList* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		mode-: WMProperties.Int32Property; 
		textColor-: WMProperties.ColorProperty; 
		minGridWidth-: WMProperties.Int32Property; 
		maxGridHeight-: WMProperties.Int32Property; 
		model-: DropDownListModel; 
		onSelect-: WMEvents.EventSource; 
		selectedEntry: Entry; 
		window: Window; 
		grid: WMStringGrids.StringGrid; 
		button: WMStandardComponents.Button; 
		editor: WMEditors.Editor; 
		captionI: Strings.String; 
		currentMask: ARRAY 128 OF CHAR; 
		nofMatches: SIGNED32; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Initialize*; 
		PROCEDURE ^ Finalize*; 
		PROCEDURE ^ SetSelection*(entry: Entry); 
		PROCEDURE ^ SelectKey*(key: SIGNED32); 
		PROCEDURE ^ GetSelection*(): Entry; 
		PROCEDURE ^ SetModel*(model: DropDownListModel); 
		PROCEDURE ^ TextChanged(sender, data: ANY ); 
		PROCEDURE ^ ModelChanged(sender, data: ANY ); 
		PROCEDURE ^ KeyPressed(ucs: SIZE; flags: SET; VAR keySym: SIZE; VAR handled: BOOLEAN); 
		PROCEDURE ^ ShowDropDownList(sender, data: ANY ); 
		PROCEDURE ^ InitGrid; 
		PROCEDURE ^ AddRow(entry: Entry; index: SIGNED32); 
		PROCEDURE ^ UpdateGrid; 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY ); 
		PROCEDURE ^ SetMode(mode: SIGNED32); 
	END DropDownList; 
VAR 
	StrDropDownList: Strings.String; 
	PrototypeTextColor: WMProperties.ColorProperty; 
	PrototypeMode, PrototypeMinGridWidth, PrototypeMaxGridHeight: WMProperties.Int32Property; 
	PrototypeIsEditable: WMProperties.BooleanProperty; 

	PROCEDURE ^ GenDropDownList*(): XML.Element; 
	PROCEDURE ^ Init; 
BEGIN
END WMDropDownLists.
