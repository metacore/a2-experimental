MODULE FATFiles IN Oberon;
	IMPORT SYSTEM, Kernel, Disks, Modules;
CONST 
	NumFlop = 2; 
	SS = 512; 
	AllocDirMark = 0FFX; 
	ReadOnly* = 0; 
	Hidden* = 1; 
	System* = 2; 
	VolLabel* = 3; 
	SubDir* = 4; 
	Archive* = 5; 
	purge = 1; 
	register = 6; 
	updatedir = 7; 
	rename = 8; 
	eInvalidOperation = 8901; 
	eInvalidDirectory = 8902; 
	eFileDoesNotExist = 8903; 
	eCannotReuseDirEntry = 8904; 
	eRootDirFull = 8905; 
	eDiskFull = 8906; 
	eClusterOutsideFile = 8907; 
	eNoSuchPartition = 8908; 
	eInvalidSectorSize = 8909; 
	eInvalidDirEntry = 8910; 
	eBufferOverflow = 8912; 
	eFilePrefixNotaDir = 8913; 
	eFileIsReadOnlyInServer = 8915; 
	eCannotOpenSubDir = 8916; 
	eInvalidFirstCluster = 8917; 
	eDirEntryAlreadyAllocated = 8918; 
	eFileNameAlreadyExists = 8919; 
	eNotSameDirectory = 8920; 
	eFileErased = 8921; 
	eInvalidFileLength = 8922; 
	eDirEntryAlreadyExists = 8926; 
	eNameIsWild = 8927; 
	eInternalServerError = 8939; 
	Trace = FALSE; 
	KeepList = FALSE; 
	CheckNew = FALSE; 
	MaxBufs = 4; 
	eBufferTooSmallForRequest = 8940; 
	eInvalidFileName = 8941; 
	eFileIsReadOnly = 8942; 
	eInternalError = 8959; 
TYPE 
	Filename = ARRAY 96 OF CHAR; 

	DirEntryName = ARRAY 12 OF CHAR; 

	Drive = POINTER TO DriveDesc; 

	DriveDesc = RECORD 
		next: Drive; 
		num: SIGNED8; 
		part: SIGNED8; 
		dev: Disks.Device; 
		fat16: BOOLEAN; 
		spc, bpc: SIGNED32; 
		sres: SIGNED32; 
		fats: SIGNED32; 
		dirsize: SIGNED32; 
		totals: SIGNED32; 
		spf: SIGNED32; 
		fatsec, rootsec, datasec: SIGNED32; 
		fatsize: SIGNED32; 
		serial: SIGNED32; 
		label: ARRAY 12 OF CHAR; 
		fatdirty: BOOLEAN; 
		fat: POINTER TO ARRAY OF SIGNED16; 
		dir: POINTER TO ARRAY OF CHAR; 
	END; 

	Handle0 = RECORD 
		aleng, bleng, time, date, bufSize: SIGNED32; 
		readOnly: BOOLEAN; 
		drive: Drive; 
		firstcl: SIGNED32; 
		attr: SET; 
		capos, ccl: SIGNED32; 
		name: Filename; 
		firstdircl, dircl, dirofs: SIGNED32; 
	END; 

	DiskBuffer = ARRAY MAX(SIGNED32) OF CHAR; 

	File* = POINTER TO Handle; 

	Buffer = POINTER TO BufferRecord; 

	Rider* = RECORD 
		eof*: BOOLEAN; 
		res*: SIGNED32; 
		file: File; 
		apos, bpos: SIGNED32; 
		buf: Buffer; 
	END; 

	Handle = RECORD 
		next: File; 
		handle: Handle0; 
		registered: BOOLEAN; 
		mod: BOOLEAN; 
		nofbufs: SIGNED16; 
		firstbuf: Buffer; 
	END; 

	BufferRecord = RECORD 
		apos, lim: SIGNED32; 
		mod: BOOLEAN; 
		next: Buffer; 
		data: POINTER TO ARRAY OF CHAR; 
	END; 

	EntryHandler* = PROCEDURE (name: ARRAY OF CHAR; time, date, size: SIGNED32; attr: SET; VAR continue: BOOLEAN); 
VAR 
	drives: Drive; 
	dirbuf: POINTER TO ARRAY OF CHAR; 
	defdir: ARRAY 4 OF CHAR; 
	root: File; 

	PROCEDURE ^ Cap(ch: CHAR): CHAR; 
	PROCEDURE ^ Check(s: ARRAY OF CHAR; VAR name: Filename; VAR res: INTEGER); 
	PROCEDURE ^ GetUWord(VAR buf: ARRAY OF SYSTEM.BYTE; idx: SIGNED32): SIGNED32; 
	PROCEDURE ^ IsDOS(type: SIGNED32): BOOLEAN; 
	PROCEDURE ^ ReadSectors(d: Drive; sec, num: SIGNED32; VAR buf: ARRAY OF SYSTEM.BYTE; VAR res: INTEGER); 
	PROCEDURE ^ WriteSectors(d: Drive; sec, num: SIGNED32; VAR buf: ARRAY OF SYSTEM.BYTE; VAR res: INTEGER); 
	PROCEDURE ^ WriteFAT12(d: Drive; copy: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ FlushDrive(d: Drive; VAR res: INTEGER); 
	PROCEDURE ^ ReadFAT12(d: Drive; VAR res: INTEGER); 
	PROCEDURE ^ FindDrive(num: SIGNED8; VAR d: Disks.Device; VAR part: SIGNED8); 
	PROCEDURE ^ OpenDrive(letter: CHAR; VAR d: Drive; VAR res: INTEGER); 
	PROCEDURE ^ FindFile(name: DirEntryName; ofs: SIGNED32; VAR dir: ARRAY OF CHAR; num: SIGNED32): SIGNED32; 
	PROCEDURE ^ SeparateName(str: ARRAY OF CHAR; VAR prefix: ARRAY OF CHAR; VAR name: DirEntryName); 
	PROCEDURE ^ GetDir(VAR dir: ARRAY OF CHAR; ofs: SIGNED32; VAR attr: SET; VAR time, date, firstcl, len: SIGNED32); 
	PROCEDURE ^ PutDir(VAR dir: ARRAY OF CHAR; ofs: SIGNED32; name: ARRAY OF CHAR; attr: SET; time, date, firstcl, len, operation: SIGNED32; delete: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ LocateFile(name: ARRAY OF CHAR; VAR d: Drive; VAR firstdircl, dircl, dirofs, time, date, firstcl, len: SIGNED32; VAR attr: SET; VAR res: INTEGER); 
	PROCEDURE ^ AllocEntry(VAR dir: ARRAY OF CHAR; dirSize: SIGNED32; VAR dirofs: SIGNED32); 
	PROCEDURE ^ AllocateDirEntry(VAR f: Handle0; VAR res: INTEGER); 
	PROCEDURE ^ Length0(VAR f: Handle0): SIGNED32; 
	PROCEDURE ^ UpdateDirEntry(VAR f: Handle0; operation: SIGNED32; delete: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ Purge0(VAR f: Handle0; delete: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ Old0(VAR f: Handle0; VAR res: INTEGER); 
	PROCEDURE ^ New0(VAR f: Handle0; VAR res: INTEGER); 
	PROCEDURE ^ ReadCluster(drive: Drive; firstcl: SIGNED32; VAR ccl, capos: SIGNED32; VAR data: ARRAY OF SYSTEM.BYTE; apos: SIGNED32; VAR res, rplen: SIGNED32); 
	PROCEDURE ^ WriteCluster(drive: Drive; VAR firstcl: SIGNED32; attr: SET; VAR data: ARRAY OF SYSTEM.BYTE; apos: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ Register0(VAR f: Handle0; VAR res: INTEGER); 
	PROCEDURE ^ Rename0(VAR old, new: Filename; VAR res: INTEGER); 
	PROCEDURE ^ Low(ch: CHAR): CHAR; 
	PROCEDURE ^ ExtractName(VAR dir: ARRAY OF CHAR; ofs: SIGNED32; VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ GetFreeDiskSpace*(drive: CHAR; VAR size, res: SIGNED32); 
	PROCEDURE ^ Enumerate*(path: ARRAY OF CHAR; handler: EntryHandler; VAR res: INTEGER); 
	PROCEDURE ^ Initialize; 
	PROCEDURE ^ SameFile(VAR h0, h1: Handle0): BOOLEAN; 
	PROCEDURE ^ New*(name: ARRAY OF CHAR; VAR res: INTEGER): File; 
	PROCEDURE ^ ReadBuf(f: File; buf: Buffer; apos: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ WriteBuf(f: File; buf: Buffer; VAR res: INTEGER); 
	PROCEDURE ^ Buf(f: File; apos: SIGNED32): Buffer; 
	PROCEDURE ^ GetBuf(f: File; apos: SIGNED32; VAR res: INTEGER): Buffer; 
	PROCEDURE ^ Old*(name: ARRAY OF CHAR; VAR res: INTEGER): File; 
	PROCEDURE ^ Unbuffer(f: File; VAR res: INTEGER); 
	PROCEDURE ^ Register*(f: File; VAR res: INTEGER); 
	PROCEDURE ^ Close*(f: File; VAR res: INTEGER); 
	PROCEDURE ^ PurgeFile(f: File; delete: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ Purge*(f: File; VAR res: INTEGER); 
	PROCEDURE ^ Length*(f: File): SIGNED32; 
	PROCEDURE ^ GetDate*(f: File; VAR t, d: SIGNED32); 
	PROCEDURE ^ SetDate*(f: File; t, d: SIGNED32); 
	PROCEDURE ^ Set*(VAR r: Rider; f: File; pos: SIGNED32); 
	PROCEDURE ^ Pos*(VAR r: Rider): SIGNED32; 
	PROCEDURE ^ Base*(VAR r: Rider): File; 
	PROCEDURE ^ Read*(VAR r: Rider; VAR x: SYSTEM.BYTE; VAR res: INTEGER); 
	PROCEDURE ^ ReadBytes*(VAR r: Rider; VAR x: ARRAY OF SYSTEM.BYTE; n: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ ReadInt*(VAR R: Rider; VAR x: SIGNED16; VAR res: INTEGER); 
	PROCEDURE ^ ReadLInt*(VAR R: Rider; VAR x: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ ReadSet*(VAR R: Rider; VAR x: SET; VAR res: INTEGER); 
	PROCEDURE ^ ReadBool*(VAR R: Rider; VAR x: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ ReadReal*(VAR R: Rider; VAR x: FLOAT32; VAR res: INTEGER); 
	PROCEDURE ^ ReadLReal*(VAR R: Rider; VAR x: FLOAT64; VAR res: INTEGER); 
	PROCEDURE ^ ReadString*(VAR R: Rider; VAR x: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ ReadNum*(VAR R: Rider; VAR x: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ Write*(VAR r: Rider; x: SYSTEM.BYTE; VAR res: INTEGER); 
	PROCEDURE ^ WriteBytes*(VAR r: Rider; VAR x: ARRAY OF SYSTEM.BYTE; n: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ WriteInt*(VAR R: Rider; x: SIGNED16; VAR res: INTEGER); 
	PROCEDURE ^ WriteLInt*(VAR R: Rider; x: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ WriteSet*(VAR R: Rider; x: SET; VAR res: INTEGER); 
	PROCEDURE ^ WriteBool*(VAR R: Rider; x: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ WriteReal*(VAR R: Rider; x: FLOAT32; VAR res: INTEGER); 
	PROCEDURE ^ WriteLReal*(VAR R: Rider; x: FLOAT64; VAR res: INTEGER); 
	PROCEDURE ^ WriteString*(VAR R: Rider; x: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ WriteNum*(VAR R: Rider; x: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ Delete*(name: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ Rename*(old, new: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ Unmount(dev: Disks.Device; part: SIGNED8); 
	PROCEDURE ^ Reset*; 
	PROCEDURE ^ Cleanup; 
BEGIN
END FATFiles.
