MODULE Mail IN Oberon;
	IMPORT SYSTEM, Kernel, Files, Strings, Dates, Objects, Display, Fonts, Texts, Oberon, NetSystem, NetTools, MIME, Streams, TextStreams, Display3, Attributes, Links, Gadgets, ListRiders, ListGadgets, AsciiCoder, TextGadgets, TextDocs, Documents, Desktops, HyperDocs, MD5 IN A2, Modules, FileDir, Out := OutStub;
CONST 
	MsgFile = \"MailMessages"\; 
	IndexFile = \"MailMessages.idx"\; 
	IndexFileKey = 1961843213; 
	DefPOPPort = 110; 
	OberonStart* = \"--- start of oberon mail ---"\; 
	BufLen = 4096; 
	Read = 0; 
	Deleted = 1; 
	SortByDateTime = 1; 
	SortByReplyTo = 2; 
	SortBySubject = 3; 
	Version = 0; 
	eq = 1; 
	leq = 2; 
	le = 3; 
	geq = 4; 
	ge = 5; 
	neq = 6; 
	or = 7; 
	and = 8; 
	from = 20; 
	subject = 21; 
	date = 22; 
	time = 23; 
	text = 24; 
	topic = 25; 
	notopic = 26; 
	readFlag = 27; 
	Menu = \"Desktops.Copy[Copy] TextDocs.Search[Search] TextDocs.Replace[Rep] Mail.Show[Source] Mail.Reply[Reply] Desktops.StoreDoc[Store]"\; 
	SysMenu = \"Desktops.Copy[Copy] Mail.Reply[Reply] Desktops.StoreDoc[Store]"\; 
	DefSMTPPort* = 25; 
	simpler = TRUE; 
TYPE 
	UIDL = ARRAY 64 OF CHAR; 

	ServerName* = ARRAY HyperDocs.ServerStrLen OF CHAR; 

	UserName = ARRAY 64 OF CHAR; 

	AdrString* = ARRAY HyperDocs.PathStrLen OF CHAR; 

	UIDLList = POINTER TO ARRAY OF UIDL; 

	UIDLSet = POINTER TO UIDLSetDesc; 

	UIDLSetDesc = RECORD 
		F: Files.File; 
		pop: ServerName; 
		user: UserName; 
		nouidls: SIGNED32; 
		uidls: UIDLList; 
		next: UIDLSet; 
	END; 

	MsgHead = RECORD 
		pos, len, state, stamp: SIGNED32; 
		flags, topics: SET; 
		date, time: SIGNED32; 
		replyTo, subject: SIGNED32; 
	END; 

	MsgHeadList = POINTER TO ARRAY OF MsgHead; 

	Topic = POINTER TO TopicDesc; 

	TopicDesc = RECORD 
		no, state, stamp: SIGNED32; 
		topic: ListRiders.String; 
		next: Topic; 
	END; 

	SortList = POINTER TO ARRAY OF SIGNED32; 

	Rider = POINTER TO RiderDesc; 

	RiderDesc = RECORD (ListRiders.RiderDesc)
		noMsgs: SIGNED32; 
		key, pos, sortPos: SIGNED32; 
		ascending: BOOLEAN; 
		sort: SortList; 
	END; 

	QueryString = ARRAY 128 OF CHAR; 

	ValueString = ARRAY 64 OF CHAR; 

	ConnectMsg = RECORD (ListRiders.ConnectMsg)
		query: QueryString; 
		sortBy: SIGNED16; 
		ascending: BOOLEAN; 
	END; 

	TopicRider = POINTER TO TopicRiderDesc; 

	TopicRiderDesc = RECORD (ListRiders.RiderDesc)
		topic: Topic; 
	END; 

	Model = POINTER TO ModelDesc; 

	ModelDesc = RECORD (Gadgets.ObjDesc)
	END; 

	Frame = POINTER TO FrameDesc; 

	FrameDesc = RECORD (ListGadgets.FrameDesc)
		query, sortBy, ascending: Objects.Object; 
	END; 

	Cond = POINTER TO CondDesc; 

	CondDesc = RECORD 
		val: ValueString; 
		date, time: SIGNED32; 
		op, field: SIGNED32; 
		value, eval: BOOLEAN; 
		next: Cond; 
	END; 

	Node = POINTER TO NodeDesc; 

	NodeDesc = RECORD (CondDesc)
		left, right: Cond; 
	END; 

	Query = RECORD 
		query: QueryString; 
		conds, root: Cond; 
		error: BOOLEAN; 
	END; 

	SMTPSession* = POINTER TO SMTPSessionDesc; 

	SMTPSessionDesc* = RECORD (NetTools.SessionDesc)
		from*: AdrString; 
	END; 

	Buffer = POINTER TO ARRAY OF CHAR; 

	Index = POINTER TO ARRAY OF SIGNED32; 

	Heap = RECORD 
		buffer: Buffer; 
		bufLen: SIGNED32; 
		index: Index; 
		idxLen: SIGNED32; 
	END; 

	WrapData = RECORD 
		nCR: SIGNED32; 
		indent: SIGNED32; 
		lineLen: SIGNED32; 
		width: SIGNED32; 
		space0, space1, gap: Texts.Writer; 
		word: Texts.Writer; 
		accum: Texts.Writer; 
	END; 
VAR 
	msgs: MsgHeadList; 
	noMsgs, delMsgs: SIGNED32; 
	msgsF: Files.File; 
	msgList: Model; 
	heap: Heap; 
	topicList: Model; 
	topics: Topic; 
	uidls: UIDLSet; 
	lastUIDL: SIGNED32; 
	W: Texts.Writer; 
	mMethod, tmMethod: ListRiders.Method; 
	vMethod: ListGadgets.Method; 
	textFnt, headFnt, fieldFnt: Fonts.Font; 
	mailer: ValueString; 
	trace: BOOLEAN; 

	PROCEDURE ^ Open(VAR heap: Heap); 
	PROCEDURE ^ Append(VAR heap: Heap; idx: SIGNED32; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ Compare(VAR heap: Heap; ofs: SIGNED32; VAR str: ARRAY OF CHAR): SIGNED32; 
	PROCEDURE ^ Insert(VAR heap: Heap; str: ARRAY OF CHAR; VAR ofs: SIGNED32); 
	PROCEDURE ^ Copy(VAR heap: Heap; ofs: SIGNED32; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ Store(VAR R: Files.Rider; VAR heap: Heap); 
	PROCEDURE ^ Load(VAR R: Files.Rider; VAR heap: Heap); 
	PROCEDURE ^ NrToArg(nr: SIGNED32; VAR arg: ARRAY OF CHAR); 
	PROCEDURE ^ SendCmd(S: NetTools.Session; cmd, arg: ARRAY OF CHAR); 
	PROCEDURE ^ ReadState(S: NetTools.Session): BOOLEAN; 
	PROCEDURE ^ ClosePOP(S: NetTools.Session); 
	PROCEDURE ^ APOP(S: NetTools.Session; user, passwd: ARRAY OF CHAR); 
	PROCEDURE ^ OpenPOP(VAR S: NetTools.Session; host, user, passwd: ARRAY OF CHAR; port: SIGNED16; apop: BOOLEAN); 
	PROCEDURE ^ ReadText(S: NetTools.Session; VAR R: Files.Rider); 
	PROCEDURE ^ DeleteMail(S: NetTools.Session; no: SIGNED32); 
	PROCEDURE ^ ReceiveMail(S: NetTools.Session; no: SIGNED32; VAR R: Files.Rider); 
	PROCEDURE ^ MessageSize(S: NetTools.Session; no: SIGNED32): SIGNED32; 
	PROCEDURE ^ GetUIDLs(S: NetTools.Session; VAR T: Texts.Text); 
	PROCEDURE ^ UIDLFile(VAR pop, user: ARRAY OF CHAR; new: BOOLEAN): Files.File; 
	PROCEDURE ^ GetUIDLSet(VAR pop, user: ARRAY OF CHAR): UIDLSet; 
	PROCEDURE ^ NewUIDLSet(VAR pop, user: ARRAY OF CHAR): UIDLSet; 
	PROCEDURE ^ AddUIDL(set: UIDLSet; VAR uidl: UIDL); 
	PROCEDURE ^ ExistsUIDL(set: UIDLSet; VAR uidl: UIDL): SIGNED32; 
	PROCEDURE ^ FlushUIDL(set: UIDLSet); 
	PROCEDURE ^ ParseContent*(h: MIME.Header; VAR cont: MIME.Content); 
	PROCEDURE ^ AddMsgHead(pos: SIGNED32); 
	PROCEDURE ^ FindObj(name: ARRAY OF CHAR): Objects.Object; 
	PROCEDURE ^ GetSetting*(name: ARRAY OF CHAR; VAR value: ARRAY OF CHAR; local: BOOLEAN); 
	PROCEDURE ^ ShowStatus(msg: ARRAY OF CHAR); 
	PROCEDURE ^ WriteString(VAR R: Files.Rider; str: ARRAY OF CHAR); 
	PROCEDURE ^ WriteLn(VAR R: Files.Rider); 
	PROCEDURE ^ SetVPos(F: Objects.Object); 
	PROCEDURE ^ Synchronize*; 
	PROCEDURE ^ POPCollect*; 
	PROCEDURE ^ ReadString(VAR R: Texts.Reader; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ ScanHeader(no: SIGNED32; VAR h: MIME.Header); 
	PROCEDURE ^ WriteStatus(h: MIME.Header; no: SIGNED32); 
	PROCEDURE ^ WriteField(VAR h: MIME.Header; field: ARRAY OF CHAR; empty, long: BOOLEAN); 
	PROCEDURE ^ DecodeMessage*(VAR T: Texts.Text; h: MIME.Header; cont: MIME.Content; no: SIGNED32); 
	PROCEDURE ^ decodeMessage(no: SIGNED32; VAR T: Texts.Text; plain: BOOLEAN); 
	PROCEDURE ^ DocHandler(D: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ ShowText(title: ARRAY OF CHAR; T: Texts.Text; reply: BOOLEAN); 
	PROCEDURE ^ Show*; 
	PROCEDURE ^ Shrink; 
	PROCEDURE ^ collect; 
	PROCEDURE ^ Collect*; 
	PROCEDURE ^ DeleteMessage(no: SIGNED32); 
	PROCEDURE ^ Re*(VAR W: Texts.Writer; VAR t: ARRAY OF CHAR); 
	PROCEDURE ^ ReplyText(T: Texts.Text); 
	PROCEDURE ^ CiteText*(VAR W: Texts.Writer; T: Texts.Text; beg, end: SIGNED32); 
	PROCEDURE ^ Reply*; 
	PROCEDURE ^ DoTopic(set: BOOLEAN); 
	PROCEDURE ^ SetTopic*; 
	PROCEDURE ^ ClearTopic*; 
	PROCEDURE ^ MoveTopic*; 
	PROCEDURE ^ QueryTopic*; 
	PROCEDURE ^ SaveIndexFile; 
	PROCEDURE ^ TryLoadIndexFile(): BOOLEAN; 
	PROCEDURE ^ LoadMsgs; 
	PROCEDURE ^ LoadTopics; 
	PROCEDURE ^ Key(R: ListRiders.Rider): SIGNED32; 
	PROCEDURE ^ Seek(R: ListRiders.Rider; key: SIGNED32); 
	PROCEDURE ^ Pos(R: ListRiders.Rider): SIGNED32; 
	PROCEDURE ^ Set(R: ListRiders.Rider; pos: SIGNED32); 
	PROCEDURE ^ GetState(R: ListRiders.Rider): SIGNED32; 
	PROCEDURE ^ SetState(R: ListRiders.Rider; state: SIGNED32); 
	PROCEDURE ^ GetStamp(R: ListRiders.Rider): SIGNED32; 
	PROCEDURE ^ SetStamp(R: ListRiders.Rider; stamp: SIGNED32); 
	PROCEDURE ^ Write(R: ListRiders.Rider; d: ListRiders.Data); 
	PROCEDURE ^ WriteLink(R, linkR: ListRiders.Rider); 
	PROCEDURE ^ DeleteLink(R, linkR: ListRiders.Rider); 
	PROCEDURE ^ Desc(R, old: ListRiders.Rider): ListRiders.Rider; 
	PROCEDURE ^ Less(VAR i, j: MsgHead; sortBy: SIGNED16): BOOLEAN; 
	PROCEDURE ^ QuickSort(sort: SortList; noMsgs: SIGNED32; sortBy: SIGNED16); 
	PROCEDURE ^ ToISO(VAR value: ARRAY OF CHAR); 
	PROCEDURE ^ CompileQuery(VAR Q: Query); 
	PROCEDURE ^ TextSearch(cond: Cond; no: SIGNED32): BOOLEAN; 
	PROCEDURE ^ MatchQuery(VAR Q: Query; no: SIGNED32; VAR msg: MsgHead): BOOLEAN; 
	PROCEDURE ^ ConnectRider(VAR M: ListRiders.ConnectMsg; base: Model); 
	PROCEDURE ^ ModelHandler(obj: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewModel*; 
	PROCEDURE ^ GetRider(F: ListGadgets.Frame; new: BOOLEAN): ListRiders.Rider; 
	PROCEDURE ^ FormatLine(F: ListGadgets.Frame; R: ListRiders.Rider; L: ListGadgets.Line); 
	PROCEDURE ^ DisplayLine(F: ListGadgets.Frame; Q: Display3.Mask; x, y, w, h: SIGNED16; R: ListRiders.Rider; L: ListGadgets.Line); 
	PROCEDURE ^ CopyFrame(VAR M: Objects.CopyMsg; from, to: Frame); 
	PROCEDURE ^ Update(F: Frame); 
	PROCEDURE ^ FrameHandler(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitFrame(F: Frame); 
	PROCEDURE ^ NewFrame*; 
	PROCEDURE ^ TopicKey(R: ListRiders.Rider): SIGNED32; 
	PROCEDURE ^ TopicSeek(R: ListRiders.Rider; key: SIGNED32); 
	PROCEDURE ^ TopicPos(R: ListRiders.Rider): SIGNED32; 
	PROCEDURE ^ TopicSet(R: ListRiders.Rider; pos: SIGNED32); 
	PROCEDURE ^ TopicGetState(R: ListRiders.Rider): SIGNED32; 
	PROCEDURE ^ TopicSetState(R: ListRiders.Rider; state: SIGNED32); 
	PROCEDURE ^ TopicGetStamp(R: ListRiders.Rider): SIGNED32; 
	PROCEDURE ^ TopicSetStamp(R: ListRiders.Rider; stamp: SIGNED32); 
	PROCEDURE ^ TopicDeleteLink(R, linkR: ListRiders.Rider); 
	PROCEDURE ^ ConnectTopicRider(VAR M: ListRiders.ConnectMsg; base: Model); 
	PROCEDURE ^ TopicModelHandler(obj: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewTopicModel*; 
	PROCEDURE ^ Recipient(VAR i: SIGNED32; VAR s, rcpt: ARRAY OF CHAR); 
	PROCEDURE ^ QueryContType*(T: Texts.Text; beg: SIGNED32; cont: MIME.Content); 
	PROCEDURE ^ ReadResponse(S: SMTPSession); 
	PROCEDURE ^ CloseSMTP*(S: SMTPSession); 
	PROCEDURE ^ OpenSMTP*(VAR S: SMTPSession; host, from: ARRAY OF CHAR; port: SIGNED16); 
	PROCEDURE ^ SendReplyLine*(S: NetTools.Session; cont: MIME.Content); 
	PROCEDURE ^ MakeAscii*(body: Texts.Text; beg, end: SIGNED32; compress: BOOLEAN; VAR ascii: Texts.Text); 
	PROCEDURE ^ SendText*(S: SMTPSession; head, body: Texts.Text; beg, end: SIGNED32; cont: MIME.Content); 
	PROCEDURE ^ SendMail*(S: SMTPSession; T: Texts.Text; cont: MIME.Content; autoCc: BOOLEAN); 
	PROCEDURE ^ Send*; 
	PROCEDURE ^ Cite*; 
	PROCEDURE ^ Mono*; 
	PROCEDURE ^ CutLines*; 
	PROCEDURE ^ Visible(ch: CHAR): BOOLEAN; 
	PROCEDURE ^ WCopy(VAR w, x: Texts.Writer); 
	PROCEDURE ^ WCopySeparator(VAR wdata: WrapData); 
	PROCEDURE ^ WCopySepWord(VAR wdata: WrapData); 
	PROCEDURE ^ Wrap*; 
	PROCEDURE ^ SplitMailTo*(VAR url, mailadr: ARRAY OF CHAR): SIGNED32; 
	PROCEDURE ^ MailToSchemeHandler(L: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewMailToLinkScheme*; 
	PROCEDURE ^ SplitMailServer*(VAR url, mailadr, subject, body: ARRAY OF CHAR): SIGNED32; 
	PROCEDURE ^ MailServerSchemeHandler(L: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewMailServerLinkScheme*; 
	PROCEDURE ^ LoadDoc(D: Documents.Document); 
	PROCEDURE ^ NewDoc*; 
BEGIN
END Mail.
