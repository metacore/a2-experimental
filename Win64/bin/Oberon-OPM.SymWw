MODULE OPM IN Oberon;
	IMPORT SYSTEM, Fonts, Texts, Oberon, Files;
CONST 
	ByteSize* = 1; 
	CharSize* = 1; 
	BoolSize* = 1; 
	SetSize* = 4; 
	SIntSize* = 1; 
	IntSize* = 2; 
	LIntSize* = 4; 
	HIntSize* = 8; 
	RealSize* = 4; 
	LRealSize* = 8; 
	ProcSize* = 4; 
	PointerSize* = 4; 
	nilval* = 0; 
	MinSInt* =  -128; 
	MinInt* =  -32768; 
	MinLInt* = SIGNED32(2147483648); 
	MinRealPat = SIGNED32(4286578687); 
	MinLRealPatL = SIGNED32(4294967295); 
	MinLRealPatH = SIGNED32(4293918719); 
	MaxSInt* = 127; 
	MaxInt* = 32767; 
	MaxLInt* = 2147483647; 
	MaxSet* = 31; 
	MaxRealPat = 2139095039; 
	MaxLRealPatL = SIGNED32(4294967295); 
	MaxLRealPatH = 2146435071; 
	MaxIndex* = MaxLInt; 
	MaxHDig* = 8; 
	MaxRExp* = 38; 
	MaxLExp* = 308; 
	MinHaltNr* = 20; 
	MaxHaltNr* = MAX(SIGNED32); 
	MinRegNr* = 0; 
	MaxRegNr* = 31; 
	MaxSysFlag* = 0; 
	MaxCC* =  -1; 
	LANotAlloc* =  -1; 
	ConstNotAlloc* =  -1; 
	TDAdrUndef* =  -1; 
	MaxCases* = 128; 
	MaxCaseRange* = 512; 
	NEWusingAdr* = FALSE; 
	TDMask* = 0; 
	OptimizeSelf* = TRUE; 
	WarnUnsafe* = FALSE; 
	Eot* = 0X; 
	SetLen = (MAX(SET) + 1); 
	NumErrors = (((912 + SetLen) DIV SetLen) * SetLen); 
	PathChar = \"/"\; 
	inxchk* = 0; 
	ovflchk* = 1; 
	typchk* = 3; 
	ptrinit* = 5; 
	assert* = 6; 
	fullstackinit* = 20; 
	trace* = 22; 
	exportDefinitions* = 30; 
	useDefinitions* = 31; 
	findpc* = 7; 
	systemchk* = 8; 
	nofiles* = 9; 
	newsf* = 10; 
	extsf* = 11; 
	warning* = 12; 
	prefix* = 18; 
	oberon2* = 19; 
	oberon1* = 21; 
	traceprocs* = 24; 
	DefaultCodeOpt* = {inxchk, typchk, ptrinit, fullstackinit, assert}; 
	DefaultParserOpt* = {}; 
	NewFileFormat* = FALSE; 
	OFtag* = 0BBX; 
	OFNoZeroCompress* = 0ADX; 
	OFnative* = 0AFX; 
	OFnew* = 0B1X; 
	OFportable* = 88X; 
TYPE 
	; 
VAR 
	MinReal*, MaxReal*: FLOAT32; 
	MinLReal*, MaxLReal*: FLOAT64; 
	noerr*: BOOLEAN; 
	curpos*, errpos*: SIGNED32; 
	breakpos*: SIGNED32; 
	breakpc*: SIGNED32; 
	errors: ARRAY (NumErrors DIV SetLen) OF SET; 
	outputPath*: ARRAY 256 OF CHAR; 
	outputPrefix*: ARRAY 32 OF CHAR; 
	codeOptions*, parserOptions*: SET; 
	errName*: ARRAY 32 OF CHAR; 
	first: BOOLEAN; 
	extension*: ARRAY 8 OF CHAR; 
	LRealPat: RECORD 
		L, H: SIGNED32; 
	END; 
	lastpos, pat: SIGNED32; 
	refpatch: SIGNED32; 
	inR: Texts.Reader; 
	Log: Texts.Text; 
	W: Texts.Writer; 
	oldSymF, newSymF, ObjF, RefF, ModF: Files.Rider; 
	RefFile, ObjFile, ModFile, oldSymFile, newSymFile: Files.File; 

	PROCEDURE ^ Init*(codeOpt, parserOpt: SET; source: Texts.Reader; log: Texts.Text); 
	PROCEDURE ^ Close*; 
	PROCEDURE ^ Get*(VAR ch: CHAR); 
	PROCEDURE ^ MakeFileName(VAR path, prefix, modName, fileName: ARRAY OF CHAR; ext: ARRAY OF CHAR); 
	PROCEDURE ^ FPrint*(VAR fp: SIGNED32; val: SIGNED32); 
	PROCEDURE ^ FPrintSet*(VAR fp: SIGNED32; set: SET); 
	PROCEDURE ^ FPrintReal*(VAR fp: SIGNED32; real: FLOAT32); 
	PROCEDURE ^ FPrintLReal*(VAR fp: SIGNED32; lr: FLOAT64); 
	PROCEDURE ^ WString(VAR R: Files.Rider; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ LogW*(ch: CHAR); 
	PROCEDURE ^ LogWStr*(s: ARRAY OF CHAR); 
	PROCEDURE ^ LogWNum*(i, len: SIGNED32); 
	PROCEDURE ^ LogWHex*(i: SIGNED32); 
	PROCEDURE ^ LogWLn*; 
	PROCEDURE ^ ErrorMsg(n: SIGNED16); 
	PROCEDURE ^ Mark*(n: SIGNED16; pos: SIGNED32); 
	PROCEDURE ^ err*(n: SIGNED16); 
	PROCEDURE ^ SymW*(b: CHAR); 
	PROCEDURE ^ SymWCh*(ch: CHAR); 
	PROCEDURE ^ SymWTag*(k: SIGNED16); 
	PROCEDURE ^ SymWInt*(k: SIGNED32); 
	PROCEDURE ^ SymWLInt*(k: SIGNED32); 
	PROCEDURE ^ SymWNum*(i: SIGNED32); 
	PROCEDURE ^ SymWPos*(): SIGNED32; 
	PROCEDURE ^ SymWMod*(VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ SymWSet*(s: SET); 
	PROCEDURE ^ SymWReal*(r: FLOAT32); 
	PROCEDURE ^ SymWLReal*(lr: FLOAT64); 
	PROCEDURE ^ SymWString*(VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ RefW*(ch: CHAR); 
	PROCEDURE ^ RefWNum*(i: SIGNED32); 
	PROCEDURE ^ ObjW*(ch: CHAR); 
	PROCEDURE ^ ObjWInt*(i: SIGNED16); 
	PROCEDURE ^ ObjWLInt*(i: SIGNED32); 
	PROCEDURE ^ ObjWBytes*(VAR bytes: ARRAY OF SYSTEM.BYTE; n: SIGNED32); 
	PROCEDURE ^ ObjWNum*(i: SIGNED32); 
	PROCEDURE ^ ObjWString*(VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ ObjAllocInt*(): SIGNED32; 
	PROCEDURE ^ ObjFillInt*(pos: SIGNED32; int: SIGNED16); 
	PROCEDURE ^ OpenSym*(VAR R: Files.Rider; VAR name: ARRAY OF CHAR; self: BOOLEAN; VAR zeroCompress, done: BOOLEAN); 
	PROCEDURE ^ Begin*(VAR modName: ARRAY OF CHAR); 
	PROCEDURE ^ Commit(F: Files.File); 
	PROCEDURE ^ EndSym*; 
	PROCEDURE ^ EndObj*; 
	PROCEDURE ^ CloseObj*; 
BEGIN
END OPM.
