MODULE UDPChatClient;
	IMPORT Base := UDPChatBase, UDP, IP, DNS, Dates, Strings, WMStandardComponents, WMComponents, WM := WMWindowManager, WMDialogs, WMEditors, WMRectangles, Modules, Texts, UTF8Strings, Inputs, Kernel, Events;
CONST 
	serverStr = \"127.0.0.1"\; 
	branchInit = 0; 
	branchPacketReceive = 1; 
	branchVersionCheck = 2; 
	branchPacketHandle = 3; 
	branchEnd = 4; 
	branchTerminated = 5; 
	moduleName = \"UDPChatClient"\; 
	EventClass = 3; 
	EventSubclass = 3; 
	WindowWidth = (40 * 12); 
	WindowHeight = (30 * 12); 
TYPE 
	msg = ARRAY 1500 OF CHAR; 

	String = Strings.String; 

	Instance = OBJECT {EXCLUSIVE} 
	VAR 
		next: Instance; 
		chat: ChatWindow; 
		server: ARRAY 256 OF CHAR; 
		CRLF: ARRAY 3 OF CHAR; 
		login: ARRAY 9 OF CHAR; 
		password, passwordConfirm: ARRAY 33 OF CHAR; 
		shortName, fullName, eMail: ARRAY 65 OF CHAR; 
		uin: SIGNED32; 
		res: INTEGER; 
		dt: Dates.DateTime; 
		keepAliveTimer: Kernel.MilliTimer; 
		s: UDP.Socket; 
		serverIP, ip: IP.Adr; 
		running, terminated, onLine: BOOLEAN; 
		str1, str2: ARRAY 256 OF CHAR; 
		branch, command, seqNum, messageType, inSeqNum, outSeqNum: SIGNED16; 
		senderUin, receiverUin, port, receiveBufOffset: SIGNED32; 
		len: SIZE; 
		sendBuf-: Base.Buffer; 
		receiveBuf, message, string: String; 
		userInfos: Base.List; 
		userInfo: Base.UserInfo; 
		ACKReqList: Base.List; 
		ACKReq: Base.ACKRec; 
		csa: Texts.CharacterStyleArray; 
		psa: Texts.ParagraphStyleArray; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ Finalize; 
		PROCEDURE ^ Client_ACK(seqNum: SIGNED16; uin: SIGNED32; sendBuf: Base.Buffer; s: UDP.Socket; ip: IP.Adr); 
		PROCEDURE ^ Client_NewUserReg(password, shortName, fullName, eMail: ARRAY OF CHAR; VAR seqNum: SIGNED16; sendBuf: Base.Buffer; s: UDP.Socket; ip: IP.Adr); 
		PROCEDURE ^ Client_Login(password: ARRAY OF CHAR; VAR seqNum: SIGNED16; uin: SIGNED32; sendBuf: Base.Buffer; s: UDP.Socket; ip: IP.Adr); 
		PROCEDURE ^ Client_InfoReq(userUIN: SIGNED32; VAR seqNum: SIGNED16; uin: SIGNED32; sendBuf: Base.Buffer; s: UDP.Socket; ip: IP.Adr); 
		PROCEDURE ^ Client_SendMessage(userUIN: SIGNED32; messageType: SIGNED16; message: String; VAR seqNum: SIGNED16; uin: SIGNED32; sendBuf: Base.Buffer; s: UDP.Socket; ip: IP.Adr); 
		PROCEDURE ^ Client_SendTextCode(code: String; VAR seqNum: SIGNED16; uin: SIGNED32; sendBuf: Base.Buffer; s: UDP.Socket; ip: IP.Adr); 
		PROCEDURE ^ Client_KeepAlive(VAR seqNum: SIGNED16; uin: SIGNED32; sendBuf: Base.Buffer; s: UDP.Socket; ip: IP.Adr); 
		PROCEDURE ^ FindUserInfo(list: Base.List; uin: SIGNED32): Base.UserInfo; 
		PROCEDURE ^ Log(type, code: SIGNED8; msg: ARRAY OF CHAR; showOnKernelLog: BOOLEAN); 
	BEGIN{ACTIVE} 
	END Instance; 

	ChatWindow = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		instance: Instance; 
		editSend*, editChat*: WMEditors.Editor; 
		buttonSend: WMStandardComponents.Button; 

		PROCEDURE ^ Close*; 
		PROCEDURE ^ KeyEvent*(ucs: SIZE; flags: SET; keysym: SIZE); 
		PROCEDURE ^ Append(message: String; cs: Texts.CharacterStyle; ps: Texts.ParagraphStyle); 
		PROCEDURE ^ SendClick(sender, data: ANY ); 
		PROCEDURE ^ CreateForm(): WMComponents.VisualComponent; 
		PROCEDURE ^  & New*(inst: Instance); 
	END ChatWindow; 
VAR 
	instances: Instance; 

	PROCEDURE ^ FreeInstance(free: Instance); 
	PROCEDURE ^ Open*; 
	PROCEDURE ^ Cleanup; 
BEGIN
END UDPChatClient.
