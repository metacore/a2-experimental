MODULE WMMessages;
	IMPORT Strings, KernelLog, Objects, Kernel, Locks, Modules, Reflection, SYSTEM, D := Debugging;
CONST 
	InitialMsgQSize = 64; 
	MaxMsgQSize = (32 * 1024); 
	MsgPointer* = 0; 
	MsgKey* = 2; 
	MsgClose* = 3; 
	MsgStyleChanged* = 4; 
	MsgFocus* = 5; 
	MsgExt* = 6; 
	MsgDrag* = 7; 
	MsgInvokeEvent* = 8; 
	MsgResized* = 9; 
	MsgSetLanguage* = 10; 
	MsgInvalidate* = 11; 
	MsgSerialize* = 12; 
	MsgMerged* = 15; 
	MsgSubPointerMove* = 0; 
	MsgSubPointerDown* = 1; 
	MsgSubPointerUp* = 2; 
	MsgSubPointerLeave* = 3; 
	MsgSubFocusGot* = 0; 
	MsgSubFocusLost* = 1; 
	MsgSubMasterFocusGot* = 2; 
	MsgSubMasterFocusLost* = 3; 
	MsgSubAll* = 0; 
	MsgSubRectangle* = 1; 
	MsgSubNothing* = 2; 
	MsgDragOver* = 0; 
	MsgDragDropped* = 1; 
	MsgSubSerializeView* = 0; 
	MsgSubSerializeComponent* = 1; 
	MsgSubSerializeData* = 2; 
	Statistics* = FALSE; 
	TraceQueue = FALSE; 
	MsgTypeMax* = 13; 
TYPE 
	CompCommand* = PROCEDURE {DELEGATE}(sender, par: ANY); 

	String* = Strings.String; 

	Message* = RECORD 
		originator*, sender*: ANY; 
		token*: AsyncToken; 
		event*: CompCommand; 
		msgType*, msgSubType*: SIGNED32; 
		x*, y*, z*, dx*, dy*, dz*: SIZE; 
		flags*: SET; 
		ext*: ANY; 
	END; 

	MessageExtension* = POINTER TO RECORD 
	END; 

	AsyncToken* = OBJECT {EXCLUSIVE} 
	VAR 
		ready: BOOLEAN; 
		result*: ANY; 

		PROCEDURE ^ Reset*; 
		PROCEDURE ^ AwaitCompletion*; 
		PROCEDURE ^ IsCompleted*(): BOOLEAN; 
		PROCEDURE ^ Completed*; 
	END AsyncToken; 

	MessageHandler* = PROCEDURE {DELEGATE}(VAR msg: Message); 

	TrapHandler* = PROCEDURE {DELEGATE}():BOOLEAN; 

	MsgQ = OBJECT 
	VAR 
		head, num: SIZE; 
		msgQ: POINTER TO ARRAY OF Message; 
		owner: MsgSequencer; 

		PROCEDURE ^  & InitQ(o: MsgSequencer; size: SIZE); 
		PROCEDURE ^ Grow(trace: BOOLEAN); 
		PROCEDURE ^ Add*(VAR msg: Message; debug: BOOLEAN): BOOLEAN; 
		PROCEDURE ^ Get(VAR msg: Message; debug: BOOLEAN): BOOLEAN; 
	END MsgQ; 

	MsgSequencer* = OBJECT {EXCLUSIVE} 
	VAR 
		msgQ: MsgQ; 
		invalidateQ: MsgQ; 
		alive, continue, waiting, stopped: BOOLEAN; 
		msg: Message; 
		handler: MessageHandler; 
		originator: ANY; 
		me: ANY; 
		lock-: Locks.RWLock; 
		th, traphandler: TrapHandler; 
		name*: String; 

		PROCEDURE ^  & New*(handler: MessageHandler); 
		PROCEDURE ^ SetTrapHandler*(th: TrapHandler); 
		PROCEDURE ^ IsCallFromSequencer*(): BOOLEAN; 
		PROCEDURE ^ GetOriginator*(): ANY; 
		PROCEDURE ^ Add*(VAR msg: Message): BOOLEAN; 
		PROCEDURE ^ Handle(VAR msg: Message): BOOLEAN; 
		PROCEDURE ^ ScheduleEvent*(event: CompCommand; sender, par: ANY); 
		PROCEDURE ^ Stop*; 
		PROCEDURE ^ WaitFree*; 
		PROCEDURE ^ Get(VAR msg: Message): BOOLEAN; 
	BEGIN{ACTIVE, SAFE} 
	END MsgSequencer; 
VAR 
	tokenCache: Kernel.FinalizedCollection; 
	ttoken: AsyncToken; 
	messagesAddedByType-: ARRAY MsgTypeMax OF SIGNED32; 
	messagesAdded-: SIGNED32; 
	messagesDiscarded-: SIGNED32; 
	debug*: ANY; 
	MsgName: ARRAY 32 OF ARRAY 32 OF CHAR; 

	PROCEDURE ^ TokenEnumerator(obj: ANY; VAR cont: BOOLEAN); 
	PROCEDURE ^ GetAsyncToken*(): AsyncToken; 
	PROCEDURE ^ RecycleAsyncToken*(t: AsyncToken); 
	PROCEDURE ^ Contained(CONST this, container: Message): BOOLEAN; 
BEGIN
END WMMessages.
