MODULE Freecell IN Oberon;
	IMPORT Files, Input, Display, Display3, Effects, Objects, Gadgets, Oberon, Cards, Panels, Documents, Desktops, Out;
CONST 
	IconName = \"Icons2.Freecell"\; 
	MenuString = \"Cards.Undo[Undo] Freecell.New[New] Desktops.StoreDoc[Store]"\; 
	Version = \"V 1.0"\; 
	CardW = Cards.CardW; 
	CardH = Cards.CardH; 
	DeltaH = 12; 
	CARDS = 52; 
	COLUMN = 8; 
TYPE 
	DistributeMsg = RECORD (Display.FrameMsg)
		tail: Cards.Card; 
	END; 

	SetSelectMsg = RECORD (Display.FrameMsg)
		child: Display.Frame; 
		stack: Cards.Stack; 
	END; 

	FreeMsg = RECORD (Display.FrameMsg)
		tempCnt: SIGNED16; 
		columnCnt: SIGNED16; 
	END; 

	FitMsg = RECORD (Display.FrameMsg)
		card: Cards.Card; 
		stack: Cards.Stack; 
	END; 

	Temp = POINTER TO TempDesc; 

	TempDesc = RECORD (Cards.StackDesc)
		sel: BOOLEAN; 
	END; 

	Depot = POINTER TO DepotDesc; 

	DepotDesc = RECORD (Cards.StackDesc)
	END; 

	Column = POINTER TO ColumnDesc; 

	ColumnDesc = RECORD (Cards.StackDesc)
		topY: SIGNED16; 
		nrCards: SIGNED16; 
		sel: BOOLEAN; 
	END; 

	Panel = POINTER TO PanelDesc; 

	PanelDesc = RECORD (Panels.PanelDesc)
		stack: Cards.Stack; 
		count: SIGNED16; 
		card: Cards.CardDesc; 
	END; 
VAR 
	tempMethods: Cards.Methods; 
	depotMethods: Cards.Methods; 
	columnMethods: Cards.Methods; 
	rowSize: ARRAY 5 OF ARRAY 5 OF SIGNED16; 

	PROCEDURE ^ StartGame(F: Display.Frame); 
	PROCEDURE ^ WaitMouseRelease(VAR M: Oberon.InputMsg); 
	PROCEDURE ^ GetRowSize(col, temp: SIGNED16): SIGNED16; 
	PROCEDURE ^ TempAttr(T: Temp; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ CopyTemp(VAR M: Objects.CopyMsg; from, to: Temp); 
	PROCEDURE ^ TempMoveCard(self, to: Cards.Stack; card: Cards.Card; undo: BOOLEAN); 
	PROCEDURE ^ DrawTemp(T: Cards.Stack; M: Display3.Mask; x, y, w, h: SIGNED16); 
	PROCEDURE ^ TrackTemp(T: Cards.Stack; VAR M: Oberon.InputMsg); 
	PROCEDURE ^ TempHandler(T: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewTemp*; 
	PROCEDURE ^ DepotAttr(D: Depot; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ CopyDepot(VAR M: Objects.CopyMsg; from, to: Depot); 
	PROCEDURE ^ TrackDepot(D: Cards.Stack; VAR M: Oberon.InputMsg); 
	PROCEDURE ^ DepotHandler(D: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewDepot*; 
	PROCEDURE ^ ColumnAttr(C: Column; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ CopyColumn(VAR M: Objects.CopyMsg; from, to: Column); 
	PROCEDURE ^ ColumnMoveCard(self, to: Cards.Stack; card: Cards.Card; undo: BOOLEAN); 
	PROCEDURE ^ DrawColumn(C: Cards.Stack; M: Display3.Mask; x, y, w, h: SIGNED16); 
	PROCEDURE ^ TrackColumn(C: Cards.Stack; VAR M: Oberon.InputMsg); 
	PROCEDURE ^ ColumnHandler*(C: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewColumn*; 
	PROCEDURE ^ CopyPanel(VAR M: Objects.CopyMsg; from, to: Panel); 
	PROCEDURE ^ PanelHandler(P: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewPanel*; 
	PROCEDURE ^ LoadDocument(D: Documents.Document); 
	PROCEDURE ^ StoreDocument(D: Documents.Document); 
	PROCEDURE ^ DocHandler*(D: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewDoc*; 
	PROCEDURE ^ New*; 
BEGIN
END Freecell.
