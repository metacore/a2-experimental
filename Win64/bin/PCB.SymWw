MODULE PCB;
	IMPORT SYSTEM, StringPool, PCDebug, PCM, PCS, PCT, PCC, PCLIR, PCBT, PCArrays, Modules, KernelLog;
CONST 
	Trace = FALSE; 
	TraceEmit = FALSE; 
	trEA = FALSE; 
	debug = FALSE; 
	Workaround = TRUE; 
	times = PCS.times; 
	slash = PCS.slash; 
	div = PCS.div; 
	mod = PCS.mod; 
	and = PCS.and; 
	plus = PCS.plus; 
	minus = PCS.minus; 
	or = PCS.or; 
	eql = PCS.eql; 
	neq = PCS.neq; 
	lss = PCS.lss; 
	leq = PCS.leq; 
	gtr = PCS.gtr; 
	geq = PCS.geq; 
	in = PCS.in; 
	is = PCS.is; 
	not = PCS.not; 
	stifn* = 128; 
	clifn* = 129; 
	sizefn* = 130; 
	adrfn* = 131; 
	typecodefn* = 132; 
	get8fn* = 133; 
	get16fn* = 134; 
	get32fn* = 135; 
	ordfn* = 136; 
	ord8fn* = 137; 
	ord16fn* = 138; 
	ord32fn* = 139; 
	chrfn* = 140; 
	chr8fn* = 141; 
	chr16fn* = 142; 
	chr32fn* = 143; 
	entierfn* = 144; 
	entierhfn* = 145; 
	longfn* = 146; 
	shortfn* = 147; 
	maxfn* = 148; 
	minfn* = 149; 
	passivatefn* = 150; 
	shaltfn* = 151; 
	haltfn* = 152; 
	valfn* = 153; 
	lenfn* = 154; 
	decfn* = 155; 
	incfn* = 156; 
	assertfn* = 157; 
	copyfn* = 158; 
	exclfn* = 159; 
	inclfn* = 160; 
	portinfn* = 161; 
	portoutfn* = 162; 
	getregfn* = 163; 
	putregfn* = 164; 
	getfn* = 165; 
	putfn* = 166; 
	put8fn* = 167; 
	put16fn* = 168; 
	put32fn* = 169; 
	sysnewfn* = 170; 
	movefn* = 171; 
	newfn* = 172; 
	get64fn* = 173; 
	put64fn* = 174; 
	getprocedurefn* = 175; 
	incrfn* = 176; 
	convert* = 178; 
	applyaop* = 179; 
	sumfn* = 180; 
	dimfn* = 181; 
	reshapefn* = 182; 
	shallowcopyfn* = 185; 
	NoPosition =  -1; 
	regEAX* = 8; 
	regECX = 9; 
	regEDX = 10; 
	regEBX = 11; 
	regESP = 12; 
	regEBP = 13; 
	regESI = 14; 
	regEDI* = 15; 
	regAX* = 16; 
	regCX = 17; 
	regDX = 18; 
	regBX* = 19; 
	regAL* = 24; 
	regCL = 25; 
	regDL = 26; 
	regBL* = 27; 
	regAH* = 28; 
	regCH = 29; 
	regDH = 30; 
	regBH* = 31; 
	regRAX* = 32; 
	regRCX = 33; 
	regRDX = 34; 
	regRBX = 35; 
	regRSP = 36; 
	regRBP = 37; 
	regRSI = 38; 
	regRDI* = 39; 
	regR8* = 40; 
	regR9 = 41; 
	regR10 = 42; 
	regR11 = 43; 
	regR12 = 44; 
	regR13 = 45; 
	regR14 = 46; 
	regR15* = 47; 
	regR8D* = 48; 
	regR9D = 49; 
	regR10D = 50; 
	regR11D = 51; 
	regR12D = 52; 
	regR13D = 53; 
	regR14D = 54; 
	regR15D* = 55; 
	regR8W* = 56; 
	regR9W = 57; 
	regR10W = 58; 
	regR11W = 59; 
	regR12W = 60; 
	regR13W = 61; 
	regR14W = 62; 
	regR15W* = 63; 
	regR8B* = 64; 
	regR9B = 65; 
	regR10B = 66; 
	regR11B = 67; 
	regR12B = 68; 
	regR13B = 69; 
	regR14B = 70; 
	regR15B* = 71; 
	regLast = regR15B; 
TYPE 
	DynSizedArray = POINTER TO RECORD (PCT.Array)
		dlen: Expression; 
	END; 

	DynSizedEnhArray = POINTER TO RECORD (PCT.EnhArray)
		dlen: Expression; 
	END; 

	StringBuf = ARRAY 256 OF CHAR; 

	Operator = LONGINT; 

	SProcInfo = POINTER TO RECORD 
		nr: LONGINT; 
	END; 

	Expression* = OBJECT (PCT.Node)
	VAR 
		type-: PCT.Struct; 
		link-: Expression; 

		PROCEDURE ^ Written; 
		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & Init*(pos: LONGINT; type: PCT.Struct); 
	END Expression; 

	Const* = OBJECT (Expression)
	VAR 
		con-: PCT.Const; 
		cd: ConstDesignator; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitC*(pos: LONGINT; con: PCT.Const); 
	END Const; 

	ArrayQ* = POINTER TO RECORD 
		next*: ArrayQ; 
		e*: Expression; 
		pos*: LONGINT; 
	END; 

	ArrayExpression* = OBJECT (Expression)
	VAR 
		array-: ArrayQ; 
		d*: Designator; 
		length-: LONGINT; 
		dim-: LONGINT; 
		aindex: POINTER TO ARRAY OF LONGINT; 
		isConst*: BOOLEAN; 

		PROCEDURE ^ AssignIndices(code: PCC.Code; ae: ArrayExpression; dim: LONGINT); 
		PROCEDURE ^ Emit*(code: PCC.Code; VAR l: PCC.Item); 
		PROCEDURE ^  & InitArrayExpression*; 
		PROCEDURE ^ SetType*(t: PCT.Struct); 
		PROCEDURE ^ SetArray*(array: ArrayQ); 
	END ArrayExpression; 

	DOp* = OBJECT (Expression)
	VAR 
		op: Operator; 
		lopd, ropd: Expression; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR l: PCC.Item); 
		PROCEDURE ^  & InitD*(pos: LONGINT; op: Operator; restype: PCT.Struct; lopd, ropd: Expression); 
	END DOp; 

	MOp* = OBJECT (Expression)
	VAR 
		op: Operator; 
		opd: Expression; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitM*(pos: LONGINT; op: Operator; restype: PCT.Struct; opd: Expression); 
	END MOp; 

	Conversion* = OBJECT (Expression)
	VAR 
		exp: Expression; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitC*(pos: LONGINT; exp: Expression; type: PCT.Struct); 
		PROCEDURE ^ Written; 
	END Conversion; 

	Projection* = OBJECT (Expression)
	VAR 
		exp: Expression; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitP*(pos: LONGINT; exp: Expression; type: PCT.Struct); 
		PROCEDURE ^ Written; 
	END Projection; 

	ExprList* = OBJECT (PCT.Node)
	VAR 
		first*, last: Expression; 
		params*, hidden: PCT.Parameter; 
		suppress: BOOLEAN; 
		parCount, openAryReturns, retDescSize*: LONGINT; 
		rType: PCT.Struct; 

		PROCEDURE ^ ClearStack*(code: PCC.Code); 
		PROCEDURE ^ Convert(code: PCC.Code); 
		PROCEDURE ^ DoOpenAryParams*(code: PCC.Code); 
		PROCEDURE ^ Emit*(code: PCC.Code); 
		PROCEDURE ^ dbgReport; 
		PROCEDURE ^ Append*(stat: Expression); 
		PROCEDURE ^ GetParList(VAR count: LONGINT; VAR list: ARRAY OF PCT.Struct); 
		PROCEDURE ^  & InitEL*(pos: LONGINT; rType: PCT.Struct); 
	END ExprList; 

	BuiltInEl* = OBJECT (ExprList)
	VAR 
		fnr: LONGINT; 
		pnr: LONGINT; 
		array: PCT.Array; 
		usearray: BOOLEAN; 
		earray: PCT.EnhArray; 
		aarray: PCT.Tensor; 

		PROCEDURE ^ Append*(stat: Expression); 
		PROCEDURE ^ NothingLeft*(): BOOLEAN; 
		PROCEDURE ^  & Init*(pos: LONGINT; rType: PCT.Struct; fnr: LONGINT); 
	END BuiltInEl; 

	FunCall* = OBJECT (Expression)
	VAR 
		proc*: Designator; 
		params*: ExprList; 
		curLevel: SHORTINT; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitF*(pos: LONGINT; proc: Designator; params: ExprList; curLevel: SHORTINT); 
	END FunCall; 

	Designator* = OBJECT (Expression)
	VAR 
		readonly-: BOOLEAN; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^ IsCallable*(): BOOLEAN; 
	END Designator; 

	Temp = OBJECT (Designator)

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
	END Temp; 

	ReturnItem = OBJECT (Designator)
	VAR 
		proc: PCT.Proc; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitR*(pos: LONGINT; proc: PCT.Proc); 
	END ReturnItem; 

	StackItem = OBJECT (Designator)
	VAR 
		offset: LONGINT; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitS*(type: PCT.Struct; offset: LONGINT); 
	END StackItem; 

	Wrapper* = OBJECT (Designator)
	VAR 
		des: Designator; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitW*(d: Designator); 
		PROCEDURE ^ Written; 
	END Wrapper; 

	ConstDesignator* = OBJECT (Designator)
	VAR 
		const: PCT.Const; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitC*(pos: LONGINT; const: PCT.Const); 
	END ConstDesignator; 

	SProc* = OBJECT (Designator)
	VAR 
		nr-: LONGINT; 

		PROCEDURE ^ IsCallable*(): BOOLEAN; 
		PROCEDURE ^  & SInit*(pos, nr: LONGINT); 
	END SProc; 

	Var* = OBJECT (Designator)
	VAR 
		obj*: PCT.Variable; 
		deltaLevel: SHORTINT; 

		PROCEDURE ^ Written; 
		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitD*(pos: LONGINT; obj: PCT.Variable; curLevel: SHORTINT; readonly: BOOLEAN); 
	END Var; 

	AnyProc* = OBJECT (Designator)
	VAR 
		scope: PCT.Scope; 
		o: PCT.Symbol; 
		proc: PCT.Proc; 
		method: PCT.Method; 
		supercall: BOOLEAN; 
		self: Designator; 
		resolved: BOOLEAN; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^ IsCallable*(): BOOLEAN; 
		PROCEDURE ^ Resolve(el: ExprList; list: PCT.Parameter); 
		PROCEDURE ^  & InitP*(pos: LONGINT; scope: PCT.Scope; o: PCT.Symbol; self: Designator); 
	END AnyProc; 

	Type* = OBJECT (Designator)
	VAR 
		obj: PCT.Type; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitD*(pos: LONGINT; obj: PCT.Type); 
	END Type; 

	Deref* = OBJECT (Designator)
	VAR 
		ptr*: Designator; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitD*(pos: LONGINT; ptr: Designator; type: PCT.Struct); 
		PROCEDURE ^ Written; 
	END Deref; 

	Field* = OBJECT (Designator)
	VAR 
		rec*: Designator; 
		field*: PCT.Field; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitF*(pos: LONGINT; rec: Designator; field: PCT.Field; readonly: BOOLEAN); 
		PROCEDURE ^ Written; 
	END Field; 

	Index* = OBJECT (Designator)
	VAR 
		array*: Designator; 
		index*: Expression; 
		check*: BOOLEAN; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR a: PCC.Item); 
		PROCEDURE ^  & InitI*(pos: LONGINT; array: Designator; index: Expression; check: BOOLEAN); 
		PROCEDURE ^ Written; 
	END Index; 

	Guard* = OBJECT (Designator)
	VAR 
		des: Designator; 
		to: PCT.Struct; 
		equal: BOOLEAN; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitG*(pos: LONGINT; des: Designator; type: PCT.Struct; equal: BOOLEAN); 
		PROCEDURE ^ Written; 
	END Guard; 

	Entry = POINTER TO RECORD 
		prev, next: Entry; 
		over: PCT.EnhArray; 
	END; 

	IndexEntry = POINTER TO RECORD (Entry)
		index*: Expression; 
	END; 

	RangeEntry = POINTER TO RECORD (Entry)
		from*, to*, by*: Expression; 
	END; 

	FillerEntry = POINTER TO RECORD (Entry)
	END; 

	EnhIndex* = OBJECT (Designator)
	VAR 
		isRange*: BOOLEAN; 
		first, last*: Entry; 
		array: Designator; 
		dim: LONGINT; 

		PROCEDURE ^ EmitEntry(entry: Entry; dim: LONGINT; code: PCC.Code; VAR a, descr: PCC.Item); 
		PROCEDURE ^ Emit*(code: PCC.Code; VAR a: PCC.Item); 
		PROCEDURE ^ AppendEntry(e: Entry); 
		PROCEDURE ^ AppendIndex*(pos: LONGINT; index: Expression); 
		PROCEDURE ^ AppendRange*(pos: LONGINT; from, to, by: Expression); 
		PROCEDURE ^ Finish*; 
		PROCEDURE ^  & InitI*(pos: LONGINT; array: Designator); 
		PROCEDURE ^ Written; 
	END EnhIndex; 

	AnyIndex* = OBJECT (Designator)
	VAR 
		isRange*: BOOLEAN; 
		first, last*: Entry; 
		array: Designator; 
		dim, ndims: LONGINT; 
		nRange, nIndex: LONGINT; 
		one: PCC.Item; 

		PROCEDURE ^ EmitEntry(entry: Entry; code: PCC.Code; VAR descr, a: PCC.Item; VAR dim: LONGINT); 
		PROCEDURE ^ Emit*(code: PCC.Code; VAR a: PCC.Item); 
		PROCEDURE ^ AppendEntry(e: Entry); 
		PROCEDURE ^ AppendIndex*(pos: LONGINT; index: Expression); 
		PROCEDURE ^ AppendRange*(pos: LONGINT; from, to, by: Expression); 
		PROCEDURE ^ AppendFiller*(pos: LONGINT); 
		PROCEDURE ^ Finish*; 
		PROCEDURE ^  & InitA*(pos: LONGINT; array: Designator); 
		PROCEDURE ^ Written; 
	END AnyIndex; 

	ArrayOperator* = OBJECT (FunCall)
	VAR 
		proc: PCT.Proc; 
		op: LONGINT; 

		PROCEDURE ^ Emit*(code: PCC.Code; VAR i: PCC.Item); 
		PROCEDURE ^  & InitD*(pos: LONGINT; d, lopd, ropd: Expression; restype: PCT.Struct; proc: PCT.Proc; p: PCT.Parameter; op: LONGINT); 
		PROCEDURE ^ NewResult(d: Expression); 
	END ArrayOperator; 

	LoopInfo* = RECORD 
		in, out: PCC.Label; 
		true, false: BOOLEAN; 
	END; 

	FinallyInfo* = RECORD 
		pc*: PCC.Label; 
	END; 

	CaseRange = POINTER TO RECORD 
		min, max: LONGINT; 
		next: CaseRange; 
	END; 

	CaseInfo* = RECORD 
		range: CaseRange; 
		out: PCC.Label; 
		ref: PCC.Item; 
		type: PCT.Basic; 
		first: BOOLEAN; 
	END; 
VAR 
	Invalid-: PCT.Node; 
	InvalidExpr-: Expression; 
	InvalidDesig-: Designator; 
	InvalidEL-: ExprList; 
	Zero-, One-: Const; 
	unknownObj-: PCT.Symbol; 
	aConst, aDOp, aMOp, aConversion, aFunCall, aSFunCall, aExprList, aDesignator, aVar, aType, aDeref, aMethod, aField, aIndex, aGuard, aStatement: LONGINT; 

	PROCEDURE ^ DebugEnter(VAR x: LONGINT); 
	PROCEDURE ^ DebugLeave(VAR x: LONGINT); 
	PROCEDURE ^ IsInvalid(n: PCT.Node): BOOLEAN; 
	PROCEDURE ^ IsVariable(n: PCT.Node): BOOLEAN; 
	PROCEDURE ^ IsVariable2(n: PCT.Node): BOOLEAN; 
	PROCEDURE ^ IsCharArray(e: Expression): BOOLEAN; 
	PROCEDURE ^ IsInterface*(n: Designator): BOOLEAN; 
	PROCEDURE ^ GetProcedureInfo(e: Expression; VAR param: PCT.Parameter; VAR ret: PCT.Struct): BOOLEAN; 
	PROCEDURE ^ IsProcReturningPointer*(d: Designator; VAR rtype: PCT.Struct): BOOLEAN; 
	PROCEDURE ^ IsRealtimeProc*(d: Designator; pos: LONGINT): BOOLEAN; 
	PROCEDURE ^ ConstExpression*(pos: LONGINT; e: Expression): Const; 
	PROCEDURE ^ NewDynSizedArray*(len: Expression; base: PCT.Struct; VAR res: LONGINT): PCT.Array; 
	PROCEDURE ^ TypeExtension(base, ext: PCT.Struct): BOOLEAN; 
	PROCEDURE ^ ArrayCompatible(Ta, Tf: PCT.Struct): BOOLEAN; 
	PROCEDURE ^ TensorCompatible(pos: LONGINT; ref: BOOLEAN; Ta, Tf: PCT.Struct): BOOLEAN; 
	PROCEDURE ^ EnhArrayAssignmentC(pos: LONGINT; Ta, Tf: PCT.Struct; weak: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ TypeCompatible(e: Expression; Tv: PCT.Struct): BOOLEAN; 
	PROCEDURE ^ AssignmentCompatible(e: Expression; VAR v: Designator): BOOLEAN; 
	PROCEDURE ^ ParameterCompatible(e: Expression; par: PCT.Parameter): BOOLEAN; 
	PROCEDURE ^ SignatureCompatible(from, to: PCT.Parameter): BOOLEAN; 
	PROCEDURE ^ TypeCompatible0(from, to: PCT.Struct): BOOLEAN; 
	PROCEDURE ^ RealtimeCompatible(e: AnyProc; Tv: PCT.Delegate): BOOLEAN; 
	PROCEDURE ^ NewValue*(pos: LONGINT; obj: PCT.Symbol): Expression; 
	PROCEDURE ^ NewIntValue*(pos: LONGINT; i: LONGINT; type: PCT.Struct): Const; 
	PROCEDURE ^ NewLongIntValue*(pos: LONGINT; i: HUGEINT): Const; 
	PROCEDURE ^ NewFloatValue*(pos: LONGINT; r: LONGREAL; type: PCT.Struct): Const; 
	PROCEDURE ^ NewStrValue*(pos: LONGINT; str: PCS.String): Const; 
	PROCEDURE ^ NewArrayValue*(pos: LONGINT; VAR a: ARRAY OF SYSTEM.BYTE; VAR len: ARRAY OF LONGINT; dim: LONGINT; base: PCT.Struct): Const; 
	PROCEDURE ^ NewBoolValue*(pos: LONGINT; b: BOOLEAN): Const; 
	PROCEDURE ^ NewSetValue*(pos: LONGINT; s: SET): Const; 
	PROCEDURE ^ NewNILValue*(pos: LONGINT): Const; 
	PROCEDURE ^ NewConversion*(pos: LONGINT; exp: Expression; type: PCT.Struct): Expression; 
	PROCEDURE ^ Project(pos: LONGINT; exp: Expression; type: PCT.Struct): Expression; 
	PROCEDURE ^ RevertExprList(el: ExprList); 
	PROCEDURE ^ NewFuncCall*(pos: LONGINT; proc: Designator; params: ExprList; curlevel: SHORTINT): Expression; 
	PROCEDURE ^ NewExprList*(pos: LONGINT; d: Designator): ExprList; 
	PROCEDURE ^ NewMOp*(pos: LONGINT; scope: PCT.Scope; op: Operator; opd: Expression): Expression; 
	PROCEDURE ^ FoldConstASH(pos: LONGINT; l, r: PCT.Const): Expression; 
	PROCEDURE ^ FoldConstROT(pos: LONGINT; l, r: PCT.Const): Expression; 
	PROCEDURE ^ FoldConstLSH(pos: LONGINT; l, r: PCT.Const): Expression; 
	PROCEDURE ^ ConvertOperands(VAR lo, ro: Expression); 
	PROCEDURE ^ NewDOp*(pos: LONGINT; op: Operator; lopd, ropd: Expression): Expression; 
	PROCEDURE ^ MakeTemp(code: PCC.Code; suppress: BOOLEAN; VAR p: Expression); 
	PROCEDURE ^ Finally*(pos: LONGINT; code: PCC.Code; obj: PCT.Symbol); 
	PROCEDURE ^ MakeNode*(pos: LONGINT; scope: PCT.Scope; obj: PCT.Symbol): Designator; 
	PROCEDURE ^ NewDeref*(pos: LONGINT; ptr: Designator): Designator; 
	PROCEDURE ^ NewField0(scope: PCT.Scope; rec: Designator; fld: PCT.Symbol; pos: LONGINT): Designator; 
	PROCEDURE ^ NewField*(current: PCT.Scope; rec: Designator; name: PCS.Name; pos: LONGINT): Designator; 
	PROCEDURE ^ MakeSelf(self: Designator): Expression; 
	PROCEDURE ^ NewIndex*(pos: LONGINT; array: Designator; index: Expression): Designator; 
	PROCEDURE ^ NewEnhIndex*(pos: LONGINT; array: Designator): EnhIndex; 
	PROCEDURE ^ NewGuard*(pos: LONGINT; des: Designator; type: PCT.Symbol; equal: BOOLEAN): Designator; 
	PROCEDURE ^ Assign*(code: PCC.Code; suppress: BOOLEAN; lexpr: Designator; rexpr: Expression; arraycreation: BOOLEAN); 
	PROCEDURE ^ CallSProc(code: PCC.Code; suppress: BOOLEAN; pos, fnr: LONGINT; params: BuiltInEl); 
	PROCEDURE ^ CheckForCParams(e: Expression; VAR cparams: PCT.Parameter; VAR size: LONGINT); 
	PROCEDURE ^ MakeCall(code: PCC.Code; proc: Designator; p: PCT.Proc; pars: ExprList; curlevel: SHORTINT; extC: BOOLEAN); 
	PROCEDURE ^ CallProc*(code: PCC.Code; suppress: BOOLEAN; proc: Designator; params: ExprList; curlevel: SHORTINT); 
	PROCEDURE ^ dbgType(t: PCT.Struct); 
	PROCEDURE ^ NewArrayConversion(pos: LONGINT; x: Expression; base: PCT.Struct): Expression; 
	PROCEDURE ^ NewArrayOperator(pos: LONGINT; op: Operator; d, l, r: Expression; conversion: BOOLEAN): Expression; 
	PROCEDURE ^ Interface*(intf, obj: Designator): Designator; 
	PROCEDURE ^ Trap*(code: PCC.Code; suppress: BOOLEAN; nr: LONGINT); 
	PROCEDURE ^ If*(code: PCC.Code; suppress: BOOLEAN; VAR info: LoopInfo; cond: Expression; elsif: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ Else*(code: PCC.Code; suppress: BOOLEAN; VAR info: LoopInfo): BOOLEAN; 
	PROCEDURE ^ EndIf*(code: PCC.Code; suppress: BOOLEAN; VAR info: LoopInfo); 
	PROCEDURE ^ While*(code: PCC.Code; suppress: BOOLEAN; VAR info: LoopInfo; cond: Expression); 
	PROCEDURE ^ Repeat*(code: PCC.Code; suppress: BOOLEAN; VAR info: LoopInfo; cond: Expression); 
	PROCEDURE ^ BeginFor*(code: PCC.Code; suppress: BOOLEAN; pos: LONGINT; var: Designator; from, to, by: Expression; VAR info: LoopInfo); 
	PROCEDURE ^ EndFor*(code: PCC.Code; suppress: BOOLEAN; pos: LONGINT; var: Designator; step: Expression; VAR info: LoopInfo); 
	PROCEDURE ^ BeginLoop*(code: PCC.Code; suppress: BOOLEAN; VAR info: LoopInfo); 
	PROCEDURE ^ EndLoop*(code: PCC.Code; suppress: BOOLEAN; VAR info: LoopInfo); 
	PROCEDURE ^ Exit*(code: PCC.Code; suppress: BOOLEAN; VAR info: LoopInfo; forlevel: LONGINT); 
	PROCEDURE ^ Return*(code: PCC.Code; suppress: BOOLEAN; scope: PCT.Scope; pos: LONGINT; expr: Expression; unlock: BOOLEAN; forlevel: LONGINT); 
	PROCEDURE ^ Await*(code: PCC.Code; suppress: BOOLEAN; scope: PCT.Scope; pos: LONGINT; name: StringPool.Index); 
	PROCEDURE ^ Case*(code: PCC.Code; suppress: BOOLEAN; VAR info: CaseInfo; x: Expression); 
	PROCEDURE ^ CaseLine*(code: PCC.Code; suppress: BOOLEAN; VAR info: CaseInfo; mine, maxe: Expression; firstline: BOOLEAN); 
	PROCEDURE ^ CaseElse*(code: PCC.Code; suppress: BOOLEAN; VAR info: CaseInfo); 
	PROCEDURE ^ CaseEnd*(code: PCC.Code; suppress: BOOLEAN; VAR info: CaseInfo); 
	PROCEDURE ^ Lock*(code: PCC.Code; scope: PCT.Scope; pos: LONGINT; lock: BOOLEAN); 
	PROCEDURE ^ Inline*(code: PCC.Code; inline: PCM.Attribute); 
	PROCEDURE ^ AllocateArrays(code: PCC.Code; par: PCT.Parameter; var: PCT.Variable); 
	PROCEDURE ^ InitInterfaces(code: PCC.Code; r, int: PCT.Record); 
	PROCEDURE ^ InitRecords(code: PCC.Code; r: PCT.Record); 
	PROCEDURE ^ Enter*(scope: PCT.Scope): PCC.Code; 
	PROCEDURE ^ DumpCode(code: PCC.Code; name: ARRAY OF CHAR; phase: LONGINT); 
	PROCEDURE ^ Leave*(code: PCC.Code; scope: PCT.Scope; noTrap: BOOLEAN); 
	PROCEDURE ^ Init; 
BEGIN
END PCB.
