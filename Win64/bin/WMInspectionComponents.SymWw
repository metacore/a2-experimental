MODULE WMInspectionComponents;
	IMPORT SYSTEM, Modules, Kernel, KernelLog, Strings, Inputs, Files, XML, XMLObjects, Repositories, Types, Models, WMDialogs, WMUtilities, WMMessages, WMWindowManager, WMRectangles, WMGraphics, WMEvents, WMProperties, WMComponents, WMStandardComponents, WMEditors, WMColorComponents, WMDropDownLists, WMTabComponents, WMScrollableComponents, Raster, D := Debugging, Streams, WMDropTarget, Commands;
CONST 
	Ok = 0; 
	CannotHandle = 1; 
	LineHeight = 20; 
	LineBearing = 2; 
	NameWidth = 80; 
	MaxNofCacheEntries = 20; 
	ModelWindowWidth = 320; 
	ModelWindowHeight = 80; 
	State_Waiting = 0; 
	State_Synchronize = 1; 
	State_SynchronizeForce = 2; 
	State_Terminating = 99; 
	State_Terminated = 100; 
	NofTabs = 5; 
TYPE 
	SetStringProcedure = PROCEDURE {DELEGATE}(CONST string: ARRAY OF CHAR; position: SIGNED32; VAR res: INTEGER); 

	DropTarget = OBJECT (WMDropTarget.DropTarget)
	VAR 
		originator: ANY; 
		setString: SetStringProcedure; 
		position: SIGNED32; 

		PROCEDURE ^  & Init(originator: ANY; setString: SetStringProcedure; position: SIGNED32); 
		PROCEDURE ^ GetInterface*(type: SIGNED32): WMDropTarget.DropInterface; 
	END DropTarget; 

	DropString = OBJECT (WMDropTarget.DropString)
	VAR 
		originator: ANY; 
		setString: SetStringProcedure; 
		position: SIGNED32; 

		PROCEDURE ^  & Init(originator: ANY; setString: SetStringProcedure; position: SIGNED32); 
		PROCEDURE ^ Set*(CONST string: ARRAY OF CHAR; VAR res: INTEGER); 
	END DropString; 

	PropertyView = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		property: WMProperties.Property; 
		name, info: Strings.String; 
		type: ARRAY 32 OF CHAR; 
		ofsName, ofsInfo: SIGNED32; 
		lastTimestamp: SIGNED32; 
		next: PropertyView; 
		nameLabel, infoLabel, adrLabel: WMStandardComponents.Label; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ UpdateAdrLabel(object: XML.Element); 
		PROCEDURE ^ AdrLabelMove(x, y: SIZE; keys: SET; VAR handled: BOOLEAN); 
		PROCEDURE ^ MyStartDrag(sender, data: ANY); 
		PROCEDURE ^ InfoLabelMove(x, y: SIZE; keys: SET; VAR handled: BOOLEAN); 
		PROCEDURE ^ InfoLabelStartDrag(sender, data: ANY); 
		PROCEDURE ^ MyDragDropped(x, y: SIZE; dragInfo: WMWindowManager.DragInfo; VAR handled: BOOLEAN); 
		PROCEDURE ^ SetDroppedString(CONST string: ARRAY OF CHAR; position: SIGNED32; VAR res: INTEGER); 
		PROCEDURE ^ Apply(force: BOOLEAN); 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ IsCompatible(property: WMProperties.Property): BOOLEAN; 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
		PROCEDURE ^ Draw*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ SetProperty(property: WMProperties.Property); 
	END PropertyView; 

	EnumeratorProc = PROCEDURE {DELEGATE}(p: PropertyView; force: BOOLEAN); 

	PropertyViewArray = POINTER TO ARRAY OF PropertyView; 

	PropertyViewList = OBJECT {EXCLUSIVE} 
	VAR 
		head, tail: PropertyView; 
		nofElements: SIGNED32; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Add(p: PropertyView); 
		PROCEDURE ^ RemoveAll; 
		PROCEDURE ^ Enumerate(enumeratorProc: EnumeratorProc; force: BOOLEAN); 
		PROCEDURE ^ GetAll(): PropertyViewArray; 
	END PropertyViewList; 

	BooleanPropertyView = OBJECT {EXCLUSIVE} (PropertyView)
	VAR 
		boolean: WMProperties.BooleanProperty; 
		checkbox: WMStandardComponents.Checkbox; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Apply(force: BOOLEAN); 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ IsCompatible(property: WMProperties.Property): BOOLEAN; 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
		PROCEDURE ^ SetProperty(property: WMProperties.Property); 
		PROCEDURE ^ CheckboxClicked(sender, data: ANY); 
	END BooleanPropertyView; 

	Int32PropertyView = OBJECT {EXCLUSIVE} (PropertyView)
	VAR 
		int32: WMProperties.Int32Property; 
		editor: WMEditors.TextField; 
		outOfDate: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Apply(force: BOOLEAN); 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ IsCompatible(property: WMProperties.Property): BOOLEAN; 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
		PROCEDURE ^ SetProperty(property: WMProperties.Property); 
		PROCEDURE ^ SetOutOfDate(value: BOOLEAN); 
		PROCEDURE ^ EditorContentChanged(sender, data: ANY); 
		PROCEDURE ^ EnterPressed(sender, data: ANY); 
	END Int32PropertyView; 

	SizePropertyView = OBJECT {EXCLUSIVE} (PropertyView)
	VAR 
		size: WMProperties.SizeProperty; 
		editor: WMEditors.TextField; 
		outOfDate: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Apply(force: BOOLEAN); 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ IsCompatible(property: WMProperties.Property): BOOLEAN; 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
		PROCEDURE ^ SetProperty(property: WMProperties.Property); 
		PROCEDURE ^ SetOutOfDate(value: BOOLEAN); 
		PROCEDURE ^ EditorContentChanged(sender, data: ANY); 
		PROCEDURE ^ EnterPressed(sender, data: ANY); 
	END SizePropertyView; 

	RealPropertyView = OBJECT {EXCLUSIVE} (PropertyView)
	VAR 
		real: WMProperties.RealProperty; 
		editor: WMEditors.TextField; 
		outOfDate: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Apply(force: BOOLEAN); 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ IsCompatible(property: WMProperties.Property): BOOLEAN; 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
		PROCEDURE ^ SetProperty(property: WMProperties.Property); 
		PROCEDURE ^ SetOutOfDate(value: BOOLEAN); 
		PROCEDURE ^ EditorContentChanged(sender, data: ANY); 
		PROCEDURE ^ EnterPressed(sender, data: ANY); 
	END RealPropertyView; 

	RectanglePropertyView = OBJECT {EXCLUSIVE} (PropertyView)
	VAR 
		rectangle: WMProperties.RectangleProperty; 
		editLeft, editTop, editRight, editBottom, editWidth, editHeight: WMEditors.TextField; 
		enabled, outOfDate: SET; 

		PROCEDURE ^  & New(wh: BOOLEAN); 
		PROCEDURE ^ UpdateEditorStates; 
		PROCEDURE ^ Apply(force: BOOLEAN); 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ IsCompatible(property: WMProperties.Property): BOOLEAN; 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
		PROCEDURE ^ SetProperty(property: WMProperties.Property); 
		PROCEDURE ^ SetEnabled(value: SET); 
		PROCEDURE ^ SetOutOfDate(value: SET); 
		PROCEDURE ^ EditorContentChanged(sender, data: ANY); 
		PROCEDURE ^ EnterPressed(sender, data: ANY); 
		PROCEDURE ^ CreateEditor(CONST caption: ARRAY OF CHAR; VAR editor: WMEditors.TextField; leftBearing: SIGNED32); 
	END RectanglePropertyView; 

	PointPropertyView = OBJECT {EXCLUSIVE} (PropertyView)
	VAR 
		point: WMProperties.PointProperty; 
		editX, editY: WMEditors.TextField; 
		enabled, outOfDate: SET; 

		PROCEDURE ^  & New(wh: BOOLEAN); 
		PROCEDURE ^ UpdateEditorStates; 
		PROCEDURE ^ Apply(force: BOOLEAN); 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ IsCompatible(property: WMProperties.Property): BOOLEAN; 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
		PROCEDURE ^ SetProperty(property: WMProperties.Property); 
		PROCEDURE ^ SetEnabled(value: SET); 
		PROCEDURE ^ SetOutOfDate(value: SET); 
		PROCEDURE ^ EditorContentChanged(sender, data: ANY); 
		PROCEDURE ^ EnterPressed(sender, data: ANY); 
		PROCEDURE ^ CreateEditor(CONST caption: ARRAY OF CHAR; VAR editor: WMEditors.TextField; leftBearing: SIGNED32); 
	END PointPropertyView; 

	StringPropertyView = OBJECT {EXCLUSIVE} (PropertyView)
	VAR 
		string: WMProperties.StringProperty; 
		editor: WMEditors.TextField; 
		outOfDate: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Apply(force: BOOLEAN); 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ IsCompatible(property: WMProperties.Property): BOOLEAN; 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
		PROCEDURE ^ SetProperty(property: WMProperties.Property); 
		PROCEDURE ^ SetOutOfDate(value: BOOLEAN); 
		PROCEDURE ^ EditorContentChanged(sender, data: ANY); 
		PROCEDURE ^ EnterPressed(sender, data: ANY); 
	END StringPropertyView; 

	ColorPropertyView = OBJECT {EXCLUSIVE} (PropertyView)
	VAR 
		color: WMProperties.ColorProperty; 
		editor: WMEditors.TextField; 
		colorPot: WMColorComponents.ColorPot; 
		res: INTEGER; 
		outOfDate: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Apply(force: BOOLEAN); 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ IsCompatible(property: WMProperties.Property): BOOLEAN; 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
		PROCEDURE ^ SetProperty(property: WMProperties.Property); 
		PROCEDURE ^ SetOutOfDate(value: BOOLEAN); 
		PROCEDURE ^ EditorContentChanged(sender, data: ANY); 
		PROCEDURE ^ EnterPressed(sender, data: ANY); 
		PROCEDURE ^ ColorDropped(sender, data: ANY); 
	END ColorPropertyView; 

	FontPropertyView = OBJECT {EXCLUSIVE} (PropertyView)
	VAR 
		font: WMProperties.FontProperty; 
		editName, editSize, editStyle: WMEditors.TextField; 
		outOfDate: SET; 

		PROCEDURE ^  & New; 
		PROCEDURE ^ UpdateEditorStates; 
		PROCEDURE ^ Apply(force: BOOLEAN); 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ IsCompatible(property: WMProperties.Property): BOOLEAN; 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
		PROCEDURE ^ SetProperty(property: WMProperties.Property); 
		PROCEDURE ^ SetOutOfDate(value: SET); 
		PROCEDURE ^ EditorContentChanged(sender, data: ANY); 
		PROCEDURE ^ EnterPressed(sender, data: ANY); 
		PROCEDURE ^ CreateEditor(CONST caption: ARRAY OF CHAR; VAR editor: WMEditors.TextField; leftBearing: SIGNED32); 
	END FontPropertyView; 

	ReferencePropertyView = OBJECT {EXCLUSIVE} (PropertyView)
	VAR 
		reference: WMProperties.ReferenceProperty; 
		object: XML.Element; 
		editor: WMEditors.TextField; 
		button: WMStandardComponents.Button; 
		outOfDate: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ AdrLabelMove(x, y: SIZE; keys: SET; VAR handled: BOOLEAN); 
		PROCEDURE ^ MyStartDrag(sender, data: ANY); 
		PROCEDURE ^ HandleButton(sender, data: ANY); 
		PROCEDURE ^ Apply(force: BOOLEAN); 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ IsCompatible(property: WMProperties.Property): BOOLEAN; 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
		PROCEDURE ^ UpdateButton(object: XML.Element); 
		PROCEDURE ^ SetProperty(property: WMProperties.Property); 
		PROCEDURE ^ SetOutOfDate(value: BOOLEAN); 
		PROCEDURE ^ EditorContentChanged(sender, data: ANY); 
		PROCEDURE ^ EnterPressed(sender, data: ANY); 
	END ReferencePropertyView; 

	AlignmentPropertyView = OBJECT {EXCLUSIVE} (PropertyView)
	VAR 
		int32: WMProperties.Int32Property; 
		alignment_chooser: WMDropDownLists.DropDownList; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Apply(force: BOOLEAN); 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ SetProperty(property: WMProperties.Property); 
		PROCEDURE ^ AlignmentSelected(sender, data: ANY); 
		PROCEDURE ^ IsCompatible(property: WMProperties.Property): BOOLEAN; 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
	END AlignmentPropertyView; 

	UnknownPropertyView = OBJECT {EXCLUSIVE} (PropertyView)

		PROCEDURE ^ Apply(force: BOOLEAN); 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ IsCompatible(property: WMProperties.Property): BOOLEAN; 
		PROCEDURE ^  & Init*; 
	END UnknownPropertyView; 

	EventSourceView = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		event: WMEvents.EventSource; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Apply; 
		PROCEDURE ^ Refresh; 
		PROCEDURE ^ SetEventSource(event: WMEvents.EventSource); 
	END EventSourceView; 

	EventListenerView = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		event: WMEvents.EventListenerInfo; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Apply; 
		PROCEDURE ^ Refresh; 
		PROCEDURE ^ SetEventListener(event: WMEvents.EventListenerInfo); 
	END EventListenerView; 

	ComponentView = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		initializedView: BooleanPropertyView; 
		idView, uidView: StringPropertyView; 
		enabledView: BooleanPropertyView; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ ResetProperties; 
		PROCEDURE ^ SetProperty(property: WMProperties.Property; VAR res: INTEGER); 
		PROCEDURE ^ Apply; 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
	END ComponentView; 

	VisualComponentView = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		alignmentView: AlignmentPropertyView; 
		boundsView: RectanglePropertyView; 
		bearingView: RectanglePropertyView; 
		fillColorView: ColorPropertyView; 
		visibleView, takesFocusView, needsTabView, editModeView: BooleanPropertyView; 
		focusNextView, focusPrevView: StringPropertyView; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ ResetProperties; 
		PROCEDURE ^ SetAlignment(alignmentMode: SIGNED32); 
		PROCEDURE ^ SetProperty(property: WMProperties.Property; VAR res: INTEGER); 
		PROCEDURE ^ Apply; 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
	END VisualComponentView; 

	ComponentElement* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		component: WMComponents.Component; 
		nofElements: SIZE; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ CountNofElements(component: WMComponents.Component); 
		PROCEDURE ^ GetNofElements*(): SIZE; 
		PROCEDURE ^ SetComponent*(component: WMComponents.Component); 
		PROCEDURE ^ Apply*; 
		PROCEDURE ^ Synchronize*(force: BOOLEAN); 
	END ComponentElement; 

	StandardProperties* = OBJECT {EXCLUSIVE} (ComponentElement)
	VAR 
		componentView: ComponentView; 
		visualComponentView: VisualComponentView; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ CountNofElements(component: WMComponents.Component); 
		PROCEDURE ^ SetProperties(component: WMComponents.Component); 
		PROCEDURE ^ SetComponent*(component: WMComponents.Component); 
		PROCEDURE ^ Apply*; 
		PROCEDURE ^ Synchronize*(force: BOOLEAN); 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
	END StandardProperties; 

	CacheEntry = POINTER TO RECORD 
		ps: ExtendedProperties; 
		milliTimer: Kernel.MilliTimer; 
		next: CacheEntry; 
	END; 

	PropertySheetCache = OBJECT 
	VAR 
		entries: CacheEntry; 
		nofEntries: SIGNED32; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Find(component: WMComponents.Component): ExtendedProperties; 
		PROCEDURE ^ FindLRU(): CacheEntry; 
		PROCEDURE ^ Add(ps: ExtendedProperties); 
	END PropertySheetCache; 

	ExtendedPropertiesView = OBJECT {EXCLUSIVE} (ComponentElement)
	VAR 
		cache: PropertySheetCache; 
		current: ExtendedProperties; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ CountNofElements(component: WMComponents.Component); 
		PROCEDURE ^ SetComponent*(component: WMComponents.Component); 
		PROCEDURE ^ Apply*; 
		PROCEDURE ^ Synchronize*(force: BOOLEAN); 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
	END ExtendedPropertiesView; 

	ExtendedProperties* = OBJECT {EXCLUSIVE} (ComponentElement)
	VAR 
		list: PropertyViewList; 
		content: WMStandardComponents.Panel; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ CountNofElements(component: WMComponents.Component); 
		PROCEDURE ^ ClearProperty(pv: PropertyView; ignore: BOOLEAN); 
		PROCEDURE ^ ClearProperties; 
		PROCEDURE ^ IsCompatible(component: WMComponents.Component): BOOLEAN; 
		PROCEDURE ^ UpdateProperties(component: WMComponents.Component): BOOLEAN; 
		PROCEDURE ^ SetProperties(component: WMComponents.Component); 
		PROCEDURE ^ SetComponent*(component: WMComponents.Component); 
		PROCEDURE ^ ApplyToView(p: PropertyView; force: BOOLEAN); 
		PROCEDURE ^ SynchronizeToModel(p: PropertyView; force: BOOLEAN); 
		PROCEDURE ^ Apply*; 
		PROCEDURE ^ Synchronize*(force: BOOLEAN); 
		PROCEDURE ^ SetEnabled(p: PropertyView; enabled: BOOLEAN); 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
	END ExtendedProperties; 

	EventSources* = OBJECT {EXCLUSIVE} (ComponentElement)
	VAR 
		content: WMStandardComponents.Panel; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ CountNofElements(component: WMComponents.Component); 
		PROCEDURE ^ SetComponent*(component: WMComponents.Component); 
		PROCEDURE ^ Apply*; 
		PROCEDURE ^ Synchronize*(force: BOOLEAN); 
	END EventSources; 

	EventListeners* = OBJECT {EXCLUSIVE} (ComponentElement)
	VAR 
		content: WMStandardComponents.Panel; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ CountNofElements(component: WMComponents.Component); 
		PROCEDURE ^ SetComponent*(component: WMComponents.Component); 
		PROCEDURE ^ Apply*; 
		PROCEDURE ^ Synchronize*(force: BOOLEAN); 
	END EventListeners; 

	AttributeView = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		attribute: XML.Attribute; 
		element: XML.Element; 
		outOfDate: BOOLEAN; 
		editor: WMEditors.TextField; 
		next: AttributeView; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ SetAttribute(attribute: XML.Attribute); 
		PROCEDURE ^ Apply; 
		PROCEDURE ^ Synchronize; 
		PROCEDURE ^ SetOutOfDate(value: BOOLEAN); 
		PROCEDURE ^ EnterPressed(sender, data: ANY); 
		PROCEDURE ^ EditorContentChanged(sender, data: ANY); 
		PROCEDURE ^ DrawForeground*(canvas: WMGraphics.Canvas); 
	END AttributeView; 

	Attributes* = OBJECT {EXCLUSIVE} (ComponentElement)
	VAR 
		controlPanel: WMStandardComponents.Panel; 
		nameEditor, valueEditor: WMEditors.TextField; 
		removeBtn, addBtn: WMStandardComponents.Button; 
		views: AttributeView; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ EnterPressed(sender, data: ANY); 
		PROCEDURE ^ RemoveAttributeHandler(sender, data: ANY); 
		PROCEDURE ^ AddAttributeHandler(sender, data: ANY); 
		PROCEDURE ^ NewAttributeView(): AttributeView; 
		PROCEDURE ^ CountNofElements(component: WMComponents.Component); 
		PROCEDURE ^ SetAttributes(element: XML.Element); 
		PROCEDURE ^ SetComponent*(component: WMComponents.Component); 
		PROCEDURE ^ Apply*; 
		PROCEDURE ^ Synchronize*(force: BOOLEAN); 
	END Attributes; 

	PropertyPanel* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		component: WMComponents.Component; 
		standardProperties: StandardProperties; 
		extendedProperties: ExtendedPropertiesView; 
		eventListeners: EventListeners; 
		eventSources: EventSources; 
		attributes: Attributes; 
		autoRefreshBtn, refreshBtn, applyBtn: WMStandardComponents.Button; 
		autoRefresh: BOOLEAN; 
		tabs: WMTabComponents.Tabs; 
		tabList: ARRAY NofTabs OF WMTabComponents.Tab; 
		tabPanels: ARRAY NofTabs OF ComponentElement; 
		tabNofElements: ARRAY NofTabs OF SIZE; 
		tabCaptions: ARRAY NofTabs OF ARRAY 128 OF CHAR; 
		tabPanel: WMScrollableComponents.ScrollableContainer; 
		curTabPanel: ComponentElement; 
		curTab: WMTabComponents.Tab; 
		state, internalState: SIGNED32; 
		timer: Kernel.Timer; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ UpdateTabCaptions; 
		PROCEDURE ^ SetState(state: SIGNED32); 
		PROCEDURE ^ PropertyListChanged(sender, data: ANY); 
		PROCEDURE ^ LinkChanged*(sender, data: ANY); 
		PROCEDURE ^ SetComponent*(sender, component: ANY); 
		PROCEDURE ^ Enable; 
		PROCEDURE ^ Disable; 
		PROCEDURE ^ SetComponentInternal*(component: WMComponents.Component); 
		PROCEDURE ^ TabSelected(sender, data: ANY); 
		PROCEDURE ^ ButtonHandler(sender, data: ANY); 
		PROCEDURE ^ Finalize*; 
		PROCEDURE ^ Synchronize(force: BOOLEAN); 
	BEGIN{ACTIVE} 
	END PropertyPanel; 

	RepositoryPanel* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		component: Repositories.Component; 
		lastTimestamp: SIGNED32; 
		repositoryName: WMStandardComponents.Label; 
		editor: WMEditors.TextField; 
		storeBtn, unbindBtn, removeBtn, updateBtn: WMStandardComponents.Button; 
		state: SIGNED32; 
		timer: Kernel.Timer; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ CreateContent; 
		PROCEDURE ^ HandleStoreButton(sender, data: ANY); 
		PROCEDURE ^ HandleRemoveButton(sender, data: ANY); 
		PROCEDURE ^ HandleUpdateButton(sender, data: ANY); 
		PROCEDURE ^ HandleUnbindButton(sender, data: ANY); 
		PROCEDURE ^ SetComponent*(component: WMComponents.Component); 
		PROCEDURE ^ Finalize*; 
		PROCEDURE ^ Update; 
	BEGIN{ACTIVE} 
	END RepositoryPanel; 

	XMLPanel* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		component: Repositories.Component; 
		showBtn: WMStandardComponents.Button; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ HandleShowBtn(sender, data: ANY); 
		PROCEDURE ^ SetComponent*(component: WMComponents.Component); 
	END XMLPanel; 

	ModelView* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		model: Models.Model; 
		typeLabel: WMStandardComponents.Label; 
		editor: WMEditors.Editor; 
		autoRefreshBtn: WMStandardComponents.Button; 
		autoRefresh: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ HandleAutoRefreshBtn(sender, data: ANY); 
		PROCEDURE ^ EditorKeyEvent(ucs: SIZE; flags: SET; VAR keySym: SIZE; VAR handled: BOOLEAN); 
		PROCEDURE ^ HandleShiftReturn; 
		PROCEDURE ^ SetModel*(model: Models.Model); 
		PROCEDURE ^ ModelChanged(sender, data: ANY); 
		PROCEDURE ^ Finalize*; 
	END ModelView; 

	KillerMsg = OBJECT 
	END KillerMsg; 

	Window* = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)

		PROCEDURE ^  & New*(vc: WMComponents.VisualComponent); 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ Handle*(VAR x: WMMessages.Message); 
	END Window; 
VAR 
	nofWindows: SIGNED32; 
	StrNotAvailable, StrNoCaption, StrType, StrComponentInfo, StrStandardProperties, StrExtendedProperties, StrExtendedPropertiesView, StrEventListeners, StrEventSources, StrBooleanPropertyView, StrInt32PropertyView, StrSizePropertyView, StrRealPropertyView, StrRectanglePropertyView, StrPointPropertyView, StrStringPropertyView, StrColorPropertyView, StrEventSourceView, StrEventListenerView, StrUnknownPropertyView, StrFontPropertyView, StrReferencePropertyView, StrAlignmentPropertyView, StrModelView: Strings.String; 
	StrBoolean, StrInteger, StrBoundedInteger, StrReal, StrLongreal, StrChar, StrString, StrSet, StrText, StrContainer, StrCustom, StrNil: Strings.String; 
	StrWindowTitle: Strings.String; 

	PROCEDURE ^ GetModelTypeString(model: Models.Model): Strings.String; 
	PROCEDURE ^ IsComponentProperty(property: WMProperties.Property): BOOLEAN; 
	PROCEDURE ^ IsVisualComponentProperty(property: WMProperties.Property): BOOLEAN; 
	PROCEDURE ^ CountExtendedProperties(component: WMComponents.Component): SIZE; 
	PROCEDURE ^ CreateLine*(): WMStandardComponents.Panel; 
	PROCEDURE ^ CreateLabel*(CONST caption: ARRAY OF CHAR; width, alignment: SIGNED32): WMStandardComponents.Label; 
	PROCEDURE ^ CreateEditor*(width: SIGNED32): WMEditors.TextField; 
	PROCEDURE ^ GetPropertyType(property: WMProperties.Property; VAR string: ARRAY OF CHAR); 
	PROCEDURE ^ IncCount; 
	PROCEDURE ^ DecCount; 
	PROCEDURE ^ Cleanup; 
	PROCEDURE ^ InitStrings; 
BEGIN
END WMInspectionComponents.
