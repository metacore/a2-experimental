MODULE ISO9660Files;
	IMPORT SYSTEM, Modules, Files, KernelLog, Strings;
CONST 
	debug = FALSE; 
	nameDebug = FALSE; 
	SS = 2048; 
	MaxBufs = 4; 
	Directory = 1; 
	eFileDoesNotExist = 8903; 
	eCannotOpenSubDir = 8916; 
	eInvalidFirstCluster = 8917; 
	eNameIsWild = 8927; 
	eInvalidFileName = 8941; 
	eInvalidVolume = 9000; 
TYPE 
	Filename = ARRAY 256 OF CHAR; 

	VolDesc = POINTER TO RECORD 
		root, rootDirSize: LONGINT; 
	END; 

	Buffer = POINTER TO RECORD (Files.Hint)
		pos, lim: LONGINT; 
		next: Buffer; 
		data: POINTER TO ARRAY OF CHAR; 
	END; 

	FileSystem = OBJECT {EXCLUSIVE} (Files.FileSystem)
	VAR 
		pri, sup, cur: VolDesc; 
		jolietLevel: LONGINT; 

		PROCEDURE ^ Old0*(CONST name: ARRAY OF CHAR): Files.File; 
		PROCEDURE ^ Enumerate0*(CONST mask: ARRAY OF CHAR; flags: SET; enum: Files.Enumerator); 
		PROCEDURE ^ FileKey*(CONST name: ARRAY OF CHAR): LONGINT; 
		PROCEDURE ^ Finalize*; 
	END FileSystem; 

	File = OBJECT {EXCLUSIVE} (Files.File)
	VAR 
		len, time, date, filecl: LONGINT; 
		attr: SET; 
		name: Filename; 
		dircl, dirpos: LONGINT; 
		nofbufs: INTEGER; 
		firstbuf: Buffer; 

		PROCEDURE ^ Set*(VAR r: Files.Rider; pos: Files.Position); 
		PROCEDURE ^ Pos*(VAR r: Files.Rider): Files.Position; 
		PROCEDURE ^ FindBuf(pos: LONGINT; hint: Buffer): Buffer; 
		PROCEDURE ^ ReadBuf(buf: Buffer; pos: LONGINT); 
		PROCEDURE ^ GetBuf(pos: LONGINT; hint: Buffer): Buffer; 
		PROCEDURE ^ Read*(VAR r: Files.Rider; VAR x: CHAR); 
		PROCEDURE ^ ReadBytes*(VAR r: Files.Rider; VAR x: ARRAY OF CHAR; ofs, len: SIZE); 
		PROCEDURE ^ Length*(): Files.Size; 
		PROCEDURE ^ GetDate*(VAR t, d: LONGINT); 
		PROCEDURE ^ GetName*(VAR name: ARRAY OF CHAR); 
		PROCEDURE ^ Update*; 
	END File; 
VAR 
	ExtractNameProc: PROCEDURE (VAR dir, name: ARRAY OF CHAR); 

	PROCEDURE ^ LogString(s: ARRAY OF CHAR); 
	PROCEDURE ^ LogInt(i: LONGINT); 
	PROCEDURE ^ LogLn; 
	PROCEDURE ^ Get733(VAR s: ARRAY OF CHAR; first: LONGINT; VAR d: LONGINT); 
	PROCEDURE ^ Check(s: ARRAY OF CHAR; VAR name: Filename; VAR res: INTEGER); 
	PROCEDURE ^ GetVolumeDescriptors(fs: FileSystem; res: INTEGER); 
	PROCEDURE ^ GetDir(VAR dir, fname: ARRAY OF CHAR; VAR time, date, cl, len: LONGINT; VAR attr: SET); 
	PROCEDURE ^ SplitName(str: ARRAY OF CHAR; VAR prefix, name: ARRAY OF CHAR); 
	PROCEDURE ^ SeparateName(str: ARRAY OF CHAR; VAR prefix: ARRAY OF CHAR; VAR name: Filename); 
	PROCEDURE ^ ExtractShortName(VAR dir, name: ARRAY OF CHAR); 
	PROCEDURE ^ ExtractLongName(VAR dir, name: ARRAY OF CHAR); 
	PROCEDURE ^ ExtractName(VAR dir, name: ARRAY OF CHAR); 
	PROCEDURE ^ MatchFile(VAR R: Files.Rider; name: ARRAY OF CHAR; VAR fname: ARRAY OF CHAR; VAR pos, cl, time, date, len: LONGINT; VAR attr: SET; VAR res: INTEGER); 
	PROCEDURE ^ FindFile(fs: FileSystem; name: ARRAY OF CHAR; dircl, dirlen: LONGINT; VAR dirpos, time, date, filecl, len: LONGINT; VAR attr: SET; VAR res: INTEGER); 
	PROCEDURE ^ LocateFile(name: ARRAY OF CHAR; fs: FileSystem; VAR dircl, dirpos, time, date, filecl, len: LONGINT; VAR attr: SET; VAR res: INTEGER); 
	PROCEDURE ^ OpenFile(name: ARRAY OF CHAR; fs: FileSystem; dircl, dirpos, time, date, filecl, len: LONGINT; attr: SET): File; 
	PROCEDURE ^ OldDir(fs: Files.FileSystem; name: ARRAY OF CHAR): Files.File; 
	PROCEDURE ^ NewFS*(context: Files.Parameters); 
	PROCEDURE ^ Cleanup; 
BEGIN
END ISO9660Files.
