MODULE WinDisks;
	IMPORT Kernel32, SYSTEM, Strings, KernelLog, Streams, Commands, Disks, Plugins, Modules, WinFS;
CONST 
	MaxExtents = 1; 
	BlockNumberInvalid* = 101; 
	Error* = 102; 
	Unknown = 0; 
	RemovableMedia = 11; 
	FixedMedia = 12; 
	IOCTL_DISK_GET_DRIVE_GEOMETRY = 458752; 
	VOLUME_GET_VOLUME_DISK_EXTENTS = 5636096; 
	FSCTL_LOCK_VOLUME = 589848; 
	FSCTL_UNLOCK_VOLUME = 589852; 
	FSCTL_DISMOUNT_VOLUME = 589856; 
TYPE 
	DISK_GEOMETRY = RECORD 
		Cylinders: SIGNED64; 
		MediaType: SIGNED32; 
		TracksPerCylinder: SIGNED32; 
		SectorsPerTrack: SIGNED32; 
		BytesPerSector: SIGNED32; 
	END; 

	DISK_EXTENT = RECORD 
		DiskNumber: SIGNED32; 
		padding: SIGNED32; 
		StartingOffset: SIGNED64; 
		ExtentLength: SIGNED64; 
	END; 

	VOLUME_DISK_EXTENTS = RECORD 
		NumberOfDiskExtents: SIGNED32; 
		padding: SIGNED32; 
		extents: ARRAY MaxExtents OF DISK_EXTENT; 
	END; 

	VirtualDisk = OBJECT {EXCLUSIVE} (Disks.Device)
	VAR 
		handle: Kernel32.HANDLE; 
		size: SIGNED32; 
		next: VirtualDisk; 
		drive: SIGNED32; 

		PROCEDURE ^ Finish(VAR res: INTEGER); 
		PROCEDURE ^ Transfer*(op, block, num: SIGNED32; VAR data: ARRAY OF CHAR; ofs: SIZE; VAR res: INTEGER); 
		PROCEDURE ^ GetSize*(VAR size: SIGNED32; VAR res: INTEGER); 
		PROCEDURE ^ Handle*(VAR msg: Disks.Message; VAR res: INTEGER); 
		PROCEDURE ^  & New*(handle: Kernel32.HANDLE; CONST diskname: ARRAY OF CHAR; drive: SIGNED32; flags: SET; blockSize, blocks: SIGNED32); 
	END VirtualDisk; 
VAR 
	DeviceIoControl: PROCEDURE {WINAPI}(hDevice: Kernel32.HANDLE; dwIoControlCode: SIGNED32; VAR lpInBuffer: ARRAY OF SYSTEM.BYTE; nInBufferSize: SIGNED32; VAR lpOutBuffer: ARRAY OF SYSTEM.BYTE; nOutBufferSize: SIGNED32; VAR lpBytesReturned: SIGNED32; lpOverlapped: ANY):Kernel32.BOOL; 
	SetFilePointer: PROCEDURE {WINAPI}(hFile: Kernel32.HANDLE; lDistanceToMove: SIGNED32; VAR lpDistanceToMoveHigh: SIGNED32; dwMoveMethod: SIGNED32):SIGNED32; 
	disks: VirtualDisk; 

	PROCEDURE ^ AddDisk(vd: VirtualDisk); 
	PROCEDURE ^ RemoveDisk(vd: VirtualDisk); 
	PROCEDURE ^ IsMounted(dev: Disks.Device): BOOLEAN; 
	PROCEDURE ^ Uninstall*(context: Commands.Context); 
	PROCEDURE ^ Cleanup; 
	PROCEDURE ^ ReportDiskGeometry(VAR pdg: DISK_GEOMETRY; out: Streams.Writer); 
	PROCEDURE ^ GetDiskGeometry(handle: Kernel32.HANDLE; VAR pdg: DISK_GEOMETRY): BOOLEAN; 
	PROCEDURE ^ LockVolume(handle: Kernel32.HANDLE): BOOLEAN; 
	PROCEDURE ^ UnlockVolume(handle: Kernel32.HANDLE): BOOLEAN; 
	PROCEDURE ^ DismountVolume(handle: Kernel32.HANDLE): BOOLEAN; 
	PROCEDURE ^ AppendInt(VAR name: ARRAY OF CHAR; i: SIGNED32); 
	PROCEDURE ^ OpenVolume(VAR handle: Kernel32.HANDLE; flags: SET; CONST name: ARRAY OF CHAR; context: Commands.Context): BOOLEAN; 
	PROCEDURE ^ OutSize(f: FLOAT64; out: Streams.Writer); 
	PROCEDURE ^ GetPhysicalDrive(VAR handle: Kernel32.HANDLE; flags: SET; VAR name: ARRAY OF CHAR; context: Commands.Context); 
	PROCEDURE ^ Install*(context: Commands.Context); 
	PROCEDURE ^ Notification(type: SIGNED32; drives: SET); 
	PROCEDURE ^ Init; 
BEGIN
END WinDisks.
