MODULE ARMDecoder;
	IMPORT SYSTEM, Decoder, Streams, KernelLog;
CONST 
	objFileSuffix = \"Oba"\; 
	none =  -1; 
	ArgNone =  -2; 
	ArgImm = 1; 
	ArgReg = 2; 
	ArgShift = 3; 
	ArgRegImm = 11; 
	ArgRegReg = 12; 
	ArgRegShift = 13; 
	ArgRegMem = 14; 
	ArgRegRList = 15; 
	ArgRegRegImm = 21; 
	ArgRegRegReg = 22; 
	ArgRegRegShift = 23; 
	ArgRegRegMem = 24; 
	ArgRegRegRegReg = 31; 
	ArgRegRegRegImm = 32; 
	ArgRegRegRegShift = 33; 
	ArgCProcRegMem = 41; 
	ArgCProcImmRegRegRegImm = 42; 
	FP = 12; 
	SP = 13; 
	LR = 14; 
	PC = 15; 
	CPSR = 16; 
	SPSR = 17; 
	SRegC = 0; 
	SRegX = 1; 
	SRegS = 2; 
	SRegF = 3; 
	opUNDEFINED =  -2; 
	opADC = 1; 
	opADD = 2; 
	opAND = 3; 
	opASR = 4; 
	opB = 5; 
	opBIC = 6; 
	opBKPT = 7; 
	opBL = 8; 
	opBLX = 9; 
	opBX = 10; 
	opCDP = 11; 
	opCDP2 = 12; 
	opCLZ = 13; 
	opCMN = 14; 
	opCMP = 15; 
	opEOR = 16; 
	opLDC = 17; 
	opLDC2 = 18; 
	opLDM = 19; 
	opLDR = 20; 
	opLDRB = 21; 
	opLDRBT = 22; 
	opLDRH = 23; 
	opLDRSB = 24; 
	opLDRSH = 25; 
	opLDRT = 26; 
	opLSL = 27; 
	opLSR = 28; 
	opMCR = 29; 
	opMCR2 = 30; 
	opMLA = 31; 
	opMOV = 32; 
	opMRC = 33; 
	opMRC2 = 34; 
	opMRS = 61; 
	opMSR = 35; 
	opMUL = 36; 
	opMVN = 37; 
	opORR = 38; 
	opROR = 39; 
	opRRX = 40; 
	opRSB = 41; 
	opRSC = 42; 
	opSBC = 43; 
	opSMLAL = 44; 
	opSMULL = 45; 
	opSTC = 46; 
	opSTC2 = 47; 
	opSTM = 48; 
	opSTR = 49; 
	opSTRB = 50; 
	opSTRBT = 51; 
	opSTRH = 52; 
	opSTRT = 53; 
	opSUB = 54; 
	opSWI = 55; 
	opSWP = 56; 
	opSWPB = 62; 
	opTEQ = 57; 
	opTST = 58; 
	opUMLAL = 59; 
	opUMULL = 60; 
	EQ = 0; 
	NE = 1; 
	CSHS = 2; 
	CCLO = 3; 
	MI = 4; 
	PL = 5; 
	VS = 6; 
	VC = 7; 
	HI = 8; 
	LS = 9; 
	GE = 10; 
	LT = 11; 
	GT = 12; 
	LE = 13; 
	AL = 14; 
	NV = 15; 
	RepInt = 1; 
	RepHex = 2; 
	RepRelJmp = 10; 
	Lsl = 0; 
	LSR = 1; 
	Asr = 2; 
	Ror = 3; 
	RRX = 4; 
	AddrModeReg = 1; 
	AddrModeRegImm = 2; 
	AddrModeRegReg = 3; 
	AddrModeRegRegScale = 4; 
	AddrModeDA = 5; 
	AddrModeIA = 6; 
	AddrModeDB = 7; 
	AddrModeIB = 8; 
	RegUpdateNone = 0; 
	RegUpdatePre = 1; 
	RegUpdatePost = 2; 
TYPE 
	ARMArg = OBJECT 
	END ARMArg; 

	ARMArgImm = OBJECT (ARMArg)
	VAR 
		imm, rep: LONGINT; 

		PROCEDURE ^  & New*(imm, rep: LONGINT); 
	END ARMArgImm; 

	ARMArgReg = OBJECT (ARMArg)
	VAR 
		reg: LONGINT; 
		isCReg: BOOLEAN; 
		sregMask: SET; 

		PROCEDURE ^  & New*(reg: LONGINT); 
	END ARMArgReg; 

	ARMArgRList = OBJECT (ARMArg)
	VAR 
		regs: SET; 
		addrMode: LONGINT; 

		PROCEDURE ^  & New*(regs: SET); 
	END ARMArgRList; 

	ARMArgMem = OBJECT (ARMArg)
	VAR 
		addrMode, reg, regOffs, regScale, shift, immOffs: LONGINT; 
		width: LONGINT; 
		signed, translation: BOOLEAN; 
		regUpdate: LONGINT; 

		PROCEDURE ^  & New*(adrMode, reg: LONGINT); 
	END ARMArgMem; 

	ARMArgShift = OBJECT (ARMArg)
	VAR 
		shiftImmOrReg, operation: LONGINT; 
		reg: BOOLEAN; 

		PROCEDURE ^  & New*(operation, shiftImmOrReg: LONGINT; reg: BOOLEAN); 
	END ARMArgShift; 

	ARMArgCProc = OBJECT (ARMArg)
	VAR 
		cproc: LONGINT; 

		PROCEDURE ^  & New*(cproc: LONGINT); 
	END ARMArgCProc; 

	ARMOpcode = OBJECT (Decoder.Opcode)
	VAR 
		argStructure: LONGINT; 
		op, cond: LONGINT; 
		ccUpdate: BOOLEAN; 
		arg1, arg2, arg3, arg4, arg5, arg6: ARMArg; 

		PROCEDURE ^  & New*(proc: Decoder.ProcedureInfo; stream: Streams.Writer); 
		PROCEDURE ^ PrintOpcodeBytes*(w: Streams.Writer); 
		PROCEDURE ^ PrintInstruction*(w: Streams.Writer); 
		PROCEDURE ^ PrintCondition(w: Streams.Writer); 
		PROCEDURE ^ PrintLSMAddrMode(w: Streams.Writer); 
		PROCEDURE ^ PrintArguments*(w: Streams.Writer); 
		PROCEDURE ^ WriteImm(immArg: ARMArgImm; w: Streams.Writer); 
		PROCEDURE ^ WriteReg(regArg: ARMArgReg; w: Streams.Writer); 
		PROCEDURE ^ WriteRegSymbol(reg: LONGINT; w: Streams.Writer); 
		PROCEDURE ^ WriteShiftSymbol(op: LONGINT; w: Streams.Writer); 
		PROCEDURE ^ WriteShift(shiftArg: ARMArgShift; w: Streams.Writer); 
		PROCEDURE ^ WriteMem(memArg: ARMArgMem; w: Streams.Writer); 
		PROCEDURE ^ WriteRegRList(regArg: ARMArgReg; rListArg: ARMArgRList; w: Streams.Writer); 
		PROCEDURE ^ WriteCProc(cProcArg: ARMArgCProc; w: Streams.Writer); 
	END ARMOpcode; 

	ARMDecoder = OBJECT {EXCLUSIVE} (Decoder.Decoder)
	VAR 
		bit24To27, bit20To23, bit16To19, bit12To15, bit8To11, bit4To7, bit0To3: LONGINT; 

		PROCEDURE ^ NewOpcode*(): Decoder.Opcode; 
		PROCEDURE ^ DecodeThis*(opcode: Decoder.Opcode); 
		PROCEDURE ^ DecodeShifterOperand(op: LONGINT; VAR argStructure: LONGINT; VAR arg1, arg2: ARMArg); 
		PROCEDURE ^ DataProcessing(opcode: ARMOpcode); 
		PROCEDURE ^ Miscellaneous(opcode: ARMOpcode); 
		PROCEDURE ^ MultipliesExtraLS(opcode: ARMOpcode); 
		PROCEDURE ^ SRegTransfer(opcode: ARMOpcode); 
		PROCEDURE ^ LoadStore(opcode: ARMOpcode); 
		PROCEDURE ^ LoadStoreMultiple(opcode: ARMOpcode); 
		PROCEDURE ^ Branch(opcode: ARMOpcode); 
		PROCEDURE ^ BranchToThumb(opcode: ARMOpcode; op: LONGINT); 
		PROCEDURE ^ CoprocLoadStoreDRegTransfer(opcode: ARMOpcode); 
		PROCEDURE ^ CoprocDataProcessing(opcode: ARMOpcode); 
		PROCEDURE ^ CoprocRegTransfer(opcode: ARMOpcode); 
		PROCEDURE ^ SoftwareInterrupt(opcode: ARMOpcode); 
		PROCEDURE ^ SignExtension(VAR x: LONGINT; length: LONGINT); 
	END ARMDecoder; 
VAR 
	bigEndian: BOOLEAN; 

	PROCEDURE ^ SetBigEndian*; 
	PROCEDURE ^ SetLittleEndian*; 
	PROCEDURE ^ Hex(n: LONGINT; w: Streams.Writer); 
	PROCEDURE ^ SwapBytes(VAR code: LONGINT); 
	PROCEDURE ^ ARMDecoderFactory(reader: Streams.Reader): Decoder.Decoder; 
	PROCEDURE ^ CodeScaleCallback(VAR codeSize: SIZE); 
	PROCEDURE ^ Init*; 
BEGIN
END ARMDecoder.
