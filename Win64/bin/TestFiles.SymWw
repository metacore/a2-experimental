MODULE TestFiles;
	IMPORT Commands, Options, Random, Strings, TestSuite, Streams, Files;
CONST 
	Integer = 0; 
	Boolean = 1; 
	Char = 2; 
	String = 3; 
TYPE 
	Tester = OBJECT (TestSuite.Tester)
	VAR 
		log: Streams.Writer; 
		file: Files.File; 
		rider: Files.Rider; 
		reader: Files.Reader; 
		path: ARRAY 512 OF CHAR; 
		lastCommandWasComment: BOOLEAN; 
		readerBytesLength: SIZE; 
		byte: CHAR; 
		buffer: Strings.String; 

		PROCEDURE ^  & InitTester*(log: Streams.Writer; CONST path: ARRAY OF CHAR); 
		PROCEDURE ^ Reset; 
		PROCEDURE ^ OpenFile(CONST filename: ARRAY OF CHAR; VAR error: BOOLEAN); 
		PROCEDURE ^ CreateFile(CONST filename: ARRAY OF CHAR; VAR error: BOOLEAN); 
		PROCEDURE ^ DeleteFile(CONST filename: ARRAY OF CHAR; VAR error: BOOLEAN); 
		PROCEDURE ^ RegisterFile(VAR error: BOOLEAN); 
		PROCEDURE ^ CheckOpen(VAR error: BOOLEAN): BOOLEAN; 
		PROCEDURE ^ FileSet(position: SIGNED32; VAR error: BOOLEAN); 
		PROCEDURE ^ GetInteger(r: Streams.Reader; VAR integer: SIGNED32): BOOLEAN; 
		PROCEDURE ^ GetString(r: Streams.Reader; VAR string: Strings.String): BOOLEAN; 
		PROCEDURE ^ GetBoolean(r: Streams.Reader; VAR boolean: BOOLEAN): BOOLEAN; 
		PROCEDURE ^ GetChar(r: Streams.Reader; VAR char: CHAR): BOOLEAN; 
		PROCEDURE ^ GetIndex(CONST string: ARRAY OF CHAR; VAR index: SIGNED32): BOOLEAN; 
		PROCEDURE ^ Assert(r: Streams.Reader; VAR error, parseError: BOOLEAN); 
		PROCEDURE ^ Set(r: Streams.Reader; VAR error, parseError: BOOLEAN); 
		PROCEDURE ^ FileReadByte(VAR error: BOOLEAN); 
		PROCEDURE ^ FileWriteByte(VAR error: BOOLEAN); 
		PROCEDURE ^ FileReadBytes(offset, length: SIGNED32; VAR error: BOOLEAN); 
		PROCEDURE ^ FileWriteBytes(offset, length: SIGNED32; VAR error: BOOLEAN); 
		PROCEDURE ^ ReaderGet(VAR error: BOOLEAN); 
		PROCEDURE ^ ReaderBytes(offset, length: SIGNED32; VAR error: BOOLEAN); 
		PROCEDURE ^ ReaderSetPos(position: SIGNED32; VAR error: BOOLEAN); 
		PROCEDURE ^ InitBuffer(length: SIGNED32); 
		PROCEDURE ^ CallCommand(r: Streams.Reader; VAR error, parseError: BOOLEAN); 
		PROCEDURE ^ ProcessCommand(r: Streams.Reader; VAR error, parseError, finished: BOOLEAN); 
		PROCEDURE ^ Handle*(r: Streams.Reader; pos: Streams.Position; CONST name: ARRAY OF CHAR; testType: TestSuite.TestType): INTEGER; 
	END Tester; 

	PROCEDURE ^ StringsAreEqual(string, buffer: Strings.String): BOOLEAN; 
	PROCEDURE ^ IsNumber(CONST string: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ Test*(context: Commands.Context); 
	PROCEDURE ^ RandomReadWrite*(context: Commands.Context); 
	PROCEDURE ^ CreateTestFiles*(context: Commands.Context); 
BEGIN
END TestFiles.
