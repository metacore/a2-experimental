MODULE WMBuilder;
	IMPORT Modules, Kernel, KernelLog, Streams, Commands, Inputs, Strings, Files, XML, XMLObjects, XMLScanner, XMLParser, Math, Repositories, WMRepositories, WMUtilities, WMRectangles, WMGraphics, WMMessages, WMWindowManager, WMRestorable, WMProperties, WMComponents, WMStandardComponents, WMEditors, WMTrees, WMInspectionComponents, WMDialogs, Models;
CONST 
	WindowWidth = 128; 
	WindowHeight = 320; 
	EditWindowWidth = 640; 
	EditWindowHeight = 480; 
	Invalid = MIN(LONGINT); 
	UseMode = 0; 
	EditMode = 1; 
	No =  -1; 
	Left = 0; 
	TopLeft = 1; 
	Top = 2; 
	TopRight = 3; 
	Right = 4; 
	BottomRight = 5; 
	Bottom = 6; 
	BottomLeft = 7; 
	Inside = 8; 
	Paint = 999; 
	None = 0; 
	SelectComponent = 1; 
	ResizeMove = 2; 
	Spawn = 3; 
	PaintComponent = 5; 
	State_Running = 0; 
	State_Terminating = 99; 
	State_Terminated = 100; 
	Frame_Selection = 0; 
	Frame_Selection_InsertAt = 1; 
	DistanceLimit = 4; 
	DarkYellow = 1347420415; 
	ColorLocked = DarkYellow; 
	ColorSelected = WMGraphics.Red; 
TYPE 
	KillerMsg = OBJECT 
	END KillerMsg; 

	HelperWindow = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)

		PROCEDURE ^  & New(CONST windowTitle: ARRAY OF CHAR; component: WMComponents.VisualComponent; x, y, width, height: LONGINT; alpha: BOOLEAN); 
	END HelperWindow; 

	ComponentWindow = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		repositories: WMRepositories.RepositoriesView; 
		repository: WMRepositories.RepositoryView; 
		loadBtn, storeBtn, unloadBtn: WMStandardComponents.Button; 
		filenameEditor: WMEditors.Editor; 
		statusLabel: WMStandardComponents.Label; 
		selection: WMRepositories.EntryWrapper; 
		opNum: LONGINT; 

		PROCEDURE ^  & Init*(width, height: LONGINT; alpha: BOOLEAN); 
		PROCEDURE ^ CreateForm(): WMComponents.VisualComponent; 
		PROCEDURE ^ SetStatusLabel(CONST m1, m2, m3: ARRAY OF CHAR); 
		PROCEDURE ^ LoadRepository(CONST filename: ARRAY OF CHAR); 
		PROCEDURE ^ HandleButtons(sender, data: ANY); 
		PROCEDURE ^ OnEnter(sender, data: ANY); 
		PROCEDURE ^ GetSelectedComponent(): Repositories.Component; 
		PROCEDURE ^ OnRepositoriesClicked(sender, data: ANY); 
		PROCEDURE ^ OnComponentClicked(sender, data: ANY); 
		PROCEDURE ^ OnClickedSelected(sender, data: ANY); 
	END ComponentWindow; 

	TreeNode = OBJECT (WMTrees.TreeNode)
	VAR 
		color, bgColor: LONGINT; 

		PROCEDURE ^  & Init*; 
	END TreeNode; 

	ComponentTree = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		refreshBtn: WMStandardComponents.Button; 
		treeView: WMTrees.TreeView; 
		tree: WMTrees.Tree; 
		rootComponent: Repositories.Component; 
		selection: Selection; 
		insertAtObj: ANY; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ AddComponents(component: Repositories.Component; parent: WMTrees.TreeNode); 
		PROCEDURE ^ Refresh(sender, data: ANY); 
		PROCEDURE ^ UpdateNodeColor(node: WMTrees.TreeNode); 
		PROCEDURE ^ TraverseNodes(parent: WMTrees.TreeNode); 
		PROCEDURE ^ UpdateColors; 
		PROCEDURE ^ DrawNode(canvas: WMGraphics.Canvas; w, h: LONGINT; node: WMTrees.TreeNode; state: SET); 
		PROCEDURE ^ SetComponent(rootComponent: Repositories.Component; selection: Selection); 
		PROCEDURE ^ SetInsertAtObj(insertAtObj: ANY); 
	END ComponentTree; 

	Indicator = OBJECT {EXCLUSIVE} (WMStandardComponents.Panel)
	VAR 
		value: ARRAY 128 OF CHAR; 
		textColor: LONGINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ SetCaption(CONST x: ARRAY OF CHAR); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
	END Indicator; 

	PropertyWindow = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		propertyPanel: WMInspectionComponents.PropertyPanel; 

		PROCEDURE ^  & Init*(width, height: LONGINT; alpha: BOOLEAN); 
		PROCEDURE ^ SetComponent(sender, component: ANY); 
	END PropertyWindow; 

	ComponentArray = POINTER TO ARRAY OF Repositories.Component; 

	BufferArray = POINTER TO ARRAY OF Strings.String; 

	Clipboard = OBJECT {EXCLUSIVE} 
	VAR 
		nofComponents: LONGINT; 
		buffers: BufferArray; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Put(components: ComponentArray); 
		PROCEDURE ^ Get(): ComponentArray; 
		PROCEDURE ^ LoadContent(buffer: Strings.String): XML.Content; 
		PROCEDURE ^ Clear; 
		PROCEDURE ^ Resize; 
	END Clipboard; 

	Parser = OBJECT 
	VAR 
		hasError: BOOLEAN; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ ReportError(pos, line, col: LONGINT; CONST msg: ARRAY OF CHAR); 
		PROCEDURE ^ Parse(reader: Streams.Reader; VAR document: XML.Document): BOOLEAN; 
	END Parser; 

	ComponentInfo = RECORD 
		originX, originY: LONGINT; 
	END; 

	SnapGrid = OBJECT 
	VAR 
		offsetX, offsetY: LONGINT; 
		deltaX, deltaY: LONGINT; 
		nX, nY: LONGINT; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Snap(x, y: LONGINT; VAR snapX, snapY: LONGINT); 
	END SnapGrid; 

	Frame = OBJECT 
	VAR 
		bounds: WMRectangles.Rectangle; 
		activeHandles: SET; 
		clLine0, clLine1, clActiveHandles, clInactiveHandles: LONGINT; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ GetWidth(): LONGINT; 
		PROCEDURE ^ GetHeight(): LONGINT; 
		PROCEDURE ^ IsValid(): BOOLEAN; 
		PROCEDURE ^ SetFrameType(type: LONGINT); 
		PROCEDURE ^ Clear; 
		PROCEDURE ^ SetActiveHandlesFor(alignment: LONGINT); 
		PROCEDURE ^ SetActiveHandles(activeHandles: SET); 
		PROCEDURE ^ FixBounds; 
		PROCEDURE ^ IsInActiveFrameHandle(x, y: LONGINT): LONGINT; 
		PROCEDURE ^ IsInFrameHandle(x, y: LONGINT): LONGINT; 
		PROCEDURE ^ DrawFrameHandles(canvas: WMGraphics.Canvas; xs, ys, xe, ye, activeColor, inactiveColor: LONGINT; active: SET); 
		PROCEDURE ^ Draw(canvas: WMGraphics.Canvas); 
	END Frame; 

	RectangleReal = RECORD 
		l, t, b, r: REAL; 
	END; 

	BoundsArray = POINTER TO ARRAY OF RectangleReal; 

	Selection = OBJECT 
	VAR 
		frame: WMRectangles.Rectangle; 
		activeFrameHandles: SET; 
		root: WMComponents.VisualComponent; 
		parent: XML.Element; 
		nofComponents: LONGINT; 
		components: ComponentArray; 
		bounds: BoundsArray; 

		PROCEDURE ^  & Init(root: WMComponents.VisualComponent); 
		PROCEDURE ^ NofComponents(): LONGINT; 
		PROCEDURE ^ NofVisualComponents(): LONGINT; 
		PROCEDURE ^ NofLockedComponents(): LONGINT; 
		PROCEDURE ^ GetParent(): XML.Element; 
		PROCEDURE ^ Contains(component: Repositories.Component): BOOLEAN; 
		PROCEDURE ^ GetFirst(): Repositories.Component; 
		PROCEDURE ^ ModificationsAllowed(): BOOLEAN; 
		PROCEDURE ^ Delete; 
		PROCEDURE ^ ToFront; 
		PROCEDURE ^ SetExtents(width, height: LONGINT); 
		PROCEDURE ^ SetLimit(rect: WMRectangles.Rectangle; mode: LONGINT); 
		PROCEDURE ^ MoveRelative(dx, dy: LONGINT); 
		PROCEDURE ^ InitResize(x0, y0, width0, height0: LONGINT); 
		PROCEDURE ^ ResizeProportional(x, y, width, height: LONGINT; snapX, snapY: LONGINT); 
		PROCEDURE ^ Resize(mode: LONGINT; dx, dy: LONGINT); 
		PROCEDURE ^ Get(): ComponentArray; 
		PROCEDURE ^ Set(component: Repositories.Component); 
		PROCEDURE ^ Determine(rect: WMRectangles.Rectangle); 
		PROCEDURE ^ FindVisualComponentInRectangle(parent: XML.Element; rect: WMRectangles.Rectangle): WMComponents.VisualComponent; 
		PROCEDURE ^ GetBoundingBox(VAR rect: WMRectangles.Rectangle; VAR active: SET); 
		PROCEDURE ^ ToEditorCoordinates(component: WMComponents.Component; VAR rect: WMRectangles.Rectangle); 
		PROCEDURE ^ ToComponentCoordinates(component: WMComponents.Component; VAR rect: WMRectangles.Rectangle); 
		PROCEDURE ^ CanAdd(component: Repositories.Component): BOOLEAN; 
		PROCEDURE ^ Add(component: Repositories.Component); 
		PROCEDURE ^ Remove(component: Repositories.Component); 
		PROCEDURE ^ Clear; 
		PROCEDURE ^ Reset; 
		PROCEDURE ^ ResizeComponentsArray; 
	END Selection; 

	ComponentEditor = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		panel: WMComponents.VisualComponent; 
		mode: LONGINT; 
		selection: Selection; 
		selectionFrame: Frame; 
		frame, dragFrame: Frame; 
		limitMode: LONGINT; 
		insertObjAt: WMComponents.VisualComponent; 
		downX, downY, lastX, lastY, dragX, dragY: LONGINT; 
		oldPointerInfo: LONGINT; 
		selectInsertObjAt: BOOLEAN; 
		showSnapGrid: WMProperties.BooleanProperty; 
		showSnapGridI: BOOLEAN; 
		enableSnap: WMProperties.BooleanProperty; 
		enableSnapI: BOOLEAN; 
		showHelperLines: WMProperties.BooleanProperty; 
		showHelperLinesI: BOOLEAN; 
		showFrames: WMProperties.BooleanProperty; 
		showFramesI: BOOLEAN; 
		snapgrid: SnapGrid; 
		owner: MainWindow; 
		manager: WMWindowManager.WindowManager; 
		pointerMode: LONGINT; 
		frameResizeOrigin: WMRectangles.Rectangle; 
		frameResizeMode: LONGINT; 
		modifierFlags, mouseKeys: SET; 
		clipboard: Clipboard; 
		paint: BOOLEAN; 
		state: LONGINT; 
		timer: Kernel.Timer; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ SetPanel(panel: WMComponents.VisualComponent); 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ SetPaint(paint: BOOLEAN); 
		PROCEDURE ^ SetMode(mode: LONGINT); 
		PROCEDURE ^ GetMode(): LONGINT; 
		PROCEDURE ^ ExtGetPositionOwnerHandler(x, y: LONGINT; VAR pointerOwner: WMComponents.VisualComponent; VAR handled: BOOLEAN); 
		PROCEDURE ^ Delete; 
		PROCEDURE ^ ToFront; 
		PROCEDURE ^ AddComponent(c: Repositories.Component; x, y: LONGINT); 
		PROCEDURE ^ Select(c: Repositories.Component); 
		PROCEDURE ^ SelectInsertAtObj(vc: WMComponents.VisualComponent); 
		PROCEDURE ^ InvalidateRegion(frame, oldFrame: WMRectangles.Rectangle); 
		PROCEDURE ^ InvalidateFrame(frame: Frame); 
		PROCEDURE ^ GetLimitMode(x, y: LONGINT; VAR bounds: WMRectangles.Rectangle): LONGINT; 
		PROCEDURE ^ MoveFrame(direction: LONGINT); 
		PROCEDURE ^ CheckSelectionFrame; 
		PROCEDURE ^ CheckCursor(x, y: LONGINT; keys, modifierFlags: SET); 
		PROCEDURE ^ CheckSelection; 
		PROCEDURE ^ PointerMove*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ PointerLeave*; 
		PROCEDURE ^ PointerDown*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ TakeOverSize(x, y: LONGINT); 
		PROCEDURE ^ PointerUp*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ KeyEvent*(ucs: LONGINT; flags: SET; VAR keySym: LONGINT); 
		PROCEDURE ^ FocusLost*; 
		PROCEDURE ^ DragOver*(x, y: LONGINT; dragInfo: WMWindowManager.DragInfo); 
		PROCEDURE ^ DragAddComponent(component: Repositories.Component; VAR res: LONGINT); 
		PROCEDURE ^ DragDropped*(x, y: LONGINT; dragInfo: WMWindowManager.DragInfo); 
		PROCEDURE ^ UpdateFramePosition; 
		PROCEDURE ^ FindPositionOwner(x, y: LONGINT): WMComponents.VisualComponent; 
		PROCEDURE ^ GetComponentInfo(component: WMComponents.VisualComponent): ComponentInfo; 
		PROCEDURE ^ ToMyCoordinates(component: WMComponents.VisualComponent; x, y: LONGINT; VAR myX, myY: LONGINT); 
		PROCEDURE ^ ToComponentCoordinates(component: WMComponents.VisualComponent; x, y: LONGINT; VAR cx, cy: LONGINT); 
		PROCEDURE ^ DrawHorizontalLine(canvas: WMGraphics.Canvas; y, color: LONGINT); 
		PROCEDURE ^ DrawVerticalLine(canvas: WMGraphics.Canvas; x, color: LONGINT); 
		PROCEDURE ^ DrawFrames(canvas: WMGraphics.Canvas; parent: WMComponents.VisualComponent; ofsX, ofsY: LONGINT); 
		PROCEDURE ^ DrawHelperLines(canvas: WMGraphics.Canvas; parent: WMComponents.VisualComponent; level: LONGINT; ofsX, ofsY: LONGINT); 
		PROCEDURE ^ DrawForeground*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ DrawSnapGrid(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ Finalize*; 
		PROCEDURE ^ UpdateState; 
	BEGIN{ACTIVE} 
	END ComponentEditor; 

	EditWindow = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		editor: ComponentEditor; 
		filename: Files.FileName; 
		owner: MainWindow; 
		modified: BOOLEAN; 
		id: LONGINT; 
		next: EditWindow; 

		PROCEDURE ^ FocusGot*; 
		PROCEDURE ^ Close*; 
		PROCEDURE ^  & New(owner: MainWindow; width, height: LONGINT; alpha: BOOLEAN); 
	END EditWindow; 

	WindowArray = POINTER TO ARRAY OF EditWindow; 

	WindowList = OBJECT {EXCLUSIVE} 
	VAR 
		windows: EditWindow; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ IsContained(window: EditWindow): BOOLEAN; 
		PROCEDURE ^ Add(window: EditWindow); 
		PROCEDURE ^ Remove(window: EditWindow); 
		PROCEDURE ^ Get(id: LONGINT): EditWindow; 
		PROCEDURE ^ GetAll(): WindowArray; 
		PROCEDURE ^ SetActive(window: EditWindow); 
		PROCEDURE ^ GetActive(): EditWindow; 
	END WindowList; 

	MainWindow = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		openBtn, saveBtn, addBtn, paintBtn, loadBtn, deleteBtn, toFrontBtn, getXmlBtn, storeBtn: WMStandardComponents.Button; 
		positionXLbl, positionYLbl: Indicator; 
		frameTopLeft, frameBottomRight, frameSize: Indicator; 
		lastFrame: WMRectangles.Rectangle; 
		lastValid: BOOLEAN; 
		toggleEditModeBtn: WMStandardComponents.Button; 
		toggleSnapGridBtn, toggleHelperLinesBtn, toggleFramesBtn: WMStandardComponents.Button; 
		toggleEditBtn, toggleComponentsBtn, toggleStructureBtn, togglePropertiesBtn: WMStandardComponents.Button; 
		componentTree: ComponentTree; 
		windowList: WindowList; 
		componentWindow: ComponentWindow; 
		componentTreeWindow: HelperWindow; 
		propertyWindow: PropertyWindow; 
		windowInfo: WMWindowManager.WindowInfo; 

		PROCEDURE ^  & New(c: WMRestorable.Context); 
		PROCEDURE ^ CreateForm(): WMComponents.VisualComponent; 
		PROCEDURE ^ UpdateInfo; 
		PROCEDURE ^ HandleDocumentInfo(CONST info: WMWindowManager.DocumentInfo; new: BOOLEAN; VAR res: LONGINT); 
		PROCEDURE ^ SetActiveEditor(window: EditWindow); 
		PROCEDURE ^ RemoveEditor(window: EditWindow); 
		PROCEDURE ^ ButtonHandler(sender, data: ANY); 
		PROCEDURE ^ HandleOpenBtn(sender, data: ANY); 
		PROCEDURE ^ HandleSaveBtn(sender, data: ANY); 
		PROCEDURE ^ HandleAddBtn(sender, data: ANY); 
		PROCEDURE ^ HandlePaintBtn(sender, data: ANY); 
		PROCEDURE ^ HandleLoadBtn(sender, data: ANY); 
		PROCEDURE ^ HandleDeleteBtn(sender, data: ANY); 
		PROCEDURE ^ HandleToFrontBtn(sender, data: ANY); 
		PROCEDURE ^ HandleGetXmlBtn(sender, data: ANY); 
		PROCEDURE ^ HandleStoreBtn(sender, data: ANY); 
		PROCEDURE ^ HandleToggleEditModeBtn(sender, data: ANY); 
		PROCEDURE ^ HandleNodeClicked(sender, data: ANY); 
		PROCEDURE ^ HandleNodeContextMenu(sender: ANY; x, y: LONGINT); 
		PROCEDURE ^ UpdateCursorPosition(x, y: LONGINT); 
		PROCEDURE ^ UpdateFramePosition(valid: BOOLEAN; frame: WMRectangles.Rectangle); 
		PROCEDURE ^ Load(CONST filename: ARRAY OF CHAR; VAR res: LONGINT); 
		PROCEDURE ^ Store(CONST filename: ARRAY OF CHAR; window: EditWindow; VAR res: LONGINT); 
		PROCEDURE ^ LoadWindows(data: XML.Element); 
		PROCEDURE ^ StoreWindows(): XML.Element; 
		PROCEDURE ^ Handle*(VAR x: WMMessages.Message); 
		PROCEDURE ^ Close*; 
	END MainWindow; 
VAR 
	nofWindows, nextId: LONGINT; 
	StrComponentEditor: Strings.String; 
	leftLimit, topLeftLimit, topLimit, topRightLimit, rightLimit, bottomRightLimit, bottomLimit, bottomLeftLimit, sizeLimit, crosshair: WMWindowManager.PointerInfo; 

	PROCEDURE ^ CreateIndicator(CONST content: ARRAY OF CHAR; width, alignment: LONGINT): Indicator; 
	PROCEDURE ^ Distance(x0, y0, x1, y1: LONGINT): REAL; 
	PROCEDURE ^ DrawDashedLine(canvas: WMGraphics.Canvas; xs, ys, xe, ye, color0, color1, width0, width1: LONGINT); 
	PROCEDURE ^ DrawRectangle(canvas: WMGraphics.Canvas; xs, ys, xe, ye, color: LONGINT); 
	PROCEDURE ^ DrawDashedRectangle(canvas: WMGraphics.Canvas; xs, ys, xe, ye, color0, color1, width0, width1: LONGINT); 
	PROCEDURE ^ DrawIndication(canvas: WMGraphics.Canvas; xs, ys, xe, ye, width, color: LONGINT); 
	PROCEDURE ^ FillWithRectangles(canvas: WMGraphics.Canvas; rectangle: WMRectangles.Rectangle; width: LONGINT; color1, color2: LONGINT); 
	PROCEDURE ^ ShowComponent*(component: WMComponents.Component); 
	PROCEDURE ^ ShowRect*(CONST name: ARRAY OF CHAR; rect: WMRectangles.Rectangle); 
	PROCEDURE ^ LabelComponent(vc: WMComponents.VisualComponent); 
	PROCEDURE ^ Open*(context: Commands.Context); 
	PROCEDURE ^ GenComponentEditor*(): XML.Element; 
	PROCEDURE ^ Restore*(context: WMRestorable.Context); 
	PROCEDURE ^ LoadCursors; 
	PROCEDURE ^ LoadRepositories; 
	PROCEDURE ^ GetId(): LONGINT; 
	PROCEDURE ^ IncCount; 
	PROCEDURE ^ DecCount; 
	PROCEDURE ^ Cleanup; 
BEGIN
END WMBuilder.
