MODULE JPEG2000DecoderCS;
	IMPORT SYSTEM, J2KU := JPEG2000DecoderUtil, KernelLog, Machine, Streams;
CONST 
	MAX_IMG_WIDTH = MAX(LONGINT); 
	MAX_IMG_HEIGHT = MAX(LONGINT); 
	MAX_TILES = 65535; 
	MAX_COMPONENTS = 16384; 
	MAX_LAYERS = 65535; 
	CODESTREAM_READER* = 0; 
	BUF_CODESTREAM_READER* = 1; 
	REBUILD_TILEPART* = MAX(LONGINT); 
	SOC = 65359; 
	SOT = 65424; 
	SOD = 65427; 
	EOC = 65497; 
	SIZ = 65361; 
	COD = 65362; 
	COC = 65363; 
	RGN = 65374; 
	QCD = 65372; 
	QCC = 65373; 
	POC = 65375; 
	TLM = 65365; 
	PLM = 65367; 
	PLT = 65368; 
	PPM = 65376; 
	PPT = 65377; 
	SOP = 65425; 
	EPH = 65426; 
	CRG = 65379; 
	COM = 65380; 
	ENTROPY_NUM_PASSES = 3; 
	ENTROPY_FIRST_BYPASS_IDX = ((3 * ENTROPY_NUM_PASSES) + 1); 
	NOQUANT* = 0; 
	QUANT_DER* = 1; 
	QUANT_EXP* = 2; 
	TRANS_9X7_IRREV* = 0; 
	TRANS_5X3_REV* = 1; 
	PROG_LRCP = 0; 
	PROG_RLCP = 1; 
	PROG_RPCL = 2; 
	PROG_PCRL = 3; 
	PROG_CPRL = 4; 
	MAX_PREC_SIZ = 15; 
TYPE 
	PrecinctExp = RECORD 
		ppx: LONGINT; 
		ppy: LONGINT; 
	END; 

	CodingStyle = OBJECT 
	VAR 
		maxps: BOOLEAN; 
		ndec: LONGINT; 
		cblw: LONGINT; 
		cblh: LONGINT; 
		selcb: BOOLEAN; 
		rescp: BOOLEAN; 
		term: BOOLEAN; 
		vert: BOOLEAN; 
		pred: BOOLEAN; 
		segs: BOOLEAN; 
		trans: LONGINT; 
		precs: POINTER TO ARRAY OF PrecinctExp; 
	END CodingStyle; 

	CICodingStyle = OBJECT 
	VAR 
		po: LONGINT; 
		nl: LONGINT; 
		mct: LONGINT; 
		sop: BOOLEAN; 
		eph: BOOLEAN; 
	END CICodingStyle; 

	Component = OBJECT 
	VAR 
		signed: BOOLEAN; 
		depth: LONGINT; 
		subsx: LONGINT; 
		subsy: LONGINT; 
	END Component; 

	Quantization = OBJECT 
	VAR 
		style: LONGINT; 
		nguardb: LONGINT; 
		nstepsiz: LONGINT; 
		stepsiz: POINTER TO ARRAY OF QuantStep; 
	END Quantization; 

	QuantStep = OBJECT 
	VAR 
		mant: LONGINT; 
		exp: LONGINT; 
	END QuantStep; 

	ImageInfo* = OBJECT 
	VAR 
		xsiz, ysiz: LONGINT; 
		xos, yos: LONGINT; 
		nt: LONGINT; 
		nxt, nyt: LONGINT; 
		xt, yt: LONGINT; 
		xtos, ytos: LONGINT; 
		ncomp: LONGINT; 
		comps: POINTER TO ARRAY OF Component; 

		PROCEDURE ^ GetImgWidth*(declevel: LONGINT): LONGINT; 
		PROCEDURE ^ GetImgHeight*(declevel: LONGINT): LONGINT; 
		PROCEDURE ^ GetImgULX*(declevel: LONGINT): LONGINT; 
		PROCEDURE ^ GetImgULY*(declevel: LONGINT): LONGINT; 
		PROCEDURE ^ GetCompImgWidth*(component, declevel: LONGINT): LONGINT; 
		PROCEDURE ^ GetCompImgHeight*(component, declevel: LONGINT): LONGINT; 
		PROCEDURE ^ GetNumTiles*(): LONGINT; 
		PROCEDURE ^ GetNumTilesX*(): LONGINT; 
		PROCEDURE ^ GetNumTilesY*(): LONGINT; 
		PROCEDURE ^ GetTileWidth*(tile, declevel: LONGINT): LONGINT; 
		PROCEDURE ^ GetTileHeight*(tile, declevel: LONGINT): LONGINT; 
		PROCEDURE ^ GetTileULX*(tile, declevel: LONGINT): LONGINT; 
		PROCEDURE ^ GetTileULY*(tile, declevel: LONGINT): LONGINT; 
		PROCEDURE ^ GetNumComponents*(): LONGINT; 
		PROCEDURE ^ GetSubsX*(component: LONGINT): LONGINT; 
		PROCEDURE ^ GetSubsY*(component: LONGINT): LONGINT; 
		PROCEDURE ^ GetBitDepth*(component: LONGINT): LONGINT; 
	END ImageInfo; 

	DecoderSpecs* = OBJECT 
	VAR 
		imgInfo: ImageInfo; 
		cstyle: POINTER TO ARRAY OF ARRAY OF CodingStyle; 
		cics: POINTER TO ARRAY OF CICodingStyle; 
		quant: POINTER TO ARRAY OF ARRAY OF Quantization; 
		roiShift: POINTER TO ARRAY OF ARRAY OF LONGINT; 

		PROCEDURE ^  & InitNew*; 
		PROCEDURE ^ GetImageInfo*(): ImageInfo; 
		PROCEDURE ^ BypassCoding*(tile, component: LONGINT): BOOLEAN; 
		PROCEDURE ^ RegularTermination*(tile, component: LONGINT): BOOLEAN; 
		PROCEDURE ^ VerticallyCausalContext*(tile, component: LONGINT): BOOLEAN; 
		PROCEDURE ^ PredictableTermination*(tile, component: LONGINT): BOOLEAN; 
		PROCEDURE ^ ResetContexts*(tile, component: LONGINT): BOOLEAN; 
		PROCEDURE ^ SegmentationSymbols*(tile, component: LONGINT): BOOLEAN; 
		PROCEDURE ^ GetWavTransType*(tile, component: LONGINT): LONGINT; 
		PROCEDURE ^ IsReversibleWavTrans*(tile, component: LONGINT): BOOLEAN; 
		PROCEDURE ^ CompTransUsed*(tile: LONGINT): BOOLEAN; 
		PROCEDURE ^ GetNumDecLevels*(tile, component: LONGINT): LONGINT; 
		PROCEDURE ^ GetImgMinDecLevels*(): LONGINT; 
		PROCEDURE ^ GetImgMaxDecLevels*(): LONGINT; 
		PROCEDURE ^ GetMinDecLevels*(tile: LONGINT): LONGINT; 
		PROCEDURE ^ GetMaxDecLevels*(tile: LONGINT): LONGINT; 
		PROCEDURE ^ GetNumLayers*(tile: LONGINT): LONGINT; 
		PROCEDURE ^ GetMinNumLayers*(): LONGINT; 
		PROCEDURE ^ GetPPX(tile, comp, reslevel: LONGINT): LONGINT; 
		PROCEDURE ^ GetPPY(tile, comp, reslevel: LONGINT): LONGINT; 
		PROCEDURE ^ GetMaxCblkWidthExp*(tile: LONGINT): LONGINT; 
		PROCEDURE ^ GetMaxCblkHeightExp*(tile: LONGINT): LONGINT; 
		PROCEDURE ^ GetQuantStyle*(tile, comp: LONGINT): LONGINT; 
		PROCEDURE ^ GetQuantExponent*(tile, comp, reslevel, subband: LONGINT): LONGINT; 
		PROCEDURE ^ GetQuantMantissa*(tile, comp, reslevel, subband: LONGINT): LONGINT; 
		PROCEDURE ^ ROIUsed*(tile, comp: LONGINT): BOOLEAN; 
		PROCEDURE ^ GetROIShift*(tile, comp: LONGINT): LONGINT; 
	END DecoderSpecs; 

	ProgState = RECORD 
		progNr: LONGINT; 
		progOrder: LONGINT; 
		curLay: LONGINT; 
		startLay: J2KU.LongInt2DArrayPtr; 
		endLay: LONGINT; 
		startRes: LONGINT; 
		curRes: LONGINT; 
		endRes: LONGINT; 
		startComp: LONGINT; 
		curComp: LONGINT; 
		endComp: LONGINT; 
		curPrec: J2KU.LongInt3DArrayPtr; 
		curX: LONGINT; 
		curY: LONGINT; 
	END; 

	ProgChange = RECORD 
		progOrder: LONGINT; 
		startRes: LONGINT; 
		startComp: LONGINT; 
		endLay: LONGINT; 
		endRes: LONGINT; 
		endComp: LONGINT; 
	END; 

	ProgChangeArrayPtr = POINTER TO ARRAY OF ProgChange; 

	DataListElement = OBJECT 
	VAR 
		data: J2KU.ByteArrayPtr; 
		next: DataListElement; 
	END DataListElement; 

	PrecinctInfo = RECORD 
		nblocks: POINTER TO ARRAY OF ARRAY OF ARRAY 2 OF LONGINT; 
		nprecx: LONGINT; 
		nprecy: LONGINT; 
	END; 

	PacketDecoder = OBJECT (J2KU.BitSource)
	VAR 
		cr: CodestreamReader; 
		curTile: LONGINT; 
		curByte: LONGINT; 
		curBytePos: LONGINT; 
		decSpec: DecoderSpecs; 
		pph: DataListElement; 
		pphPos: LONGINT; 
		pphTileFirstLast: POINTER TO ARRAY OF ARRAY OF DataListElement; 
		pphTilePos: J2KU.LongIntArrayPtr; 
		pphMainUsed: BOOLEAN; 
		pphTileUsed: POINTER TO ARRAY OF BOOLEAN; 
		sopUsed, ephUsed: BOOLEAN; 
		incStep: POINTER TO ARRAY OF ARRAY OF POINTER TO ARRAY OF ARRAY 2 OF LONGINT; 
		minIncStep: POINTER TO ARRAY OF ARRAY OF ARRAY 2 OF LONGINT; 
		sotEot: POINTER TO ARRAY OF ARRAY OF POINTER TO ARRAY OF ARRAY 2 OF ARRAY 2 OF LONGINT; 
		maxSotEot: POINTER TO ARRAY OF ARRAY OF ARRAY 2 OF ARRAY 2 OF LONGINT; 
		inclTrees: POINTER TO ARRAY OF ARRAY OF POINTER TO ARRAY OF POINTER TO ARRAY OF POINTER TO ARRAY OF J2KU.TagTree; 
		zeroTrees: POINTER TO ARRAY OF ARRAY OF POINTER TO ARRAY OF POINTER TO ARRAY OF POINTER TO ARRAY OF J2KU.TagTree; 
		lblock: POINTER TO ARRAY OF ARRAY OF J2KU.LongInt4DArrayPtr; 
		cblkInfo: POINTER TO ARRAY OF ARRAY OF POINTER TO ARRAY OF POINTER TO ARRAY OF POINTER TO ARRAY OF POINTER TO ARRAY OF J2KU.CblkInfo; 
		precInfo: POINTER TO ARRAY OF ARRAY OF POINTER TO ARRAY OF PrecinctInfo; 

		PROCEDURE ^  & InitNew*(cr: CodestreamReader; decSpec: DecoderSpecs; pphMain: DataListElement); 
		PROCEDURE ^ ReInit(cr: CodestreamReader; decSpec: DecoderSpecs; pphMain: DataListElement); 
		PROCEDURE ^ SetAndInitTile(t: LONGINT); 
		PROCEDURE ^ SetTile(t: LONGINT); 
		PROCEDURE ^ BuildIncSotEotArrays(tile: LONGINT); 
		PROCEDURE ^ CreatePrecinctInfo(tile, comp, reslevel: LONGINT; VAR precInfo: PrecinctInfo); 
		PROCEDURE ^ InitSubbands(tile, comp, reslevel: LONGINT; VAR precInfo: PrecinctInfo); 
		PROCEDURE ^ SetPPHeadersTile(pphNewFirst, pphNewLast: DataListElement; tile: LONGINT); 
		PROCEDURE ^ PPHTileUsed(): BOOLEAN; 
		PROCEDURE ^ PPHMainAvailable(): BOOLEAN; 
		PROCEDURE ^ PPHTileAvailable(): BOOLEAN; 
		PROCEDURE ^ DecodePacket(comp, reslevel, layer, precno: LONGINT; VAR cblk: ARRAY OF J2KU.CodedCblk; VAR cblkInfo: ARRAY OF J2KU.CblkInfo): LONGINT; 
		PROCEDURE ^ ReadCodingPasses(): LONGINT; 
		PROCEDURE ^ GetNumPrecincts(comp, reslevel: LONGINT): LONGINT; 
		PROCEDURE ^ GetMaxNumCodeblocksPkt(): LONGINT; 
		PROCEDURE ^ GetCblkInfo(comp, reslevel, subband, cblkSubbIdx: LONGINT): J2KU.CblkInfo; 
		PROCEDURE ^ GetIncStep(comp, reslevel: LONGINT; VAR xStep, yStep: LONGINT); 
		PROCEDURE ^ GetMinIncStep(comp: LONGINT; VAR xStep, yStep: LONGINT); 
		PROCEDURE ^ GetSotEot(comp, reslevel: LONGINT; VAR sotX, eotX, sotY, eotY: LONGINT); 
		PROCEDURE ^ GetMaxSotEot(comp: LONGINT; VAR sotX, eotX, sotY, eotY: LONGINT); 
		PROCEDURE ^ ReadSOP; 
		PROCEDURE ^ ReadEPH; 
		PROCEDURE ^ NextByte(): LONGINT; 
		PROCEDURE ^ NextBit*(): LONGINT; 
		PROCEDURE ^ NextBits(n: LONGINT): LONGINT; 
	END PacketDecoder; 

	CodestreamReader* = OBJECT 
	VAR 
		s: Streams.Reader; 
		ntp: LONGINT; 
		ntilePartsRead: J2KU.LongIntArrayPtr; 
		ntilePartsAvailable: J2KU.LongIntArrayPtr; 
		curTile: LONGINT; 
		curPart: LONGINT; 
		partRem: Streams.Position; 
		initError: BOOLEAN; 
		pktDec: PacketDecoder; 
		cblkBuf: POINTER TO ARRAY OF J2KU.CodedCblk; 
		cblkInfoBuf: POINTER TO ARRAY OF J2KU.CblkInfo; 
		cblkBufSize: LONGINT; 
		ncblkInBuf: LONGINT; 
		cblkBufPos: LONGINT; 
		endOfCS: BOOLEAN; 
		curMarker: LONGINT; 
		subbInfos: POINTER TO ARRAY OF ARRAY OF POINTER TO ARRAY OF J2KU.SubbandInfo; 
		decSpec: DecoderSpecs; 
		ppmUsed: BOOLEAN; 
		buf8: LONGINT; 
		buf8Valid: BOOLEAN; 
		progChanges: POINTER TO ARRAY OF ProgChangeArrayPtr; 
		progStates: POINTER TO ARRAY OF ProgState; 
		curLay, curComp, curRes: LONGINT; 
		curPrec: J2KU.LongInt3DArrayPtr; 
		lmin: J2KU.LongInt2DArrayPtr; 
		lmax, cmax, rmax, rmin, cmin: LONGINT; 
		curX, curY, incX, incY: LONGINT; 
		xmax, ymax, xmin, ymin: LONGINT; 
		progOrder: LONGINT; 
		maxStartLayer, maxEndLayer: LONGINT; 
		startLayer, endLayer: LONGINT; 
		maxStartDecLvl, maxEndDecLvl: LONGINT; 
		startDecLvl, endDecLvl: LONGINT; 
		printCSInfo: BOOLEAN; 
		printCOM: BOOLEAN; 

		PROCEDURE ^  & InitNew*(crOpt: J2KU.CodestreamReaderOptions; stream: Streams.Reader); 
		PROCEDURE ^ ReInit*(crOpt: J2KU.CodestreamReaderOptions; stream: Streams.Reader); 
		PROCEDURE ^ InitError*(): BOOLEAN; 
		PROCEDURE ^ NextTilePart*(): BOOLEAN; 
		PROCEDURE ^ InitTile(): BOOLEAN; 
		PROCEDURE ^ SetMaxLayerRange*(maxStartLayer, maxEndLayer: LONGINT); 
		PROCEDURE ^ SetLayerRange*(startLayer, endLayer: LONGINT); 
		PROCEDURE ^ GetLayerRange*(VAR startLayer, endLayer: LONGINT); 
		PROCEDURE ^ SetMaxDecLevelRange*(maxStartDecLvl, maxEndDecLvl: LONGINT); 
		PROCEDURE ^ SetDecLevelRange*(startDecLvl, endDecLvl: LONGINT); 
		PROCEDURE ^ GetDecLevelRange*(VAR startDecLvl, endDecLvl: LONGINT); 
		PROCEDURE ^ SetReBuildMode*; 
		PROCEDURE ^ GetCodeBlocks*(VAR cblocks: ARRAY OF J2KU.CodedCblk; VAR cblockInfos: ARRAY OF J2KU.CblkInfo; ncblocks: LONGINT): LONGINT; 
		PROCEDURE ^ AdvanceLayResComPos(): BOOLEAN; 
		PROCEDURE ^ AdvanceResLayComPos(): BOOLEAN; 
		PROCEDURE ^ AdvanceResPosComLay(): BOOLEAN; 
		PROCEDURE ^ AdvancePosComResLay(): BOOLEAN; 
		PROCEDURE ^ AdvanceComPosResLay(): BOOLEAN; 
		PROCEDURE ^ ProgressionChange; 
		PROCEDURE ^ EndOfCodestream*(): BOOLEAN; 
		PROCEDURE ^ JumpToTilePartEnd(): Streams.Position; 
		PROCEDURE ^ GetDecoderSpecs*(): DecoderSpecs; 
		PROCEDURE ^ CreateSubbandInfos; 
		PROCEDURE ^ GetNumMagBits(tile, comp, reslevel, subband: LONGINT): LONGINT; 
		PROCEDURE ^ CreatePrecCounter; 
		PROCEDURE ^ GetSubbandInfo*(tile, comp, reslevel, subband: LONGINT): J2KU.SubbandInfo; 
		PROCEDURE ^ Peek16(): LONGINT; 
		PROCEDURE ^ ReadByte(VAR byte: CHAR); 
		PROCEDURE ^ ReadBytes(VAR bytes: ARRAY OF CHAR; nbytes: LONGINT); 
		PROCEDURE ^ CurrentTile*(): LONGINT; 
		PROCEDURE ^ CurrentTilePart*(): LONGINT; 
		PROCEDURE ^ TilePartAvailable*(): BOOLEAN; 
		PROCEDURE ^ AllTilePartsRead*(): BOOLEAN; 
		PROCEDURE ^ FreeNonRebuildResources*; 
		PROCEDURE ^ FreeResources*; 
		PROCEDURE ^ ReadSOTSegment(): BOOLEAN; 
		PROCEDURE ^ ReadSIZSegment(VAR imgInfo: ImageInfo): BOOLEAN; 
		PROCEDURE ^ ReadCODSegment(VAR cod: CodingStyle; VAR cics: CICodingStyle): BOOLEAN; 
		PROCEDURE ^ ReadCOCSegment(VAR coc: CodingStyle; VAR comp: LONGINT): BOOLEAN; 
		PROCEDURE ^ ReadRGNSegment(VAR roiShift, comp: LONGINT): BOOLEAN; 
		PROCEDURE ^ ReadQCDSegment(VAR quant: Quantization): BOOLEAN; 
		PROCEDURE ^ ReadQCCSegment(VAR quant: Quantization; VAR comp: LONGINT): BOOLEAN; 
		PROCEDURE ^ ReadPOCSegment(VAR changes: ProgChangeArrayPtr): BOOLEAN; 
		PROCEDURE ^ ReadTLMSegment(): BOOLEAN; 
		PROCEDURE ^ ReadPLMSegment(): BOOLEAN; 
		PROCEDURE ^ ReadPLTSegment(): BOOLEAN; 
		PROCEDURE ^ ReadPPMSegment(VAR first, last: DataListElement; VAR nppmLeft, nppmRead: SIZE): BOOLEAN; 
		PROCEDURE ^ ReadPPTSegment(VAR first, last: DataListElement): BOOLEAN; 
		PROCEDURE ^ ReadCRGSegment(): BOOLEAN; 
		PROCEDURE ^ ReadCOMSegment(): BOOLEAN; 
	END CodestreamReader; 

	BufferedCodestreamReader* = OBJECT (CodestreamReader)
	VAR 
		bufferedBlocks: POINTER TO ARRAY OF ARRAY OF POINTER TO ARRAY OF POINTER TO ARRAY OF POINTER TO ARRAY OF J2KU.CodedCblk; 
		reBuildMode: BOOLEAN; 
		curSubbIdx, curSubbCblk: LONGINT; 
		maxSubbIdx, maxSubbCblk: LONGINT; 
		getAllLayers: BOOLEAN; 

		PROCEDURE ^  & InitNew*(crOpt: J2KU.CodestreamReaderOptions; stream: Streams.Reader); 
		PROCEDURE ^ ReInit*(crOpt: J2KU.CodestreamReaderOptions; stream: Streams.Reader); 
		PROCEDURE ^ InitTile(): BOOLEAN; 
		PROCEDURE ^ SetReBuildMode*; 
		PROCEDURE ^ AddBlock(VAR cblock: J2KU.CodedCblk; cblockInfo: J2KU.CblkInfo); 
		PROCEDURE ^ UpdateBufferedBlock(VAR cblk: J2KU.CodedCblk; cblkInfo: J2KU.CblkInfo); 
		PROCEDURE ^ GetCodeBlocks*(VAR cblocks: ARRAY OF J2KU.CodedCblk; VAR cblockInfos: ARRAY OF J2KU.CblkInfo; ncblocks: LONGINT): LONGINT; 
		PROCEDURE ^ GetBufferedBlocks(VAR cblocks: ARRAY OF J2KU.CodedCblk; VAR cblockInfos: ARRAY OF J2KU.CblkInfo; ncblocks: LONGINT): LONGINT; 
		PROCEDURE ^ TilePartAvailable*(): BOOLEAN; 
		PROCEDURE ^ JumpToTilePartEnd(): Streams.Position; 
		PROCEDURE ^ NextTilePart*(): BOOLEAN; 
		PROCEDURE ^ EndOfCodestream*(): BOOLEAN; 
		PROCEDURE ^ FreeNonRebuildResources*; 
		PROCEDURE ^ FreeResources*; 
	END BufferedCodestreamReader; 

	PROCEDURE ^ MarkerToString(marker: LONGINT; VAR str: ARRAY OF CHAR); 
BEGIN
END JPEG2000DecoderCS.
