MODULE V24;
	IMPORT Unix, Log := KernelLog, Serials, Objects, Commands, Strings;
CONST 
	TIOCM_LE = 0; 
	TIOCM_DTR = 1; 
	TIOCM_RTS = 2; 
	TIOCM_ST = 3; 
	TIOCM_SR = 4; 
	TIOCM_CTS = 5; 
	TIOCM_CAR = 6; 
	TIOCM_RNG = 7; 
	TIOCM_DSR = 8; 
	TIOCM_CD = TIOCM_CAR; 
	TIOCM_RI = TIOCM_RNG; 
	IGNBRK = {0}; 
	BRKINT = {1}; 
	IGNPAR = {2}; 
	TCSANOW = 0; 
	TCSADRAIN = 1; 
	TCSAFLUSH = 2; 
	NumberOfPorts = 4; 
TYPE 
	Port* = OBJECT {EXCLUSIVE} (Serials.Port)
	VAR 
		fd: SIGNED32; 
		portname: ARRAY 128 OF CHAR; 

		PROCEDURE ^  & Init*(port: SIGNED32; CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ Open*(bps, data, parity, stop: SIGNED32; VAR res: INTEGER); 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ Available*(): SIZE; 
		PROCEDURE ^ ReceiveChar*(VAR ch: CHAR; VAR res: INTEGER); 
		PROCEDURE ^ SendChar*(ch: CHAR; VAR res: INTEGER); 
		PROCEDURE ^ Send*(CONST buf: ARRAY OF CHAR; ofs, len: SIZE; propagate: BOOLEAN; VAR res: INTEGER); 
		PROCEDURE ^ Receive*(VAR buf: ARRAY OF CHAR; ofs, size, min: SIZE; VAR len: SIZE; VAR res: INTEGER); 
		PROCEDURE ^ GetPortState*(VAR openstat: BOOLEAN; VAR bps, data, parity, stop: SIGNED32); 
		PROCEDURE ^ ClearMC*(s: SET); 
		PROCEDURE ^ SetMC*(s: SET); 
		PROCEDURE ^ GetMC*(VAR s: SET); 
	END Port; 
VAR 
	tcgetattr: PROCEDURE {C}(fd: SIGNED32; VAR tio: Unix.Termios):SIGNED32; 
	tcsetattr: PROCEDURE {C}(fd: SIGNED32; action: SIGNED32; VAR tio: Unix.Termios):SIGNED32; 
	cfsetispeed: PROCEDURE {C}(VAR tio: Unix.Termios; speed: SIGNED32):SIGNED32; 
	cfsetospeed: PROCEDURE {C}(VAR tio: Unix.Termios; speed: SIGNED32):SIGNED32; 
	cfgetispeed: PROCEDURE {C}(VAR tio: Unix.Termios):SIGNED32; 
	cfgetospeed: PROCEDURE {C}(VAR tio: Unix.Termios):SIGNED32; 

	PROCEDURE ^ Install*; 
	PROCEDURE ^ Map*(context: Commands.Context); 
	PROCEDURE ^ Initialize; 
BEGIN
END V24.
