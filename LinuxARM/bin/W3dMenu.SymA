MODULE W3dMenu;
	IMPORT KernelLog, Kernel, MathL, Modules, Files, Commands, Inputs, Strings, WM := WMWindowManager, Messages := WMMessages, Rect := WMRectangles, Raster, WMGraphics, Classes := TFClasses, Vectors := W3dVectors, Matrix := W3dMatrix, AbstractWorld := W3dAbstractWorld, World := W3dWorld, ObjectGenerator := W3dObjectGenerator, XML, Scanner := XMLScanner, XMLParser, Objects := XMLObjects;
CONST 
	BoxDistance = 200; 
	SphereSel = 1; 
	BlurpSel = 2; 
TYPE 
	ReloadMsg = OBJECT 
	VAR 
		name: ARRAY 100 OF CHAR; 
	END ReloadMsg; 

	Symbol = OBJECT 
	VAR 
		pos: Vectors.TVector3d; 
		command: ARRAY 128 OF CHAR; 
		obj: AbstractWorld.Object; 
		world: AbstractWorld.World; 
		tex: AbstractWorld.Texture; 
		index: SIGNED32; 

		PROCEDURE ^  & Init*(world: AbstractWorld.World; pos: Vectors.TVector3d; command: ARRAY OF CHAR); 
	END Symbol; 

	UpdateProc = PROCEDURE {DELEGATE}; 

	Blurp = OBJECT {EXCLUSIVE} 
	VAR 
		timer: Kernel.Timer; 
		alive: BOOLEAN; 
		obj, o2: AbstractWorld.Object; 
		update: UpdateProc; 
		i, direct: SIGNED32; 
		dead, run, anirun: BOOLEAN; 
		pos: Vectors.TVector3d; 
		tex: AbstractWorld.Texture; 
		world: AbstractWorld.World; 

		PROCEDURE ^  & Init*(world: AbstractWorld.World; update: UpdateProc); 
		PROCEDURE ^ Update; 
		PROCEDURE ^ Set(pos: Vectors.TVector3d; tex: AbstractWorld.Texture); 
		PROCEDURE ^ Stop; 
		PROCEDURE ^ Kill; 
		PROCEDURE ^ AwaitDead; 
	BEGIN{ACTIVE} 
	END Blurp; 

	Window = OBJECT {EXCLUSIVE} (WM.BufferWindow)
	VAR 
		lookat: Vectors.TVector3d; 
		radius, angle, height: FLOAT64; 
		mouseKeys, keyflags: SET; 
		oldX, oldY: SIZE; 
		world: World.World; 
		mx, my, mz: FLOAT64; 
		infoList: Classes.List; 
		index: SIGNED32; 
		aniObj, aniObj2: AbstractWorld.Object; 
		selectionMethod: SET; 
		blurp: Blurp; 
		selectedSymbol: Symbol; 

		PROCEDURE ^ SetSelection(pos: Vectors.TVector3d; l: FLOAT64; visible: BOOLEAN); 
		PROCEDURE ^ AddSelectionObjects; 
		PROCEDURE ^ ParseLine(line: XML.Element; pos: Vectors.TVector3d); 
		PROCEDURE ^ ParseLayer(layer: XML.Element; pos: Vectors.TVector3d); 
		PROCEDURE ^ Load(filename: ARRAY OF CHAR); 
		PROCEDURE ^  & New*(fileName: ARRAY OF CHAR); 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ RenderAnimation; 
		PROCEDURE ^ Render; 
		PROCEDURE ^ PointerDown*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerMove*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerUp*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ Handle*(VAR m: Messages.Message); 
	END Window; 

	TextureInfo = OBJECT 
	VAR 
		img: Raster.Image; 
		name: ARRAY 128 OF CHAR; 
	END TextureInfo; 
VAR 
	winstance: Window; 
	textures: Classes.List; 

	PROCEDURE ^ GenTexture(icon, title: ARRAY OF CHAR; obj: AbstractWorld.Object): AbstractWorld.Texture; 
	PROCEDURE ^ TextureByName(name: ARRAY OF CHAR; obj: AbstractWorld.Object): AbstractWorld.Texture; 
	PROCEDURE ^ Open*(context: Commands.Context); 
	PROCEDURE ^ Cleanup; 
BEGIN
END W3dMenu.
