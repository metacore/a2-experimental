MODULE SSHTransport;
	IMPORT TCP, IP, DNS, Strings, Log := KernelLog, Ciphers := CryptoCiphers, B := CryptoBigNumbers, DH := CryptoDiffieHellman, CryptoHashes, CryptoHMAC, U := CryptoUtils, G := SSHGlobals, P := SSHPackets, SSHKeys;
CONST 
	ClientVersion = \"SSH-2.0-A2 SSH-1.8"\; 
	SSHport = 22; 
	SHKAlgorythms = \"ssh-rsa,ssh-dss"\; 
	ComprAlgorythms = \"none"\; 
	Languages = \""\; 
	CR = 0DX; 
	NL = 0AX; 
	Closed* = 0; 
	Connected* = 1; 
	Keyexchange* = 2; 
TYPE 
	Key = ARRAY 64 OF CHAR; 

	ModuleName = ARRAY 32 OF CHAR; 

	Packet* = P.Packet; 

	SSHMac = OBJECT 
	VAR 
		size, keySize: SIZE; 
		name: ARRAY 64 OF CHAR; 
		key: ARRAY 64 OF CHAR; 
		hmac: CryptoHMAC.HMac; 

		PROCEDURE ^  & NewMac(CONST modName: ARRAY OF CHAR; macLen: SIZE); 
		PROCEDURE ^ SetKey(CONST macKey: ARRAY OF CHAR); 
		PROCEDURE ^ Initialize(nr: SIZE); 
		PROCEDURE ^ Update(CONST buf: ARRAY OF CHAR; pos, len: SIZE); 
		PROCEDURE ^ GetMac(VAR buf: ARRAY OF CHAR; pos: SIZE); 
	END SSHMac; 

	SecurityState = RECORD 
		incipher, outcipher: Ciphers.Cipher; 
		inkeybits, outkeybits: SIGNED32; 
		inmode, outmode: SIGNED8; 
		inmac, outmac: SSHMac; 
	END; 

	Connection* = OBJECT {EXCLUSIVE} 
	VAR 
		state-: INTEGER; 
		tcp-: TCP.Connection; 
		servername: ARRAY 128 OF CHAR; 
		cvers, svers: ARRAY 260 OF CHAR; 
		session_id-: Key; 
		session_id_size-: SIZE; 
		session_key: Key; 
		session_key_size: SIZE; 
		secret: ARRAY 1024 OF CHAR; 
		incount, outcount: SIGNED32; 
		incipher, outcipher: Ciphers.Cipher; 
		inmac, outmac: SSHMac; 
		cipherList, hmacList, kexList: ARRAY 1024 OF CHAR; 
		clientChannelNo: SIGNED32; 

		PROCEDURE ^  & Open*(CONST hostname: ARRAY OF CHAR); 
		PROCEDURE ^ GetServerVersion(): BOOLEAN; 
		PROCEDURE ^ SendClientVersion; 
		PROCEDURE ^ SendPacket*(p: Packet); 
		PROCEDURE ^ GetPacket*(): Packet; 
		PROCEDURE ^ DebugMessage*(msg: ARRAY OF CHAR); 
		PROCEDURE ^ Disconnect*(reason: INTEGER; CONST msg: ARRAY OF CHAR); 
		PROCEDURE ^ GetChannelNo*(): SIGNED32; 
		PROCEDURE ^ PacketAvailable*(): BOOLEAN; 
		PROCEDURE ^ NegotiateAlgorythms; 
		PROCEDURE ^ ClientAlgorythms(): Packet; 
		PROCEDURE ^ Group1(hash: CryptoHashes.Hash): Packet; 
		PROCEDURE ^ Group14(hash: CryptoHashes.Hash): Packet; 
		PROCEDURE ^ GroupExchange(hash: CryptoHashes.Hash): Packet; 
		PROCEDURE ^ CheckSHK(p: Packet); 
		PROCEDURE ^ ActivateNewKeys(hash: CryptoHashes.Hash; new: SecurityState); 
		PROCEDURE ^ DeriveKey(keykind: CHAR; len: SIZE; hash: CryptoHashes.Hash; VAR key: ARRAY OF CHAR); 
	END Connection; 

	PROCEDURE ^ Int2Chars(v: SIZE; VAR buf: ARRAY OF CHAR); 
	PROCEDURE ^ Head(CONST buf, s: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ ReceiveLine(tcp: TCP.Connection; VAR buf: ARRAY OF CHAR): SIZE; 
	PROCEDURE ^ AlgoMatch(CONST algo, cstr, sstr: ARRAY OF CHAR; VAR match: ARRAY OF CHAR); 
BEGIN
END SSHTransport.
