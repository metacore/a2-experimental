MODULE SVGFilters;
	IMPORT SVG, SVGColors, SVGUtilities, XML, XMLObjects, Raster, Math;
CONST 
	InSourceGraphic* = 0; 
	InFilterElement* = 1; 
	BlendModeNormal = 0; 
	BlendModeMultiply = 1; 
	BlendModeScreen = 2; 
	BlendModeDarken = 3; 
	BlendModeLighten = 4; 
	ColorMatrixTypeMatrix = 0; 
	ColorMatrixTypeSaturate = 1; 
	ColorMatrixTypeHueRotate = 2; 
	ColorMatrixTypeLuminanceToAlpha = 3; 
TYPE 
	Buffer* = SVG.Document; 

	FilterWindow* = POINTER TO FilterWindowDesc; 

	FilterWindowDesc* = RECORD 
		x*, y*, width*, height*: SVG.Length; 
		modeBlend, modeCopy: Raster.Mode; 
		sourceGraphic: Buffer; 
	END; 

	In* = POINTER TO InDesc; 

	InDesc* = RECORD 
		type*: SIGNED8; 
		fe*: FilterElement; 
	END; 

	FilterElement* = OBJECT 
	VAR 
		in*: In; 
		x*, y*, width*, height*: SVG.Length; 

		PROCEDURE ^ Apply*(window: FilterWindow): Buffer; 
		PROCEDURE ^ ApplyFilter*(window: FilterWindow; target: Buffer); 
		PROCEDURE ^ GetInBuffer(in: In; window: FilterWindow): Buffer; 
		PROCEDURE ^ GetInPixel(x, y, tx0, ty0: SIZE; window: FilterWindow; in: In; source: Buffer; VAR pix: Raster.Pixel); 
	END FilterElement; 

	feBlend* = OBJECT (FilterElement)
	VAR 
		in2*: In; 
		mode*: SIGNED8; 

		PROCEDURE ^ ApplyFilter*(window: FilterWindow; target: Buffer); 
		PROCEDURE ^ Blend(VAR a, b: Raster.Pixel); 
	END feBlend; 

	feOffset* = OBJECT (FilterElement)
	VAR 
		dx*, dy*: SVG.Length; 

		PROCEDURE ^ ApplyFilter*(window: FilterWindow; target: Buffer); 
	END feOffset; 

	ColorMatrix* = RECORD 
		a: ARRAY 5 OF ARRAY 4 OF FLOAT64; 
	END; 

	feColorMatrix* = OBJECT (FilterElement)
	VAR 
		type*: SIGNED8; 
		matrix*: ColorMatrix; 

		PROCEDURE ^ ApplyFilter*(window: FilterWindow; target: Buffer); 
	END feColorMatrix; 

	feGaussianBlur* = OBJECT (FilterElement)
	VAR 
		stdDeviationX*, stdDeviationY*: SVG.Length; 

		PROCEDURE ^ ApplyFilter*(window: FilterWindow; target: Buffer); 
	END feGaussianBlur; 

	feMerge* = OBJECT (FilterElement)
	VAR 
		in2: XMLObjects.List; 

		PROCEDURE ^ ApplyFilter*(window: FilterWindow; target: Buffer); 
		PROCEDURE ^ AddNode*(in: In); 
	END feMerge; 

	feFlood* = OBJECT (FilterElement)
	VAR 
		pix*: Raster.Pixel; 

		PROCEDURE ^ ApplyFilter*(window: FilterWindow; target: Buffer); 
	END feFlood; 

	feImage* = OBJECT (FilterElement)
	VAR 
		image*: Buffer; 

		PROCEDURE ^ ApplyFilter*(window: FilterWindow; target: Buffer); 
	END feImage; 

	feTile* = OBJECT (FilterElement)

		PROCEDURE ^ ApplyFilter*(window: FilterWindow; target: Buffer); 
	END feTile; 

	Filter* = OBJECT 
	VAR 
		fElements: XMLObjects.ArrayDict; 
		rootElement*: FilterElement; 
		window*: FilterWindow; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ AddFilterElement*(fElement: FilterElement; id: SVG.String); 
		PROCEDURE ^ GetFilterElement*(id: SVG.String): FilterElement; 
		PROCEDURE ^ Apply*(source, target: Buffer); 
	END Filter; 

	FilterDict* = OBJECT 
	VAR 
		filters: XMLObjects.ArrayDict; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ AddFilter*(filter: Filter; id: SVG.String); 
		PROCEDURE ^ GetFilter*(id: SVG.String): Filter; 
	END FilterDict; 

	FilterStack* = OBJECT 
	VAR 
		topFilter: Filter; 
		next: FilterStack; 

		PROCEDURE ^ Push*(filter: Filter); 
		PROCEDURE ^ Pop*(VAR filter: Filter); 
	END FilterStack; 

	PROCEDURE ^ ParseIn*(value: SVG.String; VAR in: SIGNED8); 
	PROCEDURE ^ ParseBlendMode*(value: SVG.String; VAR mode: SIGNED8); 
	PROCEDURE ^ ParseColorMatrixType*(value: XML.String; VAR type: SIGNED8); 
	PROCEDURE ^ ParseColorMatrixValues*(values: XML.String; type: SIGNED8; VAR matrix: ColorMatrix): BOOLEAN; 
	PROCEDURE ^ TransformByColorMatrix(VAR pix: Raster.Pixel; VAR matrix: ColorMatrix); 
BEGIN
END SVGFilters.
