MODULE A2Sequencers;
	IMPORT Machine, Streams, Objects, Kernel;
CONST 
	NoDelay* = 0; 
	MaxHandlers = 10; 
TYPE 
	Property* = OBJECT 
	VAR 
		locks: INTEGER; 
		container*: OBJECT; 

		PROCEDURE ^  & InitProperty; 
		PROCEDURE ^ AcquireRead; 
		PROCEDURE ^ ReleaseRead; 
		PROCEDURE ^ AcquireWrite; 
		PROCEDURE ^ ReleaseWrite; 
		PROCEDURE ^ ToStream*(w: Streams.Writer); 
		PROCEDURE ^ FromStream*(r: Streams.Reader); 
	END Property; 

	Boolean* = OBJECT (Property)
	VAR 
		value: BOOLEAN; 
		handlers: ARRAY MaxHandlers OF BooleanHandler; 

		PROCEDURE ^  & InitBoolean*(value: BOOLEAN); 
		PROCEDURE ^ Get*(): BOOLEAN; 
		PROCEDURE ^ Set*(value: BOOLEAN); 
		PROCEDURE ^ Changed(value: BOOLEAN); 
		PROCEDURE ^ AddHandler*(handler: BooleanHandler); 
	END Boolean; 

	Integer* = OBJECT (Property)
	VAR 
		value: INTEGER; 
		handlers: ARRAY MaxHandlers OF IntegerHandler; 

		PROCEDURE ^  & InitInteger*(value: INTEGER); 
		PROCEDURE ^ Get*(): INTEGER; 
		PROCEDURE ^ Set*(value: INTEGER); 
		PROCEDURE ^ Inc*(step: INTEGER); 
		PROCEDURE ^ Dec*(step: INTEGER); 
		PROCEDURE ^ Changed(value: INTEGER); 
		PROCEDURE ^ AddHandler*(handler: IntegerHandler); 
	END Integer; 

	Real* = OBJECT (Property)
	VAR 
		value: FLOAT32; 
		handlers: ARRAY MaxHandlers OF RealHandler; 

		PROCEDURE ^  & InitReal*(value: FLOAT32); 
		PROCEDURE ^ Get*(): FLOAT32; 
		PROCEDURE ^ Set*(value: FLOAT32); 
		PROCEDURE ^ Changed(value: FLOAT32); 
		PROCEDURE ^ AddHandler*(handler: RealHandler); 
	END Real; 

	Set* = OBJECT (Property)
	VAR 
		value: SET; 
		handlers: ARRAY MaxHandlers OF SetHandler; 

		PROCEDURE ^  & InitSet*(value: SET); 
		PROCEDURE ^ Get*(): SET; 
		PROCEDURE ^ Set*(value: SET); 
		PROCEDURE ^ Incl*(element: INTEGER); 
		PROCEDURE ^ Excl*(element: INTEGER); 
		PROCEDURE ^ Changed(value: SET); 
		PROCEDURE ^ AddHandler*(handler: SetHandler); 
	END Set; 

	String* = OBJECT (Property)
	VAR 
		value: POINTER TO ARRAY OF CHAR; 
		handlers: ARRAY MaxHandlers OF StringHandler; 

		PROCEDURE ^  & InitString*(CONST value: ARRAY OF CHAR; length: SIZE); 
		PROCEDURE ^ Get*(VAR value: ARRAY OF CHAR); 
		PROCEDURE ^ Set*(CONST value: ARRAY OF CHAR); 
		PROCEDURE ^ Changed(CONST value: ARRAY OF CHAR); 
		PROCEDURE ^ AddHandler*(handler: StringHandler); 
	END String; 

	Message* = OBJECT 
	VAR 
		next: Message; 
		time: SIGNED32; 

		PROCEDURE ^  & InitMessage*; 
		PROCEDURE ^ Handle*; 
	END Message; 

	ProcedureMessage* = OBJECT (Message)
	VAR 
		procedure: Procedure; 

		PROCEDURE ^  & InitProcedureMessage*(procedure: Procedure); 
		PROCEDURE ^ Handle*; 
	END ProcedureMessage; 

	BooleanMessage* = OBJECT (Message)
	VAR 
		value: BOOLEAN; 
		procedure: BooleanProcedure; 

		PROCEDURE ^  & InitBooleanMessage*(value: BOOLEAN; procedure: BooleanProcedure); 
		PROCEDURE ^ Handle*; 
	END BooleanMessage; 

	IntegerMessage* = OBJECT (Message)
	VAR 
		value: INTEGER; 
		procedure: IntegerProcedure; 

		PROCEDURE ^  & InitIntegerMessage*(value: INTEGER; procedure: IntegerProcedure); 
		PROCEDURE ^ Handle*; 
	END IntegerMessage; 

	IntegerIntegerMessage* = OBJECT (Message)
	VAR 
		value0, value1: INTEGER; 
		procedure: IntegerIntegerProcedure; 

		PROCEDURE ^  & InitIntegerIntegerMessage*(value0, value1: INTEGER; procedure: IntegerIntegerProcedure); 
		PROCEDURE ^ Handle*; 
	END IntegerIntegerMessage; 

	RealMessage* = OBJECT (Message)
	VAR 
		value: FLOAT32; 
		procedure: RealProcedure; 

		PROCEDURE ^  & InitRealMessage*(value: FLOAT32; procedure: RealProcedure); 
		PROCEDURE ^ Handle*; 
	END RealMessage; 

	SetMessage* = OBJECT (Message)
	VAR 
		value: SET; 
		procedure: SetProcedure; 

		PROCEDURE ^  & InitSetMessage*(value: SET; procedure: SetProcedure); 
		PROCEDURE ^ Handle*; 
	END SetMessage; 

	StringMessage* = OBJECT (Message)
	VAR 
		value: POINTER TO ARRAY OF CHAR; 
		procedure: StringProcedure; 

		PROCEDURE ^  & InitStringMessage*(CONST value: ARRAY OF CHAR; procedure: StringProcedure); 
		PROCEDURE ^ Handle*; 
	END StringMessage; 

	Request* = OBJECT {EXCLUSIVE} (Message)
	VAR 
		handled: BOOLEAN; 

		PROCEDURE ^  & InitRequest*; 
		PROCEDURE ^ Handle*; 
		PROCEDURE ^ Await; 
	END Request; 

	IntegerRequest* = OBJECT {EXCLUSIVE} (Request)
	VAR 
		value: INTEGER; 
		procedure: IntegerProcedure; 

		PROCEDURE ^  & InitIntegerRequest*(value: INTEGER; procedure: IntegerProcedure); 
		PROCEDURE ^ Handle*; 
	END IntegerRequest; 

	RequestBoolean* = OBJECT {EXCLUSIVE} (Request)
	VAR 
		procedure: ProcedureBoolean; 
		result-: BOOLEAN; 

		PROCEDURE ^  & InitRequestBoolean*(procedure: ProcedureBoolean); 
		PROCEDURE ^ Handle*; 
	END RequestBoolean; 

	RequestInteger* = OBJECT {EXCLUSIVE} (Request)
	VAR 
		procedure: ProcedureInteger; 
		result-: INTEGER; 

		PROCEDURE ^  & InitRequestInteger*(procedure: ProcedureInteger); 
		PROCEDURE ^ Handle*; 
	END RequestInteger; 

	RequestReal* = OBJECT {EXCLUSIVE} (Request)
	VAR 
		procedure: ProcedureReal; 
		result-: FLOAT32; 

		PROCEDURE ^  & InitRequestReal*(procedure: ProcedureReal); 
		PROCEDURE ^ Handle*; 
	END RequestReal; 

	IntegerRequestBoolean* = OBJECT {EXCLUSIVE} (Request)
	VAR 
		value: INTEGER; 
		procedure: IntegerProcedureBoolean; 
		result-: BOOLEAN; 

		PROCEDURE ^  & InitIntegerRequestBoolean*(value: INTEGER; procedure: IntegerProcedureBoolean); 
		PROCEDURE ^ Handle*; 
	END IntegerRequestBoolean; 

	RealRequestInteger* = OBJECT {EXCLUSIVE} (Request)
	VAR 
		value: FLOAT32; 
		procedure: RealProcedureInteger; 
		result-: INTEGER; 

		PROCEDURE ^  & InitRealRequestInteger*(value: FLOAT32; procedure: RealProcedureInteger); 
		PROCEDURE ^ Handle*; 
	END RealRequestInteger; 

	Sequencer* = OBJECT {EXCLUSIVE} 
	VAR 
		handling, woken: BOOLEAN; 
		first: Message; 
		timer: Objects.Timer; 

		PROCEDURE ^  & InitSequencer*; 
		PROCEDURE ^ SequencerCalledThis*(): BOOLEAN; 
		PROCEDURE ^ HandleMessages; 
		PROCEDURE ^ Add*(message: Message; time: SIGNED32); 
		PROCEDURE ^ AddMessage*(procedure: Procedure); 
		PROCEDURE ^ AddBooleanMessage*(value: BOOLEAN; procedure: BooleanProcedure); 
		PROCEDURE ^ AddIntegerMessage*(value: INTEGER; procedure: IntegerProcedure); 
		PROCEDURE ^ AddRealMessage*(value: FLOAT32; procedure: RealProcedure); 
		PROCEDURE ^ AddSetMessage*(value: SET; procedure: SetProcedure); 
		PROCEDURE ^ AddStringMessage*(CONST value: ARRAY OF CHAR; procedure: StringProcedure); 
		PROCEDURE ^ AddIntegerIntegerMessage*(value0, value1: INTEGER; procedure: IntegerIntegerProcedure); 
		PROCEDURE ^ AddIntegerRequest*(value: INTEGER; procedure: IntegerProcedure); 
		PROCEDURE ^ AddRequestBoolean*(procedure: ProcedureBoolean): BOOLEAN; 
		PROCEDURE ^ AddRequestInteger*(procedure: ProcedureInteger): INTEGER; 
		PROCEDURE ^ AddRequestReal*(procedure: ProcedureReal): FLOAT32; 
		PROCEDURE ^ AddIntegerRequestBoolean*(value: INTEGER; procedure: IntegerProcedureBoolean): BOOLEAN; 
		PROCEDURE ^ AddRealRequestInteger*(value: FLOAT32; procedure: RealProcedureInteger): INTEGER; 
		PROCEDURE ^ Remove*(message: Message); 
		PROCEDURE ^ Handle*; 
		PROCEDURE ^ Wakeup; 
		PROCEDURE ^ Stop*; 
	BEGIN{ACTIVE} 
	END Sequencer; 

	BooleanHandler = PROCEDURE {DELEGATE}(property: Boolean; value: BOOLEAN); 

	IntegerHandler = PROCEDURE {DELEGATE}(property: Integer; value: INTEGER); 

	RealHandler = PROCEDURE {DELEGATE}(property: Real; value: FLOAT32); 

	SetHandler = PROCEDURE {DELEGATE}(property: Set; value: SET); 

	StringHandler = PROCEDURE {DELEGATE}(property: String; CONST value: ARRAY OF CHAR); 

	Procedure = PROCEDURE {DELEGATE}; 

	BooleanProcedure = PROCEDURE {DELEGATE}(value: BOOLEAN); 

	IntegerProcedure = PROCEDURE {DELEGATE}(value: INTEGER); 

	IntegerIntegerProcedure = PROCEDURE {DELEGATE}(value0, value1: INTEGER); 

	RealProcedure = PROCEDURE {DELEGATE}(value: FLOAT32); 

	SetProcedure = PROCEDURE {DELEGATE}(value: SET); 

	StringProcedure = PROCEDURE {DELEGATE}(CONST value: ARRAY OF CHAR); 

	ProcedureBoolean = PROCEDURE {DELEGATE}():BOOLEAN; 

	ProcedureInteger = PROCEDURE {DELEGATE}():INTEGER; 

	ProcedureReal = PROCEDURE {DELEGATE}():FLOAT32; 

	IntegerProcedureBoolean = PROCEDURE {DELEGATE}(value: INTEGER):BOOLEAN; 

	RealProcedureInteger = PROCEDURE {DELEGATE}(value: FLOAT32):INTEGER; 

	PROCEDURE ^ Delay*(delay: SIGNED32): SIGNED32; 
BEGIN
END A2Sequencers.
