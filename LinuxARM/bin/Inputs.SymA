MODULE Inputs;
	IMPORT Machine, Kernel, Plugins;
CONST 
	Release* = 0; 
	LeftShift* = 1; 
	RightShift* = 2; 
	LeftCtrl* = 3; 
	RightCtrl* = 4; 
	LeftAlt* = 5; 
	RightAlt* = 6; 
	LeftMeta* = 7; 
	RightMeta* = 8; 
	Shift* = {LeftShift, RightShift}; 
	Ctrl* = {LeftCtrl, RightCtrl}; 
	Alt* = {LeftAlt, RightAlt}; 
	Meta* = {LeftMeta, RightMeta}; 
	SHIFT* = 0; 
	CTRL* = 1; 
	ALT* = 2; 
	KsNil* = 16777215; 
	KsBackSpace* = 65288; 
	KsTab* = 65289; 
	KsReturn* = 65293; 
	KsPause* = 65299; 
	KsScrollLock* = 65300; 
	KsSysReq* = 65301; 
	KsEscape* = 65307; 
	KsDelete* = 65535; 
	KsHome* = 65360; 
	KsLeft* = 65361; 
	KsUp* = 65362; 
	KsRight* = 65363; 
	KsDown* = 65364; 
	KsPageUp* = 65365; 
	KsPageDown* = 65366; 
	KsEnd* = 65367; 
	KsPrint* = 65377; 
	KsInsert* = 65379; 
	KsMenu* = 65383; 
	KsBreak* = 65387; 
	KsNumLock* = 65407; 
	KsKPEnter* = 65421; 
	KsKPMultiply* = 65450; 
	KsKPAdd* = 65451; 
	KsKPSubtract* = 65453; 
	KsKPDecimal* = 65454; 
	KsKPDivide* = 65455; 
	KsF1* = 65470; 
	KsF2* = 65471; 
	KsF3* = 65472; 
	KsF4* = 65473; 
	KsF5* = 65474; 
	KsF6* = 65475; 
	KsF7* = 65476; 
	KsF8* = 65477; 
	KsF9* = 65478; 
	KsF10* = 65479; 
	KsF11* = 65480; 
	KsF12* = 65481; 
	KsShiftL* = 65505; 
	KsShiftR* = 65506; 
	KsControlL* = 65507; 
	KsControlR* = 65508; 
	KsCapsLock* = 65509; 
	KsMetaL* = 65511; 
	KsMetaR* = 65512; 
	KsAltL* = 65513; 
	KsAltR* = 65514; 
	KsScanPreviousTrack* = 16711680; 
	KsScanNextTrack* = 16711681; 
	KsALConsumerControl* = 16711682; 
	KsMute* = 16711683; 
	KsVolumeDecrement* = 16711684; 
	KsVolumeIncrement* = 16711685; 
	KsPlayPause* = 16711686; 
	KsStopOSC* = 16711687; 
	KsALEmailReader* = 16711688; 
	KsALCalculator* = 16711689; 
	KsACSearch* = 16711690; 
	KsACHome* = 16711691; 
	KsACBack* = 16711692; 
	KsACForward* = 16711693; 
	KsACBookmarks* = 16711694; 
	KsConsumerButtons* = 16773120; 
TYPE 
	Message* = RECORD 
	END; 

	KeyboardMsg* = RECORD (Message)
		ch*: CHAR; 
		flags*: SET; 
		keysym*: SIGNED32; 
	END; 

	MouseMsg* = RECORD (Message)
		keys*: SET; 
		dx*, dy*, dz*: SIGNED32; 
	END; 

	AbsMouseMsg* = RECORD (Message)
		keys*: SET; 
		x*, y*, z*, dx*, dy*, dz*: SIGNED32; 
	END; 

	PointerMsg* = RECORD (Message)
		keys*: SET; 
		x*, y*, z*: SIGNED32; 
		mx*, my*, mz*: SIGNED32; 
	END; 

	Sink* = OBJECT 

		PROCEDURE ^ Handle*(VAR msg: Message); 
	END Sink; 

	Group* = OBJECT 

		PROCEDURE ^ Register*(s: Sink); 
		PROCEDURE ^ Unregister*(s: Sink); 
		PROCEDURE ^ Handle*(VAR msg: Message); 
	END Group; 

	Pointer* = OBJECT {EXCLUSIVE} (Sink)
	VAR 
		cur: PointerMsg; 
		threshold, speedup: SIGNED32; 
		fixedKeys: SET; 

		PROCEDURE ^ Update; 
		PROCEDURE ^ SetKeys(keys: SET); 
		PROCEDURE ^ Handle*(VAR m: Message); 
		PROCEDURE ^ SetLimits*(mx, my, mz: SIGNED32); 
		PROCEDURE ^  & Init*(t, s: SIGNED32); 
	END Pointer; 

	List = POINTER TO RECORD 
		next: List; 
		s: Sink; 
	END; 

	Broadcaster = OBJECT {EXCLUSIVE} (Group)
	VAR 
		sentinel: List; 

		PROCEDURE ^ Register*(s: Sink); 
		PROCEDURE ^ Unregister*(s: Sink); 
		PROCEDURE ^ Handle*(VAR msg: Message); 
	END Broadcaster; 

	OberonInput* = OBJECT (Plugins.Plugin)
	VAR 
		timer-: Kernel.Timer; 

		PROCEDURE ^ Mouse*(VAR x, y: SIGNED16; VAR keys: SET); 
		PROCEDURE ^ Read*(VAR ch: CHAR; VAR break: BOOLEAN); 
		PROCEDURE ^ Available*(VAR num: SIGNED16; VAR break: BOOLEAN); 
		PROCEDURE ^ KeyState*(VAR k: SET); 
		PROCEDURE ^  & Init*; 
	END OberonInput; 

	MouseFixer = OBJECT {EXCLUSIVE} (Sink)
	VAR 
		ctrl: BOOLEAN; 

		PROCEDURE ^ Handle*(VAR m: Message); 
		PROCEDURE ^  & Init*; 
	END MouseFixer; 
VAR 
	keyboard*, mouse*, pointer*: Group; 
	main*: Pointer; 
	oberonInput*: Plugins.Registry; 
	mouseFixer: MouseFixer; 

	PROCEDURE ^ NewBroadcaster*(): Group; 
	PROCEDURE ^ Init; 
BEGIN
END Inputs.
