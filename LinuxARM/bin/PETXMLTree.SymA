MODULE PETXMLTree;
	IMPORT Modules, Streams, Diagnostics, CompilerInterface, Strings, Texts, PETTrees, WMTrees, XML, XMLObjects, XMLScanner, XMLParser, UTF8Strings;
CONST 
TYPE 
	Tree* = OBJECT {EXCLUSIVE} (PETTrees.Tree)
	VAR 
		diagnostics: Diagnostics.Diagnostics; 
		log: Streams.Writer; 
		hasErrors: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ AddSubNode(node: PETTrees.TreeNode; xml: XML.Element); 
		PROCEDURE ^ SetDocument(xml: XML.Element); 
		PROCEDURE ^ Error(pos, line, row: Streams.Position; CONST msg: ARRAY OF CHAR); 
		PROCEDURE ^ AddNodes*(parent: PETTrees.TreeNode; diagnostics: Diagnostics.Diagnostics; log: Streams.Writer); 
		PROCEDURE ^ SetNodeInfo(node: PETTrees.TreeNode; position: Streams.Position); 
	END Tree; 

	ErrorReporter = OBJECT 
	VAR 
		diagnostics: Diagnostics.Diagnostics; 
		hasErrors: BOOLEAN; 

		PROCEDURE ^ ReportError(pos, line, row: Streams.Position; CONST msg: ARRAY OF CHAR); 
		PROCEDURE ^  & Init(diagnostics: Diagnostics.Diagnostics); 
	END ErrorReporter; 

	PROCEDURE ^ ParseText(text: Texts.Text; CONST source: ARRAY OF CHAR; pos: SIGNED32; CONST pc, opt: ARRAY OF CHAR; log: Streams.Writer; diagnostics: Diagnostics.Diagnostics; VAR error: BOOLEAN); 
	PROCEDURE ^ GenXMLTree*(): PETTrees.Tree; 
	PROCEDURE ^ Cleanup; 
BEGIN
END PETXMLTree.
