MODULE SVGGradients;
	IMPORT SVG, SVGColors, XMLObjects, Raster, Gfx, Math;
CONST 
	SpreadMethodPad = 0; 
	SpreadMethodReflect = 1; 
	SpreadMethodRepeat = 2; 
TYPE 
	GradientStop = POINTER TO GradientStopDesc; 

	GradientStopDesc = RECORD 
		offset: SVG.Length; 
		color: Raster.Pixel; 
		next: GradientStop; 
	END; 

	Gradient* = OBJECT 
	VAR 
		first, last: GradientStop; 
		gradientUnits*: SIGNED8; 
		spreadMethod*: SIGNED8; 
		transform*: SVG.Transform; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ Copy*(other: Gradient); 
		PROCEDURE ^ HasStops(): BOOLEAN; 
		PROCEDURE ^ ClearStops*; 
		PROCEDURE ^ AddStop*(offset: SVG.Length; color: SVG.Color); 
		PROCEDURE ^ AddStop2(offset: SVG.Length; color: Raster.Pixel); 
		PROCEDURE ^ GetFromOffset(offset: SVG.Length): Raster.Pixel; 
		PROCEDURE ^ GetFromPoint*(p: SVG.Coordinate): Raster.Pixel; 
	END Gradient; 

	LinearGradient* = OBJECT (Gradient)
	VAR 
		p1*, p2*: SVG.Coordinate; 

		PROCEDURE ^ CopyLinear*(other: LinearGradient); 
		PROCEDURE ^ GetFromPoint*(p: SVG.Coordinate): Raster.Pixel; 
	END LinearGradient; 

	RadialGradient* = OBJECT (Gradient)
	VAR 
		center*, focal*: SVG.Coordinate; 
		radius*: SVG.Length; 

		PROCEDURE ^ CopyRadial*(other: RadialGradient); 
		PROCEDURE ^ GetFromPoint*(p: SVG.Coordinate): Raster.Pixel; 
	END RadialGradient; 

	GradientDict* = OBJECT 
	VAR 
		gradients: XMLObjects.ArrayDict; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ AddGradient*(gradient: Gradient; id: SVG.String); 
		PROCEDURE ^ GetGradient*(id: SVG.String): Gradient; 
		PROCEDURE ^ GetGradientAsPattern*(ctx: Gfx.Context; id: SVG.String; worldBBox, objectBBox: SVG.Box; userToWorldSpace: SVG.Transform; viewport: SVG.Box): Gfx.Pattern; 
	END GradientDict; 

	PROCEDURE ^ ParseSpreadMethod*(value: SVG.String; VAR spreadMethod: SIGNED8); 
BEGIN
END SVGGradients.
