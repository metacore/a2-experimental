MODULE Types;
	IMPORT Strings, Texts, TextUtilities, Repositories, Streams;
CONST 
	Ok* = 0; 
	Truncated* = 1; 
	CannotConvert* =  -10; 
	ConversionError* =  -11; 
	TruncatedError* =  -12; 
	CannotRead* =  -20; 
	CannotWrite* =  -21; 
	TargetIsNIL* =  -30; 
TYPE 
	Any* = RECORD 
	END; 

	Boolean* = RECORD (Any)
		value*: BOOLEAN; 
	END; 

	Integer* = RECORD (Any)
		value*: SIGNED32; 
	END; 

	Hugeint* = RECORD (Any)
		value*: SIGNED64; 
	END; 

	Size* = RECORD (Any)
		value*: SIZE; 
	END; 

	Real* = RECORD (Any)
		value*: FLOAT32; 
	END; 

	Longreal* = RECORD (Any)
		value*: FLOAT64; 
	END; 

	Char* = RECORD (Any)
		value*: CHAR; 
	END; 

	String32* = RECORD (Any)
		value*: ARRAY 32 OF CHAR; 
	END; 

	String256* = RECORD (Any)
		value*: ARRAY 256 OF CHAR; 
	END; 

	String* = RECORD (Any)
		value*: Strings.String; 
	END; 

	DynamicString* = RECORD (Any)
		value-: Strings.String; 
		length: SIZE; 
		bufferLength: SIZE; 
	END; 

	Set* = RECORD (Any)
		value*: SET; 
	END; 

	Text* = RECORD (Any)
		value*: Texts.Text; 
	END; 

	Object* = RECORD (Any)
		value*: Repositories.Component; 
	END; 

	Generic* = RECORD (Any)
		Get*: Getter; 
		Set*: Setter; 
	END; 

	Getter* = PROCEDURE {DELEGATE}(CONST self: Generic; VAR target: Any; VAR res: INTEGER); 

	Setter* = PROCEDURE {DELEGATE}(CONST self: Generic; CONST source: Any; VAR res: INTEGER); 
VAR 
	StrEmptyString: Strings.String; 

	PROCEDURE ^ GetBoolean*(CONST source: Any; VAR value: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ SetBoolean*(VAR target: Any; value: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ GetInteger*(CONST source: Any; VAR value: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ SetInteger*(VAR target: Any; value: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ GetHugeint*(CONST source: Any; VAR value: SIGNED64; VAR res: INTEGER); 
	PROCEDURE ^ SetHugeint*(VAR target: Any; value: SIGNED64; VAR res: INTEGER); 
	PROCEDURE ^ GetSize*(CONST source: Any; VAR value: SIZE; VAR res: INTEGER); 
	PROCEDURE ^ SetSize*(VAR target: Any; value: SIZE; VAR res: INTEGER); 
	PROCEDURE ^ GetReal*(CONST source: Any; VAR value: FLOAT32; VAR res: INTEGER); 
	PROCEDURE ^ SetReal*(VAR target: Any; value: FLOAT32; VAR res: INTEGER); 
	PROCEDURE ^ GetLongreal*(CONST source: Any; VAR value: FLOAT64; VAR res: INTEGER); 
	PROCEDURE ^ SetLongreal*(VAR target: Any; value: FLOAT64; VAR res: INTEGER); 
	PROCEDURE ^ GetChar*(CONST source: Any; VAR value: CHAR; VAR res: INTEGER); 
	PROCEDURE ^ SetChar*(VAR target: Any; value: CHAR; VAR res: INTEGER); 
	PROCEDURE ^ GetAOC*(CONST source: Any; VAR value: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ EnsureStringLength(VAR s: Strings.String; length: SIZE); 
	PROCEDURE ^ SetAOC*(VAR target: Any; CONST value: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ GetString*(CONST source: Any; VAR string: Strings.String; VAR res: INTEGER); 
	PROCEDURE ^ SetString*(VAR target: Any; value: Strings.String; VAR res: INTEGER); 
	PROCEDURE ^ GetSet*(CONST source: Any; VAR value: SET; VAR res: INTEGER); 
	PROCEDURE ^ SetSet*(VAR target: Any; value: SET; VAR res: INTEGER); 
	PROCEDURE ^ GetText*(CONST source: Any; VAR value: Texts.Text; VAR res: INTEGER); 
	PROCEDURE ^ SetText*(VAR target: Any; CONST value: Texts.Text; VAR res: INTEGER); 
	PROCEDURE ^ GetObject*(CONST source: Any; VAR value: Repositories.Component; VAR res: INTEGER); 
	PROCEDURE ^ SetObject*(VAR target: Any; CONST value: Repositories.Component; VAR res: INTEGER); 
	PROCEDURE ^ Assign*(VAR to: Any; CONST from: Any; VAR res: INTEGER); 
	PROCEDURE ^ StringToComponent(CONST string: ARRAY OF CHAR; VAR component: Repositories.Component; VAR res: INTEGER); 
	PROCEDURE ^ ComponentToString(CONST component: Repositories.Component; VAR string: ARRAY OF CHAR; VAR res: INTEGER); 
	PROCEDURE ^ NewString*(): DynamicString; 
	PROCEDURE ^ EnsureLength*(VAR string: DynamicString; minLength: SIZE); 
	PROCEDURE ^ SetValue*(VAR string: DynamicString; CONST value: ARRAY OF CHAR); 
	PROCEDURE ^ Free*(VAR string: DynamicString); 
	PROCEDURE ^ Append*(VAR string: DynamicString; CONST suffix: ARRAY OF CHAR); 
	PROCEDURE ^ GetLength*(CONST string: DynamicString): SIZE; 
	PROCEDURE ^ CleanString(VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ FloatToString*(r: FLOAT64; fractionalDigits: SIGNED32; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ InitStrings; 
BEGIN
END Types.
