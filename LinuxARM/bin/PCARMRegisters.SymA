MODULE PCARMRegisters;
	IMPORT PCM, PCOARM, KernelLog;
CONST 
	INTERNALERROR = 100; 
	CheckRegisterSize = TRUE; 
	TraceDetail = FALSE; 
	Constants* = 0; 
	MemoryStack* = 1; 
	MemoryAbsolute* = 2; 
	MemoryAll* = 3; 
	FP = PCOARM.FP; 
	SP = PCOARM.SP; 
	PC = PCOARM.PC; 
TYPE 
	Content* = OBJECT 
	VAR 
		next: Content; 

		PROCEDURE ^ Equals(c: Content): BOOLEAN; 
	END Content; 

	MemoryContent* = OBJECT (Content)
	VAR 
		baseReg-, offset-, size-: SIGNED32; 

		PROCEDURE ^  & Init*(baseReg, offset, size: SIGNED32); 
		PROCEDURE ^ Equals(c: Content): BOOLEAN; 
		PROCEDURE ^ Overlapps(c: Content): BOOLEAN; 
	END MemoryContent; 

	PCRelMemContent* = OBJECT (MemoryContent)
	VAR 
		pc-: SIGNED32; 

		PROCEDURE ^  & Init*(pc, offset, size: SIGNED32); 
		PROCEDURE ^ Equals(c: Content): BOOLEAN; 
	END PCRelMemContent; 

	Address* = OBJECT (Content)
	VAR 
		adr: PCM.Attribute; 
		offset: SIGNED32; 

		PROCEDURE ^  & Init*(adr: PCM.Attribute; offset: SIGNED32); 
		PROCEDURE ^ Equals(c: Content): BOOLEAN; 
	END Address; 

	ConstantContent* = OBJECT (Content)
	END ConstantContent; 

	IntConstant* = OBJECT (ConstantContent)
	VAR 
		v-: SIGNED32; 

		PROCEDURE ^  & Init*(value: SIGNED32); 
		PROCEDURE ^ Equals(c: Content): BOOLEAN; 
	END IntConstant; 

	RealConstant* = OBJECT (ConstantContent)
	VAR 
		v-: FLOAT32; 

		PROCEDURE ^  & Init*(value: FLOAT32); 
		PROCEDURE ^ Equals(c: Content): BOOLEAN; 
	END RealConstant; 

	LongRealConstant* = OBJECT (ConstantContent)
	VAR 
		v-: FLOAT64; 

		PROCEDURE ^  & Init*(value: FLOAT64); 
		PROCEDURE ^ Equals(c: Content): BOOLEAN; 
	END LongRealConstant; 

	Register* = OBJECT 
	VAR 
		id-: SIGNED32; 
		free-: SIGNED32; 
		value: Content; 
		memory: Content; 
		prevLRU, nextLRU: Register; 

		PROCEDURE ^  & Init*(ID: SIGNED32); 
		PROCEDURE ^ AddContent(c: Content); 
		PROCEDURE ^ RemoveContent(r: Content); 
		PROCEDURE ^ Equals(c: Content): BOOLEAN; 
	END Register; 

	ARMRegisters* = OBJECT {EXCLUSIVE} 
	VAR 
		registers: POINTER TO ARRAY OF Register; 
		nofRegs: SIGNED32; 
		reuse: SET; 
		lru: Register; 

		PROCEDURE ^  & Init*(nofRegs: SIGNED32; reuseFlags: SET); 
		PROCEDURE ^ ReuseType(c: Content): BOOLEAN; 
		PROCEDURE ^ AllocDestReg*(useCount: SIGNED32): SIGNED32; 
		PROCEDURE ^ AllocReg*(content: Content; VAR contentValid: BOOLEAN; useCount: SIGNED32): SIGNED32; 
		PROCEDURE ^ AllocSpecialReg*(reg: SIGNED32; content: Content; useCount: SIGNED32); 
		PROCEDURE ^ InAllocReg(reg, useCount: SIGNED32); 
		PROCEDURE ^ FixRegisterUse*(reg, deltaUse: SIGNED32); 
		PROCEDURE ^ FreeReg*(reg: SIGNED32); 
		PROCEDURE ^ FreeAll*; 
		PROCEDURE ^ SetRegisterContent*(reg: SIGNED32; content: Content); 
		PROCEDURE ^ AddRegisterContent*(reg: SIGNED32; content: Content); 
		PROCEDURE ^ Invalidate*(content: Content); 
		PROCEDURE ^ InvalidateAll*; 
		PROCEDURE ^ GetReg*(reg: SIGNED32): Register; 
		PROCEDURE ^ GetUsedRegisterSet*(): SET; 
		PROCEDURE ^ IsRegisterFree*(reg: SIGNED32): BOOLEAN; 
		PROCEDURE ^ GetRegisterUseCount*(reg: SIGNED32): SIGNED32; 
	END ARMRegisters; 
VAR 
	bimboTrace*: BOOLEAN; 

	PROCEDURE ^ SpecialReg(r: SIGNED32): BOOLEAN; 
	PROCEDURE ^ NewMemContent*(pc, rBase, offset, size: SIGNED32): MemoryContent; 
	PROCEDURE ^ NewPCRelMemContent*(pc, offset, size: SIGNED32): PCRelMemContent; 
	PROCEDURE ^ NewMemAddress*(adr: PCM.Attribute; offset: SIGNED32): Address; 
	PROCEDURE ^ NewIntConst*(v: SIGNED32): IntConstant; 
	PROCEDURE ^ NewRealConst*(v: FLOAT32): RealConstant; 
	PROCEDURE ^ NewLongRealConst*(v: FLOAT64): LongRealConstant; 
BEGIN
END PCARMRegisters.
