MODULE HierarchicalProfiler;
	IMPORT SYSTEM, Machine, Streams, Modules, Objects, Kernel, Reflection, Commands, Options, Strings, Errors, HierarchicalProfiler0;
CONST 
	Ok* = 0; 
	AlreadyRunning* = 5101; 
	NotRunning* = 5102; 
	NoProfileDataAvailable* = 5103; 
	SampleBufferFull* = 5104; 
	SampleBufferNotInitialized* = 5105; 
	Hierarchical* = 0; 
	Flat* = 1; 
	None* = 0; 
	Threads* = 1; 
	Processors* = 2; 
	ThreadsProcessors* = 3; 
	ProcessorsThreads* = 4; 
	NotRunningNoDataAvailable* = 0; 
	NotRunningDataAvailable* = 1; 
	Running* = 2; 
	DefaultMaxTime = 30; 
	MaxUnwindingDepth = 64; 
	Invalid = 0; 
TYPE 
	Name = ARRAY 256 OF CHAR; 

	Sample = ARRAY MaxUnwindingDepth OF ADDRESS; 

	Samples = POINTER TO ARRAY OF Sample; 

	SampleInfo = RECORD 
		processorID: SIGNED32; 
		process: Objects.Process; 
	END; 

	SampleInfos = POINTER TO ARRAY OF SampleInfo; 

	Node* = OBJECT 
	VAR 
		parent-: Node; 
		child-: Node; 
		sibling-: Node; 
		count-: SIGNED32; 
		percent-: FLOAT32; 
		nofChildren-: SIGNED32; 
		name-: Name; 
		extern*: BOOLEAN; 
		marked*: BOOLEAN; 
		next: Node; 

		PROCEDURE ^ GetCaption*(): Strings.String; 
		PROCEDURE ^ Show(out: Streams.Writer; indent: SIGNED32); 
		PROCEDURE ^  & Init*; 
	END Node; 

	VisitorProcedure* = PROCEDURE {DELEGATE}(node: Node); 

	Profile* = OBJECT {EXCLUSIVE} 
	VAR 
		nodes-: Node; 
		nofSamples-: SIGNED32; 
		nofProcessors-: SIZE; 
		nofRunsTooDeep-: SIGNED32; 
		nofUnwindingFaults-: SIGNED32; 
		nofSamplesNotStored-: SIGNED32; 
		pattern: ARRAY 64 OF CHAR; 
		minPercent: SIGNED32; 

		PROCEDURE ^ FindNode(CONST name: Name; list: Node): Node; 
		PROCEDURE ^ MergeNode(newNode, parent: Node); 
		PROCEDURE ^ Flatten*(parent: Node); 
		PROCEDURE ^ VisitorClearMark(node: Node); 
		PROCEDURE ^ Mark*(CONST pattern: ARRAY OF CHAR; minPercent: SIGNED32); 
		PROCEDURE ^ VisitorSetMark(node: Node); 
		PROCEDURE ^ VisitNodes(node: Node; visitorProc: VisitorProcedure); 
		PROCEDURE ^ Visit*(visitorProc: VisitorProcedure); 
		PROCEDURE ^  & Init*; 
	END Profile; 
VAR 
	samples: Samples; 
	sampleInfos: SampleInfos; 
	maxNofSamples: SIZE; 
	nofRunsTooDeep: SIGNED32; 
	nofUnwindingFaults: SIGNED32; 
	nofSamplesNotStored: SIGNED32; 
	nofSamples: SIGNED32; 
	currentIndex: SIGNED32; 
	locked: BOOLEAN; 
	state: SIGNED32; 

	PROCEDURE ^ FindChildNode(CONST name: Name; parent: Node): Node; 
	PROCEDURE ^ MergeChildNode(CONST procedureName: ARRAY OF CHAR; parent: Node): Node; 
	PROCEDURE ^ AddSample(profile: Node; type, info: SIGNED32; CONST sampleInfo: SampleInfo; CONST sample: Sample); 
	PROCEDURE ^ HandleTimer(id: SIGNED32; process: Objects.Process; pc, bp, lowAdr, highAdr: ADDRESS); 
	PROCEDURE ^ InvalidateSample(VAR sample: Sample); 
	PROCEDURE ^ SortChildren(parent: Node); 
	PROCEDURE ^ PostProcessNode(profile: Profile; node: Node); 
	PROCEDURE ^ PostProcessProfile(profile: Profile); 
	PROCEDURE ^ CreateProfile(type: SIGNED32; info: SIGNED32): Profile; 
	PROCEDURE ^ GetBufferSize*(time: SIGNED32): SIZE; 
	PROCEDURE ^ GetProfile*(type, info: SIGNED32; VAR profile: Profile; VAR res: INTEGER); 
	PROCEDURE ^ Start*(context: Commands.Context); 
	PROCEDURE ^ StartProfiling*(maxTime: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ Stop*(context: Commands.Context); 
	PROCEDURE ^ StopProfiling*(VAR res: INTEGER); 
	PROCEDURE ^ Continue*(context: Commands.Context); 
	PROCEDURE ^ ContinueProfiling*(VAR res: INTEGER); 
	PROCEDURE ^ GetState*(VAR currentSamples, maxSamples: SIZE): INTEGER; 
	PROCEDURE ^ Show*(context: Commands.Context); 
	PROCEDURE ^ Cleanup; 
BEGIN
END HierarchicalProfiler.
