(**
	Vector SSE library by Yaroslav Romanchenko (SAGE) 2015
*)

MODULE VectorSSE;

IMPORT

	SYSTEM;
	
TYPE
	
	(**
		Base type that may represent
		a point (x,y,z), a vector (x,y,z),
		a color (r,g,b)
		or any set of 4 values
		for that vector operations should
		be applied.
		From this point of view 4th member
		involved in all operations also.
	*)
	Vector* = ARRAY 4 OF REAL;

PROCEDURE VectorToXMM0*(CONST a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	XMM0, [ECX]
END VectorToXMM0;

PROCEDURE VectorToXMM1*(CONST a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	XMM1, [ECX]
END VectorToXMM1;

PROCEDURE VectorToXMM2*(CONST a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	XMM2, [ECX]
END VectorToXMM2;

PROCEDURE VectorToXMM3*(CONST a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	XMM3, [ECX]
END VectorToXMM3;

PROCEDURE VectorToXMM4*(CONST a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	XMM4, [ECX]
END VectorToXMM4;

PROCEDURE VectorToXMM5*(CONST a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	XMM5, [ECX]
END VectorToXMM5;

PROCEDURE VectorToXMM6*(CONST a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	XMM6, [ECX]
END VectorToXMM6;

PROCEDURE VectorToXMM7*(CONST a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	XMM7, [ECX]
END VectorToXMM7;

PROCEDURE XMM0ToVector*(VAR a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	[ECX], XMM0
END XMM0ToVector;

PROCEDURE XMM1ToVector*(VAR a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	[ECX], XMM1
END XMM1ToVector;

PROCEDURE XMM2ToVector*(VAR a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	[ECX], XMM2
END XMM2ToVector;

PROCEDURE XMM3ToVector*(VAR a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	[ECX], XMM3
END XMM3ToVector;

PROCEDURE XMM4ToVector*(VAR a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	[ECX], XMM4
END XMM4ToVector;

PROCEDURE XMM5ToVector*(VAR a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	[ECX], XMM5
END XMM5ToVector;

PROCEDURE XMM6ToVector*(VAR a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	[ECX], XMM6
END XMM6ToVector;

PROCEDURE XMM7ToVector*(VAR a: Vector);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVUPS	[ECX], XMM7
END XMM7ToVector;

PROCEDURE RealToXMM00*(CONST a: REAL);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVSS	XMM0, [ECX]
END RealToXMM00;

PROCEDURE XMM00ToReal*(VAR a: REAL);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVSS	[ECX], XMM0
END XMM00ToReal;

PROCEDURE XMM10ToReal*(VAR a: REAL);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVSS	[ECX], XMM1
END XMM10ToReal;

PROCEDURE XMM20ToReal*(VAR a: REAL);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVSS	[ECX], XMM2
END XMM20ToReal;

PROCEDURE XMM30ToReal*(VAR a: REAL);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVSS	[ECX], XMM3
END XMM30ToReal;

PROCEDURE XMM40ToReal*(VAR a: REAL);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVSS	[ECX], XMM4
END XMM40ToReal;

PROCEDURE XMM50ToReal*(VAR a: REAL);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVSS	[ECX], XMM5
END XMM50ToReal;

PROCEDURE XMM60ToReal*(VAR a: REAL);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVSS	[ECX], XMM6
END XMM60ToReal;

PROCEDURE XMM70ToReal*(VAR a: REAL);
CODE {SYSTEM.i386, SYSTEM.SSE}
	MOV	ECX, [EBP+a]
	MOVSS	[ECX], XMM7
END XMM70ToReal;

(* Distribute XMM00 to whole XMM0 *)
PROCEDURE XMM00ToXMM0*;
CODE {SYSTEM.i386, SYSTEM.SSE}
		SHUFPS	XMM0, XMM0, 0
END XMM00ToXMM0;

PROCEDURE SubXMM0XMM1*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM0 := XMM0 - XMM1

	SUBPS		XMM0, XMM1
END SubXMM0XMM1;

PROCEDURE MulXMM0XMM1*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM0 := XMM0 * XMM1

	MULPS	XMM0, XMM1
END MulXMM0XMM1;

PROCEDURE MulXMM0XMM2*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM0 := XMM0 * XMM2

	MULPS	XMM0, XMM2
END MulXMM0XMM2;

PROCEDURE DivXMM0XMM1*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM0 := XMM1 / XMM0

	DIVPS	XMM0, XMM1
END DivXMM0XMM1;

PROCEDURE DivXMM2XMM0*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM2 := XMM2 / XMM0

	DIVPS	XMM2, XMM0
END DivXMM2XMM0;

PROCEDURE DivXMM0XMM2*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM0 := XMM0 / XMM2

	DIVPS	XMM0, XMM2
END DivXMM0XMM2;

PROCEDURE AddXMM0XMM1*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM0 := XMM0 + XMM1

	ADDPS	XMM0, XMM1
END AddXMM0XMM1;

PROCEDURE CopyXMM0XMM1*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM0 := XMM1

	MOVAPS		XMM0, XMM1
END CopyXMM0XMM1;

PROCEDURE CopyXMM1XMM0*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM1 := XMM0

	MOVAPS		XMM1, XMM0
END CopyXMM1XMM0;

PROCEDURE CopyXMM2XMM0*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM2 := XMM0

	MOVAPS		XMM2, XMM0
END CopyXMM2XMM0;

PROCEDURE VecDotXMM0XMM1*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM00 := dot(XMM0, XMM1)

	MULPS	XMM0, XMM1

	;MOVHLPS	XMM1, XMM0
	MOVAPS	XMM1, XMM0
	SHUFPS	XMM1, XMM1, 14

	ADDPS	XMM0, XMM1
	MOVAPS	XMM1, XMM0
	SHUFPS	XMM0, XMM0, 1
	ADDPS	XMM0, XMM1

END VecDotXMM0XMM1;

PROCEDURE VecDotXMM1XMM2*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM10 := dot(XMM1, XMM2)

	MULPS	XMM1, XMM2

	;MOVHLPS	XMM2, XMM1
	MOVAPS	XMM2, XMM1
	SHUFPS	XMM2, XMM2, 14

	ADDPS	XMM1, XMM2
	MOVAPS	XMM2, XMM1
	SHUFPS	XMM1, XMM1, 1
	ADDPS	XMM1, XMM2

END VecDotXMM1XMM2;

PROCEDURE VecCrossXMM0XMM1*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM0 := cross(XMM0, XMM1)

	MOVAPS	XMM2, XMM0
	MOVAPS	XMM3, XMM1
	SHUFPS	XMM0, XMM0, 201
	SHUFPS	XMM1, XMM1, 210
	SHUFPS	XMM2, XMM2, 210
	SHUFPS	XMM3, XMM3, 201
	MULPS		XMM0, XMM1
	MULPS		XMM2, XMM3
	SUBPS		XMM0, XMM2
	
END VecCrossXMM0XMM1;

PROCEDURE SqrtXMM00*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM00 := sqrt(XMM00)

	SQRTSS XMM0, XMM0
END SqrtXMM00;

PROCEDURE RSqrtXMM00*;
CODE {SYSTEM.i386, SYSTEM.SSE}

	; XMM00 := 1 / sqrt(XMM00)

	RSQRTSS XMM0, XMM0
END RSqrtXMM00;

END VectorSSE.

SystemTools.Free VectorSSE ~
