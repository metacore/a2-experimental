MODULE jjlVMThrowable;	(*automatically generated stub for java/lang/VMThrowable *)	(*WARNING: DON'T CHANGE THE PROCEDURE NAMES*)IMPORT  	AosOut, SYSTEM, PCDebug, 	jjlStackTraceElement, jjlString,	JT := JVMTypes, jjlObject, jjlThrowable;TYPE	Object = jjlObject.Object;	Throwable = jjlThrowable.Throwable;	RefArray = jjlObject.RefArray;	StackTraceElement = jjlStackTraceElement.Class;TYPE	Class* = OBJECT (Object)		VAR			stackTrace: RefArray;					PROCEDURE init();   (* <init>()V *)		BEGIN	(* DON'T IMPLEMENT THIS METHOD *)		END init;		PROCEDURE getStackTrace(p0: Throwable): RefArray;   (* getStackTrace(Ljava/lang/Throwable;)[Ljava/lang/StackTraceElement; *)			CONST mask = {17..31};			VAR ra: RefArray; ste: StackTraceElement; name: ARRAY 64 OF CHAR;				pc: ARRAY 32 OF LONGINT;				i, count, eip, ebp: LONGINT; base: SET;		BEGIN	(* DON'T IMPLEMENT THIS METHOD *)(*			AosOut.Memory(p0.stackstart, 1024);*)			AosOut.String("getStackTrace ");			AosOut.Int(count, 5);			AosOut.Hex(p0.stackstart, 10);			AosOut.Hex(p0.pc, 10); AosOut.Ln;						ebp := p0.stackstart;			base := SYSTEM.VAL(SET, ebp) * mask;	(* stack base *)			pc[0] := p0.pc;			count := 1;			REPEAT				AosOut.String("getStackTrace "); AosOut.Int(count, 5); AosOut.Hex(ebp, 10);				SYSTEM.GET(ebp+4, eip);	(* pop stack frame *)				SYSTEM.GET(ebp, ebp);				pc[count] := eip;				AosOut.Hex(eip, 10); AosOut.Ln;				INC(count);			UNTIL (count = LEN(pc)) OR (base # SYSTEM.VAL(SET, ebp) * mask);						AosOut.String("getStackTrace "); AosOut.Int(count, 5); AosOut.Hex(ebp, 10); AosOut.Ln;						NEW(ra); NEW(ra.p, count);			FOR i := 0 TO count-1 DO				NEW(ste);				PCDebug.GetProcedure(pc[i], name);				ste.className := jjlString.MakeLiteral1(name);				ra.p[i] := ste			END;			RETURN ra		END getStackTrace;	END Class;	PROCEDURE fillInStackTrace(p0: Throwable): Class;   (* fillInStackTrace(Ljava/lang/Throwable;)Ljava/lang/VMThrowable; *)		VAR c: Class;	BEGIN	(* DON'T IMPLEMENT THIS METHOD *)		NEW(c);		RETURN c	END fillInStackTrace;END jjlVMThrowable.(*	09.03.03	prk	create exception trace*)