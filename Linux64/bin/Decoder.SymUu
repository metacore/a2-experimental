MODULE Decoder;
	IMPORT SYSTEM, Modules, Streams, MemoryReader, Strings, Files, KernelLog, TextUtilities, Commands, WMGraphics, WMEditors, WMTextView, WMComponents, WMStandardComponents, WMDialogs, WMRestorable, WMTrees, WMMessages, WM := WMWindowManager, D := Debugging, Reflection;
CONST 
	maxDecoders = 16; 
	MaxOpcodeSize = 20; 
	RepresentationModePlain = 0; 
	RepresentationModeMeta = 1; 
	OFFHdrRef = 8CX; 
	OFFHdrBodyRef = 0F8X; 
	OFFHdrProcRef = 0F9X; 
	VarModeDirect = 1; 
	VarModeIndirect = 3; 
	VarRecord = 0; 
	VarArray = 1; 
	VarType = 2; 
	AddressSize = SIZEOF(ADDRESS); 
TYPE 
	Opcode* = OBJECT 
	VAR 
		instr*: SIGNED32; 
		offset*: ADDRESS; 
		code*: Modules.Bytes; 
		length-: SIZE; 
		decoder*: Decoder; 
		next*: Opcode; 
		stream: Streams.Writer; 
		proc-: ProcedureInfo; 

		PROCEDURE ^  & New*(proc: ProcedureInfo; stream: Streams.Writer); 
		PROCEDURE ^ PrintOpcodeBytes*(w: Streams.Writer); 
		PROCEDURE ^ PrintInstruction*(w: Streams.Writer); 
		PROCEDURE ^ PrintArguments*(w: Streams.Writer); 
		PROCEDURE ^ PrintVariables*(w: Streams.Writer); 
		PROCEDURE ^ ToString*(): Strings.String; 
		PROCEDURE ^ WriteHex8*(x: SIGNED32; w: Streams.Writer); 
		PROCEDURE ^ WriteHex16*(x: SIGNED32; w: Streams.Writer); 
		PROCEDURE ^ WriteHex32*(x: SIGNED32; w: Streams.Writer); 
	END Opcode; 

	Decoder* = OBJECT {EXCLUSIVE} 
	VAR 
		codeBuffer: Modules.Bytes; 
		reader: Streams.Reader; 
		outputStreamWriter*: Streams.Writer; 
		firstOpcode, lastOpcode, currentOpcode: Opcode; 
		completed: BOOLEAN; 
		currentBufferPos, currentCodePos, opcodes: SIZE; 
		mode: SIGNED32; 
		currentProc*: ProcedureInfo; 

		PROCEDURE ^  & New*(reader: Streams.Reader); 
		PROCEDURE ^ Bug*(op, no: SIGNED32); 
		PROCEDURE ^ NewOpcode*(): Opcode; 
		PROCEDURE ^ DecodeThis*(opcode: Opcode); 
		PROCEDURE ^ Decode*(proc: ProcedureInfo): Opcode; 
		PROCEDURE ^ CopyBufferToOpcode(opcode: Opcode); 
		PROCEDURE ^ InsertBytesAtBufferHead*(bytes: Modules.Bytes); 
		PROCEDURE ^ ReadChar*(): CHAR; 
		PROCEDURE ^ ReadInt*(): SIGNED16; 
		PROCEDURE ^ ReadLInt*(): SIGNED32; 
	END Decoder; 

	DecoderFactory = PROCEDURE {DELEGATE}(reader: Streams.Reader):Decoder; 

	Info = OBJECT 
	VAR 
		name-: ARRAY 256 OF CHAR; 
	END Info; 

	FieldInfo* = OBJECT (Info)
	TYPE 
		; 
	VAR 
		offset, mode, kind, type, dim, tdadr: SIGNED32; 
		markerPositions, temp: POINTER TO ARRAY OF RECORD 
			pos: Streams.Position; 
			marker: WMTextView.PositionMarker; 
		END; 
		nextMarker, markerSize: SIGNED32; 
		markersCreated: BOOLEAN; 
		procedure: ProcedureInfo; 

		PROCEDURE ^ WriteType(w: Streams.Writer); 
		PROCEDURE ^ ToString(w: Streams.Writer); 
		PROCEDURE ^ AddMarkerPosition*(pos: Streams.Position); 
		PROCEDURE ^ CreateMarkers(tv: WMTextView.TextView); 
		PROCEDURE ^ ToggleMarkers(enabled: BOOLEAN); 
	END FieldInfo; 

	FieldArray = POINTER TO ARRAY OF FieldInfo; 

	ProcedureInfo* = OBJECT (Info)
	VAR 
		codeOffset: ADDRESS; 
		codeSize: SIZE; 
		retType: SIGNED32; 
		index: SIZE; 
		fields: FieldArray; 
		fieldCount: SIGNED32; 
		method: BOOLEAN; 
		gcInfo: GCInfo; 

		PROCEDURE ^  & New(CONST n: ARRAY OF CHAR; ofs: ADDRESS; idx: SIZE); 
		PROCEDURE ^ AddField(fldInfo: FieldInfo); 
		PROCEDURE ^ GetFieldAtOffset*(offset: SIGNED32): FieldInfo; 
	END ProcedureInfo; 

	ProcedureArray = POINTER TO ARRAY OF ProcedureInfo; 

	TypeInfo* = OBJECT (Info)
	VAR 
		procedures: ProcedureArray; 
		fields: FieldArray; 
		procedureCount, fieldCount: SIGNED32; 

		PROCEDURE ^  & New(CONST n: ARRAY OF CHAR); 
		PROCEDURE ^ AddProcedure(procInfo: ProcedureInfo); 
	END TypeInfo; 

	TypeArray = POINTER TO ARRAY OF TypeInfo; 

	Export* = POINTER TO RECORD 
		next: Export; 
		fp: SIGNED32; 
		type: SIGNED32; 
		val: SIGNED32; 
		name: ARRAY 256 OF CHAR; 
	END; 

	Use = POINTER TO RECORD 
		next: Use; 
		fp: SIGNED32; 
		type: SIGNED32; 
		val: SIGNED32; 
		name: ARRAY 256 OF CHAR; 
	END; 

	Import = OBJECT 
	VAR 
		next: Import; 
		name: ARRAY 256 OF CHAR; 
		uses: Use; 

		PROCEDURE ^ AddUse(u: Use); 
	END Import; 

	VarConstLink = RECORD 
		num: SIZE; 
		ch: CHAR; 
		links: POINTER TO ARRAY OF SIGNED32; 
	END; 

	Link = RECORD 
		num: SIGNED32; 
	END; 

	Entry = RECORD 
		num: SIGNED32; 
	END; 

	GCInfo = POINTER TO RECORD 
		codeOffset, beginOffset, endOffset: SIGNED32; 
		pointers: POINTER TO ARRAY OF SIGNED32; 
	END; 

	ObjHeader = RECORD 
		entries, commands, pointers, types, modules, links, dataLinks: SIZE; 
		codeSize, dataSize, refSize, constSize, exTableLen, procs, maxPtrs: SIZE; 
		crc: SIGNED32; 
		staticTdSize: SIZE; 
		name: Modules.Name; 
	END; 

	ModuleInfo* = OBJECT (Info)
	VAR 
		module: Modules.Module; 
		header: ObjHeader; 
		representationMode: SIGNED32; 
		procedures: ProcedureArray; 
		procedureCount: SIZE; 
		types: TypeArray; 
		typeCount: SIZE; 
		treeView: WMTrees.TreeView; 
		tree: WMTrees.Tree; 
		treePanel, lastDAssPanel: WMStandardComponents.Panel; 
		resizerH: WMStandardComponents.Resizer; 
		editor: WMEditors.Editor; 
		textWriter: TextUtilities.TextWriter; 
		currentProcInfo: ProcedureInfo; 
		markPC: SIGNED32; 
		ext: Extension; 
		codeScaleCallback: CodeScaleCallback; 
		exports: Export; 
		imports: Import; 
		varConstLinks: POINTER TO ARRAY OF VarConstLink; 
		links: POINTER TO ARRAY OF Link; 
		entries: POINTER TO ARRAY OF Entry; 
		gcInfo: POINTER TO ARRAY OF GCInfo; 

		PROCEDURE ^ AddExport(e: Export); 
		PROCEDURE ^ AddImport(i: Import); 
		PROCEDURE ^ IsExceptionHandled(pc: ADDRESS): BOOLEAN; 
		PROCEDURE ^ GetOpcodes(proc: ProcedureInfo): Opcode; 
		PROCEDURE ^ AddProcedure(procInfo: ProcedureInfo); 
		PROCEDURE ^ FindEntryByOffset(ofs: ADDRESS): SIZE; 
		PROCEDURE ^ GetProcedureByIndex(idx: SIZE): ProcedureInfo; 
		PROCEDURE ^ DecodeRefs(reader: Streams.Reader); 
		PROCEDURE ^ DecodeTypes; 
		PROCEDURE ^ DecodeField(reader: Streams.Reader): FieldInfo; 
		PROCEDURE ^ FindProcedureFromPC(pc: SIGNED32): ProcedureInfo; 
		PROCEDURE ^ Init; 
		PROCEDURE ^ ClickNode(sender, data: ANY); 
		PROCEDURE ^ OutlineNamedProcedure(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ OutlinePC(pc: SIGNED32); 
		PROCEDURE ^ InitializeOutline(panel: WMStandardComponents.Panel): Streams.Writer; 
		PROCEDURE ^ OutlineProcedure(proc: ProcedureInfo; panel: WMStandardComponents.Panel); 
		PROCEDURE ^ OutlineType(typeInfo: TypeInfo; panel: WMStandardComponents.Panel); 
		PROCEDURE ^ OutlineModule(moduleInfo: ModuleInfo; panel: WMStandardComponents.Panel); 
		PROCEDURE ^ Outline(panel: WMStandardComponents.Panel); 
		PROCEDURE ^ Discard(panel: WMStandardComponents.Panel); 
	END ModuleInfo; 

	ModuleInfoBytes = OBJECT (ModuleInfo)

		PROCEDURE ^  & New(bytes: Modules.Bytes); 
		PROCEDURE ^ Outline(panel: WMStandardComponents.Panel); 
	END ModuleInfoBytes; 

	CodeScaleCallback* = PROCEDURE (VAR size: SIZE); 

	ModuleInfoObjectFile = OBJECT (ModuleInfo)
	VAR 
		f: Files.File; 
		r: Files.Reader; 
		version: SIGNED32; 
		nofLinks, nofVarConstLinks: SIZE; 
		symSize: SIGNED32; 
		noProcs: SIGNED32; 

		PROCEDURE ^ DecodeEntries; 
		PROCEDURE ^ SkipCommands; 
		PROCEDURE ^ SkipPointers; 
		PROCEDURE ^ SkipImports; 
		PROCEDURE ^ SkipVarConstLinks; 
		PROCEDURE ^ SkipLinks; 
		PROCEDURE ^ SkipConsts; 
		PROCEDURE ^ SkipExports; 
		PROCEDURE ^ SkipUse; 
		PROCEDURE ^ DecodeTypes; 
		PROCEDURE ^ DecodeExTable(r: Streams.Reader); 
		PROCEDURE ^ SkipPointerInProc; 
		PROCEDURE ^  & New(CONST fileName: ARRAY OF CHAR); 
	END ModuleInfoObjectFile; 

	ModuleInfoMemory = OBJECT (ModuleInfo)
	VAR 
		reader: MemoryReader.Reader; 

		PROCEDURE ^  & New(module: Modules.Module; header: ObjHeader); 
		PROCEDURE ^ DecodeThis(module: Modules.Module); 
		PROCEDURE ^ DecodeTypes; 
	END ModuleInfoMemory; 

	KillerMsg = OBJECT 
	END KillerMsg; 

	DecoderWindow = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		panel: WMStandardComponents.Panel; 
		toolbar: WMStandardComponents.Panel; 
		decodeFile, decodeModule, decodeBytes: WMStandardComponents.Button; 
		stopped: BOOLEAN; 
		moduleInfo: ModuleInfo; 

		PROCEDURE ^ CreateForm(): WMComponents.VisualComponent; 
		PROCEDURE ^  & New(CONST fileName: ARRAY OF CHAR; c: WMRestorable.Context); 
		PROCEDURE ^ AdjustTitle(CONST str: ARRAY OF CHAR); 
		PROCEDURE ^ DecodeFileHandler(sender, data: ANY); 
		PROCEDURE ^ DecodeModuleHandler(sender, data: ANY); 
		PROCEDURE ^ DecodeBytesHandler(sender, data: ANY); 
		PROCEDURE ^ Handle*(VAR x: WMMessages.Message); 
		PROCEDURE ^ OutlineProcedure(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ OutlinePC(pc: SIGNED32); 
		PROCEDURE ^ Close*; 
	END DecoderWindow; 

	Extension = ARRAY 10 OF CHAR; 

	DecoderType = OBJECT 
	VAR 
		ext: Extension; 
		decoderFactory: DecoderFactory; 
		codeScaleCallback: CodeScaleCallback; 

		PROCEDURE ^  & New(CONST ext: Extension; decoderFactory: DecoderFactory; codeScaleCallback: CodeScaleCallback); 
	END DecoderType; 
VAR 
	nofWindows: SIGNED32; 
	win: DecoderWindow; 
	decoderTypes: ARRAY maxDecoders OF DecoderType; 
	nofDecoders: SIGNED32; 
	lastExt: Extension; 

	PROCEDURE ^ OpenEmpty*; 
	PROCEDURE ^ MakeHeader(module: Modules.Module; VAR header: ObjHeader); 
	PROCEDURE ^ RemoveTypeName(VAR procName: ARRAY OF CHAR; CONST typeName: ARRAY OF CHAR); 
	PROCEDURE ^ HexBytes2Code(CONST bytes: ARRAY OF CHAR): Modules.Bytes; 
	PROCEDURE ^ IncCount; 
	PROCEDURE ^ DecCount; 
	PROCEDURE ^ Cleanup; 
	PROCEDURE ^ Open*(context: Commands.Context); 
	PROCEDURE ^ OpenProcedure*(CONST moduleName, procedureName: ARRAY OF CHAR); 
	PROCEDURE ^ OpenPC*(CONST moduleName: ARRAY OF CHAR; pc: SIGNED32); 
	PROCEDURE ^ GetDecoderType(CONST ext: Extension): DecoderType; 
	PROCEDURE ^ GetDecoder(CONST ext: Extension; reader: Streams.Reader): Decoder; 
	PROCEDURE ^ RegisterDecoder*(CONST ext: Extension; decFactory: DecoderFactory; csclCallback: CodeScaleCallback); 
	PROCEDURE ^ GetCodeScaleCallback(CONST ext: Extension): CodeScaleCallback; 
	PROCEDURE ^ Initialize(CONST decoder: ARRAY OF CHAR); 
BEGIN
END Decoder.
