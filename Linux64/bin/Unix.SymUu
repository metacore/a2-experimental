MODULE Unix;
	IMPORT S := SYSTEM, Glue, Trace;
CONST 
	Version* = \"Linux"\; 
	libcname* = \"libc.so.6"\; 
	libX11name* = \"libX11.so.6"\; 
	libpthreadname = \"libpthread.so.0"\; 
	LittleEndian* = TRUE; 
	LsbIs0* = TRUE; 
	PageSize* = 4096; 
	AlternateStackSize = (32 * 4096); 
	stdin* = 0; 
	stdout* = 1; 
	stderr* = 2; 
	EPERM* = 1; 
	ENOENT* = 2; 
	ESRCH* = 3; 
	EINTR* = 4; 
	EIO* = 5; 
	ENXIO* = 6; 
	E2BIG* = 7; 
	ENOEXEC* = 8; 
	EBADF* = 9; 
	ECHILD* = 10; 
	EAGAIN* = 11; 
	ENOMEM* = 12; 
	EACCES* = 13; 
	EFAULT* = 14; 
	ENOTBLK* = 15; 
	EBUSY* = 16; 
	EEXIST* = 17; 
	EXDEV* = 18; 
	ENODEV* = 19; 
	ENOTDIR* = 20; 
	EISDIR* = 21; 
	EINVAL* = 22; 
	ENFILE* = 23; 
	EMFILE* = 24; 
	ENOTTY* = 25; 
	ETXTBSY* = 26; 
	EFBIG* = 27; 
	ENOSPC* = 28; 
	ESPIPE* = 29; 
	EROFS* = 30; 
	EMLINK* = 31; 
	EPIPE* = 32; 
	EDOM* = 33; 
	ERANGE* = 34; 
	ENOMSG* = 42; 
	EIDRM* = 43; 
	ECHRNG* = 44; 
	EL2NSYNC* = 45; 
	EL3HLT* = 46; 
	EL3RST* = 47; 
	ELNRNG* = 48; 
	EUNATCH* = 49; 
	ENOCSI* = 50; 
	EL2HLT* = 51; 
	EDEADLK* = 35; 
	ENOLCK* = 37; 
	rdonly* = SET32({}); 
	rdwr* = SET32({1}); 
	creat* = SET32({6}); 
	trunc* = SET32({9}); 
	rwrwr* = 436; 
	rwxrwxrwx* = 511; 
	F_OK* = {}; 
	X_Ok* = {0}; 
	W_OK* = {1}; 
	R_OK* = {2}; 
	SCHED_OTHER = 0; 
	T_SIGRESUME = SIGUSR1; 
	T_SIGSUSPEND = SIGUSR2; 
	SIGHUP* = 1; 
	SIGINT* = 2; 
	SIGQUIT* = 3; 
	SIGILL* = 4; 
	SIGTRAP* = 5; 
	SIGABRT* = 6; 
	SIGIOT* = 6; 
	SIGBUS* = 7; 
	SIGFPE* = 8; 
	SIGKILL* = 9; 
	SIGUSR1* = 10; 
	SIGSEGV* = 11; 
	SIGUSR2* = 12; 
	SIGPIPE* = 13; 
	SIGALRM* = 14; 
	SIGTERM* = 15; 
	SIGSTKFLT* = 16; 
	SIGCHLD* = 17; 
	SIGCONT* = 18; 
	SIGSTOP* = 19; 
	SIGTSTP* = 20; 
	SIGTTIN* = 21; 
	SIGTTOU* = 22; 
	SIGURG* = 23; 
	SIGXCPU* = 24; 
	SIGXFSZ* = 25; 
	SIGVTALRM* = 26; 
	SIGPROF* = 27; 
	SIGWINCH* = 28; 
	SIGIO* = 29; 
	SIGPOLL* = SIGIO; 
	SIGPWR* = 30; 
	SIGSYS* = 31; 
	SIGUNUSED = 31; 
	SIG_BLOCK = 0; 
	SIG_UNBLOCK = 1; 
	SIG_SETMASK = 2; 
	SA_NOCLDSTOP = 1; 
	SA_SIGINFO = 4; 
	SA_ONSTACK = 134217728; 
	SA_RESTART = 268435456; 
	SA_NODEFER = 1073741824; 
	SA_RESETHAND = 2147483648; 
	CLOCK_MONOTONIC* = 1; 
	CLOCK_MONOTONIC_RAW* = 4; 
	CLOCK_PROCESS_CPUTIME_ID* = 2; 
	CLOCK_REALTIME* = 0; 
	CLOCK_THREAD_CPUTIME_ID* = 3; 
	PTHREAD_CANCEL_ENABLE = 0; 
	PTHREAD_CANCEL_DISABLE = 1; 
	PTHREAD_CANCEL_ASYNCHRONOUS = 0; 
	PTHREAD_CANCEL_DEFERRED = 1; 
	PTHREAD_BARRIER_SERIAL_THREAD* =  -1; 
	CPUSetSize* = 128; 
	ThreadLow* = 1; 
	ThreadNormal* = 20; 
	ThreadHigh* = 99; 
	NumPriorities* = 99; 
	AFINET* = 2; 
	AFINET6* = 26; 
	PFINET* = AFINET; 
	PFINET6* = AFINET6; 
	SockStream* = 1; 
	SockDGram* = 2; 
	IpProtoUDP* = 17; 
	IpProtoTCP* = 6; 
	SoLSocket* = 1; 
	SoLinger* = 13; 
	SoKeepAlive* = 9; 
	SoNoDelay* = 1; 
	FioNRead* = 21531; 
	MsgPeek* = 2; 
	MsgDontWait* = 64; 
	ShutRDWR* = 2; 
	SockAddrSizeV4* = 16; 
	SockAddrSizeV6* = 28; 
	FIONREAD* = 21531; 
	TIOCMGET* = 21525; 
	TIOCMBIS* = 21526; 
	TIOCMBIC* = 21527; 
	TIOCMSET* = 21528; 
	B0* = 0; 
	B50* = 1; 
	B75* = 2; 
	B110* = 3; 
	B134* = 4; 
	B150* = 5; 
	B200* = 6; 
	B300* = 7; 
	B600* = 8; 
	B1200* = 9; 
	B1800* = 10; 
	B2400* = 11; 
	B4800* = 12; 
	B9600* = 13; 
	B19200* = 14; 
	B38400* = 15; 
	B57600* = 4097; 
	B115200* = 4098; 
	B230400* = 4099; 
	CSIZE* = {4, 5}; 
	CS5* = {}; 
	CS6* = {4}; 
	CS7* = {5}; 
	CS8* = {4, 5}; 
	CSTOPB* = {6}; 
	CREAD* = {7}; 
	PARENB* = {8}; 
	PARODD* = {9}; 
	HUPCL* = {10}; 
	CLOCAL* = {11}; 
	FdSetLen* = 32; 
TYPE 
	Thread_t* = ADDRESS; 

	Mutex_t* = ADDRESS; 

	Condition_t* = ADDRESS; 

	MutexType = ARRAY 10 OF INTEGER; 

	MutexAttributeType = ARRAY 1 OF INTEGER; 

	ConditionType = ARRAY 12 OF INTEGER; 

	Key_t* = ADDRESS; 

	Sigset_t = ARRAY 32 OF INTEGER; 

	SignalTrap = PROCEDURE (sig: SIGNED32; mc: Mcontext); 

	path_t* = ARRAY OF CHAR; 

	arg_t* = ARRAY OF CHAR; 

	argv_t* = ARRAY OF arg_t; 

	Sem* = RECORD 
		reserved1-: ARRAY 4 OF ADDRESS; 
	END; 

	Barrier* = RECORD 
		reserved1-: ARRAY 3 OF ADDRESS; 
		reserved2-: ARRAY 2 OF INTEGER; 
	END; 

	CPUSet* = ARRAY (CPUSetSize DIV ((MAX(SET) - MIN(SET)) + 1)) OF SET; 

	Termios* = RECORD 
		iflags*, oflags*, cflags*, lflags*: SET32; 
		line*: CHAR; 
		cc*: ARRAY 32 OF CHAR; 
		ispeed-, ospeed-: SIGNED32; 
	END; 

	dev_t* = SIGNED64; 

	ino_t* = LONGINTEGER; 

	nlink_t* = LONGINTEGER; 

	mode_t* = INTEGER; 

	off_t* = LONGINTEGER; 

	blksize_t* = LONGINTEGER; 

	blkcnt_t* = LONGINTEGER; 

	uid_t* = SIGNED32; 

	gid_t* = SIGNED32; 

	pid_t* = SIGNED32; 

	Status* = RECORD 
		dev-: dev_t; 
		ino-: ino_t; 
		nlink-: nlink_t; 
		mode-: mode_t; 
		uid-: INTEGER; 
		gid-: INTEGER; 
		pad1: INTEGER; 
		rdev-: dev_t; 
		size-: SIZE; 
		blksize-: blksize_t; 
		blocks-: blkcnt_t; 
		atime-: Timeval; 
		mtime-: Timeval; 
		ctime-: Timeval; 
		reserved: ARRAY 3 OF LONGINTEGER; 
	END; 

	tvPtr* = POINTER {UNSAFE, UNTRACED} TO Timeval; 

	Timeval* = RECORD 
		sec*: LONGINTEGER; 
		usec*: LONGINTEGER; 
	END; 

	TmPtr* = POINTER {UNSAFE, UNTRACED} TO Tm; 

	Tm* = RECORD 
		sec*, min*, hour*, mday*, mon*, year*, wday*, yday*, isdst*: SIGNED32; 
		gmtoff*, tmzone*: SIGNED32; 
	END; 

	Tms* = POINTER TO RECORD 
		utime*, stime*, cutime*, cstime*: SIGNED32; 
	END; 

	Timezone* = RECORD 
		minuteswest*, dsttime*: SIGNED32; 
	END; 

	Itimerval* = RECORD 
		interval*, value*: Timeval; 
	END; 

	Timespec* = RECORD 
		tv_sec*: LONGINTEGER; 
		tv_nsec*: LONGINTEGER; 
	END; 

	FdSet* = ARRAY FdSetLen OF SET32; 

	Dirent* = POINTER {UNSAFE, UNTRACED} TO RECORD 
		ino-: ino_t; 
		off-: off_t; 
		reclen-: SIGNED16; 
		typ-: CHAR; 
		name-: CHAR; 
	END; 

	Stack* = RECORD 
		sp*: ADDRESS; 
		flags*: SET; 
		size*: SIZE; 
	END; 

	Ucontext* = POINTER {UNSAFE, UNTRACED} TO UcontextDesc; 

	UcontextDesc* = RECORD 
		flags-: SET; 
		link-: ADDRESS; 
		stack-: Stack; 
		mc-: McontextDesc; 
	END; 

	Mcontext* = POINTER {UNSAFE, UNTRACED} TO McontextDesc; 

	McontextDesc* = RECORD 
		r_8-: SIGNED64; 
		r_9-: SIGNED64; 
		r_10-: SIGNED64; 
		r_11-: SIGNED64; 
		r_12-: SIGNED64; 
		r_13-: SIGNED64; 
		r_14-: SIGNED64; 
		r_15-: SIGNED64; 
		r_di-: SIGNED64; 
		r_si-: SIGNED64; 
		r_bp-: ADDRESS; 
		r_bx-: SIGNED64; 
		r_dx-: SIGNED64; 
		r_ax-: SIGNED64; 
		r_cx-: SIGNED64; 
		r_sp-: ADDRESS; 
		r_pc-: ADDRESS; 
		r_efl: SIGNED64; 
		r_csgsfs: SIGNED64; 
		err-: SIGNED64; 
		trapno-: SIGNED64; 
		oldmask: SIGNED64; 
		cr2: SIGNED64; 
	END; 

	PThreadAttr = RECORD 
		reserved1-: ARRAY 5 OF ADDRESS; 
		reserved2-: ARRAY 4 OF INTEGER; 
	END; 

	Sigaction = RECORD 
		sa_handler: ADDRESS; 
		sa_mask: Sigset_t; 
		sa_flags: ADDRESS; 
		filler: ADDRESS; 
	END; 

	Sched_param = RECORD 
		sched_priority: SIGNED32; 
		safety: ARRAY 8 OF ADDRESS; 
	END; 

	OberonXErrorHandler* = PROCEDURE (disp, err: ADDRESS):SIGNED32; 

	OberonXIOErrorHandler* = PROCEDURE (disp: ADDRESS):SIGNED32; 

	; 
VAR 
	suspend_mutex: MutexType; 
	mainthread: Thread_t; 
	suspend_done: SIGNED32; 
	resume_done: SIGNED32; 
	sasuspend, saresume: Sigaction; 
	thread_exit: Key_t; 
	argc-: SIGNED32; 
	argv-: ADDRESS; 
	environ-: ADDRESS; 
	sysinfo-: RECORD 
		sysname-, nodename-, release-, version-, machine-: ARRAY 65 OF CHAR; 
	END; 
	sysconf: PROCEDURE {C}(name: INTEGER):LONGINTEGER; 
	pthread_mutex_init: PROCEDURE {C}(mutex: ADDRESS; mutexattr: ADDRESS):INTEGER; 
	pthread_mutex_destroy: PROCEDURE {C}(mutex: ADDRESS):INTEGER; 
	pthread_mutex_lock: PROCEDURE {C}(mutex: ADDRESS):INTEGER; 
	pthread_mutex_unlock: PROCEDURE {C}(mutex: ADDRESS):INTEGER; 
	pthread_mutexattr_init: PROCEDURE {C}(mutexattr: ADDRESS):INTEGER; 
	pthread_mutexattr_settype: PROCEDURE {C}(mutexattr: ADDRESS; type: INTEGER):INTEGER; 
	pthread_cond_init: PROCEDURE {C}(cond: ADDRESS; condAttr: ADDRESS):INTEGER; 
	pthread_cond_destroy: PROCEDURE {C}(cond: ADDRESS):INTEGER; 
	pthread_cond_wait: PROCEDURE {C}(cond: ADDRESS; mutex: ADDRESS):INTEGER; 
	pthread_cond_signal: PROCEDURE {C}(cond: ADDRESS):INTEGER; 
	pthread_create-: PROCEDURE {C}(newthread: ADDRESS; attr: ADDRESS; start_routine: ADDRESS; arg: PROCEDURE ):INTEGER; 
	pthread_detach: PROCEDURE {C}(thr: ADDRESS); 
	pthread_kill: PROCEDURE {C}(thr: ADDRESS; sigid: INTEGER):INTEGER; 
	pthread_cancel: PROCEDURE {C}(thr: ADDRESS); 
	pthread_join-: PROCEDURE {C}(thread: Thread_t; return: ADDRESS):INTEGER; 
	pthread_key_create: PROCEDURE {C}(key: ADDRESS; destructor: PROCEDURE {C}(param: ADDRESS)):INTEGER; 
	pthread_setspecific: PROCEDURE {C}(key: Key_t; value: ADDRESS):INTEGER; 
	pthread_getspecific: PROCEDURE {C}(key: Key_t):ADDRESS; 
	pthread_attr_init: PROCEDURE {C}(attr: ADDRESS); 
	pthread_attr_destroy: PROCEDURE {C}(attr: ADDRESS); 
	pthread_attr_setscope: PROCEDURE {C}(attr: ADDRESS; set: INTEGER); 
	pthread_attr_setdetachstate: PROCEDURE {C}(attr: ADDRESS; set: INTEGER); 
	pthread_attr_setstacksize: PROCEDURE {C}(attr: ADDRESS; stackSize: SIZE); 
	pthread_attr_getstacksize: PROCEDURE {C}(attr: ADDRESS; stackSize: ADDRESS); 
	pthread_getattr_np: PROCEDURE {C}(thr: ADDRESS; attr: ADDRESS); 
	pthread_self-: PROCEDURE {C}():Thread_t; 
	sched_get_priority_max: PROCEDURE {C}(policy: INTEGER):INTEGER; 
	sched_get_priority_min: PROCEDURE {C}(policy: INTEGER):INTEGER; 
	pthread_setschedparam: PROCEDURE {C}(thread: Thread_t; policy: INTEGER; param: ADDRESS):INTEGER; 
	pthread_getschedparam: PROCEDURE {C}(thread: Thread_t; policy: ADDRESS; param: ADDRESS):INTEGER; 
	pthread_setcancelstate: PROCEDURE {C}(state: INTEGER; oldstate: ADDRESS):INTEGER; 
	pthread_setcanceltype: PROCEDURE {C}(type: INTEGER; oldtype: ADDRESS):INTEGER; 
	sigaction: PROCEDURE {C}(signum: INTEGER; CONST act, oldact: ADDRESS):INTEGER; 
	sigemptyset: PROCEDURE {C}(set: ADDRESS); 
	sigfillset: PROCEDURE {C}(set: ADDRESS):SIGNED32; 
	sigsuspend: PROCEDURE {C}(set: ADDRESS):SIGNED32; 
	sigaddset: PROCEDURE {C}(set: ADDRESS; signo: SIGNED32); 
	sigdelset: PROCEDURE {C}(set: ADDRESS; signo: SIGNED32); 
	nanosleep-: PROCEDURE {C}(req, rem: ADDRESS):SIGNED32; 
	sigaltstack: PROCEDURE {C}(ss, oss: ADDRESS):SIGNED32; 
	pthread_sigmask: PROCEDURE {C}(how: SIGNED32; set: ADDRESS; oldset: ADDRESS):SIGNED32; 
	sem_init-: PROCEDURE {C}(sem: ADDRESS; pshared: INTEGER; value: INTEGER):INTEGER; 
	sem_wait-: PROCEDURE {C}(sem: ADDRESS):INTEGER; 
	sem_post-: PROCEDURE {C}(sem: ADDRESS):INTEGER; 
	sem_destroy-: PROCEDURE {C}(sem: ADDRESS):INTEGER; 
	pthread_barrier_init-: PROCEDURE {C}(barrier: ADDRESS; attr: ADDRESS; count: INTEGER):INTEGER; 
	pthread_barrier_wait-: PROCEDURE {C}(barrier: ADDRESS):INTEGER; 
	pthread_barrier_destroy-: PROCEDURE {C}(barrier: ADDRESS):INTEGER; 
	pthread_getaffinity_np-: PROCEDURE {C}(thread: Thread_t; cpusetsize: SIZE; cpuset: ADDRESS):INTEGER; 
	pthread_setaffinity_np-: PROCEDURE {C}(thread: Thread_t; cpusetsize: SIZE; cpuset: ADDRESS):INTEGER; 
	posix_spawnp-: PROCEDURE {C}(pid: ADDRESS; path: ADDRESS; file_actions: ADDRESS; attrp: ADDRESS; argv: ADDRESS; envp: ADDRESS):SIGNED32; 
	posix_spawn-: PROCEDURE {C}(pid: ADDRESS; path: ADDRESS; file_actions: ADDRESS; attrp: ADDRESS; argv: ADDRESS; envp: ADDRESS):SIGNED32; 
	waitpid-: PROCEDURE {C}(pid: pid_t; status: ADDRESS; options: SIGNED32):pid_t; 
	pipe-: PROCEDURE {C}(pipefd: ADDRESS):SIGNED32; 
	dup2-: PROCEDURE {C}(oldfd, newfd: SIGNED32):SIGNED32; 
	dup-: PROCEDURE {C}(oldfd: SIGNED32):SIGNED32; 
	read-: PROCEDURE {C}(fd: SIGNED32; buf: ADDRESS; n: SIZE):SIZE; 
	write-: PROCEDURE {C}(fd: SIGNED32; buf: ADDRESS; n: SIZE):SIZE; 
	open-: PROCEDURE {C}(name: ADDRESS; flags: SET32; mode: mode_t):SIGNED32; 
	close-: PROCEDURE {C}(fd: SIGNED32):SIGNED32; 
	lseek-: PROCEDURE {C}(fd: SIGNED32; offset: off_t; origin: SIGNED32):off_t; 
	fsync-: PROCEDURE {C}(fd: SIGNED32):SIGNED32; 
	ioctl-: PROCEDURE {C}(fd: SIGNED32; request: SIGNED32; arg: ADDRESS):SIGNED32; 
	unlink-: PROCEDURE {C}(name: ADDRESS):SIGNED32; 
	rename-: PROCEDURE {C}(oldname, newname: ADDRESS):SIGNED32; 
	ftruncate-: PROCEDURE {C}(fd: SIGNED32; length: SIZE):SIGNED32; 
	chmod-: PROCEDURE {C}(name: ADDRESS; mode: SET):SIGNED32; 
	utime-: PROCEDURE {C}(name: ADDRESS; tb: ADDRESS):SIGNED32; 
	access-: PROCEDURE {C}(name: ADDRESS; mode: SET):SIGNED32; 
	select-: PROCEDURE {C}(width: SIGNED32; rd, wr, ex: ADDRESS; VAR timeout: Timeval):SIGNED32; 
	realpath-: PROCEDURE {C}(file_name: ADDRESS; resolved_name: ADDRESS):ADDRESS; 
	chdir-: PROCEDURE {C}(name: ADDRESS):SIGNED32; 
	mkdir-: PROCEDURE {C}(name: ADDRESS; mode: mode_t):SIGNED32; 
	rmdir-: PROCEDURE {C}(path: ADDRESS):SIGNED32; 
	xstat-: PROCEDURE {C}(ver: SIGNED32; name: ADDRESS; VAR buf: Status):SIGNED32; 
	lxstat-: PROCEDURE {C}(ver: SIGNED32; name: ADDRESS; VAR buf: Status):SIGNED32; 
	fxstat-: PROCEDURE {C}(ver: SIGNED32; fd: SIGNED32; VAR buf: Status):SIGNED32; 
	getpid-: PROCEDURE {C}():SIGNED32; 
	getuid-: PROCEDURE {C}():SIGNED32; 
	posix_memalign-: PROCEDURE {C}(VAR p: ADDRESS; alignment, size: SIZE):SIGNED32; 
	malloc-: PROCEDURE {C}(size: SIZE):ADDRESS; 
	free-: PROCEDURE {C}(p: ADDRESS); 
	mprotect-: PROCEDURE {C}(p: ADDRESS; len: SIZE; prot: SIGNED32):SIGNED32; 
	alarm-: PROCEDURE {C}(ms: SIGNED32):SIGNED32; 
	setitimer-: PROCEDURE {C}(which: SIGNED32; VAR value, ovalue: Itimerval):SIGNED32; 
	getitimer-: PROCEDURE {C}(which: SIGNED32; VAR value: Itimerval):SIGNED32; 
	clock_gettime-: PROCEDURE {C}(clk_id: INTEGER; tp: ADDRESS):INTEGER; 
	clock_getres-: PROCEDURE {C}(clk_id: INTEGER; res: ADDRESS):INTEGER; 
	gettimeofday-: PROCEDURE {C}(VAR tv: Timeval; VAR tz: Timezone):SIGNED32; 
	mktime-: PROCEDURE {C}(VAR tm: Tm):SIGNED32; 
	localtime-: PROCEDURE {C}(CONST tv: Timeval):TmPtr; 
	time-: PROCEDURE {C}(VAR tv: Timeval):SIGNED32; 
	times-: PROCEDURE {C}(VAR tms: Tms):SIGNED32; 
	system-: PROCEDURE {C}(cmd: ADDRESS); 
	uname-: PROCEDURE {C}(utsname: ADDRESS):SIGNED32; 
	getcwd-: PROCEDURE {C}(buf: ADDRESS; len: SIZE):ADDRESS; 
	getenv-: PROCEDURE {C}(name: ADDRESS):ADDRESS; 
	opendir-: PROCEDURE {C}(name: ADDRESS):ADDRESS; 
	readdir-: PROCEDURE {C}(dir: ADDRESS):Dirent; 
	closedir-: PROCEDURE {C}(dir: ADDRESS); 
	sigsetjmp-: PROCEDURE {C}(env: ADDRESS; savemask: SIGNED32):SIGNED32; 
	siglongjmp-: PROCEDURE {C}(env: ADDRESS; val: SIGNED32); 
	kill-: PROCEDURE {C}(pid, sig: SIGNED32):SIGNED32; 
	exit-: PROCEDURE {C}(status: SIGNED32); 
	perror-: PROCEDURE {C}(msg: ADDRESS); 
	errno_location: PROCEDURE {C}():ADDRESS; 
	xSetErrorHandler: PROCEDURE {C}(h: ADDRESS):INTEGER; 
	xSetIOErrorHandler: PROCEDURE {C}(h: ADDRESS):INTEGER; 
	libc-: ADDRESS; 
	libp-: ADDRESS; 
	libx-: ADDRESS; 
	libraryPaths: ARRAY 8 OF ARRAY 32 OF CHAR; 
	noPaths: SIZE; 
	suspendHandler*: PROCEDURE (c: Ucontext); 
	trap: SignalTrap; 
	oberonXErrorHandler: OberonXErrorHandler; 
	oberonXIOErrorHandler: OberonXIOErrorHandler; 

	PROCEDURE ^ getnprocs*(): LONGINTEGER; 
	PROCEDURE ^ NewKey*(): Key_t; 
	PROCEDURE ^ ReadKey*(key: Key_t): ADDRESS; 
	PROCEDURE ^ WriteKey*(key: Key_t; value: ADDRESS); 
	PROCEDURE ^ NewMtx*(): Mutex_t; 
	PROCEDURE ^ NewRecursiveMtx*(): Mutex_t; 
	PROCEDURE ^ MtxDestroy*(mtx: Mutex_t); 
	PROCEDURE ^ MtxLock*(mtx: Mutex_t); 
	PROCEDURE ^ MtxUnlock*(mtx: Mutex_t); 
	PROCEDURE ^ NewCond*(): Condition_t; 
	PROCEDURE ^ CondDestroy*(con: Condition_t); 
	PROCEDURE ^ CondWait*(con: Condition_t; mtx: Mutex_t); 
	PROCEDURE ^ CondSignal*(cond: Condition_t); 
	PROCEDURE ^ ThrThis*(): Thread_t; 
	PROCEDURE ^ ThrYield*; 
	PROCEDURE ^ ThrExit*; 
	PROCEDURE ^ ThrSetPriority*(thr: Thread_t; prio: SIGNED32); 
	PROCEDURE ^ ThrGetPriority*(thr: Thread_t): SIGNED32; 
	PROCEDURE ^ {C} Starter(proc: PROCEDURE ): ADDRESS; 
	PROCEDURE ^ ThrStart*(p: PROCEDURE ; stackSize: SIZE): Thread_t; 
	PROCEDURE ^ ThrSleep*(ms: SIGNED32); 
	PROCEDURE ^ NanoSleep*(ns: LONGINTEGER); 
	PROCEDURE ^ ThrKill*(thr: Thread_t); 
	PROCEDURE ^ {C} resume_handler(sig: SIGNED32); 
	PROCEDURE ^ ThrResume*(thr: Thread_t); 
	PROCEDURE ^ {C} suspend_handler(sig: SIGNED32; scp: ADDRESS; ucp: ADDRESS); 
	PROCEDURE ^ ThrSuspend*(thr: Thread_t; saveContext: BOOLEAN); 
	PROCEDURE ^ ThrInitialize*(VAR low, high: SIGNED32): BOOLEAN; 
	PROCEDURE ^ CopyContext*(CONST from: McontextDesc; VAR to: McontextDesc); 
	PROCEDURE ^ ModifyContext*(cont: Mcontext; pc, bp, sp: ADDRESS); 
	PROCEDURE ^ Perror*(CONST msg: ARRAY OF CHAR); 
	PROCEDURE ^ Dlsym*(lib: ADDRESS; CONST sym: ARRAY OF CHAR; objAddr: ADDRESS); 
	PROCEDURE ^ Dlopen*(CONST libname: ARRAY OF CHAR; mode: SIGNED32): ADDRESS; 
	PROCEDURE ^ Dlclose*(lib: ADDRESS); 
	PROCEDURE ^ GetArg*(no: SIGNED32; VAR val: ARRAY OF CHAR); 
	PROCEDURE ^ GetArgval*(CONST argName: ARRAY OF CHAR; VAR val: ARRAY OF CHAR); 
	PROCEDURE ^ getSysinfo; 
	PROCEDURE ^ {C} SigHandler(sig: SIGNED32; scp: ADDRESS; ucp: Ucontext); 
	PROCEDURE ^ InstallTrap*(h: SignalTrap); 
	PROCEDURE ^ InstallHandler(sig: SIGNED32); 
	PROCEDURE ^ fstat*(fd: SIGNED32; VAR buf: Status): SIGNED32; 
	PROCEDURE ^ stat*(path: ADDRESS; VAR buf: Status): SIGNED32; 
	PROCEDURE ^ HandleSignal*(sig: SIGNED32); 
	PROCEDURE ^ errno*(): SIGNED32; 
	PROCEDURE ^ {C} X11ErrorHandler(d: ADDRESS; err: ADDRESS): INTEGER; 
	PROCEDURE ^ {C} X11IOErrorHandler(d: ADDRESS): INTEGER; 
	PROCEDURE ^ InitXErrorHandlers*(xErrorHandler: OberonXErrorHandler; xIOErrorHandler: OberonXIOErrorHandler); 
	PROCEDURE ^ Init; 
	PROCEDURE ^ LinkToX*; 
	PROCEDURE ^ Init0; 
BEGIN
END Unix.
