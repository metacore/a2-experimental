MODULE Objects;
	IMPORT SYSTEM, Trace, Glue, Unix, Machine, Heaps, Modules;
CONST 
	ConcurrentGC = TRUE; 
	LinuxHost = (Unix.Version = \"Linux"\); 
	PleaseHalt* = 10; 
	Unbreakable* = 11; 
	SelfTermination* = 12; 
	Preempted* = 27; 
	Resistant* = 28; 
	MinPriority* = Unix.ThreadLow; 
	Low* = (Unix.ThreadLow + 1); 
	Normal* = Unix.ThreadNormal; 
	High* = (Unix.ThreadHigh - 2); 
	GCPriority* = (Unix.ThreadHigh - 1); 
	Realtime* = Unix.ThreadHigh; 
	Restart* = 0; 
	Unknown* = 0; 
	Ready* = 1; 
	Running* = 2; 
	AwaitingLock* = 3; 
	AwaitingCond* = 4; 
	AwaitingEvent* = 5; 
	Terminated* = 6; 
	Second* = 1000; 
	DefaultStacksize = (128 * 1024); 
TYPE 
	LockT = POINTER TO RECORD 
		mtx, enter: ADDRESS; 
	END; 

	CpuCyclesArray* = ARRAY Machine.MaxCPU OF SIGNED64; 

	ProtectedObject = POINTER TO RECORD 
	END; 

	ObjectHeader = Heaps.ProtRecBlock; 

	ProcessQueue = Heaps.ProcessQueue; 

	EventHandler* = PROCEDURE {DELEGATE}; 

	Timer* = OBJECT 
	VAR 
		next: Timer; 
		trigger: SIGNED32; 
		handler: EventHandler; 
	END Timer; 

	TimerActivity = OBJECT {EXCLUSIVE} 
	VAR 
		t, r: Timer; 
		h: EventHandler; 
		restart: BOOLEAN; 

		PROCEDURE ^ UpdateTicks; 
		PROCEDURE ^ Restart; 
	BEGIN{ACTIVE, SAFE, PRIORITY(High)} 
	END TimerActivity; 

	Clock* = OBJECT {EXCLUSIVE} 

	BEGIN{ACTIVE} 
	END Clock; 

	FinalizerCaller = OBJECT {EXCLUSIVE} 
	VAR 
		n: Heaps.FinalizerNode; 
		start: BOOLEAN; 

		PROCEDURE ^ Activate; 
	BEGIN{ACTIVE, SAFE, PRIORITY(High)} 
	END FinalizerCaller; 

	Body = PROCEDURE (self: ProtectedObject); 

	Condition = PROCEDURE (slink: ADDRESS):BOOLEAN; 

	GCContext = RECORD 
		nextPos: SIZE; 
		last: ARRAY 32 OF RECORD 
			bp, pc, sp: ADDRESS; 
		END; 

		PROCEDURE ^ AddContext(bp, pc, sp: ADDRESS); 
		PROCEDURE ^ GetNextContext(VAR pos: SIZE; VAR bp, pc, sp: ADDRESS): BOOLEAN; 
		PROCEDURE ^ RemoveContext; 
	END
	; 

	Process* = OBJECT (Heaps.ProcessLink)
	VAR 
		threadId-: Unix.Thread_t; 
		nextProcess-: Process; 
		stackBottom-: ADDRESS; 
		id-: INTEGER; 
		body: Body; 
		mode-: INTEGER; 
		flags-: SET; 
		priority-: INTEGER; 
		succ: Process; 
		obj-: ProtectedObject; 
		condition-: Condition; 
		condFP-: ADDRESS; 
		continue: Unix.Condition_t; 
		waitingOn-: ProtectedObject; 
		procID-: SIGNED32; 
		state-: Machine.State; 
		state0: ARRAY 2048 OF CHAR; 
		context: ANY; 
		lastThreadTimes: SIGNED64; 
		gcContext: GCContext; 

		PROCEDURE ^ SetMode(mode: INTEGER); 
		PROCEDURE ^ FindRoots*; 
		PROCEDURE ^ Cancel; 
		PROCEDURE ^ GetPriority(): INTEGER; 
		PROCEDURE ^ SetPriority(prio: INTEGER); 
		PROCEDURE ^  & Initialize(obj: ProtectedObject; bodyProc: Body; prio: INTEGER; fl: SET; stacksize: SIZE); 
	END Process; 

	GCStatusExt = OBJECT (Heaps.GCStatus)

		PROCEDURE ^ SetgcOngoing*(value: BOOLEAN); 
	END GCStatusExt; 

	MainThread = OBJECT {EXCLUSIVE} 
	VAR 
		exit: BOOLEAN; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Await; 
	END MainThread; 
VAR 
	timerActivity: TimerActivity; 
	clock: Clock; 
	timers: Timer; 
	timerListMutex: Unix.Mutex_t; 
	timerStopped: BOOLEAN; 
	root-: Process; 
	stacksize: SIZE; 
	processList: Unix.Mutex_t; 
	createProcess: Unix.Mutex_t; 
	startProcess: Unix.Mutex_t; 
	startEventLock: Unix.Mutex_t; 
	lockMutex: Unix.Mutex_t; 
	childrunning: Unix.Condition_t; 
	processPointer: Unix.Key_t; 
	newProcess: Process; 
	nextPID: INTEGER; 
	finalizerCaller: FinalizerCaller; 
	mainthread: Unix.Thread_t; 
	startedMainProcess := FALSE: BOOLEAN; 
	main: MainThread; 
	TraceProcessHook*: PROCEDURE (prcoess: Process; pc, bp: ADDRESS; stacklow, stackhigh: ADDRESS); 

	PROCEDURE ^ BodyStarter; 
	PROCEDURE ^ InitProtHeader(hdr{UNTRACED} : ObjectHeader); 
	PROCEDURE ^ CreateProcess*(body: Body; priority: INTEGER; flags: SET; obj: ProtectedObject); 
	PROCEDURE ^ Lock*(obj: ProtectedObject; exclusive: BOOLEAN); 
	PROCEDURE ^ Await*(cond: Condition; slink: ADDRESS; obj: ProtectedObject; flags: SET); 
	PROCEDURE ^ Unlock*(obj: ProtectedObject; dummy: BOOLEAN); 
	PROCEDURE ^ FindCondition(VAR q: ProcessQueue): Process; 
	PROCEDURE ^ Get(VAR queue: ProcessQueue; VAR new: Process); 
	PROCEDURE ^ Put(VAR queue: ProcessQueue; t: Process); 
	PROCEDURE ^ Terminate*; 
	PROCEDURE ^ TerminateThis*(p: Process; unbreakable: BOOLEAN); 
	PROCEDURE ^ SetPriority*(pri: INTEGER); 
	PROCEDURE ^ Sleep*(ms: SIGNED32); 
	PROCEDURE ^ Yield*; 
	PROCEDURE ^ CurrentProcess*(): {UNTRACED} Process; 
	PROCEDURE ^ CurrentContext*(): ANY; 
	PROCEDURE ^ SetContext*(context: ANY); 
	PROCEDURE ^ ActiveObject*(): ANY; 
	PROCEDURE ^ GetStackBottom*(p: Process): ADDRESS; 
	PROCEDURE ^ GetStack*(p: Process; VAR pc, bp, sp, sb: ADDRESS; VAR contextPos: SIZE); 
	PROCEDURE ^ NextValidStackSegment*(p: Process; VAR bp, pc, sp: ADDRESS; VAR contextPos: SIZE): BOOLEAN; 
	PROCEDURE ^ GetProcessID*(): INTEGER; 
	PROCEDURE ^ GetCpuCycles*(process: Process; VAR cpuCycles: CpuCyclesArray; all: BOOLEAN); 
	PROCEDURE ^ RegisterFinalizer(obj: ANY; fin: Heaps.Finalizer); 
	PROCEDURE ^ FinalizeActiveObj(obj: ANY); 
	PROCEDURE ^ FinalizeProtObject(obj: ANY); 
	PROCEDURE ^ FinalizeProcess(obj: ANY); 
	PROCEDURE ^ Exit; 
	PROCEDURE ^ ExitTrap*; 
	PROCEDURE ^ Remove(t: Timer); 
	PROCEDURE ^ Insert(t: Timer); 
	PROCEDURE ^ SetTimeout*(t: Timer; h: EventHandler; ms: SIGNED32); 
	PROCEDURE ^ SetTimeoutAt*(t: Timer; h: EventHandler; ms: SIGNED32); 
	PROCEDURE ^ CancelTimeout*(t: Timer); 
	PROCEDURE ^ GetContext(ctxt: Unix.Ucontext); 
	PROCEDURE ^ UpdateProcessState*(p: Process); 
	PROCEDURE ^ Suspend(p: Process); 
	PROCEDURE ^ Resume(p: Process); 
	PROCEDURE ^ SuspendActivities; 
	PROCEDURE ^ ResumeActivities; 
	PROCEDURE ^ GCLoop*; 
	PROCEDURE ^ CurrentProcessTime*(): SIGNED64; 
	PROCEDURE ^ TimerFrequency*(): SIGNED64; 
	PROCEDURE ^ LeaveA2*; 
	PROCEDURE ^ ReenterA2*; 
	PROCEDURE ^ StartTimerActivity; 
	PROCEDURE ^ GetStacksize; 
	PROCEDURE ^ Convert; 
	PROCEDURE ^ Init; 
	PROCEDURE ^ MainThreadSleep; 
	PROCEDURE ^ {FINAL} Final; 
	PROCEDURE ^ GCStatusFactory(): Heaps.GCStatus; 
BEGIN
END Objects.
