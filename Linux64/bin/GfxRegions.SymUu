MODULE GfxRegions;
CONST 
	Winding* = 0; 
	EvenOdd* = 1; 
	UBound* = (MAX(INTEGER) DIV 2); 
	LBound* = (MIN(INTEGER) DIV 2); 
	BlockSize = 512; 
	Enter = 1; 
	Exit =  -1; 
	FirstSlice = 2; 
	Bottom = MIN(INTEGER); 
	Top = MAX(INTEGER); 
TYPE 
	RegionData = POINTER TO ARRAY OF LONGINT; 

	Region* = POINTER TO RegionDesc; 

	RegionDesc* = RECORD 
		llx*, lly*, urx*, ury*: INTEGER; 
		mode*: INTEGER; 
		valid: BOOLEAN; 
		data: RegionData; 
		points: LONGINT; 
	END; 

	EnumData* = RECORD 
	END; 

	Enumerator* = PROCEDURE (llx, lly, urx, ury: INTEGER; VAR edata: EnumData); 
VAR 
	Data: RegionData; 
	DataSize: LONGINT; 
	RectRegion: Region; 

	PROCEDURE ^ IncludePoint*(VAR llx, lly, urx, ury: INTEGER; x, y: INTEGER); 
	PROCEDURE ^ IncludeRect*(VAR llx, lly, urx, ury: INTEGER; illx, illy, iurx, iury: INTEGER); 
	PROCEDURE ^ ClipRect*(VAR llx, lly, urx, ury: INTEGER; cllx, clly, curx, cury: INTEGER); 
	PROCEDURE ^ RectEmpty*(llx, lly, urx, ury: INTEGER): BOOLEAN; 
	PROCEDURE ^ RectInRect*(llx, lly, urx, ury, illx, illy, iurx, iury: INTEGER): BOOLEAN; 
	PROCEDURE ^ RectsIntersect*(llx, lly, urx, ury, illx, illy, iurx, iury: INTEGER): BOOLEAN; 
	PROCEDURE ^ PointInRect*(x, y: INTEGER; llx, lly, urx, ury: INTEGER): BOOLEAN; 
	PROCEDURE ^ Encode(VAR item: LONGINT; u, v, dir: LONGINT); 
	PROCEDURE ^ Decode(item: LONGINT; VAR u, v, dir: INTEGER); 
	PROCEDURE ^ CopyPoints(src, dst: RegionData; points: LONGINT); 
	PROCEDURE ^ Append(reg: Region; u, v, dir: INTEGER); 
	PROCEDURE ^ CopyData(src, dst: Region); 
	PROCEDURE ^ CalcRect(reg: Region); 
	PROCEDURE ^ SafeQuickSort(VAR data: ARRAY OF LONGINT; lo, hi: LONGINT); 
	PROCEDURE ^ Compact(reg: Region; src: RegionData); 
	PROCEDURE ^ Merge(reg: Region; split: LONGINT); 
	PROCEDURE ^ Validate(reg: Region); 
	PROCEDURE ^ FindUpper(reg: Region; y: INTEGER; VAR n: LONGINT); 
	PROCEDURE ^ FindLower(reg: Region; y: INTEGER; VAR n: LONGINT); 
	PROCEDURE ^ Enum(reg: Region; llx, lly, urx, ury: INTEGER; enum: Enumerator; VAR edata: EnumData; enter: INTEGER); 
	PROCEDURE ^ MakeData(reg: Region); 
	PROCEDURE ^ Empty*(reg: Region): BOOLEAN; 
	PROCEDURE ^ IsRect*(reg: Region): BOOLEAN; 
	PROCEDURE ^ PointInside*(x, y: INTEGER; reg: Region): BOOLEAN; 
	PROCEDURE ^ RectInside*(llx, lly, urx, ury: INTEGER; reg: Region): BOOLEAN; 
	PROCEDURE ^ RectOverlaps*(llx, lly, urx, ury: INTEGER; reg: Region): BOOLEAN; 
	PROCEDURE ^ RegionInside*(inner, outer: Region): BOOLEAN; 
	PROCEDURE ^ RegionOverlaps*(reg, arg: Region): BOOLEAN; 
	PROCEDURE ^ Enumerate*(reg: Region; llx, lly, urx, ury: INTEGER; enum: Enumerator; VAR edata: EnumData); 
	PROCEDURE ^ EnumerateInv*(reg: Region; llx, lly, urx, ury: INTEGER; enum: Enumerator; VAR edata: EnumData); 
	PROCEDURE ^ Clear*(reg: Region); 
	PROCEDURE ^ SetMode*(reg: Region; mode: INTEGER); 
	PROCEDURE ^ Init*(reg: Region; mode: INTEGER); 
	PROCEDURE ^ SetToRect*(reg: Region; llx, lly, urx, ury: INTEGER); 
	PROCEDURE ^ Shift*(reg: Region; dx, dy: INTEGER); 
	PROCEDURE ^ Copy*(from, to: Region); 
	PROCEDURE ^ Add*(reg, arg: Region); 
	PROCEDURE ^ AddRect*(reg: Region; llx, lly, urx, ury: INTEGER); 
	PROCEDURE ^ Subtract*(reg, arg: Region); 
	PROCEDURE ^ SubtractRect*(reg: Region; llx, lly, urx, ury: INTEGER); 
	PROCEDURE ^ Intersect*(reg, arg: Region); 
	PROCEDURE ^ IntersectRect*(reg: Region; llx, lly, urx, ury: INTEGER); 
	PROCEDURE ^ Invert*(reg: Region); 
	PROCEDURE ^ AddPoint*(reg: Region; x, y, dy: INTEGER); 
BEGIN
END GfxRegions.
