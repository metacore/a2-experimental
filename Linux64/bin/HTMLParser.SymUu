MODULE HTMLParser;
	IMPORT Strings, KernelLog, DynamicStrings, Scanner := HTMLScanner, XML;
CONST 
TYPE 
	String = Strings.String; 

	Node = POINTER TO RECORD 
		name: String; 
		back: Node; 
	END; 

	OpenTagStack = OBJECT 
	VAR 
		top: Node; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Insert(s: String); 
		PROCEDURE ^ Remove(s: String); 
		PROCEDURE ^ IsMember(s: String): BOOLEAN; 
		PROCEDURE ^ Print; 
	END OpenTagStack; 

	Parser* = OBJECT 
	VAR 
		scanner: Scanner.Scanner; 
		openTagStack: OpenTagStack; 
		elemReg*: XML.ElementRegistry; 
		reportError*: PROCEDURE {DELEGATE}(pos, line, row: LONGINT; msg: ARRAY OF CHAR); 
		closedTag: String; 
		newTagName: String; 
		closedTagPremature: BOOLEAN; 

		PROCEDURE ^  & Init*(s: Scanner.Scanner); 
		PROCEDURE ^ Error(msg: ARRAY OF CHAR); 
		PROCEDURE ^ CheckSymbol(expectedSymbols: SET; errormsg: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ Parse*(): XML.Document; 
		PROCEDURE ^ ParseXMLDecl(): XML.XMLDecl; 
		PROCEDURE ^ ParseComment(): XML.Comment; 
		PROCEDURE ^ ParseDocTypeDecl(): XML.DocTypeDecl; 
		PROCEDURE ^ ParseSystemLiteral(): String; 
		PROCEDURE ^ ParsePubidLiteral(): String; 
		PROCEDURE ^ ParseCharData(): XML.ArrayChars; 
		PROCEDURE ^ ParseElement(): XML.Element; 
		PROCEDURE ^ ParseStartTagName; 
		PROCEDURE ^ ParseStartTag(VAR e: XML.Element; VAR empty: BOOLEAN); 
		PROCEDURE ^ ParseAttribute(): XML.Attribute; 
		PROCEDURE ^ ParseEndTag(): String; 
	END Parser; 

	PROCEDURE ^ IsPubidLiteral(CONST str: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ DefaultReportError(pos, line, col: LONGINT; msg: ARRAY OF CHAR); 
	PROCEDURE ^ IsSolitaryTag(name: String): BOOLEAN; 
	PROCEDURE ^ PrematureTagClosing(name, next: String): BOOLEAN; 
BEGIN
END HTMLParser.
