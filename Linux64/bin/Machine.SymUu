MODULE Machine;
	IMPORT S := SYSTEM, Trace, Unix, Glue;
CONST 
	DefaultConfig = \"Color 0  StackSize 128"\; 
	Version = \"A2 Gen. 64-bit, "\; 
	DefaultObjectFileExtension* = \".GofUu"\; 
	Second* = 1000; 
	MTTR* = 12; 
	MMX* = 23; 
	AddressSize = SIZEOF(ADDRESS); 
	StaticBlockSize = (8 * AddressSize); 
	MemBlockSize* = ((64 * 1024) * 1024); 
	TraceOutput* = 0; 
	Memory* = 1; 
	Heaps* = 2; 
	Interrupts* = 3; 
	Modules* = 4; 
	Objects* = 5; 
	Processors* = 6; 
	KernelLog* = 7; 
	X11* = 8; 
	MaxLocks* = 9; 
	MaxCPU* = 4; 
	IsCooperative* = FALSE; 
TYPE 
	Vendor* = ARRAY 13 OF CHAR; 

	MemoryBlock* = POINTER {UNSAFE, UNTRACED} TO MemoryBlockDesc; 

	MemoryBlockDesc* = RECORD 
		next-: MemoryBlock; 
		startAdr-: ADDRESS; 
		size-: SIZE; 
		beginBlockAdr-, endBlockAdr-: ADDRESS; 
	END; 

	State* = RECORD 
		PC*, BP*, SP*: ADDRESS; 
	END; 
VAR 
	mtx: ARRAY MaxLocks OF Unix.Mutex_t; 
	version-: ARRAY 64 OF CHAR; 
	features-, features2: SET; 
	MMXSupport-: BOOLEAN; 
	SSESupport-: BOOLEAN; 
	SSE2Support-: BOOLEAN; 
	SSE3Support-: BOOLEAN; 
	SSSE3Support-: BOOLEAN; 
	SSE41Support-: BOOLEAN; 
	SSE42Support-: BOOLEAN; 
	SSE5Support-: BOOLEAN; 
	AVXSupport-: BOOLEAN; 
	ticks-: LONGINT; 
	prioLow-, prioHigh-: LONGINT; 
	fcr-: SET; 
	mhz-: HUGEINT; 
	gcThreshold-: SIZE; 
	memBlockHead-{UNTRACED} , memBlockTail-{UNTRACED} : MemoryBlock; 
	config: ARRAY 2048 OF CHAR; 
	logname: ARRAY 32 OF CHAR; 
	logfile: LONGINT; 
	traceHeap: BOOLEAN; 
	timer0: HUGEINT; 

	PROCEDURE ^ ID*(): LONGINT; 
	PROCEDURE ^ FlushDCacheRange*(adr: ADDRESS; len: LONGINT); 
	PROCEDURE ^ InvalidateDCacheRange*(adr: ADDRESS; len: LONGINT); 
	PROCEDURE ^ InvalidateICacheRange*(adr: ADDRESS; len: LONGINT); 
	PROCEDURE ^ InsertMemoryBlock(memBlock: MemoryBlock); 
	PROCEDURE ^ FreeMemBlock*(memBlock: MemoryBlock); 
	PROCEDURE ^ ExpandHeap*(dummy: LONGINT; size: SIZE; VAR memoryBlock: MemoryBlock; VAR beginBlockAdr, endBlockAdr: ADDRESS); 
	PROCEDURE ^ SetMemoryBlockEndAddress*(memBlock: MemoryBlock; endBlockAdr: ADDRESS); 
	PROCEDURE ^ TraceHeap(new: MemoryBlock); 
	PROCEDURE ^ GetStaticHeap*(VAR beginBlockAdr, endBlockAdr, freeBlockAdr: ADDRESS); 
	PROCEDURE ^ ValidHeapAddress*(p: ADDRESS): BOOLEAN; 
	PROCEDURE ^ GetFreeK*(VAR total, lowFree, highFree: SIZE); 
	PROCEDURE ^ Fill32*(destAdr: ADDRESS; size: SIZE; filler: LONGINT); 
	PROCEDURE ^ Portin8*(port: LONGINT; VAR val: CHAR); 
	PROCEDURE ^ Portin16*(port: LONGINT; VAR val: INTEGER); 
	PROCEDURE ^ Portin32*(port: LONGINT; VAR val: LONGINT); 
	PROCEDURE ^ Portout8*(port: LONGINT; val: CHAR); 
	PROCEDURE ^ Portout16*(port: LONGINT; val: INTEGER); 
	PROCEDURE ^ Portout32*(port: LONGINT; val: LONGINT); 
	PROCEDURE {Fingerprint(-4906166419077515203)}  - AtomicInc*(VAR x: LONGINT);
	CODE

	POP RAX
	LOCK
	INC DWORD [RAX]


	END AtomicInc; 
	PROCEDURE {Fingerprint(-4906166419489605579)}  - AtomicDec*(VAR x: LONGINT);
	CODE

	POP RAX
	LOCK
	DEC DWORD [RAX]


	END AtomicDec; 
	PROCEDURE {Fingerprint(-8128385309809622434)}  - AtomicAdd*(VAR x: LONGINT; y: LONGINT);
	CODE

	POP EBX
	POP RAX
	LOCK
	ADD DWORD [RAX], EBX


	END AtomicAdd; 
	PROCEDURE ^ AtomicExcl*(VAR s: SET; bit: LONGINT); 
	PROCEDURE {Fingerprint(3527218884401619127)}  - AtomicTestSet*(VAR x: BOOLEAN): BOOLEAN;
	CODE

	POP RBX
	MOV AL, 1
	XCHG [RBX], AL


	END AtomicTestSet; 
	PROCEDURE {Fingerprint(-519038113181393041)}  - AtomicCAS*(VAR x: LONGINT; old, new: LONGINT): LONGINT;
	CODE

	POP EBX		; new
	POP EAX		; old
	POP RCX		; address of x
	LOCK CMPXCHG [RCX], EBX	; atomicly compare x with old and set it to new if equal


	END AtomicCAS; 
	PROCEDURE ^ CurrentPC*(): ADDRESS; 
	PROCEDURE {Fingerprint(4803519866585645229)}  - CurrentBP*(): ADDRESS;
	CODE

	MOV RAX, RBP


	END CurrentBP; 
	PROCEDURE {Fingerprint(5764612334986991996)}  - SetBP*(bp: ADDRESS);
	CODE

	POP RBP


	END SetBP; 
	PROCEDURE {Fingerprint(6028498965230420133)}  - CurrentSP*(): ADDRESS;
	CODE

	MOV RAX, RSP


	END CurrentSP; 
	PROCEDURE {Fingerprint(-3458759701867783819)}  - SetSP*(sp: ADDRESS);
	CODE

	POP RSP


	END SetSP; 
	PROCEDURE {Fingerprint(6112430532310118778)}  - GetTimer*(): HUGEINT;
	CODE

	XOR RAX, RAX
	RDTSC	; set EDX:EAX
	SHL RDX, 32
	OR RAX, RDX


	END GetTimer; 
	PROCEDURE ^ GetConfig*(CONST name: ARRAY OF CHAR; VAR val: ARRAY OF CHAR); 
	PROCEDURE ^ StrToInt*(VAR i: LONGINT; CONST s: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ NumberOfProcessors*(): LONGINT; 
	PROCEDURE ^ SetNumberOfProcessors*(num: LONGINT); 
	PROCEDURE ^ ChangeByteOrder*(n: LONGINT): LONGINT; 
	PROCEDURE ^ TraceChar*(c: CHAR); 
	PROCEDURE ^ CPUID*(VAR vendor: Vendor; VAR version: LONGINT; VAR features1, features2: SET); 
	PROCEDURE ^ CpuIdSupported(): BOOLEAN; 
	PROCEDURE ^ SetupSSE2Ext; 
	PROCEDURE {Fingerprint(5082109869366590970)}  - SetFCR(s: SET);
	CODE
	END SetFCR; 
	PROCEDURE {Fingerprint(5376736950748288)}  - FCR(): SET;
	CODE
	END FCR; 
	PROCEDURE {Fingerprint(7631660203431244919)}  - InitFPU;
	CODE
	END InitFPU; 
	PROCEDURE ^ SetupFPU*; 
	PROCEDURE ^ InitLocks; 
	PROCEDURE ^ CleanupLocks*; 
	PROCEDURE ^ Acquire*(level: LONGINT); 
	PROCEDURE ^ Release*(level: LONGINT); 
	PROCEDURE ^ Shutdown*(reboot: BOOLEAN); 
	PROCEDURE ^ SetGCParams*; 
	PROCEDURE ^ InitConfig; 
	PROCEDURE ^ UpdateTicks*; 
	PROCEDURE ^ InitThreads; 
	PROCEDURE ^ CPUSpeed; 
	PROCEDURE ^ Log(c: CHAR); 
	PROCEDURE ^ LogFileOnly(c: CHAR); 
	PROCEDURE ^ InitLog; 
	PROCEDURE ^ SilentLog*; 
	PROCEDURE ^ VerboseLog*; 
	PROCEDURE ^ Append(VAR a: ARRAY OF CHAR; CONST this: ARRAY OF CHAR); 
	PROCEDURE ^ Init; 
	PROCEDURE ^ Init0*; 
BEGIN
END Machine.
