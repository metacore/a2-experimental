MODULE ModuleTrees;
	IMPORT Streams, Commands, Diagnostics, WMStandardComponents, WMGraphics, WMProperties, WMComponents, WMTextView, WMEditors, Strings, Texts, TextUtilities, KernelLog, WMTrees, WMEvents, FoxScanner, ModuleParser;
CONST 
	TreeLabelCaption = \" Program Structure"\; 
	TreeLabelCaptionError = \" Program Structure (Errors)"\; 
	ShowImages = TRUE; 
	ImageActive = \"ModuleTreesIcons.tar://activity.png"\; 
	ImageCommandProc = \"ModuleTreesIcons.tar://arrow-red.png"\; 
	ImageContextProc = \"ModuleTreesIcons.tar://arrow-green.png"\; 
	ColorTypes = 36863; 
	ColorObjects = WMGraphics.Blue; 
	ColorActiveObjects = ColorObjects; 
	ColorProcedure = WMGraphics.Black; 
	ColorExclusive = WMGraphics.Red; 
	ColorHasExclusiveBlock = WMGraphics.Magenta; 
	SortIgnore = 1; 
	SortProcedure = 2; 
	SortNo = 90; 
	SortBody = 99; 
	NotPublic = 0; 
	PosValid = 1; 
	CanExecute = 2; 
	Other = 0; 
	CommandProc = 1; 
	ContextProc = 2; 
TYPE 
	TextInfo = OBJECT 
	VAR 
		flags: SET; 
		pos: Texts.TextPosition; 
		name: Strings.String; 
		color: LONGINT; 
		sortInfo: LONGINT; 
		font: WMGraphics.Font; 
		node: ModuleParser.Node; 
		modulename: ARRAY 32 OF CHAR; 
		external: BOOLEAN; 
		position: LONGINT; 
	END TextInfo; 

	ExternalInfo* = OBJECT 
	VAR 
		modulename-: ARRAY 32 OF CHAR; 
		position-: LONGINT; 
		node-: ModuleParser.Node; 

		PROCEDURE ^  & Init(CONST modulename: ARRAY OF CHAR; position: LONGINT; node: ModuleParser.Node); 
	END ExternalInfo; 

	ModuleTree* = OBJECT {EXCLUSIVE} (WMStandardComponents.Panel)
	VAR 
		toolbar: WMStandardComponents.Panel; 
		label: WMStandardComponents.Label; 
		refreshBtn, sortBtn, publicBtn: WMStandardComponents.Button; 
		treeView: WMTrees.TreeView; 
		tree: WMTrees.Tree; 
		editor: WMEditors.Editor; 
		highlight: WMTextView.Highlight; 
		showPublicOnly: BOOLEAN; 
		showTypeHierarchy-: WMProperties.BooleanProperty; 
		onExpandNode-: WMEvents.EventSource; 
		onGoToExternalModule-: WMEvents.EventSource; 
		module: ModuleParser.Module; 
		diagnostics: Diagnostics.StreamDiagnostics; 
		writer: Streams.Writer; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ PropertyChanged*(sender, data: ANY); 
		PROCEDURE ^ SetEditor*(e: WMEditors.Editor); 
		PROCEDURE ^ Erase*; 
		PROCEDURE ^ ShowPublicHandler(sender, data: ANY); 
		PROCEDURE ^ SetNodeVisibilities(parent: WMTrees.TreeNode; showPublicOnly: BOOLEAN); 
		PROCEDURE ^ GetNextNode(this: WMTrees.TreeNode; ignoreChildren: BOOLEAN): WMTrees.TreeNode; 
		PROCEDURE ^ RefreshHandler*(sender, data: ANY); 
		PROCEDURE ^ SortHandler(sender, data: ANY); 
		PROCEDURE ^ SelectNodeByPos*(pos: LONGINT); 
		PROCEDURE ^ SortTree(parent: WMTrees.TreeNode); 
		PROCEDURE ^ IsNodeGreater(left, right: WMTrees.TreeNode): BOOLEAN; 
		PROCEDURE ^ SwapSiblings(parent, left, right: WMTrees.TreeNode); 
		PROCEDURE ^ DrawNode(canvas: WMGraphics.Canvas; w, h: LONGINT; node: WMTrees.TreeNode; state: SET); 
		PROCEDURE ^ ClickNode(sender, data: ANY); 
		PROCEDURE ^ MiddleClickNode(sender, data: ANY); 
		PROCEDURE ^ GetTextInfo(node: ModuleParser.Node; infoItem: ModuleParser.InfoItem; isPublic: BOOLEAN; sortInfo, color: LONGINT; style: SET): TextInfo; 
		PROCEDURE ^ IsPublic(identDef: ModuleParser.IdentDef): BOOLEAN; 
		PROCEDURE ^ HasPublicConsts(constDecl: ModuleParser.ConstDecl): BOOLEAN; 
		PROCEDURE ^ HasPublicVars(varDecl: ModuleParser.VarDecl): BOOLEAN; 
		PROCEDURE ^ GetModuleNode(node: ModuleParser.Node): ModuleParser.Module; 
		PROCEDURE ^ GetProcedureType(procHead: ModuleParser.ProcHead): LONGINT; 
		PROCEDURE ^ AddBody(root: WMTrees.TreeNode; pnode: ModuleParser.Node; modifiers: SET; pos: LONGINT); 
		PROCEDURE ^ AddImportList(parent: WMTrees.TreeNode; importList: ModuleParser.Import); 
		PROCEDURE ^ AddDefinitions(parent: WMTrees.TreeNode; definitions: ModuleParser.Definition); 
		PROCEDURE ^ AddDeclSeq(parent: WMTrees.TreeNode; declSeq: ModuleParser.DeclSeq); 
		PROCEDURE ^ AddProcDecl(treeNode: WMTrees.TreeNode; procDecl: ModuleParser.ProcDecl); 
		PROCEDURE ^ AddProcHead(treeNode: WMTrees.TreeNode; procHead: ModuleParser.ProcHead): WMTrees.TreeNode; 
		PROCEDURE ^ AddFormalPars(parent: WMTrees.TreeNode; formalPars: ModuleParser.FormalPars); 
		PROCEDURE ^ AddFPSection(parent: WMTrees.TreeNode; fpSection: ModuleParser.FPSection); 
		PROCEDURE ^ AddVarDecl(parent: WMTrees.TreeNode; varDecl: ModuleParser.VarDecl); 
		PROCEDURE ^ AddTypeDecl(parent: WMTrees.TreeNode; typeDecl: ModuleParser.TypeDecl); 
		PROCEDURE ^ AddType(parent: WMTrees.TreeNode; type: ModuleParser.Type; anonymous: BOOLEAN); 
		PROCEDURE ^ AddRecord(parent: WMTrees.TreeNode; record: ModuleParser.Record; anonymous, addSuperRecords: BOOLEAN); 
		PROCEDURE ^ AddFieldDecl(parent: WMTrees.TreeNode; fieldDecl: ModuleParser.FieldDecl); 
		PROCEDURE ^ AddPointer(parent: WMTrees.TreeNode; pointer: ModuleParser.Pointer); 
		PROCEDURE ^ AddArray(parent: WMTrees.TreeNode; array: ModuleParser.Array); 
		PROCEDURE ^ NewNode(parent: WMTrees.TreeNode; caption: Strings.String): WMTrees.TreeNode; 
		PROCEDURE ^ AddQualident(parent: WMTrees.TreeNode; qualident: ModuleParser.Qualident; color: LONGINT; style: SET): WMTrees.TreeNode; 
		PROCEDURE ^ AddSuperRecords(parent: WMTrees.TreeNode; record: ModuleParser.Record); 
		PROCEDURE ^ AddSuperClasses(parent: WMTrees.TreeNode; object: ModuleParser.Object); 
		PROCEDURE ^ AddObject(parent: WMTrees.TreeNode; object: ModuleParser.Object; anonymous, addSuperClasses: BOOLEAN); 
		PROCEDURE ^ AddProcedure(parent: WMTrees.TreeNode; proc: ModuleParser.Procedure); 
		PROCEDURE ^ PrefixPostfixToCaption(node: WMTrees.TreeNode; prePost: Strings.String; prefix: BOOLEAN); 
		PROCEDURE ^ AddPrefixToCaption(node: WMTrees.TreeNode; prefix: Strings.String); 
		PROCEDURE ^ AddPostfixToCaption(node: WMTrees.TreeNode; postfix: Strings.String); 
		PROCEDURE ^ AddNumberPostfixToCaption(node: WMTrees.TreeNode; number: LONGINT); 
		PROCEDURE ^ AddIdentList(parent: WMTrees.TreeNode; identList: ModuleParser.IdentList; VAR nofIdents: LONGINT); 
		PROCEDURE ^ AddConstDecl(parent: WMTrees.TreeNode; constDecl: ModuleParser.ConstDecl); 
		PROCEDURE ^ AddIdentDef(parent: WMTrees.TreeNode; node: ModuleParser.Node; identDef: ModuleParser.IdentDef; sortInfo, color: LONGINT; style: SET): WMTrees.TreeNode; 
		PROCEDURE ^ AddInfoItem(parent: WMTrees.TreeNode; node: ModuleParser.Node; infoItem: ModuleParser.InfoItem; isPublic: BOOLEAN; sortInfo, color: LONGINT; style: SET): WMTrees.TreeNode; 
	END ModuleTree; 
VAR 
	PrototypeShowTypeHierarchy: WMProperties.BooleanProperty; 
	treeFontPlain, treeFontBold, treeFontItalic: WMGraphics.Font; 
	font: WMGraphics.Font; 

	PROCEDURE ^ GetColor(modifiers: SET; defaultColor: LONGINT): LONGINT; 
BEGIN
END ModuleTrees.
