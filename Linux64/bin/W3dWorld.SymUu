MODULE W3dWorld;
	IMPORT AbstractWorld := W3dAbstractWorld, Vectors := W3dVectors, Matrix := W3dMatrix, Raster, Classes := TFClasses, Rasterizer := W3dRasterizer, W3dGeometry;
CONST 
	TraceNormals = FALSE; 
TYPE 
	Vertex* = Rasterizer.Vertex; 

	VertexArray = POINTER TO ARRAY OF Vertex; 

	Texture = Rasterizer.Texture; 

	Triangle = Rasterizer.Triangle; 

	TriangleArray = POINTER TO ARRAY OF Triangle; 

	AABB = RECORD 
		a, b: Vectors.TVector3d; 
		empty: BOOLEAN; 
	END; 

	Object* = OBJECT (AbstractWorld.Object)
	VAR 
		triangles: TriangleArray; 
		nofTriangles: LONGINT; 
		vertices: VertexArray; 
		nofVertices: LONGINT; 
		aabb: AABB; 
		bsCenter: Vectors.TVector3d; 
		bsRadius: LONGREAL; 
		bsValid: BOOLEAN; 
		isAnimated: BOOLEAN; 
		index: LONGINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ SetIndex*(idx: LONGINT); 
		PROCEDURE ^ AddTexture*(img: Raster.Image): AbstractWorld.Texture; 
		PROCEDURE ^ AddVertex*(p: Vectors.TVector3d): AbstractWorld.Vertex; 
		PROCEDURE ^ CalcBS; 
		PROCEDURE ^ AddTriangle*(a, b, c: AbstractWorld.Vertex; color: LONGINT; tex: AbstractWorld.Texture; mask0, culled: BOOLEAN); 
		PROCEDURE ^ Clear*; 
	END Object; 

	World* = OBJECT {EXCLUSIVE} (AbstractWorld.World)
	VAR 
		objects, animated: Classes.List; 
		p, d, u: Vectors.TVector3d; 
		trans: Matrix.Matrix4x4; 
		distpp: LONGREAL; 
		rasterizer: Rasterizer.Rasterizer; 
		width, height: LONGINT; 
		quality*: LONGINT; 
		frustum*: W3dGeometry.Frustum; 
		clearColor: LONGINT; 
		tempTri: Triangle; 
		tempv0, tempv1: Vertex; 
		changed, invertable: BOOLEAN; 
		worldValid: BOOLEAN; 

		PROCEDURE ^  & Init*(w, h, clearColor: LONGINT); 
		PROCEDURE ^ CreateObject*(): AbstractWorld.Object; 
		PROCEDURE ^ AddObject*(x: AbstractWorld.Object); 
		PROCEDURE ^ ReplaceObject*(x, y: AbstractWorld.Object); 
		PROCEDURE ^ SetAnimated*(obj: AbstractWorld.Object; animated: BOOLEAN); 
		PROCEDURE ^ Clear*; 
		PROCEDURE ^ SetCamera*(p, d, u: Vectors.TVector3d); 
		PROCEDURE ^ ScreenPos(p: Vectors.TVector3d; VAR x, y: LONGREAL); 
		PROCEDURE ^ RasterTriangle(VAR tri: Triangle); 
		PROCEDURE ^ ClipDrawTriangle(VAR tri: Triangle); 
		PROCEDURE ^ RenderInternal*(img: Raster.Image; animatedOnly: BOOLEAN); 
		PROCEDURE ^ Render*(img: Raster.Image; movingOnly: BOOLEAN); 
		PROCEDURE ^ GetOwnerIndex*(x, y: LONGINT): LONGINT; 
	END World; 

	PROCEDURE ^ Min(a, b: LONGREAL): LONGREAL; 
	PROCEDURE ^ Max(a, b: LONGREAL): LONGREAL; 
	PROCEDURE ^ GrowAABB(VAR aabb: AABB; p: Vectors.TVector3d); 
BEGIN
END W3dWorld.
