MODULE UDPChatBase;
	IMPORT Kernel, Strings, BIT, IO := Streams, IP, FS := Files;
CONST 
	serverPort* = 14000; 
	UserFile = \"Sage.UDPChatUsers.dat"\; 
	clientKeepAliveInterval* = 20000; 
	clientKeepAliveAwait* = ((clientKeepAliveInterval * 3) + (clientKeepAliveInterval DIV 2)); 
	UDPHdrLen = 8; 
	MaxUDPDataLen* = (65536 - UDPHdrLen); 
	VERSION* = 2; 
	ACK* = 10; 
	SEND_MESSAGE* = 270; 
	LOGIN* = 1000; 
	CONTACT_LIST* = 1030; 
	SEARCH_UIN* = 1050; 
	SEARCH_USER* = 1060; 
	KEEP_ALIVE* = 1070; 
	SEND_TEXT_CODE* = 1080; 
	LOGIN_1* = 1100; 
	INFO_REQ* = 1120; 
	EXT_INFO_REQ* = 1130; 
	CHANGE_PASSWORD* = 1180; 
	STATUS_CHANGE* = 1240; 
	LOGIN_2* = 1320; 
	UPDATE_INFO* = 1290; 
	UPDATE_EXT_INFO* = 1200; 
	ADD_TO_LIST* = 1340; 
	REQ_ADD_TO_LIST* = 1110; 
	QUERY_SERVERS* = 1210; 
	QUERY_ADDONS* = 1220; 
	NEW_USER_1* = 1260; 
	NEW_USER_REG* = 1020; 
	NEW_USER_INFO* = 1190; 
	CMD_X1* = 1090; 
	MSG_TO_NEW_USER* = 1110; 
	LOGIN_REPLY* = 90; 
	USER_ONLINE* = 110; 
	USER_OFFLINE* = 120; 
	USER_FOUND* = 140; 
	RECEIVE_MESSAGE* = 220; 
	END_OF_SEARCH* = 160; 
	INFO_REPLY* = 280; 
	EXT_INFO_REPLY* = 290; 
	STATUS_UPDATE* = 420; 
	REPLY_X1* = 540; 
	REPLY_X2* = 230; 
	UPDATE_REPLY* = 480; 
	UPDATE_EXT_REPLY* = 200; 
	NEW_USER_UIN* = 70; 
	NEW_USER_REPLY* = 180; 
	QUERY_REPLY* = 130; 
	SYSTEM_MESSAGE* = 450; 
	MESSAGE_TYPE_NORMAL* = 1; 
	MESSAGE_TYPE_URL* = 4; 
	MESSAGE_TYPE_DATA* = 8; 
TYPE 
	String = Strings.String; 

	ACKRec* = POINTER TO RECORD 
		seqNum*: INTEGER; 
	END; 

	Client* = OBJECT 
	VAR 
		ip*: IP.Adr; 
		port*: LONGINT; 
		inSeqNum*, outSeqNum*: INTEGER; 
		uin*: LONGINT; 
		keepAliveTimer*: Kernel.MilliTimer; 
		ACKList-: List; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ Finalize*; 
	END Client; 

	UserInfo* = POINTER TO RECORD 
		uin*: LONGINT; 
		shortName*, fullName*, eMail*: ARRAY 65 OF CHAR; 
	END; 

	User* = POINTER TO RECORD (UserInfo)
		password*: LONGINT; 
	END; 

	Users* = OBJECT 
	VAR 
		list: List; 
		lastUIN: LONGINT; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ Load; 
		PROCEDURE ^ Store*; 
		PROCEDURE ^ Add*(password, shortName, fullName, eMail: String): User; 
		PROCEDURE ^ Find*(uin: LONGINT): User; 
		PROCEDURE ^ PasswordCorrect*(uin: LONGINT; password: String): BOOLEAN; 
	END Users; 

	Buffer* = OBJECT (Strings.Buffer)

		PROCEDURE ^ AddInt*(n, len: LONGINT); 
	END Buffer; 

	PArray = POINTER TO ARRAY OF ANY; 

	List* = OBJECT {EXCLUSIVE} 
	VAR 
		list: PArray; 
		count: LONGINT; 
		readLock: LONGINT; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ GetCount*(): LONGINT; 
		PROCEDURE ^ Grow; 
		PROCEDURE ^ Add*(x: ANY); 
		PROCEDURE ^ IndexOf*(x: ANY): LONGINT; 
		PROCEDURE ^ Remove*(x: ANY); 
		PROCEDURE ^ Clear*; 
		PROCEDURE ^ GetItem*(i: LONGINT): ANY; 
		PROCEDURE ^ Lock*; 
		PROCEDURE ^ Unlock*; 
	END List; 

	PROCEDURE ^ Code(s: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ ServerPacketInit*(command, seqnum: INTEGER; buf: Buffer); 
	PROCEDURE ^ ClientPacketInit*(command, seqnum: INTEGER; uin: LONGINT; buf: Buffer); 
	PROCEDURE ^ BufGetSInt*(buf: String; VAR receiveBufOffset: LONGINT): INTEGER; 
	PROCEDURE ^ BufGetInt*(buf: String; VAR receiveBufOffset: LONGINT): INTEGER; 
	PROCEDURE ^ BufGetLInt*(buf: String; VAR receiveBufOffset: LONGINT): LONGINT; 
	PROCEDURE ^ BufGetString*(buf: String; VAR receiveBufOffset: LONGINT): String; 
	PROCEDURE ^ isNextSeqNum*(current, previous: INTEGER): BOOLEAN; 
	PROCEDURE ^ SeqNumInACKList*(reqList: List; seqNum: INTEGER; VAR req: ACKRec): BOOLEAN; 
	PROCEDURE ^ CommandDecode*(command: INTEGER; VAR str: ARRAY OF CHAR); 
BEGIN
END UDPChatBase.
