MODULE CryptoRSA;
	IMPORT B := CryptoBigNumbers, U := CryptoUtils, MD5 := CryptoMD5, Ciphers := CryptoCiphers, Base64 := CryptoBase64, Streams, Clock;
CONST 
	chinese = TRUE; 
	PrivateKeyMagic = 1064303083; 
TYPE 
	Number = B.BigNumber; 

	Buffer = ARRAY 16 OF CHAR; 

	Certificate* = OBJECT 
	VAR 
		authority*: ARRAY 128 OF CHAR; 
		signature*: Number; 
		next*: Certificate; 
	END Certificate; 

	Key* = OBJECT 
	VAR 
		name-: ARRAY 128 OF CHAR; 
		private-: BOOLEAN; 
		size-: SIZE; 
		exponent-, modulus-: Number; 
		p, q, u: Number; 
		time-, date-: SIGNED32; 
		certificates*: Certificate; 
		next*: Key; 

		PROCEDURE ^ Sign*(CONST digest: ARRAY OF CHAR; dlen: SIGNED32): Number; 
		PROCEDURE ^ Verify*(CONST digest: ARRAY OF CHAR; dlen: SIZE; signature: Number): BOOLEAN; 
		PROCEDURE ^ Encrypt*(msg: Number): Number; 
		PROCEDURE ^ Decrypt*(msg: Number): Number; 
	END Key; 
VAR 
	one, two: Number; 

	PROCEDURE ^ l2n(l: UNSIGNED32; VAR buf: Buffer; pos: SIZE); 
	PROCEDURE ^ MakeKeys*(p, q, e: Number; CONST name: ARRAY OF CHAR; VAR pub, priv: Key); 
	PROCEDURE ^ PubKey*(e, m: Number): Key; 
	PROCEDURE ^ ChineseRemainder(msg, d, p, q, u: Number): Number; 
	PROCEDURE ^ LoadPrivateKey*(r: Streams.Reader; CONST passwd: ARRAY OF CHAR): Key; 
	PROCEDURE ^ StorePrivateKey*(w: Streams.Writer; k: Key; CONST passwd: ARRAY OF CHAR); 
	PROCEDURE ^ StorePublicKey*(w: Streams.Writer; k: Key); 
	PROCEDURE ^ LoadPublicKey*(r: Streams.Reader): Key; 
	PROCEDURE ^ ExtractPublicKey*(r: Streams.Reader): Key; 
BEGIN
END CryptoRSA.
