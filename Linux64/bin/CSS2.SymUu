MODULE CSS2;
	IMPORT Strings, Objects := XMLObjects;
CONST 
	Undefined* = 0; 
	All* = 0; 
	Aural* = 1; 
	Braille* = 2; 
	Embossed* = 3; 
	Handheld* = 4; 
	Print* = 5; 
	Projection* = 6; 
	Screen* = 7; 
	TTY* = 8; 
	TV* = 9; 
	Descendant* = 1; 
	Child* = 2; 
	Sibling* = 3; 
	Equal* = 1; 
	Includes* = 2; 
	Dashmatch* = 3; 
	Slash* = 1; 
	Comma* = 2; 
	Minus* =  -1; 
	Plus* = 1; 
	IntNumber* = 1; 
	RealNumber* = 2; 
	Percent* = 3; 
	IntDimension* = 4; 
	RealDimension* = 5; 
	Function* = 6; 
	StringVal* = 7; 
	StringIdent* = 8; 
	URI* = 9; 
	Color* = 10; 
	Ident* = 11; 
	UnicodeRange* = 12; 
	em* = 1; 
	ex* = 2; 
	px* = 3; 
	in* = 4; 
	cm* = 5; 
	mm* = 6; 
	pt* = 7; 
	pc* = 8; 
	deg* = 9; 
	grad* = 10; 
	rad* = 11; 
	ms* = 12; 
	s* = 13; 
	Hz* = 14; 
	kHz* = 15; 
	Left* = 1; 
	Right* = 2; 
	First* = 3; 
TYPE 
	String* = Strings.String; 

	StyleSheet* = OBJECT 
	VAR 
		charSet: String; 
		rulesets, pages, fontFaces: Objects.Collection; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetCharSet*(): String; 
		PROCEDURE ^ SetCharSet*(VAR charSet: ARRAY OF CHAR); 
		PROCEDURE ^ GetRuleSets*(): Objects.Enumerator; 
		PROCEDURE ^ AddRuleSet*(rs: RuleSet); 
		PROCEDURE ^ GetPages*(): Objects.Enumerator; 
		PROCEDURE ^ AddPage*(page: Page); 
		PROCEDURE ^ GetFontFaces*(): Objects.Enumerator; 
		PROCEDURE ^ AddFontFace*(fontFace: FontFace); 
	END StyleSheet; 

	RuleSet* = OBJECT 
	VAR 
		selectors, declarations: Objects.Collection; 
		hasImportantDeclarations, hasNotImportantDeclarations: BOOLEAN; 
		media: SET; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetMedia*(): SET; 
		PROCEDURE ^ IsMediumSupported*(medium: SIGNED8): BOOLEAN; 
		PROCEDURE ^ AddMedium*(medium: SIGNED8); 
		PROCEDURE ^ SetMedia*(media: SET); 
		PROCEDURE ^ GetSelectors*(): Objects.Enumerator; 
		PROCEDURE ^ AddSelector*(selector: Selector); 
		PROCEDURE ^ GetDeclarations*(): Objects.Enumerator; 
		PROCEDURE ^ AddDeclaration*(declaration: Declaration); 
		PROCEDURE ^ HasImportantDeclarations*(): BOOLEAN; 
		PROCEDURE ^ HasNotImportantDeclarations*(): BOOLEAN; 
	END RuleSet; 

	Selector* = OBJECT 
	VAR 
		a, b, c: SIGNED32; 
		simpleSelectors: Objects.Collection; 
		lastSimpleSel: SimpleSelector; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetSpecifity*(VAR a, b, c: SIGNED32); 
		PROCEDURE ^ GetSimpleSelectors*(): Objects.Enumerator; 
		PROCEDURE ^ AddSimpleSelector*(simpleSelector: SimpleSelector); 
	END Selector; 

	SimpleSelector* = OBJECT 
	VAR 
		next: SimpleSelector; 
		combinator: SIGNED8; 
		elementName: String; 
		subSelectors: Objects.Collection; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetNext*(): SimpleSelector; 
		PROCEDURE ^ GetCombinator*(): SIGNED8; 
		PROCEDURE ^ SetCombinator*(combinator: SIGNED8); 
		PROCEDURE ^ GetElementName*(): String; 
		PROCEDURE ^ SetElementName*(VAR elementName: ARRAY OF CHAR); 
		PROCEDURE ^ GetSubSelectors*(): Objects.Enumerator; 
		PROCEDURE ^ AddSubSelector*(subSelector: SubSelector); 
	END SimpleSelector; 

	SubSelector* = OBJECT 
	END SubSelector; 

	Id* = OBJECT (SubSelector)
	VAR 
		value: String; 

		PROCEDURE ^ GetValue*(): String; 
		PROCEDURE ^ SetValue*(VAR value: ARRAY OF CHAR); 
	END Id; 

	Class* = OBJECT (SubSelector)
	VAR 
		value: String; 

		PROCEDURE ^ GetValue*(): String; 
		PROCEDURE ^ SetValue*(VAR value: ARRAY OF CHAR); 
	END Class; 

	Attribute* = OBJECT (SubSelector)
	VAR 
		name, value: String; 
		relation: SIGNED8; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetName*(): String; 
		PROCEDURE ^ SetName*(VAR name: ARRAY OF CHAR); 
		PROCEDURE ^ GetRelation*(): SIGNED8; 
		PROCEDURE ^ SetRelation*(relation: SIGNED8); 
		PROCEDURE ^ GetValue*(): String; 
		PROCEDURE ^ SetValue*(VAR value: ARRAY OF CHAR); 
	END Attribute; 

	Pseudo* = OBJECT (SubSelector)
	VAR 
		isLanguage: BOOLEAN; 
		type: String; 

		PROCEDURE ^ GetType*(): String; 
		PROCEDURE ^ SetType*(VAR type: ARRAY OF CHAR); 
		PROCEDURE ^ GetLanguage*(): String; 
		PROCEDURE ^ IsLanguage*(): BOOLEAN; 
		PROCEDURE ^ SetLanguage*(VAR language: ARRAY OF CHAR); 
	END Pseudo; 

	Declaration* = OBJECT 
	VAR 
		property: String; 
		expr: Objects.Collection; 
		important: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetProperty*(): String; 
		PROCEDURE ^ SetProperty*(VAR property: ARRAY OF CHAR); 
		PROCEDURE ^ GetTerms*(): Objects.Enumerator; 
		PROCEDURE ^ AddTerm*(term: Term); 
		PROCEDURE ^ RemoveTerm*(term: Term); 
		PROCEDURE ^ IsImportant*(): BOOLEAN; 
		PROCEDURE ^ SetImportant*(important: BOOLEAN); 
	END Declaration; 

	Term* = OBJECT 
	VAR 
		operator, unaryOperator: SIGNED8; 
		type: SIGNED8; 
		intVal: SIGNED32; 
		realVal: FLOAT64; 
		stringVal: String; 
		unit: SIGNED8; 
		expr: Objects.Collection; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetOperator*(): SIGNED8; 
		PROCEDURE ^ SetOperator*(operator: SIGNED8); 
		PROCEDURE ^ GetUnaryOperator*(): SIGNED8; 
		PROCEDURE ^ SetUnaryOperator*(unaryOperator: SIGNED8); 
		PROCEDURE ^ GetType*(): SIGNED8; 
		PROCEDURE ^ SetType*(type: SIGNED8); 
		PROCEDURE ^ GetIntVal*(): SIGNED32; 
		PROCEDURE ^ SetIntVal*(intVal: SIGNED32); 
		PROCEDURE ^ GetRealVal*(): FLOAT64; 
		PROCEDURE ^ SetRealVal*(realVal: FLOAT64); 
		PROCEDURE ^ GetStringVal*(): String; 
		PROCEDURE ^ SetStringVal*(VAR stringVal: ARRAY OF CHAR); 
		PROCEDURE ^ IsStringIdent*(ident: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ IsIdent*(ident: SIGNED32): BOOLEAN; 
		PROCEDURE ^ GetUnit*(): SIGNED8; 
		PROCEDURE ^ SetUnit*(unit: SIGNED8); 
		PROCEDURE ^ IsLength*(): BOOLEAN; 
		PROCEDURE ^ IsAngle*(): BOOLEAN; 
		PROCEDURE ^ IsTime*(): BOOLEAN; 
		PROCEDURE ^ IsFrequency*(): BOOLEAN; 
		PROCEDURE ^ GetColor*(VAR r, g, b, a: CHAR); 
		PROCEDURE ^ SetColor*(r, g, b, a: CHAR); 
		PROCEDURE ^ GetTerms*(): Objects.Enumerator; 
		PROCEDURE ^ AddTerm*(term: Term); 
	END Term; 

	Page* = OBJECT 
	VAR 
		selector: String; 
		pseudoPage: SIGNED8; 
		declarations: Objects.Collection; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetSelector*(): String; 
		PROCEDURE ^ SetSelector*(VAR selector: ARRAY OF CHAR); 
		PROCEDURE ^ GetPseudoPage*(): SIGNED8; 
		PROCEDURE ^ SetPseudoPage*(pseudoPage: SIGNED8); 
		PROCEDURE ^ GetDeclarations*(): Objects.Enumerator; 
		PROCEDURE ^ AddDeclaration*(declaration: Declaration); 
	END Page; 

	FontFace* = OBJECT 
	VAR 
		declarations: Objects.Collection; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetDeclarations*(): Objects.Enumerator; 
		PROCEDURE ^ AddDeclaration*(declaration: Declaration); 
	END FontFace; 

	PROCEDURE ^ IntToRGBA*(color: SIGNED32; VAR r, g, b, a: CHAR); 
	PROCEDURE ^ RGBAToInt*(r, g, b, a: CHAR; VAR color: SIGNED32); 
	PROCEDURE ^ NewString(VAR value: ARRAY OF CHAR): String; 
BEGIN
END CSS2.
