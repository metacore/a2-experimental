MODULE Spider IN Oberon;
	IMPORT Files, Input, Display, Display3, Effects, Objects, Gadgets, Oberon, Cards, Documents, Desktops, Out;
CONST 
	IconName = \"Icons2.Spider"\; 
	MenuString = \"Cards.Undo[Undo] Spider.New[New] Desktops.StoreDoc[Store]"\; 
	Version = \"V 1.2"\; 
	CardW = Cards.CardW; 
	CardH = Cards.CardH; 
	DeltaH = 13; 
	DeltaHH = 5; 
	CARDS = 104; 
	COLUMN = 10; 
TYPE 
	DistribMove = POINTER TO DistribMoveDesc; 

	DistribMoveDesc = RECORD (Cards.MoveDesc)
		to: ARRAY COLUMN OF Cards.Stack; 
	END; 

	SimpleMove = POINTER TO SimpleMoveDesc; 

	SimpleMoveDesc = RECORD (Cards.SimpleMoveDesc)
		flipped: BOOLEAN; 
	END; 

	TakeCardMsg = RECORD (Display.FrameMsg)
		tail: Cards.Card; 
	END; 

	CanDistrMsg = RECORD (Display.FrameMsg)
		myRes, allowEmpty: BOOLEAN; 
	END; 

	DistributeMsg = RECORD (Display.FrameMsg)
		tail: Cards.Card; 
		to: ARRAY COLUMN OF Cards.Stack; 
		index: SIGNED16; 
	END; 

	FitMsg = RECORD (Display.FrameMsg)
		this: Cards.Card; 
		on: Cards.Stack; 
	END; 

	Talon = POINTER TO TalonDesc; 

	TalonDesc = RECORD (Cards.StackDesc)
	END; 

	Depot = POINTER TO DepotDesc; 

	DepotDesc = RECORD (Cards.StackDesc)
	END; 

	Column = POINTER TO ColumnDesc; 

	ColumnDesc = RECORD (Cards.StackDesc)
		topY: SIGNED16; 
		nrCards: SIGNED16; 
		first: BOOLEAN; 
	END; 
VAR 
	talonMethods: Cards.Methods; 
	depotMethods: Cards.Methods; 
	columnMethods: Cards.Methods; 
	king: Cards.Card; 

	PROCEDURE ^ StartGame(F: Display.Frame); 
	PROCEDURE ^ DrawRect(x, y: SIGNED16; card: Cards.Card); 
	PROCEDURE ^ WaitMouseRelease(M: Oberon.InputMsg); 
	PROCEDURE ^ DropOnFittingStack(M: Oberon.InputMsg; c: Cards.Card; self: Cards.Stack); 
	PROCEDURE ^ TalonAttr(T: Talon; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ CopyTalon(VAR M: Objects.CopyMsg; from, to: Talon); 
	PROCEDURE ^ TalonUndoMove(T: Cards.Stack; M: Cards.Move); 
	PROCEDURE ^ TrackTalon(T: Cards.Stack; VAR M: Oberon.InputMsg); 
	PROCEDURE ^ TalonHandler(T: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewTalon*; 
	PROCEDURE ^ DepotAttr(D: Depot; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ CopyDepot(VAR M: Objects.CopyMsg; from, to: Depot); 
	PROCEDURE ^ DepotCanDrop(D: Cards.Stack; card: Cards.Card): BOOLEAN; 
	PROCEDURE ^ DepotHandler(D: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewDepot*; 
	PROCEDURE ^ ColumnAttr(C: Column; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ CopyColumn(VAR M: Objects.CopyMsg; from, to: Column); 
	PROCEDURE ^ CanDropColumn(C: Cards.Stack; card: Cards.Card): BOOLEAN; 
	PROCEDURE ^ ColumnMoveCard(self, to: Cards.Stack; card: Cards.Card; undo: BOOLEAN); 
	PROCEDURE ^ ColumnUndoMove(C: Cards.Stack; M: Cards.Move); 
	PROCEDURE ^ DrawColumn(C: Cards.Stack; M: Display3.Mask; x, y, w, h: SIGNED16); 
	PROCEDURE ^ TrackColumn(C: Cards.Stack; VAR M: Oberon.InputMsg); 
	PROCEDURE ^ ColumnHandler*(C: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewColumn*; 
	PROCEDURE ^ LoadDocument(D: Documents.Document); 
	PROCEDURE ^ StoreDocument(D: Documents.Document); 
	PROCEDURE ^ DocHandler*(D: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewDoc*; 
	PROCEDURE ^ New*; 
BEGIN
END Spider.
