MODULE PC;
	IMPORT Commands, Modules, Streams, Files, Configuration, Diagnostics, CompilerInterface, Texts, TextUtilities, Strings, UTF8Strings, DynamicStrings, XMLObjects, XML, XMLScanner, XMLParser, StringPool, PCM, PCS, PCT, PCP, PCLIR, PCBT, PCOF, PCOM, PCV, PCC;
CONST 
	Name = \"PACO"\; 
	Description = \"Parallel Active Oberon Compiler"\; 
	FileExtension = \"MOD"\; 
	DefaultErrorFile = \"Errors.XML"\; 
	ErrorTag = \"Error"\; 
	ErrCodeAttr = \"code"\; 
	DefCodeOpt = {PCM.ArrayCheck, PCM.AssertCheck, PCM.TypeCheck, PCM.PtrInit, PCM.FullStackInit}; 
	DefParserOpt = {}; 
	DefDest = \"386"\; 
	Debug = TRUE; 
	NoBreakPC =  -1; 
TYPE 
	StringBuf = ARRAY 256 OF CHAR; 

	OptionString* = ARRAY 256 OF CHAR; 
VAR 
	ErrorFile: ARRAY 256 OF CHAR; 
	LastDest: ARRAY 16 OF CHAR; 

	PROCEDURE ^ OutMsg(scanner: PCS.Scanner); 
	PROCEDURE ^ Configure(CONST base, dest: ARRAY OF CHAR; errorIsFatal: BOOLEAN); 
	PROCEDURE ^ LoadBackEnd(CONST dest: ARRAY OF CHAR); 
	PROCEDURE ^ GetOptions(r: Streams.Reader; VAR opts: ARRAY OF CHAR); 
	PROCEDURE ^ GetSourcePrefix*(CONST options: OptionString; VAR prefix: ARRAY OF CHAR); 
	PROCEDURE ^ SubString(CONST options: ARRAY OF CHAR; VAR from: SIGNED32; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ ParseOptions(CONST options: ARRAY OF CHAR; VAR prefix, extension, dest, dump, objF: ARRAY OF CHAR; VAR cOpt, pOpt: SET); 
	PROCEDURE ^ EmitScope(scope: PCT.Scope); 
	PROCEDURE ^ Module*(scanner: PCS.Scanner; CONST source, options: ARRAY OF CHAR; breakpc: SIGNED32; log: Streams.Writer; diagnostics: Diagnostics.Diagnostics; VAR error: BOOLEAN); 
	PROCEDURE ^ CompileText*(t: Texts.Text; CONST source: ARRAY OF CHAR; pos, pc: SIGNED32; CONST opt: ARRAY OF CHAR; log: Streams.Writer; diagnostics: Diagnostics.Diagnostics; VAR error: BOOLEAN); 
	PROCEDURE ^ CompileInterface(t: Texts.Text; CONST source: ARRAY OF CHAR; pos: SIGNED32; CONST pc, opt: ARRAY OF CHAR; log: Streams.Writer; diagnostics: Diagnostics.Diagnostics; VAR error: BOOLEAN); 
	PROCEDURE ^ CompileFile*(CONST name, opt: ARRAY OF CHAR; pc: SIGNED32; log: Streams.Writer; diagnostics: Diagnostics.Diagnostics; VAR error: BOOLEAN); 
	PROCEDURE ^ CompileAsciiFile*(CONST name, opt: ARRAY OF CHAR; pc: SIGNED32; log: Streams.Writer; diagnostics: Diagnostics.Diagnostics; VAR error: BOOLEAN); 
	PROCEDURE ^ Compile*(context: Commands.Context); 
	PROCEDURE ^ TrapHandler(pos, line, row: Streams.Position; CONST msg: ARRAY OF CHAR); 
	PROCEDURE ^ InitErrMsg*; 
	PROCEDURE ^ Cleanup; 
BEGIN
END PC.
