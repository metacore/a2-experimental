MODULE Locks;
	IMPORT KernelLog, Objects, Kernel;
CONST 
	Statistics = TRUE; 
TYPE 
	Lock* = OBJECT {EXCLUSIVE} 
	VAR 
		lockedBy: ANY ; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ Acquire*; 
		PROCEDURE ^ Release*; 
		PROCEDURE ^ HasLock*(): BOOLEAN; 
	END Lock; 

	RecursiveLock* = OBJECT {EXCLUSIVE} 
	VAR 
		lockLevel: SIZE; 
		lockedBy: ANY ; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ Acquire*; 
		PROCEDURE ^ Release*; 
		PROCEDURE ^ HasLock*(): BOOLEAN; 
	END RecursiveLock; 

	LockReleasedHandler* = PROCEDURE {DELEGATE}; 

	ReaderLockInfo = RECORD 
		owner: ANY ; 
		lockLevel: SIZE; 
	END; 

	ReaderLockList = POINTER TO ARRAY OF ReaderLockInfo; 

	RWLock* = OBJECT {EXCLUSIVE} 
	VAR 
		lockLevel: SIZE; 
		lockedBy: ANY ; 
		lastReader: ANY ; 
		nofReaders: SIZE; 
		readers: ReaderLockList; 
		wlReleaseHandler: LockReleasedHandler; 
		DEADLOCK: BOOLEAN; 
		nofReadLocks, nofWriteLocks: SIZE; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ AcquireWrite*; 
		PROCEDURE ^ ReleaseWrite*; 
		PROCEDURE ^ HasWriteLock*(): BOOLEAN; 
		PROCEDURE ^ GetWLockLevel*(): SIZE; 
		PROCEDURE ^ SetLockReleasedHandler*(handler: LockReleasedHandler); 
		PROCEDURE ^ AcquireRead*; 
		PROCEDURE ^ ReleaseRead*; 
		PROCEDURE ^ HasReadLock*(): BOOLEAN; 
		PROCEDURE ^ InternalHasReadLock(): BOOLEAN; 
		PROCEDURE ^ Reset*; 
		PROCEDURE ^ SetDeadLock; 
		PROCEDURE ^ WriteLock*; 
		PROCEDURE ^ WriteStats*; 
	END RWLock; 
VAR 
	locks: Kernel.FinalizedCollection; 

	PROCEDURE ^ RegisterLock(x: ANY ); 
	PROCEDURE ^ DL(obj: ANY ; VAR cont: BOOLEAN); 
	PROCEDURE ^ DeadLock*; 
BEGIN
END Locks.
