MODULE FoxSections;
	IMPORT SyntaxTree := FoxSyntaxTree, Streams, Global := FoxGlobal, Formats := FoxFormats, Basic := FoxBasic, Strings, ObjectFile;
CONST 
	EntryCodeSection* = ObjectFile.EntryCode; 
	ExitCodeSection* = ObjectFile.ExitCode; 
	InitCodeSection* = ObjectFile.InitCode; 
	BodyCodeSection* = ObjectFile.BodyCode; 
	CodeSection* = ObjectFile.Code; 
	VarSection* = ObjectFile.Data; 
	ConstSection* = ObjectFile.Const; 
	InlineCodeSection* = 10; 
	UnknownSectionType* = 11; 
	LineCommentStart* = \"; "\; 
	UnknownSize* =  -1; 
	UndefinedFinalPosition* =  -1; 
TYPE 
	Identifier* = ObjectFile.Identifier; 

	SectionName* = ObjectFile.SegmentedName; 

	Section* = OBJECT 
	VAR 
		name-: SectionName; 
		type-: SIGNED8; 
		fixed-: BOOLEAN; 
		positionOrAlignment-: SIZE; 
		fingerprint-: Basic.Fingerprint; 
		bitsPerUnit-: SIGNED32; 
		symbol-: SyntaxTree.Symbol; 
		offset-: SIZE; 
		isReachable-: BOOLEAN; 

		PROCEDURE ^  & InitSection*(type: SIGNED8; CONST n: ObjectFile.SegmentedName; symbol: SyntaxTree.Symbol); 
		PROCEDURE ^ IsCode*(): BOOLEAN; 
		PROCEDURE ^ SetOffset*(offset: SIZE); 
		PROCEDURE ^ SetReachability*(isReachable: BOOLEAN); 
		PROCEDURE ^ SetBitsPerUnit*(bitsPerUnit: SIGNED32); 
		PROCEDURE ^ IsAligned*(): BOOLEAN; 
		PROCEDURE ^ SetPositionOrAlignment*(isFixed: BOOLEAN; positionOrAlignment: SIZE); 
		PROCEDURE ^ GetSize*(): SIGNED32; 
		PROCEDURE ^ SetFingerprint*(fingerprint: Basic.Fingerprint); 
		PROCEDURE ^ SetType*(type: SIGNED8); 
		PROCEDURE ^ Dump*(w: Streams.Writer); 
		PROCEDURE ^ WriteRaw*(w: Streams.Writer); 
		PROCEDURE ^ DumpName*(w: Streams.Writer); 
	END Section; 

	CommentStr* = POINTER TO ARRAY OF CHAR; 

	Comment* = OBJECT 
	VAR 
		str-: CommentStr; 
		strLen: SIZE; 
		pos-: SIZE; 
		nextComment-: Comment; 

		PROCEDURE ^  & Init*(pos: SIZE); 
		PROCEDURE ^ Append(CONST buf: ARRAY OF CHAR; ofs, len: SIZE); 
		PROCEDURE ^ Dump*(w: Streams.Writer); 
	END Comment; 

	GetPCProcedure = PROCEDURE {DELEGATE}():SIZE; 

	CommentWriter* = OBJECT (Streams.Writer)
	VAR 
		firstComment-, lastComment-: Comment; 
		comments-: SIGNED32; 
		getPC: GetPCProcedure; 

		PROCEDURE ^ AppendToLine*(CONST buf: ARRAY OF CHAR; ofs, len: SIZE; propagate: BOOLEAN; VAR res: INTEGER); 
		PROCEDURE ^ Ln*; 
		PROCEDURE ^ Reset*; 
		PROCEDURE ^  & InitCommentWriter*(getPC: GetPCProcedure); 
	END CommentWriter; 

	SectionLookup = OBJECT (Basic.HashTable)

		PROCEDURE ^ GetSection(symbol: SyntaxTree.Symbol): Section; 
		PROCEDURE ^ PutSection(symbol: SyntaxTree.Symbol; section: Section); 
	END SectionLookup; 

	SectionNameLookup = OBJECT (Basic.HashTableSegmentedName)

		PROCEDURE ^ GetSection(CONST name: Basic.SegmentedName): Section; 
		PROCEDURE ^ PutSection(CONST name: Basic.SegmentedName; section: Section); 
	END SectionNameLookup; 

	SectionList* = OBJECT (Basic.List)
	VAR 
		lookup: SectionLookup; 
		lookupName: SectionNameLookup; 

		PROCEDURE ^  & InitListOfSections*; 
		PROCEDURE ^ GetSection*(index: SIZE): Section; 
		PROCEDURE ^ SetSection*(index: SIZE; section: Section); 
		PROCEDURE ^ AddSection*(section: Section); 
		PROCEDURE ^ FindBySymbol*(CONST symbol: SyntaxTree.Symbol): Section; 
		PROCEDURE ^ FindByName*(CONST name: Basic.SegmentedName): Section; 
		PROCEDURE ^ Dump*(w: Streams.Writer); 
		PROCEDURE ^ WriteRaw*(w: Streams.Writer); 
	END SectionList; 

	NameEntry = POINTER TO RECORD 
		name: SyntaxTree.IdentifierString; 
	END; 

	NameList* = OBJECT (Basic.List)

		PROCEDURE ^ AddName*(CONST moduleName: ARRAY OF CHAR); 
		PROCEDURE ^ GetName*(index: SIZE): SyntaxTree.IdentifierString; 
		PROCEDURE ^ ContainsName*(name: SyntaxTree.IdentifierString): BOOLEAN; 
	END NameList; 

	Module* = OBJECT (Formats.GeneratedModule)
	VAR 
		allSections-: SectionList; 
		importedSections-: SectionList; 
		platformName-: SyntaxTree.IdentifierString; 
		imports-: NameList; 
		exports-: NameList; 

		PROCEDURE ^  & Init*(module: SyntaxTree.Module; system: Global.System); 
		PROCEDURE ^ SetImports*(imports: NameList); 
		PROCEDURE ^ SetPlatformName*(CONST platformName: ARRAY OF CHAR); 
		PROCEDURE ^ Dump*(w: Streams.Writer); 
	END Module; 

	PROCEDURE ^ DumpFiltered*(w: Streams.Writer; module: Module; CONST filter: ARRAY OF CHAR); 
	PROCEDURE ^ NewCommentWriter*(getPC: GetPCProcedure): CommentWriter; 
BEGIN
END FoxSections.
