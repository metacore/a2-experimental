MODULE PSPrinter IN Oberon;
	IMPORT Files, Modules, Printer, Objects, Fonts, Texts, Strings, Oberon, Pictures;
CONST 
	N = 20; 
	maxFonts = 64; 
	headerFileName = \"PSHeader.Text"\; 
	bold = 0; 
	italics = 1; 
	medium = 2; 
	oneup = 0; 
	twoup = 1; 
	fourup = 2; 
	rotated = 3; 
TYPE 
	Name* = ARRAY 32 OF CHAR; 

	PSPrinter* = POINTER TO PSPrinterDesc; 

	PSPrinterDesc* = RECORD (Printer.PrinterDesc)
		Escape*: PROCEDURE (P: Printer.Printer; s: ARRAY OF CHAR); 
		printF*: Files.File; 
		eps*: BOOLEAN; 
		pno*: INTEGER; 
		l, t, r, b: LONGINT; 
		sx, sy: INTEGER; 
		mode, location: SHORTINT; 
		duplex: BOOLEAN; 
		anonymous: BOOLEAN; 
	END; 

	FontDesc = RECORD 
		name: Name; 
		used: ARRAY 8 OF SET; 
	END; 

	RealVector = ARRAY N OF REAL; 

	Poly = RECORD 
		a, b, c, d, t: REAL; 
	END; 

	PolyVector = ARRAY N OF Poly; 

	FontDef = POINTER TO FontDefDesc; 

	FontDefDesc = RECORD 
		name: ARRAY 64 OF CHAR; 
		family: ARRAY 32 OF CHAR; 
		size: INTEGER; 
		attr: CHAR; 
		next: FontDef; 
	END; 
VAR 
	fontTable: ARRAY (maxFonts + 1) OF FontDesc; 
	fontIndex, curFont: INTEGER; 
	listFont: Name; 
	headerT: Texts.Text; 
	bodyF: Files.File; 
	writer: Files.Rider; 
	ppos: LONGINT; 
	hexArray: ARRAY 17 OF CHAR; 
	curR, curG, curB, setR, setG, setB: INTEGER; 
	metric: Objects.Library; 
	fontMapDict: FontDef; 
	fontMapDictN: INTEGER; 
	default: Objects.Name; 

	PROCEDURE ^ Ch(ch: CHAR); 
	PROCEDURE ^ Str(s: ARRAY OF CHAR); 
	PROCEDURE ^ Int(i: LONGINT); 
	PROCEDURE ^ Hex2(ch: CHAR); 
	PROCEDURE ^ Real(x: REAL); 
	PROCEDURE ^ Ln; 
	PROCEDURE ^ Error(s0, s1: ARRAY OF CHAR); 
	PROCEDURE ^ Min(x, y: LONGINT): LONGINT; 
	PROCEDURE ^ Box*(P: PSPrinter; x, y, w, h: LONGINT); 
	PROCEDURE ^ SetMappedFont(fname: ARRAY OF CHAR); 
	PROCEDURE ^ SetBitmapFont(VAR R: Files.Rider; fd: FontDesc; pRes: INTEGER); 
	PROCEDURE ^ DefineFont(fd: FontDesc; echo: BOOLEAN); 
	PROCEDURE ^ ParseName(VAR name, family: ARRAY OF CHAR; VAR size: LONGINT; VAR style: SET; VAR class: ARRAY OF CHAR); 
	PROCEDURE ^ GetDim(P: Printer.Printer; label: ARRAY OF CHAR; def: INTEGER; VAR val: INTEGER); 
	PROCEDURE ^ Swap(VAR x, y: INTEGER); 
	PROCEDURE ^ InitMetrics*(P: Printer.Printer); 
	PROCEDURE ^ GetSuffix(VAR str, suf: ARRAY OF CHAR); 
	PROCEDURE ^ SetColor; 
	PROCEDURE ^ ResetColor; 
	PROCEDURE ^ Open*(P: Printer.Printer; printer, options: ARRAY OF CHAR); 
	PROCEDURE ^ UseListFont*(P: Printer.Printer; name: ARRAY OF CHAR); 
	PROCEDURE ^ Escape*(P: Printer.Printer; s: ARRAY OF CHAR); 
	PROCEDURE ^ ReplConst*(P: Printer.Printer; x, y, w, h: INTEGER); 
	PROCEDURE ^ StringSize(VAR s: ARRAY OF CHAR; fnt: Fonts.Font; VAR w, h, dsr: INTEGER); 
	PROCEDURE ^ ContString*(P: Printer.Printer; s: ARRAY OF CHAR; fnt: Fonts.Font); 
	PROCEDURE ^ String*(P: Printer.Printer; x, y: INTEGER; s: ARRAY OF CHAR; fnt: Fonts.Font); 
	PROCEDURE ^ ReplPattern*(P: Printer.Printer; x, y, w, h, col: INTEGER); 
	PROCEDURE ^ Picture*(P: Printer.Printer; pict: Pictures.Picture; sx, sy, sw, sh, dx, dy, dw, dh, mode: INTEGER); 
	PROCEDURE ^ Circle*(P: Printer.Printer; x0, y0, r: INTEGER); 
	PROCEDURE ^ Ellipse*(P: Printer.Printer; x0, y0, a, b: INTEGER); 
	PROCEDURE ^ Line*(P: Printer.Printer; x0, y0, x1, y1: INTEGER); 
	PROCEDURE ^ UseColor*(P: Printer.Printer; red, green, blue: INTEGER); 
	PROCEDURE ^ SolveTriDiag(VAR a, b, c, y: RealVector; n: INTEGER); 
	PROCEDURE ^ OpenSpline(VAR x, y, d: RealVector; n: INTEGER); 
	PROCEDURE ^ ClosedSpline(VAR x, y, d: RealVector; n: INTEGER); 
	PROCEDURE ^ PrintPoly(P: PSPrinter; VAR p, q: Poly; lim: REAL); 
	PROCEDURE ^ Spline*(P: Printer.Printer; x0, y0, n, open: INTEGER; VAR X, Y: ARRAY OF INTEGER); 
	PROCEDURE ^ Page*(P: Printer.Printer; nofcopies: INTEGER); 
	PROCEDURE ^ Close*(P: Printer.Printer); 
	PROCEDURE ^ GetMetric*(P: Printer.Printer; fnt: Fonts.Font): Fonts.Font; 
	PROCEDURE ^ NewPrinter*(): Printer.Printer; 
	PROCEDURE ^ Install*; 
	PROCEDURE ^ Init; 
	PROCEDURE ^ Cleanup; 
BEGIN
END PSPrinter.
