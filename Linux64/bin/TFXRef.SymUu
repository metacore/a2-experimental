MODULE TFXRef;
	IMPORT TS := TFTypeSys, TFAOParser, MultiLogger, Streams, Trace, Commands, KernelLog, Kernel, TextUtilities, Texts, ST := TFScopeTools, S := BimboScanner, Strings, Files, UTF8Strings, TFClasses, Dates, TFDocGenerator;
CONST 
	KindNoStart = 0; 
	KindComment = 1; 
	KindDeclaration = 2; 
	KindUse = 3; 
TYPE 
	Range = RECORD 
		a, b: SIGNED32; 
		kind: SIGNED32; 
		no: TS.NamedObject; 
	END; 

	NamedObjectArray = POINTER TO ARRAY OF TS.NamedObject; 

	LocalExternalUsesSet = OBJECT 
	VAR 
		nof: SIGNED32; 
		items: NamedObjectArray; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Add(x: TS.NamedObject); 
		PROCEDURE ^ Grow; 
	END LocalExternalUsesSet; 

	StringList = POINTER TO ARRAY OF Strings.String; 

	GlobalUse = OBJECT 
	VAR 
		items: StringList; 
		nofItems: SIGNED32; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ AddFile(CONST filename: ARRAY OF CHAR); 
		PROCEDURE ^ Grow; 
	END GlobalUse; 
VAR 
	ml: MultiLogger.LogWindow; 
	globalUses: TFClasses.StringHashMap; 
	ranges: POINTER TO ARRAY OF Range; 
	localUses: LocalExternalUsesSet; 
	currentAuthor: ARRAY 128 OF CHAR; 
	currentPurpose: ARRAY 4096 OF CHAR; 

	PROCEDURE ^ MakeRange(from, to, kind: SIGNED32; no: TS.NamedObject); 
	PROCEDURE ^ DumpConst(scope: TS.Scope; c: TS.Const); 
	PROCEDURE ^ DumpObject(o: TS.Class); 
	PROCEDURE ^ DumpArray(a: TS.Array; scope: TS.Scope); 
	PROCEDURE ^ DumpRecord(r: TS.Record); 
	PROCEDURE ^ DumpProcedure(p: TS.ProcedureType); 
	PROCEDURE ^ CheckExpressionList(e: TS.ExpressionList; sig: TS.ProcedureSignature; scope: TS.Scope); 
	PROCEDURE ^ CheckExpression(e: TS.Expression; scope: TS.Scope); 
	PROCEDURE ^ CheckDesignator(d: TS.Designator; scope: TS.Scope); 
	PROCEDURE ^ DumpType*(t: TS.Type; scope: TS.Scope); 
	PROCEDURE ^ DumpCases(case: TS.Case; scope: TS.Scope); 
	PROCEDURE ^ DumpTypeDecl(t: TS.TypeDecl; scope: TS.Scope); 
	PROCEDURE ^ DumpVar(v: TS.Var; scope: TS.Scope); 
	PROCEDURE ^ DumpStatementSequence(s: TS.Statement; scope: TS.Scope); 
	PROCEDURE ^ CheckSignature(sig: TS.ProcedureSignature; scope: TS.Scope); 
	PROCEDURE ^ DumpProcDecl(p: TS.ProcDecl); 
	PROCEDURE ^ DumpDeclarations(d: TS.Scope); 
	PROCEDURE ^ NoteCommentRanges(comments: TS.Comments); 
	PROCEDURE ^ CommentsFromNamedObject(no: TS.NamedObject); 
	PROCEDURE ^ NoteDeclaration(no: TS.NamedObject); 
	PROCEDURE ^ DumpM*(m: TS.Module); 
	PROCEDURE ^ DumpLocalUses; 
	PROCEDURE ^ GenerateModule(module: TS.Module; r: Streams.Reader; out: Streams.Writer); 
	PROCEDURE ^ InitWithText(t: Texts.Text; pos: SIGNED32): Strings.String; 
	PROCEDURE ^ ProcessFile(CONST filename, targetPath: ARRAY OF CHAR; indexFile: Streams.Writer); 
	PROCEDURE ^ Generate*(par: Commands.Context); 
	PROCEDURE ^ MakeXRef*(par: Commands.Context); 
	PROCEDURE ^ PageTime(out: Streams.Writer); 
	PROCEDURE ^ IsKeyWord(CONST str: ARRAY OF CHAR): BOOLEAN; 
BEGIN
END TFXRef.
