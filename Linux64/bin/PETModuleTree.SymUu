MODULE PETModuleTree;
	IMPORT Commands, Diagnostics, Streams, Files, TextUtilities, WMStandardComponents, WMGraphics, WMProperties, WMComponents, Strings, WMTrees, FoxScanner, ModuleParser, PETTrees;
CONST 
	Title = \" Program Structure"\; 
	TitleError = \" Program Structure (Errors)"\; 
	ShowImages = TRUE; 
	ImageActive = \"ModuleTreesIcons.tar://activity.png"\; 
	ImageCommandProc = \"ModuleTreesIcons.tar://arrow-red.png"\; 
	ImageContextProc = \"ModuleTreesIcons.tar://arrow-green.png"\; 
	ColorTypes = 36863; 
	ColorObjects = WMGraphics.Blue; 
	ColorActiveObjects = ColorObjects; 
	ColorProcedure = WMGraphics.Black; 
	ColorExclusive = WMGraphics.Red; 
	ColorHasExclusiveBlock = WMGraphics.Magenta; 
	ColorInterrupt = 13421823; 
	SortIgnore = 1; 
	SortProcedure = 2; 
	SortNo = 90; 
	SortBody = 99; 
	NotPublic = 0; 
	Other = 0; 
	CommandProc = 1; 
	ContextProc = 2; 
TYPE 
	Name = ARRAY 32 OF CHAR; 

	TreeNode = OBJECT (PETTrees.TreeNode)
	VAR 
		commandName: Strings.String; 
		modulename: Name; 
		sortHint: WORD; 
		flags: SET; 
		position: Streams.Position; 

		PROCEDURE ^  & Init*; 
	END TreeNode; 

	ModuleTree* = OBJECT {EXCLUSIVE} (PETTrees.Tree)
	VAR 
		showTypeHierarchy-, showImportedModules-: WMProperties.BooleanProperty; 
		moduleName: Name; 
		detailsBtn, publicBtn: WMStandardComponents.Button; 
		showPublicOnly: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ PropertyChanged*(sender, data: ANY); 
		PROCEDURE ^ ShowDetailsHandler(sender, data: ANY); 
		PROCEDURE ^ ShowPublicHandler(sender, data: ANY); 
		PROCEDURE ^ SetNodeVisibilities(parent: WMTrees.TreeNode; showPublicOnly: BOOLEAN); 
		PROCEDURE ^ AddModule(node: WMTrees.TreeNode; module: ModuleParser.Module; expand, showPublicOnly, showTypeHierarchy, showImportedModules: BOOLEAN); 
		PROCEDURE ^ GetNewNode*(): PETTrees.TreeNode; 
		PROCEDURE ^ AddNodes*(parent: PETTrees.TreeNode; diagnostics: Diagnostics.Diagnostics; log: Streams.Writer); 
		PROCEDURE ^ ClickNode*(sender, data: ANY); 
		PROCEDURE ^ MiddleClickNode*(sender, data: ANY); 
		PROCEDURE ^ SetNodeInfo(node: TreeNode; mnode: ModuleParser.Node; infoItem: ModuleParser.InfoItem; isPublic: BOOLEAN; sortHint: WORD; color: WMGraphics.Color; style: SET); 
		PROCEDURE ^ IsPublic(identDef: ModuleParser.IdentDef): BOOLEAN; 
		PROCEDURE ^ IsNodeGreater*(left, right: WMTrees.TreeNode): BOOLEAN; 
		PROCEDURE ^ HasPublicConsts(constDecl: ModuleParser.ConstDecl): BOOLEAN; 
		PROCEDURE ^ HasPublicVars(varDecl: ModuleParser.VarDecl): BOOLEAN; 
		PROCEDURE ^ GetModuleNode(node: ModuleParser.Node): ModuleParser.Module; 
		PROCEDURE ^ GetProcedureType(procHead: ModuleParser.ProcHead): WORD; 
		PROCEDURE ^ AddBody(root: WMTrees.TreeNode; pnode: ModuleParser.Node; modifiers: SET; pos: Streams.Position); 
		PROCEDURE ^ AddImportList(parent: WMTrees.TreeNode; importList: ModuleParser.Import; showImportedModules: BOOLEAN); 
		PROCEDURE ^ AddDefinitions(parent: WMTrees.TreeNode; definitions: ModuleParser.Definition); 
		PROCEDURE ^ AddDeclSeq(parent: WMTrees.TreeNode; declSeq: ModuleParser.DeclSeq); 
		PROCEDURE ^ AddProcDecl(treeNode: WMTrees.TreeNode; procDecl: ModuleParser.ProcDecl); 
		PROCEDURE ^ AddProcHead(treeNode: WMTrees.TreeNode; procHead: ModuleParser.ProcHead): WMTrees.TreeNode; 
		PROCEDURE ^ AddFormalPars(parent: WMTrees.TreeNode; formalPars: ModuleParser.FormalPars); 
		PROCEDURE ^ AddFPSection(parent: WMTrees.TreeNode; fpSection: ModuleParser.FPSection); 
		PROCEDURE ^ AddVarDecl(parent: WMTrees.TreeNode; varDecl: ModuleParser.VarDecl); 
		PROCEDURE ^ AddTypeDecl(parent: WMTrees.TreeNode; typeDecl: ModuleParser.TypeDecl); 
		PROCEDURE ^ AddType(parent: WMTrees.TreeNode; type: ModuleParser.Type; anonymous: BOOLEAN); 
		PROCEDURE ^ AddRecord(parent: WMTrees.TreeNode; record: ModuleParser.Record; anonymous, addSuperRecords: BOOLEAN); 
		PROCEDURE ^ AddEnumeration(parent: WMTrees.TreeNode; enumeration: ModuleParser.Enumeration); 
		PROCEDURE ^ AddFieldDecl(parent: WMTrees.TreeNode; fieldDecl: ModuleParser.FieldDecl); 
		PROCEDURE ^ AddPointer(parent: WMTrees.TreeNode; pointer: ModuleParser.Pointer); 
		PROCEDURE ^ AddArray(parent: WMTrees.TreeNode; array: ModuleParser.Array); 
		PROCEDURE ^ NewNode(parent: WMTrees.TreeNode; caption: Strings.String): TreeNode; 
		PROCEDURE ^ AddQualident(parent: WMTrees.TreeNode; qualident: ModuleParser.Qualident; color: WMGraphics.Color; style: SET): WMTrees.TreeNode; 
		PROCEDURE ^ AddSuperRecords(parent: WMTrees.TreeNode; record: ModuleParser.Record); 
		PROCEDURE ^ AddSuperClasses(parent: WMTrees.TreeNode; object: ModuleParser.Object); 
		PROCEDURE ^ AddObject(parent: WMTrees.TreeNode; object: ModuleParser.Object; anonymous, addSuperClasses: BOOLEAN); 
		PROCEDURE ^ AddCell(parent: WMTrees.TreeNode; cell: ModuleParser.Cell; anonymous: BOOLEAN); 
		PROCEDURE ^ AddPort(parent: WMTrees.TreeNode; port: ModuleParser.Port); 
		PROCEDURE ^ AddProcedure(parent: WMTrees.TreeNode; proc: ModuleParser.Procedure); 
		PROCEDURE ^ AddIdentList(parent: WMTrees.TreeNode; identList: ModuleParser.IdentList; VAR nofIdents: SIZE); 
		PROCEDURE ^ AddConstDecl(parent: WMTrees.TreeNode; constDecl: ModuleParser.ConstDecl); 
		PROCEDURE ^ AddIdentDef(parent: WMTrees.TreeNode; node: ModuleParser.Node; identDef: ModuleParser.IdentDef; sortHint: WORD; color: WMGraphics.Color; style: SET): TreeNode; 
		PROCEDURE ^ AddInfoItem(parent: WMTrees.TreeNode; node: ModuleParser.Node; infoItem: ModuleParser.InfoItem; isPublic: BOOLEAN; sortHint: WORD; color: WMGraphics.Color; style: SET): TreeNode; 
	END ModuleTree; 
VAR 
	PrototypeShowTypeHierarchy, PrototypeShowImportedModules: WMProperties.BooleanProperty; 
	StrUNKNOWN, StrVAR, StrCONST, StrIMPORT, StrIN, StrBODY, StrRETURN, StrARRAY, StrOF, StrBecomes, StrAmpersand, StrMinus, StrStar, StrQuote, StrOverwritten, StrOverwrite: Strings.String; 

	PROCEDURE ^ GetColor(modifiers: SET; defaultColor: WMGraphics.Color): WMGraphics.Color; 
	PROCEDURE ^ GenModuleTree*(): PETTrees.Tree; 
	PROCEDURE ^ InitStrings; 
BEGIN
END PETModuleTree.
