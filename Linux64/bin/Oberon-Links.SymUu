MODULE Links IN Oberon;
	IMPORT Files, Objects;
CONST 
TYPE 
	Link* = POINTER TO LinkDesc; 

	LinkDesc* = RECORD 
		next*: Link; 
		name*: ARRAY 32 OF CHAR; 
		obj*: Objects.Object; 
	END; 

	PROCEDURE ^ Atom(lib: Objects.Library; name: ARRAY OF CHAR): SIGNED16; 
	PROCEDURE ^ WriteRef(VAR r: Files.Rider; lib: Objects.Library; obj: Objects.Object); 
	PROCEDURE ^ ReadRef(VAR r: Files.Rider; lib: Objects.Library; VAR obj: Objects.Object); 
	PROCEDURE ^ StoreLinks*(VAR R: Files.Rider; lib: Objects.Library; list: Link); 
	PROCEDURE ^ LoadLinks*(VAR R: Files.Rider; lib: Objects.Library; VAR list: Link); 
	PROCEDURE ^ CopyPtr(VAR M: Objects.CopyMsg; obj: Objects.Object): Objects.Object; 
	PROCEDURE ^ CopyLinks*(VAR M: Objects.CopyMsg; in: Link; VAR out: Link); 
	PROCEDURE ^ BindLinks*(list: Link; VAR M: Objects.BindMsg); 
	PROCEDURE ^ InsertLink*(VAR list: Link; name: ARRAY OF CHAR; val: Link); 
	PROCEDURE ^ FindLink*(name: ARRAY OF CHAR; list: Link): Link; 
	PROCEDURE ^ DeleteLink*(VAR list: Link; name: ARRAY OF CHAR); 
	PROCEDURE ^ HandleLinkMsg*(VAR list: Link; VAR M: Objects.LinkMsg); 
	PROCEDURE ^ Broadcast*(list: Link; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ GetLink*(obj: Objects.Object; name: ARRAY OF CHAR; VAR ob1: Objects.Object); 
	PROCEDURE ^ SetLink*(obj: Objects.Object; name: ARRAY OF CHAR; ob1: Objects.Object); 
BEGIN
END Links.
