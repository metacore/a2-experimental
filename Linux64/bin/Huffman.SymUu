MODULE Huffman;
	IMPORT Streams;
TYPE 
	BitReader = OBJECT 
	VAR 
		in: Streams.Reader; 
		curByte, curBit: SIGNED32; 

		PROCEDURE ^  & New(r: Streams.Reader); 
		PROCEDURE ^ Initialize; 
		PROCEDURE ^ Bit(): SIGNED32; 
	END BitReader; 

	BitWriter = OBJECT 
	VAR 
		out: Streams.Writer; 
		curByte, curBit: SIGNED32; 

		PROCEDURE ^  & New(w: Streams.Writer); 
		PROCEDURE ^ Bit(bit: SIGNED32); 
		PROCEDURE ^ Finish; 
	END BitWriter; 

	PatternCounts = ARRAY 256 OF SIGNED32; 

	Pattern = RECORD 
		patt, weight: SIGNED32; 
	END; 

	PatternWeights = POINTER TO ARRAY OF Pattern; 

	HuffCode = RECORD 
		bits, val: SIGNED32; 
	END; 

	Node = OBJECT 
	VAR 
		weight: SIGNED32; 
		pattern: SIGNED32; 
		left, right: Node; 

		PROCEDURE ^  & Init(patt, w: SIGNED32); 
		PROCEDURE ^ AddChildren(l, r: Node); 
	END Node; 

	Encoder* = OBJECT 
	VAR 
		w: Streams.Writer; 
		out: BitWriter; 
		codeTable: ARRAY 256 OF HuffCode; 

		PROCEDURE ^  & New*(output: Streams.Writer); 
		PROCEDURE ^ WriteFrequencies(pw: PatternWeights); 
		PROCEDURE ^ CountPatterns(CONST source: ARRAY OF CHAR; len: SIZE): PatternWeights; 
		PROCEDURE ^ BuildCodeTable(pw: PatternWeights); 
		PROCEDURE ^ PutCode(code: HuffCode); 
		PROCEDURE ^ CompressBlock*(CONST source: ARRAY OF CHAR; len: SIZE); 
	END Encoder; 

	Decoder* = OBJECT 
	VAR 
		r: Streams.Reader; 
		in: BitReader; 
		tree: Node; 

		PROCEDURE ^  & New*(input: Streams.Reader); 
		PROCEDURE ^ ReadFrequencies(r: Streams.Reader): PatternWeights; 
		PROCEDURE ^ ExtractBlock*(VAR buf: ARRAY OF CHAR; len: SIGNED32); 
	END Decoder; 

	PROCEDURE ^ ContainedPatterns(VAR pc: PatternCounts): PatternWeights; 
	PROCEDURE ^ BuildTree(pw: PatternWeights): Node; 
BEGIN
END Huffman.
