MODULE TFAOParser;
	IMPORT S := BimboScanner, TS := TFTypeSys, Texts, TextUtilities, Files, Strings, KernelLog, Streams, TFDumpTS, Commands, Kernel, TFCheck;
CONST 
TYPE 
	Parser* = OBJECT 
	VAR 
		s: S.Scanner; 
		m*: TS.Module; 
		pos: SIGNED32; 
		comments: TS.Comments; 
		lastStatement: TS.Statement; 

		PROCEDURE ^ CommentToStructure; 
		PROCEDURE ^ Next; 
		PROCEDURE ^ StorePos(VAR pos: TS.Position); 
		PROCEDURE ^ Error(CONST str: ARRAY OF CHAR); 
		PROCEDURE ^ Warn(CONST str: ARRAY OF CHAR); 
		PROCEDURE ^ Eat(sym: SIGNED32); 
		PROCEDURE ^ ImportList; 
		PROCEDURE ^ ProcedureType(scope: TS.Scope): TS.ProcedureType; 
		PROCEDURE ^ Type(scope: TS.Scope; CONST name: ARRAY OF CHAR): TS.Type; 
		PROCEDURE ^ Pointer(scope: TS.Scope): TS.Pointer; 
		PROCEDURE ^ DeclSeq(declarations: TS.Scope); 
		PROCEDURE ^ ConstDecl(): TS.Const; 
		PROCEDURE ^ TypeDecl(scope: TS.Scope): TS.TypeDecl; 
		PROCEDURE ^ VarDecl(scope: TS.Scope): TS.ObjectList; 
		PROCEDURE ^ Object(CONST name: ARRAY OF CHAR): TS.Class; 
		PROCEDURE ^ BlockAttributes; 
		PROCEDURE ^ Set(): TS.Set; 
		PROCEDURE ^ Factor(): TS.Expression; 
		PROCEDURE ^ Term(): TS.Expression; 
		PROCEDURE ^ SimpleExpression(): TS.Expression; 
		PROCEDURE ^ Expression(): TS.Expression; 
		PROCEDURE ^ ExpressionList(): TS.ExpressionList; 
		PROCEDURE ^ Designator(): TS.Designator; 
		PROCEDURE ^ IFStatement(): TS.IFStatement; 
		PROCEDURE ^ Case(): TS.Case; 
		PROCEDURE ^ StatementSequence(): TS.Statement; 
		PROCEDURE ^ StatementBlock(): TS.StatementBlock; 
		PROCEDURE ^ Body(): TS.StatementBlock; 
		PROCEDURE ^ SysFlag; 
		PROCEDURE ^ VisibilityModifier(): SET; 
		PROCEDURE ^ Array(array: TS.Array; scope: TS.Scope); 
		PROCEDURE ^ Record(record: TS.Record; scope: TS.Scope); 
		PROCEDURE ^ FieldList(scope: TS.Scope): TS.ObjectList; 
		PROCEDURE ^ FieldDecl(scope: TS.Scope): TS.ObjectList; 
		PROCEDURE ^ FPSection(scope: TS.Scope): TS.ObjectList; 
		PROCEDURE ^ ProcSignature(scope: TS.Scope): TS.ProcedureSignature; 
		PROCEDURE ^ ProcDecl(currentScope: TS.Scope): TS.ProcDecl; 
		PROCEDURE ^ Definition; 
		PROCEDURE ^ Module; 
		PROCEDURE ^ Parse*(s: S.Scanner); 
	END Parser; 

	FileListEntry = POINTER TO RECORD 
		filename: ARRAY 128 OF CHAR; 
		next: FileListEntry; 
	END; 

	SymbolCreator = OBJECT {EXCLUSIVE} 
	VAR 
		filename: ARRAY 128 OF CHAR; 

	BEGIN{ACTIVE} 
	END SymbolCreator; 
VAR 
	Universe*: TS.Scope; 
	System: TS.Module; 
	release: TS.ObjectList; 
	fileList: FileListEntry; 
	nofWorkers: SIGNED32; 

	PROCEDURE ^ GetTask(VAR filename: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ AddTask(CONST filename: ARRAY OF CHAR); 
	PROCEDURE ^ IncWorker; 
	PROCEDURE ^ DecWorker; 
	PROCEDURE ^ ScanModule*(CONST filename: ARRAY OF CHAR; dump: BOOLEAN; VAR m: TS.Module); 
	PROCEDURE ^ ScanForModules; 
	PROCEDURE ^ Test*(par: Commands.Context); 
	PROCEDURE ^ MakeSymbolFile(CONST filename: ARRAY OF CHAR); 
	PROCEDURE ^ MakeSymbolFiles*(par: Commands.Context); 
	PROCEDURE ^ MakeSym*(par: Commands.Context); 
	PROCEDURE ^ AddStandardProc(scope: TS.Scope; CONST name: ARRAY OF CHAR); 
	PROCEDURE ^ AddBasicType(scope: TS.Scope; CONST name: ARRAY OF CHAR; type: SIGNED32); 
BEGIN
END TFAOParser.
