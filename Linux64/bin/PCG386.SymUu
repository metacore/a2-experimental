MODULE PCG386;
	IMPORT SYSTEM, KernelLog, PCM, PCO, PCLIR, PCBT;
CONST 
	TraceReg = FALSE; 
	Experimental = FALSE; 
	Huge = TRUE; 
	EAX = 0; 
	ECX = 1; 
	EDX = 2; 
	EBX = 3; 
	ESP = 4; 
	EBP = 5; 
	ESI = 6; 
	EDI = 7; 
	AX = 8; 
	CX = 9; 
	DX = 10; 
	BX = 11; 
	SI = 14; 
	DI = 15; 
	AL = 16; 
	CL = 17; 
	DL = 18; 
	BL = 19; 
	AH = 20; 
	CH = 21; 
	DH = 22; 
	BH = 23; 
	Reg32 = {EAX .. EDI}; 
	Reg16 = {AX .. BX, SI, DI}; 
	Reg8L = {AL .. BL}; 
	Reg8H = {AH .. BH}; 
	Reg8 = (Reg8L + Reg8H); 
	RegI = ((Reg32 + Reg16) + Reg8); 
	RegFP = {24 .. 31}; 
	Regs = (RegI + RegFP); 
	Free = 0; 
	Splitted = MAX(LONGINT); 
	Blocked = (Splitted - 1); 
	register = 1; 
	relative = 2; 
	indexed = 3; 
	scaled = 4; 
	absolute = 5; 
	immediate = 6; 
	noScale = PCO.noScale; 
	noBase = PCO.noBase; 
	noInx = PCO.noInx; 
	noDisp = PCO.noDisp; 
	noImm = PCO.noImm; 
	none =  -1; 
	left = 0; 
	right = 1; 
	intMode = 0; 
	floatMode = 1; 
TYPE 
	Register = SHORTINT; 

	SavedRegistersDesc = ARRAY 8 OF RECORD 
		vreg0, vreg1, freg: PCLIR.Register; 
	END; 

	SavedRegistersType = POINTER TO ARRAY OF SavedRegistersDesc; 

	AliveSet = ARRAY 8 OF RECORD 
		reg: PCLIR.Register; 
		mask: SET; 
	END; 

	AliveSetPtr = POINTER TO AliveSet; 

	Address = OBJECT (PCLIR.InstructionAttribute)
	VAR 
		mode, scale: SHORTINT; 
		base, index: PCLIR.Register; 
		imm, imm2, disp: LONGINT; 
		addr: PCM.Attribute; 
		alias: PCLIR.Register; 
		count: LONGINT; 
		i386: Register; 
		i3862: Register; 
	END Address; 

	RealAddress = RECORD 
		mode: SHORTINT; 
		base, index: Register; 
		scale: SHORTINT; 
		imm, imm2, disp: LONGINT; 
		addr: PCM.Attribute; 
		size: PCLIR.Size; 
		base2: Register; 
	END; 

	RegSet = ARRAY 8 OF LONGINT; 

	; 

	; 
VAR 
	SavedRegisters: SavedRegistersType; 
	SaveLevel: LONGINT; 
	CCTableSwitch: SHORTINT; 
	FPSize: ARRAY 7 OF SHORTINT; 
	TccOpcode: ARRAY 2 OF SHORTINT; 
	JccOpcode: ARRAY 16 OF ARRAY 2 OF SHORTINT; 
	Jcc2Opcode: ARRAY 16 OF ARRAY 3 OF SHORTINT; 
	Typ1Opcode: ARRAY 5 OF SHORTINT; 
	Typ1Opcode2: ARRAY 5 OF SHORTINT; 
	Group3Opcode: ARRAY 2 OF SHORTINT; 
	BitOpcode: ARRAY 2 OF SHORTINT; 
	ShiftOpcode: ARRAY 6 OF ARRAY 2 OF SHORTINT; 
	RegName: ARRAY 8 OF CHAR; 
	IReg: ARRAY 24 OF ARRAY 4 OF CHAR; 
	reg32, reg8: RegSet; 
	regFP: RegSet; 
	FSP: SHORTINT; 

	PROCEDURE ^ Assert(cond: BOOLEAN; reason: LONGINT); 
	PROCEDURE ^ FreeAll; 
	PROCEDURE ^ GetThisReg(reg: Register; pc: LONGINT); 
	PROCEDURE ^ GetReg(VAR reg: Register; size: SHORTINT; pc: LONGINT; mask: SET); 
	PROCEDURE ^ GetTempReg32(VAR reg: Register); 
	PROCEDURE ^ GetTempReg8(VAR reg: Register; mask: SET); 
	PROCEDURE ^ GetFPReg(VAR reg: Register; pc: LONGINT); 
	PROCEDURE ^ FreeReg(reg: Register); 
	PROCEDURE ^ Owner(reg: Register): LONGINT; 
	PROCEDURE ^ Dump(VAR instr: PCLIR.Instruction; info: Address); 
	PROCEDURE ^ RegisterOverlaps(reg1, reg2: Register): BOOLEAN; 
	PROCEDURE ^ RegisterSize(reg: Register): SHORTINT; 
	PROCEDURE ^ MakeMask(reg: Register): SET; 
	PROCEDURE ^ RegisterA(size: PCLIR.Size): Register; 
	PROCEDURE ^ RegisterD(size: PCLIR.Size): Register; 
	PROCEDURE ^ ConstSize(c: LONGINT; allow16: BOOLEAN): SHORTINT; 
	PROCEDURE ^ InstructionInit(VAR instr: PCLIR.Instruction); 
	PROCEDURE ^ FSM(code: PCLIR.Code; pc: LONGINT; VAR instr: PCLIR.Instruction; addr: Address); 
	PROCEDURE ^ AliveSetInit(VAR set: AliveSet); 
	PROCEDURE ^ AliveAdd(VAR set: AliveSet; reg: LONGINT; size: PCLIR.Size); 
	PROCEDURE ^ AliveAddComplex(VAR set: AliveSet; code: PCLIR.Code; reg: LONGINT); 
	PROCEDURE ^ AliveRemove(VAR set: AliveSet; reg: LONGINT); 
	PROCEDURE ^ SetRegisterHint(code: PCLIR.Code; barrier: LONGINT; vreg: PCLIR.Register; ireg: Register); 
	PROCEDURE ^ SetRegisterHint2(code: PCLIR.Code; barrier: LONGINT; vreg: PCLIR.Register; ireg, ireg2: Register); 
	PROCEDURE ^ Optimize(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT; context: ANY); 
	PROCEDURE ^ UseRegisterI(VAR instr: PCLIR.Instruction; VAR reg: Register); 
	PROCEDURE ^ UseRegister(code: PCLIR.Code; vreg: PCLIR.Register; VAR reg: Register); 
	PROCEDURE ^ UseRegisterI2(VAR instr: PCLIR.Instruction; VAR reg, reg2: Register); 
	PROCEDURE ^ UseRegister2(code: PCLIR.Code; vreg: PCLIR.Register; VAR reg, reg2: Register); 
	PROCEDURE ^ UseComplexI(code: PCLIR.Code; VAR instr: PCLIR.Instruction; VAR addr: RealAddress); 
	PROCEDURE ^ UseComplex(code: PCLIR.Code; vreg: PCLIR.Register; VAR addr: RealAddress); 
	PROCEDURE ^ AllocateRegI(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT): Register; 
	PROCEDURE ^ AllocateReg(code: PCLIR.Code; vreg: PCLIR.Register): Register; 
	PROCEDURE ^ AllocateRegI2(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT; VAR reg, reg2: Register); 
	PROCEDURE ^ AllocateThisRegI(VAR instr: PCLIR.Instruction; pc: LONGINT; ireg: Register); 
	PROCEDURE ^ AllocateThisReg(code: PCLIR.Code; vreg: PCLIR.Register; ireg: Register); 
	PROCEDURE ^ AllocateThisRegI2(VAR instr: PCLIR.Instruction; pc: LONGINT; ireg, ireg2: Register); 
	PROCEDURE ^ ReleaseReg(code: PCLIR.Code; reg: Register; protect: SET); 
	PROCEDURE ^ ForceRegister(code: PCLIR.Code; VAR reg: Register; dest: Register; protect: SET); 
	PROCEDURE ^ FixAbsolute(adr: PCM.Attribute; offset: LONGINT); 
	PROCEDURE ^ GenEnter(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenExit(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenTrap(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GetRegSaveSize(): LONGINT; 
	PROCEDURE ^ GenSaveRegistersAligned(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenSaveRegisters(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenRestoreRegisters(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenPop(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenResult(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenReturn(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ LoadReg(reg: Register; src: RealAddress); 
	PROCEDURE ^ LoadRegHi(reg: Register; src: RealAddress); 
	PROCEDURE ^ GenLoad(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenLoadSP(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenLoadFP(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenStore(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenOut(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenIn(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenNop(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenLabel(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ EmitJcc(op: SHORTINT; dest: LONGINT; VAR chain: LONGINT); 
	PROCEDURE ^ GenJcc(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenJmp(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenCall(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenCallReg(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenSysCall(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenSetcc(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenKill(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenPhi(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenPush(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ IntExpansion(op: PCLIR.Opcode; src: RealAddress; dst: Register); 
	PROCEDURE ^ Entier(dst, dst2: Register; dest64: BOOLEAN); 
	PROCEDURE ^ GenConv(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenNegNot(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenAbs(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenBitOp(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenBitTest(code: PCLIR.Code; VAR src1, src2: RealAddress); 
	PROCEDURE ^ GenCmp1(code: PCLIR.Code; VAR src1, src2: RealAddress); 
	PROCEDURE ^ GenCmp2(code: PCLIR.Code; VAR src1, src2: RealAddress); 
	PROCEDURE ^ GenFtyp1(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenMul64(src1, src2: RealAddress; dst1, dst2: Register); 
	PROCEDURE ^ GenMul(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenDivMod(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenTyp1(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenShift(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenMoveDown(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenMove(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenInline(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenCase(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenCaseLine(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ GenCaseElse(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT); 
	PROCEDURE ^ DumpCode(code: PCLIR.Code; VAR instr: PCLIR.Instruction; pc: LONGINT; context: ANY); 
	PROCEDURE ^ DoOptimize(code: PCLIR.Code); 
	PROCEDURE ^ IncSaveLevel; 
	PROCEDURE ^ Init(): BOOLEAN; 
	PROCEDURE ^ Done(VAR result: WORD); 
	PROCEDURE ^ GetCode(VAR codeArr: PCLIR.CodeArray; VAR length, hdrlength, addressFactor: LONGINT); 
	PROCEDURE ^ Install*; 
	PROCEDURE ^ Configure; 
BEGIN
END PCG386.
