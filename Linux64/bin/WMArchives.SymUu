MODULE WMArchives;
	IMPORT Commands, Streams, Modules, Files, FileHandlers, Archives, Strings, KernelLog, Texts, TextUtilities, Raster, WMDropTarget, WMComponents, WMStandardComponents, WMTrees, WMPopups, WMGraphics, WMDialogs, WMRectangles, WMEditors, WMRestorable, WMMessages, WMGrids, WMStringGrids, WMProperties, XML, WM := WMWindowManager;
CONST 
	WindowWidth = 600; 
	WindowHeight = 400; 
	NameSize = 128; 
	BufSize = (16 * 1024); 
	TreePreviewSize = 16; 
TYPE 
	KillerMsg = OBJECT 
	END KillerMsg; 

	EntryInfo = Archives.EntryInfo; 

	ArchiveDropInterface* = OBJECT (WMDropTarget.DropFiles)
	VAR 
		out: Streams.Writer; 
		at: ArchiveTree; 
		parent: WMTrees.TreeNode; 
		entryName, caption: Strings.String; 

		PROCEDURE ^  & New*(t: ArchiveTree; n: WMTrees.TreeNode); 
		PROCEDURE ^ OpenPut*(CONST remoteName: ARRAY OF CHAR; VAR outw: Streams.Writer; VAR res: WORD); 
		PROCEDURE ^ ClosePut*(VAR res: WORD); 
	END ArchiveDropInterface; 

	ArchiveDropTarget* = OBJECT (WMDropTarget.DropTarget)
	VAR 
		tree: ArchiveTree; 
		node: WMTrees.TreeNode; 

		PROCEDURE ^  & New*(t: ArchiveTree; n: WMTrees.TreeNode); 
		PROCEDURE ^ GetInterface*(type: LONGINT): WMDropTarget.DropInterface; 
	END ArchiveDropTarget; 

	ArchiveTree* = OBJECT {EXCLUSIVE} (WMStandardComponents.Panel)
	VAR 
		tree-: WMTrees.Tree; 
		treeView-: WMTrees.TreeView; 
		archive: Archives.Archive; 
		archiveName: ARRAY NameSize OF CHAR; 
		popup: WMPopups.Popup; 
		label: WMStandardComponents.Label; 
		toolbar: WMStandardComponents.Panel; 
		refreshBtn: WMStandardComponents.Button; 
		px, py: LONGINT; 
		draggedString: Strings.String; 
		showFiles: WMProperties.BooleanProperty; 
		showImagePreview: WMProperties.BooleanProperty; 
		NodeChanged*: PROCEDURE {DELEGATE}(sender, data: ANY); 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ SetArchive*(archive: Archives.Archive); 
		PROCEDURE ^ MyStartDrag(sender, data: ANY); 
		PROCEDURE ^ DragArrived(sender, data: ANY); 
		PROCEDURE ^ RefreshHandler(sender, data: ANY); 
		PROCEDURE ^ MyDragDropped(x, y: LONGINT; dragInfo: WM.DragInfo; VAR handled: BOOLEAN); 
		PROCEDURE ^ DragDropped*(x, y: LONGINT; dragInfo: WM.DragInfo); 
		PROCEDURE ^ ContextMenu(sender: ANY; x, y: LONGINT); 
		PROCEDURE ^ CreateFolder(sender, data: ANY); 
		PROCEDURE ^ DeleteEntry(sender, data: ANY); 
		PROCEDURE ^ RenameEntry(sender, data: ANY); 
		PROCEDURE ^ GetPath(node: WMTrees.TreeNode): Strings.String; 
		PROCEDURE ^ FindChildNode(parent: WMTrees.TreeNode; name: Strings.String): WMTrees.TreeNode; 
		PROCEDURE ^ AddChildNode(parent: WMTrees.TreeNode; caption: Strings.String; data: EntryInfo; replace: BOOLEAN); 
		PROCEDURE ^ InsertTreeNode(parent: WMTrees.TreeNode; name: Strings.String; data: EntryInfo); 
		PROCEDURE ^ DrawTreeNode(canvas: WMGraphics.Canvas; w, h: LONGINT; node: WMTrees.TreeNode; state: SET); 
		PROCEDURE ^ MeasureTreeNode(node: WMTrees.TreeNode; VAR w, h: LONGINT); 
		PROCEDURE ^ AppendToArchiveName(CONST src: ARRAY OF CHAR; VAR dest: ARRAY OF CHAR); 
	END ArchiveTree; 

	NodeEntry = OBJECT 
	VAR 
		name, full, size: Strings.String; 
		node: WMTrees.TreeNode; 
	END NodeEntry; 

	NodeList = POINTER TO ARRAY OF NodeEntry; 

	SelectionWrapper = POINTER TO RECORD 
		sel: NodeList; 
	END; 

	Window* = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		topToolbar, statusbar, sidePanel: WMStandardComponents.Panel; 
		load: WMStandardComponents.Button; 
		statusLabel: WMStandardComponents.Label; 
		filenameEdit: WMEditors.Editor; 
		archiveTree: ArchiveTree; 
		list: WMStringGrids.StringGrid; 
		nodeContent, selection: NodeList; 
		curArc: Archives.Archive; 
		popup: WMPopups.Popup; 
		px, py: LONGINT; 
		node: WMTrees.TreeNode; 
		curFiles, curFolders, curBytes: LONGINT; 

		PROCEDURE ^  & New*(c: WMRestorable.Context); 
		PROCEDURE ^ CreateForm(): WMComponents.VisualComponent; 
		PROCEDURE ^ InitList; 
		PROCEDURE ^ Resized*(width, height: LONGINT); 
		PROCEDURE ^ AdjustTabSize; 
		PROCEDURE ^ FixFilename(VAR filename: ARRAY OF CHAR); 
		PROCEDURE ^ GetFormatFromFilename(CONST filename: ARRAY OF CHAR; VAR format: ARRAY OF CHAR); 
		PROCEDURE ^ NodeClicked(sender, data: ANY); 
		PROCEDURE ^ LoadHandler(sender, data: ANY); 
		PROCEDURE ^ Load(CONST filename: ARRAY OF CHAR); 
		PROCEDURE ^ Handle*(VAR x: WMMessages.Message); 
		PROCEDURE ^ ContextMenu(sender: ANY; x, y: LONGINT); 
		PROCEDURE ^ GetSelection(): NodeList; 
		PROCEDURE ^ Open(sender, data: ANY); 
		PROCEDURE ^ OpenFile(sender, data: ANY); 
		PROCEDURE ^ RenameEntry(sender, data: ANY); 
		PROCEDURE ^ DeleteEntries(sender, data: ANY); 
		PROCEDURE ^ RefreshList(sender, data: ANY); 
		PROCEDURE ^ UpdateStatusbar; 
		PROCEDURE ^ MyDragDropped(x, y: LONGINT; dragInfo: WM.DragInfo; VAR handled: BOOLEAN); 
		PROCEDURE ^ ListDragDropped(x, y: LONGINT; dragInfo: WM.DragInfo); 
		PROCEDURE ^ MyStartDrag(sender, data: ANY); 
		PROCEDURE ^ ListDragArrived(sender, data: ANY); 
		PROCEDURE ^ Close*; 
	END Window; 
VAR 
	nofWindows: LONGINT; 
	ProtShowFiles, ProtShowImgPrev: WMProperties.BooleanProperty; 
	StrArchiveTree: Strings.String; 

	PROCEDURE ^ SplitString(string: Strings.String; VAR head, tail: Strings.String; index: LONGINT); 
	PROCEDURE ^ RemovePath(CONST src: ARRAY OF CHAR; VAR dest: ARRAY OF CHAR); 
	PROCEDURE ^ RemovePartitionLabel(CONST src: ARRAY OF CHAR; VAR dest: ARRAY OF CHAR); 
	PROCEDURE ^ CopyFile(rec: Streams.Receiver; target: WMDropTarget.DropFiles; CONST remote: ARRAY OF CHAR; VAR res: WORD); 
	PROCEDURE ^ InitPrototypes; 
	PROCEDURE ^ Open*(context: Commands.Context); 
	PROCEDURE ^ Restore*(context: WMRestorable.Context); 
	PROCEDURE ^ IncCount; 
	PROCEDURE ^ DecCount; 
	PROCEDURE ^ Cleanup; 
BEGIN
END WMArchives.
