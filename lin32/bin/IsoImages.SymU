MODULE IsoImages;
	IMPORT SYSTEM, Commands, Streams, Files, Dates, Strings;
CONST 
	Ok* = 0; 
	FileNotFound* = 1; 
	CouldNotCreateFile* = 2; 
	MaxPathLen = 256; 
	ISO9660Id = \"CD001"\; 
	CDSectorSize = 2048; 
	NumSystemSectors = 16; 
	ElToritoSysId = \"EL TORITO SPECIFICATION"\; 
	Platform80x86 = 0X; 
	PlatformPowerPC = 0X; 
	PlatformMac = 0X; 
	Bootable = 88X; 
	NotBootable = 0X; 
	EmulationNone = 0X; 
	Emulation12Floppy = 1X; 
	Emulation144Floppy = 2X; 
	Emulation288Floppy = 3X; 
	EmulationHDD = 4X; 
	BBVolumeId = \"BLUEBOTTLE"\; 
	BBPublisher = \"ETH_ZURICH"\; 
TYPE 
	BootCatalogEntry = ARRAY 32 OF CHAR; 

	BCValidationEntry = RECORD 
		HeaderId: CHAR; 
		PlatformId: CHAR; 
		Reserved: INTEGER; 
		IdString: ARRAY 24 OF CHAR; 
		Checksum: INTEGER; 
		KeyBytes: ARRAY 2 OF CHAR; 
	END; 

	BCInitialDefaultEntry = RECORD 
		BootIndicator: CHAR; 
		BootMediaType: CHAR; 
		LoadSegment: INTEGER; 
		SystemType: CHAR; 
		Unused1: CHAR; 
		SectorCount: INTEGER; 
		LoadRBA: LONGINT; 
		Unused2: ARRAY 20 OF CHAR; 
	END; 

	PROCEDURE ^ WriteImage(w: Streams.Writer; r: Streams.Reader; imageSize: LONGINT); 
	PROCEDURE ^ WriteElToritoDescriptor(w: Streams.Writer); 
	PROCEDURE ^ WriteBootCatalog(w: Streams.Writer); 
	PROCEDURE ^ WriteIsoFSData(w: Streams.Writer); 
	PROCEDURE ^ WriteTypeLPathTable(w: Streams.Writer); 
	PROCEDURE ^ WriteTypeMPathTable(w: Streams.Writer); 
	PROCEDURE ^ WritePrimaryVolumeDescriptor(w: Streams.Writer; isoImageSectorCount: LONGINT); 
	PROCEDURE ^ WriteSetTerminatorDescriptor(w: Streams.Writer); 
	PROCEDURE ^ WriteDirectoryRecord(w: Streams.Writer); 
	PROCEDURE ^ CalcIsoImageSectorCount(inputImageSize: LONGINT): LONGINT; 
	PROCEDURE ^ WriteBothByteOrder32(w: Streams.Writer; x: LONGINT); 
	PROCEDURE ^ WriteBothByteOrder16(w: Streams.Writer; x: INTEGER); 
	PROCEDURE ^ WriteByteRep(w: Streams.Writer; b: CHAR; n: LONGINT); 
	PROCEDURE ^ WriteStringWithPadding(w: Streams.Writer; CONST str: ARRAY OF CHAR; padChar: CHAR; len: LONGINT); 
	PROCEDURE ^ WriteEmptySectors(w: Streams.Writer; n: LONGINT); 
	PROCEDURE ^ CalcChecksum16(CONST buf: ARRAY OF CHAR): INTEGER; 
	PROCEDURE ^ MakeImage*(CONST input, output: ARRAY OF CHAR; VAR imageSize, res: LONGINT); 
	PROCEDURE ^ Make*(context: Commands.Context); 
BEGIN
END IsoImages.
