MODULE BookCompiler IN Oberon;
	IMPORT Oberon, Texts, Files, Display, Gadgets, TextGadgets, Fonts, Objects, Books, Books0, BookDocs, Strings, Documents, Lists, TextFields, TextDocs, Desktops, Panels;
CONST 
	noSy = 0; 
	identSy = 1; 
	bsSy = 2; 
	lbrSy = 3; 
	rbrSy = 4; 
	starSy = 5; 
	minusSy = 6; 
	plusSy = 7; 
	eqSy = 8; 
	bookSy = 9; 
	chapterSy = 10; 
	labelSy = 11; 
	linkSy = 12; 
	indexSy = 13; 
	callSy = 14; 
	noteSy = 15; 
	lprSy = 17; 
	rprSy = 18; 
	commaSy = 19; 
	numberSy = 20; 
	maxObj = 256; 
TYPE 
	Chapter = POINTER TO ChapterDesc; 

	Label = POINTER TO LabelDesc; 

	Node = POINTER TO NodeDesc; 

	PosList = POINTER TO PosListDesc; 

	NotePosList = POINTER TO NotePosListDesc; 

	SectNode = POINTER TO SectNodeDesc; 

	ChapterDesc = RECORD 
		nObj: INTEGER; 
		text: Texts.Text; 
		ind: LONGINT; 
		next: Chapter; 
	END; 

	SectNodeDesc = RECORD 
		B: Texts.Buffer; 
		next, desc: SectNode; 
		c: Books0.ContElem; 
	END; 

	LabelDesc = RECORD 
		name: ARRAY Books0.identLen OF CHAR; 
		frame: Books0.LocFrame; 
		export: BOOLEAN; 
		next: Label; 
	END; 

	NodeDesc = RECORD 
		beg, end: LONGINT; 
		pos: PosList; 
		left, right: Node; 
	END; 

	PosListDesc = RECORD 
		pos: LONGINT; 
		chapter: Chapter; 
		next: PosList; 
	END; 

	NotePosListDesc = RECORD (PosListDesc)
		pos2: LONGINT; 
	END; 
VAR 
	chapters, contents, curChap: Chapter; 
	labels: Label; 
	root: Node; 
	imports: Books0.ImpList; 
	bookName: ARRAY Books0.nameLen OF CHAR; 
	ident: ARRAY Books0.identLen OF CHAR; 
	B: Texts.Buffer; 
	inText, callText, noteText: Texts.Text; 
	R: Texts.Reader; 
	W, Wr: Texts.Writer; 
	sym, width, heigth: INTEGER; 
	ch: CHAR; 
	number: LONGINT; 
	begId, endId, lastPos, oldPos, nextChap: LONGINT; 
	sections: ARRAY Books.maxSect OF INTEGER; 
	eol, expand, error: BOOLEAN; 
	options, styleMode: SET; 
	iconStr: ARRAY (2 * Books0.nameLen) OF CHAR; 
	sectRoot: SectNode; 

	PROCEDURE ^ Mark(msg1, msg2: ARRAY OF CHAR); 
	PROCEDURE ^ MarkFnt(T: Texts.Text; beg, end: LONGINT; fnt: Fonts.Font); 
	PROCEDURE ^ IncObj(c: Chapter); 
	PROCEDURE ^ ChangeFont(t: Texts.Text; old, new: Fonts.Font; beg, end: LONGINT); 
	PROCEDURE ^ NewSectNode(VAR nd: SectNode); 
	PROCEDURE ^ Expand(VAR t: Texts.Text; beg, end: LONGINT); 
	PROCEDURE ^ NewChapter(VAR c: Chapter); 
	PROCEDURE ^ SearchLabel(): Label; 
	PROCEDURE ^ DefChapLabel(curC: BOOLEAN): Label; 
	PROCEDURE ^ NewBook(title: BOOLEAN); 
	PROCEDURE ^ DefFootnoteLabel(): Label; 
	PROCEDURE ^ DefLink(): Books0.Frame; 
	PROCEDURE ^ DefExtLink(i: Books0.ImpList; VAR name: ARRAY OF CHAR): Books0.Frame; 
	PROCEDURE ^ DefCallGadgets(beg: LONGINT); 
	PROCEDURE ^ MarkText(T: Texts.Text; beg, end: LONGINT; mode: SHORTINT; ft: BOOLEAN); 
	PROCEDURE ^ Visit(VAR n: SectNode; d: INTEGER); 
	PROCEDURE ^ DefSection(s: INTEGER; e: BOOLEAN); 
	PROCEDURE ^ DefChapter(e: BOOLEAN); 
	PROCEDURE ^ Compare(a, b: Node): INTEGER; 
	PROCEDURE ^ DefIndex(pos: LONGINT; mode: SHORTINT); 
	PROCEDURE ^ InsertFootnote(pl: Label); 
	PROCEDURE ^ CheckLabels; 
	PROCEDURE ^ RegisterBook; 
	PROCEDURE ^ isLetter(ch: CHAR): BOOLEAN; 
	PROCEDURE ^ isDigit(ch: CHAR): BOOLEAN; 
	PROCEDURE ^ isChar(VAR R: Texts.Reader): BOOLEAN; 
	PROCEDURE ^ Ident(VAR c: CHAR); 
	PROCEDURE ^ GetIdent; 
	PROCEDURE ^ GetNumber; 
	PROCEDURE ^ Get; 
	PROCEDURE ^ SymToName(s: INTEGER; VAR na: ARRAY OF CHAR); 
	PROCEDURE ^ Check(sy: INTEGER); 
	PROCEDURE ^ GetString(objs: BOOLEAN); 
	PROCEDURE ^ GetName(VAR name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ Contents; 
	PROCEDURE ^ GetBookName(VAR lname, name, ident: ARRAY OF CHAR); 
	PROCEDURE ^ Import(VAR name: ARRAY OF CHAR): Books0.ImpList; 
	PROCEDURE ^ PosToIdent(beg: LONGINT; VAR exp: BOOLEAN); 
	PROCEDURE ^ EmptyOpt; 
	PROCEDURE ^ Chapters; 
	PROCEDURE ^ BuildIndex; 
	PROCEDURE ^ BuildFootnotes; 
	PROCEDURE ^ BuildCmds; 
	PROCEDURE ^ BuildContents; 
	PROCEDURE ^ Book; 
	PROCEDURE ^ Parse(T: Texts.Text); 
	PROCEDURE ^ GetMarked(VAR text: Texts.Text); 
	PROCEDURE ^ Compile*; 
	PROCEDURE ^ NewTextDoc*; 
	PROCEDURE ^ Browse*; 
	PROCEDURE ^ InsertCmd*; 
BEGIN
END BookCompiler.
