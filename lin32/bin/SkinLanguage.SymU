MODULE SkinLanguage;
	IMPORT XML, XMLScanner, XMLParser, XMLObjects, Strings, Files, Streams, KernelLog, WMGraphics;
CONST 
	Buffersize = 128; 
	CR = 0DX; 
	LF = 0AX; 
	TAB = 9X; 
	SP = 20X; 
	EOF = 0X; 
	ConfigFileName* = \"SkinConfig.XML"\; 
TYPE 
	String = Strings.String; 

	ReportError* = PROCEDURE {DELEGATE}(pos, line, col: LONGINT; msg: String); 

	StringReportError = PROCEDURE {DELEGATE}(msg: String); 

	Property = OBJECT 
	VAR 
		name, type: String; 
		mandatory, succeeded: BOOLEAN; 
		next: Property; 

		PROCEDURE ^  & Init*(n, t: String); 
	END Property; 

	PropertyList = OBJECT 
	VAR 
		first: Property; 

		PROCEDURE ^ Add(e: XML.Element); 
		PROCEDURE ^ Find(s: String): Property; 
	END PropertyList; 

	Component = OBJECT 
	VAR 
		properties: PropertyList; 
		name: String; 
		next: Component; 

		PROCEDURE ^  & Init*(s: String); 
		PROCEDURE ^ MandatoryPropertiesSucceeded(re: StringReportError): BOOLEAN; 
	END Component; 

	ComponentList = OBJECT 
	VAR 
		first: Component; 

		PROCEDURE ^ Add(e: XML.Element); 
		PROCEDURE ^ Find(s: String): Component; 
	END ComponentList; 

	Scanner* = OBJECT 
	VAR 
		r: Streams.Reader; 
		pos-, oldpos-, line-, col-, oldcol-: LONGINT; 

		PROCEDURE ^  & Init*(r: Streams.Reader); 
		PROCEDURE ^ NextCh(): CHAR; 
		PROCEDURE ^ SkipWhitespace; 
		PROCEDURE ^ GetString(): String; 
		PROCEDURE ^ GetDelimiter(): String; 
		PROCEDURE ^ GetToken(): String; 
		PROCEDURE ^ Get*(): String; 
		PROCEDURE ^ IsWhitespace(ch: CHAR): BOOLEAN; 
	END Scanner; 

	Parser* = OBJECT 
	VAR 
		reportError*: ReportError; 
		scanner: Scanner; 
		components: ComponentList; 
		warnings: BOOLEAN; 
		prefix: ARRAY 128 OF CHAR; 
		prefixLength: LONGINT; 

		PROCEDURE ^  & Init*(CONST filename: ARRAY OF CHAR; s: Scanner); 
		PROCEDURE ^ Parse*(warnings: BOOLEAN): XML.Document; 
		PROCEDURE ^ ParseSkin(): XML.Element; 
		PROCEDURE ^ ParseCursor(): XML.Element; 
		PROCEDURE ^ ParseWindow(): XML.Element; 
		PROCEDURE ^ ParseMeta(): XML.Element; 
		PROCEDURE ^ ParseComponentSet(): XML.Element; 
		PROCEDURE ^ ParseComponent(c: Component): XML.Element; 
		PROCEDURE ^ ParseProperty(p: Property): XML.Element; 
		PROCEDURE ^ ParseRectangleProperty(): XML.Element; 
		PROCEDURE ^ ParseColorProperty(): XML.Element; 
		PROCEDURE ^ ParseInt32Property(): XML.Element; 
		PROCEDURE ^ ParseBooleanProperty(VAR bool: BOOLEAN): XML.Element; 
		PROCEDURE ^ ParseStringProperty(): XML.Element; 
		PROCEDURE ^ ParseResourceProperty(check: BOOLEAN): XML.Element; 
		PROCEDURE ^ ReadConfiguration; 
		PROCEDURE ^ CheckImage(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ FailToParse(CONST a: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ NoNumber(s: String): BOOLEAN; 
		PROCEDURE ^ NoBoolean(s: String): BOOLEAN; 
		PROCEDURE ^ NoString(s: String): BOOLEAN; 
		PROCEDURE ^ SkipUntilClosingBracket(): String; 
		PROCEDURE ^ Error(CONST msg: ARRAY OF CHAR); 
		PROCEDURE ^ ErrorString(msg: String); 
	END Parser; 

	PROCEDURE ^ DefaultReportError(pos, line, col: LONGINT; msg: String); 
	PROCEDURE ^ NewString(CONST x: ARRAY OF CHAR): String; 
	PROCEDURE ^ Append(a: String; CONST b: ARRAY OF CHAR): String; 
	PROCEDURE ^ LowerCase(s: String); 
BEGIN
END SkinLanguage.
