MODULE Traps;
	IMPORT S := SYSTEM, Unix, Objects, Machine, Streams, Modules, Reflection, TrapWriters, Commands, StdIO;
CONST 
	AddrSize = SIZEOF(ADDRESS); 
	MaxRecursion = 2; 
TYPE 
	ExceptionHandler = RECORD 
		pc, fp, sp: ADDRESS; 
	END; 
VAR 
	trapHandlingLevel: LONGINT; 
	trace: BOOLEAN; 
	unix: Commands.Context; 
	trapMutex: Unix.Mutex_t; 

	PROCEDURE ^ LockTrap; 
	PROCEDURE ^ UnlockTrap; 
	PROCEDURE ^ Append(VAR ar: ARRAY OF CHAR; CONST this: ARRAY OF CHAR); 
	PROCEDURE ^ TimeTag(w: Streams.Writer); 
	PROCEDURE ^ FinishTrap(w: Streams.Writer; p: Objects.Process); 
	PROCEDURE ^ Registers(CONST mc: Unix.Mcontext; w: Streams.Writer); 
	PROCEDURE ^ Trap(sig: LONGINT; mc: Unix.Mcontext); 
	PROCEDURE ^ UnlockOberon; 
	PROCEDURE ^ CheckBP(fp: ADDRESS): ADDRESS; 
	PROCEDURE ^ SearchExceptionHandler(process: Objects.Process; mc: Unix.Mcontext; VAR handler: ExceptionHandler); 
BEGIN
END Traps.
