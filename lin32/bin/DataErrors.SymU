MODULE DataErrors;
	IMPORT SYSTEM, Machine, Kernel, Modules, Files, Beep, NbrInt, NbrRat, NbrRe, NbrCplx;
CONST 
	MaxString = 64; 
	MaxArray = 8; 
	MaxCols = 70; 
	Sep = \"  "\; 
	SepLen = 2; 
TYPE 
	Variable = RECORD 
		adr, type, size, n, tdadr: LONGINT; 
	END; 
VAR 
	beepedError, beepedWarning: BOOLEAN; 
	F: Files.File; 
	W: Files.Writer; 

	PROCEDURE ^ FindProc(refs: Modules.Bytes; modpc: LONGINT): LONGINT; 
	PROCEDURE ^ WriteProc0(mod: Modules.Module; pc, fp: LONGINT; VAR refs: Modules.Bytes; VAR refpos, base: LONGINT); 
	PROCEDURE ^ WriteProc(pc: LONGINT); 
	PROCEDURE ^ WriteSimpleVar(adr, type, tdadr: LONGINT; VAR col: LONGINT); 
	PROCEDURE ^ WriteVar(v: Variable; VAR col: LONGINT); 
	PROCEDURE ^ GetNum(refs: Modules.Bytes; VAR i, num: LONGINT); 
	PROCEDURE ^ NextVar(refs: Modules.Bytes; VAR refpos: LONGINT; base: LONGINT; VAR name: ARRAY OF CHAR; VAR v: Variable); 
	PROCEDURE ^ Variables(refs: Modules.Bytes; refpos, base: LONGINT); 
	PROCEDURE ^ InitVar(mod: Modules.Module; VAR refs: Modules.Bytes; VAR refpos, base: LONGINT); 
	PROCEDURE ^ ModuleState(mod: Modules.Module); 
	PROCEDURE ^ StackTraceBack(eip, ebp: LONGINT; long: BOOLEAN); 
	PROCEDURE ^ ErrorCaller(VAR m: Modules.Module; VAR pc, ebp, eip: NbrInt.Integer); 
	PROCEDURE ^ WarningCaller(VAR m: Modules.Module; VAR pc, ebp, eip: NbrInt.Integer); 
	PROCEDURE ^ IdentifyProcedure(VAR m: Modules.Module; pc: NbrInt.Integer; VAR module, type, proc: ARRAY OF CHAR); 
	PROCEDURE ^ Location(module, type, proc: ARRAY OF CHAR); 
	PROCEDURE ^ DetailedErrorReport(VAR m: Modules.Module; pc: LONGINT; eip, ebp: LONGINT); 
	PROCEDURE ^ Error*(message: ARRAY OF CHAR); 
	PROCEDURE ^ IntError*(int: NbrInt.Integer; message: ARRAY OF CHAR); 
	PROCEDURE ^ RatError*(rat: NbrRat.Rational; message: ARRAY OF CHAR); 
	PROCEDURE ^ ReError*(re: NbrRe.Real; message: ARRAY OF CHAR); 
	PROCEDURE ^ CplxError*(cplx: NbrCplx.Complex; message: ARRAY OF CHAR); 
	PROCEDURE ^ Warning*(message: ARRAY OF CHAR); 
	PROCEDURE ^ IntWarning*(int: NbrInt.Integer; message: ARRAY OF CHAR); 
	PROCEDURE ^ RatWarning*(rat: NbrRat.Rational; message: ARRAY OF CHAR); 
	PROCEDURE ^ ReWarning*(re: NbrRe.Real; message: ARRAY OF CHAR); 
	PROCEDURE ^ CplxWarning*(cplx: NbrCplx.Complex; message: ARRAY OF CHAR); 
	PROCEDURE ^ Open*; 
	PROCEDURE ^ Close*; 
BEGIN
END DataErrors.
