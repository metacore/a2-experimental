MODULE WMMixer;
	IMPORT Modules, SoundDevices, Strings, Plugins, WMComponents, WMStandardComponents, WMMessages, WMWindowManager, WMProperties;
CONST 
TYPE 
	String = Strings.String; 

	Mixer* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		deviceName-, channelName-: WMProperties.StringProperty; 
		name: WMStandardComponents.Label; 
		value: WMStandardComponents.Scrollbar; 
		mute: WMStandardComponents.Checkbox; 
		channel: SoundDevices.MixerChannel; 
		device: SoundDevices.Driver; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ MuteChanged(sender, data: ANY); 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ MixerChangeListener(channel: SoundDevices.MixerChannel); 
		PROCEDURE ^ MixerChangeEvent(sender, data: ANY); 
		PROCEDURE ^ VolChanged(sender, data: ANY); 
		PROCEDURE ^ FindChannel(deviceName, channelName: ARRAY OF CHAR; VAR dev: SoundDevices.Driver; VAR channel: SoundDevices.MixerChannel); 
		PROCEDURE ^ Finalize*; 
	END Mixer; 

	KillerMsg = OBJECT 
	END KillerMsg; 

	Window* = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)

		PROCEDURE ^  & New*; 
		PROCEDURE ^ CreateForm(): WMComponents.VisualComponent; 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ Handle*(VAR x: WMMessages.Message); 
	END Window; 
VAR 
	device: SoundDevices.Driver; 
	master: SoundDevices.MixerChannel; 
	StrMixer: Strings.String; 
	PrototypedeviceName, PrototypechannelName: WMProperties.StringProperty; 
	nofWindows: LONGINT; 

	PROCEDURE ^ Open*; 
	PROCEDURE ^ IncCount; 
	PROCEDURE ^ DecCount; 
	PROCEDURE ^ MasterIncVol*; 
	PROCEDURE ^ MasterDecVol*; 
	PROCEDURE ^ Cleanup; 
BEGIN
END WMMixer.
