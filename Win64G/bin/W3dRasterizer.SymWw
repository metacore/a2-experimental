MODULE W3dRasterizer;
	IMPORT SYSTEM, KernelLog, Vectors := W3dVectors, AbstractWorld := W3dAbstractWorld, Raster;
CONST 
	Paranoid = FALSE; 
TYPE 
	Vertex* = OBJECT (AbstractWorld.Vertex)
	VAR 
		p*, pt*, n*, nt*: Vectors.TVector3d; 
		u*, v*, x*, y*: LONGREAL; 
		color*: LONGINT; 
		behind*: BOOLEAN; 

		PROCEDURE ^ SetPos*(p: Vectors.TVector3d); 
		PROCEDURE ^ SetUV*(u, v: LONGREAL); 
		PROCEDURE ^ SetColor*(color: LONGINT); 
	END Vertex; 

	Texture* = OBJECT (AbstractWorld.Texture)
	VAR 
		img*: Raster.Image; 
	END Texture; 

	Triangle* = RECORD 
		normal*: Vectors.TVector3d; 
		vert*: ARRAY 3 OF Vertex; 
		color*: LONGINT; 
		transColor*: LONGINT; 
		tex*: Texture; 
		mask0*, culled*: BOOLEAN; 
	END; 

	Rasterizer* = OBJECT 
	VAR 
		img*, saveimg: Raster.Image; 
		zBuffer, savezBuffer: POINTER TO ARRAY OF REAL; 
		invBuffer: POINTER TO ARRAY OF LONGINT; 
		width*, height*: LONGINT; 
		x0, x1, x2, x3, dxL, dxR, xL, xR, xStart, xEnd, tr: REAL; 
		y0, y1, y2, dx, zStride, stride, color: LONGINT; 
		adrBase, zBufBase: ADDRESS; 
		tx0, tx1, tx2, tx3, ty0, ty1, ty2, ty3, txStart, tyStart, dtxStart, dtyStart, dtx, dty: REAL; 
		z0, z1, z2, z3, zStart, dzStart, dz: REAL; 
		zinv0, zinv1, zinv2, zinv3, zinvStart, dzinvStart, dzinv: REAL; 
		invertable: BOOLEAN; 
		invAdrStride, invIdx: LONGINT; 
		invAdrBase: ADDRESS; 

		PROCEDURE ^ CCW(tri: Triangle): BOOLEAN; 
		PROCEDURE ^ SetSize*(w, h: LONGINT); 
		PROCEDURE ^ Keep*; 
		PROCEDURE ^ Restore*; 
		PROCEDURE ^ SetInvertable*(invertable: BOOLEAN); 
		PROCEDURE ^ SetObjectIndex*(idx: LONGINT); 
		PROCEDURE ^ GetInvIdx*(x, y: LONGINT): LONGINT; 
		PROCEDURE ^ Clear*(color: LONGINT); 
		PROCEDURE ^ RenderLine; 
		PROCEDURE ^ RenderLineTex(tex: Texture); 
		PROCEDURE ^ RenderTriangle*(VAR tri: Triangle); 
		PROCEDURE ^ RenderPerspLineTex(tex: Texture); 
		PROCEDURE ^ RenderPerspLineFlat; 
		PROCEDURE ^ RenderPerspTriangle*(VAR tri: Triangle); 
		PROCEDURE ^ SubDivLineTex(tex: Texture); 
		PROCEDURE ^ SubDivLineFlat; 
		PROCEDURE ^ SubDivTriangle*(VAR tri: Triangle); 
		PROCEDURE ^ SubDivLine*(a, b: Vertex); 
	END Rasterizer; 

	PROCEDURE ^ Min(a, b: LONGINT): LONGINT; 
BEGIN
END W3dRasterizer.
