MODULE vyInteger IN Oberon;
	IMPORT Files, vyBase;
CONST 
	idversion* = \" v0r0a3"\; 
	fmtany* = 0; 
	fmtend* = 0; 
	fmtplain* = 1; 
	fmtpacked* = 2; 
TYPE 
	int = INTEGER; 

	index = LONGINT; 

	PROCEDURE ^ Write*(VAR R: Files.Rider; count: index; VAR x: ARRAY OF int; start: index); 
	PROCEDURE ^ Read*(VAR R: Files.Rider; count: index; VAR x: ARRAY OF int; start: index); 
	PROCEDURE ^ WriteFmt*(prefform: LONGINT; VAR R: Files.Rider; count: index; VAR x: ARRAY OF int; start: index); 
	PROCEDURE ^ ReadFmt*(VAR form: LONGINT; VAR R: Files.Rider; count: index; VAR x: ARRAY OF int; start: index); 
	PROCEDURE ^ Fill*(len: LONGINT; VAR x: ARRAY OF INTEGER; start: LONGINT; val: INTEGER); 
	PROCEDURE ^ FillPat*(count: LONGINT; VAR x: ARRAY OF INTEGER; start, step: LONGINT; val: INTEGER); 
	PROCEDURE ^ Copy*(len: LONGINT; VAR src: ARRAY OF INTEGER; srcstart: LONGINT; VAR dest: ARRAY OF INTEGER; deststart: LONGINT); 
	PROCEDURE ^ CopyPat*(count: LONGINT; VAR src: ARRAY OF INTEGER; start, step: LONGINT; VAR dest: ARRAY OF INTEGER; deststart, deststep: LONGINT); 
	PROCEDURE ^ Min*(len: LONGINT; VAR x: ARRAY OF INTEGER; start: LONGINT; VAR minpos: LONGINT): INTEGER; 
	PROCEDURE ^ Max*(len: LONGINT; VAR x: ARRAY OF INTEGER; start: LONGINT; VAR maxpos: LONGINT): INTEGER; 
	PROCEDURE ^ MinMax*(len: LONGINT; VAR x: ARRAY OF INTEGER; start: LONGINT; VAR min: INTEGER; VAR minpos: LONGINT; VAR max: INTEGER; VAR maxpos: LONGINT; VAR nans: LONGINT); 
	PROCEDURE ^ sort5*(VAR data: ARRAY OF INTEGER; start: LONGINT); 
	PROCEDURE ^ Sort5*(VAR data: ARRAY OF INTEGER; start: LONGINT); 
	PROCEDURE ^ Sort*(count: LONGINT; VAR x: ARRAY OF INTEGER; start: LONGINT); 
	PROCEDURE ^ MergeSort*(count: LONGINT; VAR x: ARRAY OF INTEGER; start: LONGINT); 
	PROCEDURE ^ SortIndexed*(count: LONGINT; VAR data: ARRAY OF INTEGER; start: LONGINT; VAR index: ARRAY OF LONGINT); 
	PROCEDURE ^ Order*(count: index; x: ARRAY OF int; start: index; ith: index): int; 
	PROCEDURE ^ Summary*(len: LONGINT; VAR x: ARRAY OF INTEGER; start: LONGINT; VAR min, max: INTEGER; VAR mean, ssq: LONGREAL); 
	PROCEDURE ^ MeanSSq*(len: LONGINT; VAR x: ARRAY OF int; start: LONGINT; VAR mean, ssq: LONGREAL; VAR nans: LONGINT); 
	PROCEDURE ^ Abs*(len: LONGINT; VAR x: ARRAY OF INTEGER; start: LONGINT); 
	PROCEDURE ^ AddConst*(len: LONGINT; VAR x: ARRAY OF INTEGER; start: LONGINT; y: INTEGER); 
	PROCEDURE ^ AddConstPat*(count: index; VAR x: ARRAY OF int; start, step: index; y: int); 
	PROCEDURE ^ SubConst*(len: LONGINT; VAR x: ARRAY OF INTEGER; start: LONGINT; y: INTEGER); 
	PROCEDURE ^ SubConstPat*(count: index; VAR x: ARRAY OF int; start, step: index; y: int); 
	PROCEDURE ^ MulConst*(len: LONGINT; VAR x: ARRAY OF INTEGER; start: LONGINT; y: INTEGER); 
	PROCEDURE ^ MulConstPat*(count: index; VAR x: ARRAY OF int; start, step: index; fact: int); 
	PROCEDURE ^ DivConst*(len: LONGINT; VAR x: ARRAY OF INTEGER; start: LONGINT; y: INTEGER); 
	PROCEDURE ^ DivConstPat*(count: index; VAR x: ARRAY OF int; start, step: index; y: int); 
	PROCEDURE ^ ModConst*(len: LONGINT; VAR x: ARRAY OF INTEGER; start: LONGINT; y: INTEGER); 
	PROCEDURE ^ ModConstPat*(count: index; VAR x: ARRAY OF int; start, step: index; y: int); 
	PROCEDURE ^ Add*(VAR x, y: ARRAY OF INTEGER; VAR z: ARRAY OF INTEGER; len: LONGINT); 
	PROCEDURE ^ Sub*(VAR x, y: ARRAY OF INTEGER; VAR z: ARRAY OF INTEGER; len: LONGINT); 
	PROCEDURE ^ Mul*(VAR x, y: ARRAY OF INTEGER; VAR z: ARRAY OF INTEGER; len: LONGINT); 
	PROCEDURE ^ Div*(VAR x, y: ARRAY OF INTEGER; VAR z: ARRAY OF INTEGER; len: LONGINT); 
	PROCEDURE ^ SSQxy*(VAR x, y: ARRAY OF INTEGER; mx, my: LONGREAL; len: LONGINT): LONGREAL; 
	PROCEDURE ^ Get2d*(VAR x: ARRAY OF INTEGER; rows, row, column: LONGINT): INTEGER; 
	PROCEDURE ^ Set2d*(VAR x: ARRAY OF INTEGER; rows, row, column: LONGINT; val: INTEGER); 
	PROCEDURE ^ Get2dM*(VAR x: ARRAY OF INTEGER; rowoffset, coloffset, nrrows, nrcolumns: LONGINT; VAR dest: ARRAY OF ARRAY OF INTEGER); 
	PROCEDURE ^ Set2dM*(VAR x: ARRAY OF INTEGER; rowoffset, coloffset, nrrows, nrcolumns: LONGINT; VAR src: ARRAY OF ARRAY OF INTEGER); 
	PROCEDURE ^ Get2dF*(VAR x: ARRAY OF INTEGER; columns, row, column: LONGINT): INTEGER; 
	PROCEDURE ^ Set2dF*(VAR x: ARRAY OF INTEGER; columns, row, column: LONGINT; val: INTEGER); 
	PROCEDURE ^ SkalProd*(len: LONGINT; VAR x: ARRAY OF INTEGER; xstart: LONGINT; VAR y: ARRAY OF INTEGER; ystart: LONGINT): LONGINT; 
	PROCEDURE ^ SkalProdPat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index; VAR y: ARRAY OF int; ystart, ystep: index): index; 
	PROCEDURE ^ Norm2Sq*(len: LONGINT; VAR x: ARRAY OF INTEGER; xstart: LONGINT): LONGINT; 
	PROCEDURE ^ Norm2SqPat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index): index; 
	PROCEDURE ^ Dist2Sq*(len: LONGINT; VAR x: ARRAY OF INTEGER; xstart: LONGINT; VAR y: ARRAY OF INTEGER; ystart: LONGINT): LONGINT; 
	PROCEDURE ^ Dist2SqPat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index; VAR y: ARRAY OF int; ystart, ystep: index): index; 
	PROCEDURE ^ Norm1*(len: index; VAR x: ARRAY OF int; xstart: index): index; 
	PROCEDURE ^ Norm1Pat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index): index; 
	PROCEDURE ^ Dist1*(len: index; VAR x: ARRAY OF int; xstart: index; VAR y: ARRAY OF int; ystart: index): index; 
	PROCEDURE ^ Dist1Pat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index; VAR y: ARRAY OF int; ystart, ystep: index): index; 
	PROCEDURE ^ NormSup*(len: index; VAR x: ARRAY OF int; xstart: index; VAR mindist: int): int; 
	PROCEDURE ^ NormSupPat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index; VAR mindist: int): int; 
	PROCEDURE ^ DistSup*(len: index; VAR x: ARRAY OF int; xstart: index; VAR y: ARRAY OF int; ystart: index; VAR mindist: index): index; 
	PROCEDURE ^ DistSupPat*(count: index; VAR x: ARRAY OF int; xstart, xstep: index; VAR y: ARRAY OF int; ystart, ystep: index; VAR mindist: index): index; 
	PROCEDURE ^ Short*(len: index; VAR x: ARRAY OF int; start: index; VAR result: ARRAY OF SHORTINT); 
	PROCEDURE ^ Long*(len: index; VAR x: ARRAY OF SHORTINT; start: index; VAR result: ARRAY OF int); 
	PROCEDURE ^ Convolution*(len, start: index; VAR src, dest, kernel: ARRAY OF INTEGER; kernelw: index); 
BEGIN
END vyInteger.
