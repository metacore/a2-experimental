MODULE Builder IN Oberon;
	IMPORT OPS, OPM, Compiler, Oberon, Display, Gadgets, Texts, Attributes, Objects, Icons, Modules, Display3, Fonts, Effects, Files, Strings, Printer, Printer3, FileDir;
CONST 
	eof = OPS.eof; 
	module = OPS.module; 
	import = OPS.import; 
	if = OPS.if; 
	elsif = OPS.elsif; 
	else = OPS.else; 
	end = OPS.end; 
	semicolon = OPS.semicolon; 
	ident = OPS.ident; 
	becomes = OPS.becomes; 
	not = OPS.not; 
	then = OPS.then; 
	comma = OPS.comma; 
	or = OPS.or; 
	and = OPS.and; 
	undef = 0; 
	MaxErrors = 100; 
TYPE 
	ErrorGadget* = POINTER TO ErrorGadgetDesc; 

	ErrorGadgetDesc* = RECORD (Gadgets.FrameDesc)
		errno*: INTEGER; 
		msg*: POINTER TO ARRAY 128 OF CHAR; 
	END; 

	Mod* = POINTER TO ModDesc; 

	Ref* = POINTER TO RefDesc; 

	RefDesc* = RECORD 
		mod*: Mod; 
		next*: Ref; 
	END; 

	ModDesc* = RECORD 
		name*, fname*: FileDir.FileName; 
		opts*: ARRAY 64 OF CHAR; 
		ref*, layer*: INTEGER; 
		impl*: Ref; 
		next*: Mod; 
	END; 

	Tree* = RECORD 
		maxlayer*: INTEGER; 
		list*: Mod; 
	END; 

	List = POINTER TO ListDesc; 

	ListDesc = RECORD 
		name: FileDir.FileName; 
		next: List; 
	END; 
VAR 
	W: Texts.Writer; 
	sym: SHORTINT; 
	error, autoMark: BOOLEAN; 
	sourceS: Texts.Scanner; 
	targetW: Texts.Writer; 
	Flags: List; 
	lib: Objects.Library; 
	col: SHORTINT; 
	ifdepth: LONGINT; 
	OPSGet: OPS.GetProc; 
	skipping: BOOLEAN; 
	first: BOOLEAN; 

	PROCEDURE ^ GetText(VAR par: Display.Frame): Texts.Text; 
	PROCEDURE ^ ErrorGadgetAttr(F: ErrorGadget; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ RestoreErrorGadget(F: ErrorGadget; M: Display3.Mask; x, y, w, h: INTEGER); 
	PROCEDURE ^ PrintErrorGadget(F: ErrorGadget; VAR M: Display.DisplayMsg); 
	PROCEDURE ^ CopyErrorGadget*(VAR M: Objects.CopyMsg; from, to: ErrorGadget); 
	PROCEDURE ^ GetErrMsg(errNr: INTEGER; VAR msg: ARRAY OF CHAR); 
	PROCEDURE ^ FlipMsg(F: ErrorGadget); 
	PROCEDURE ^ ErrorGadgetHandler*(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewErrorGadget*; 
	PROCEDURE ^ MarkErrorPos(T: Texts.Text; pos: LONGINT; err: INTEGER); 
	PROCEDURE ^ RemoveErrors(T: Texts.Text); 
	PROCEDURE ^ markErrors(VAR S: Texts.Scanner; errtext: Texts.Text; par: Display.Frame); 
	PROCEDURE ^ MarkErrors*; 
	PROCEDURE ^ ClearErrors*; 
	PROCEDURE ^ ErrorAfter(T: Texts.Text; VAR pos: LONGINT); 
	PROCEDURE ^ NextError*; 
	PROCEDURE ^ err(pos: LONGINT; msg: ARRAY OF CHAR); 
	PROCEDURE ^ FindFlag(name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ InsertFlag(name: ARRAY OF CHAR); 
	PROCEDURE ^ ResetFlags; 
	PROCEDURE ^ ReadCh(VAR reader: Texts.Scanner; VAR ch: CHAR); 
	PROCEDURE ^ ReadToken(VAR scanner: Texts.Scanner); 
	PROCEDURE ^ WriteCh(ch: CHAR); 
	PROCEDURE ^ WriteToken(scanner: Texts.Scanner); 
	PROCEDURE ^ Expression(): BOOLEAN; 
	PROCEDURE ^ PreCopy(ch: CHAR; copy: BOOLEAN); 
	PROCEDURE ^ Preprocess*; 
	PROCEDURE ^ get(VAR sym: SHORTINT); 
	PROCEDURE ^ InitPreprocessor; 
	PROCEDURE ^ MatchSym(s: INTEGER): BOOLEAN; 
	PROCEDURE ^ GetOptions(VAR S: Attributes.Scanner; VAR opts: ARRAY OF CHAR); 
	PROCEDURE ^ Import(VAR T: Tree; M: Mod); 
	PROCEDURE ^ ImportList(VAR T: Tree; M: Mod); 
	PROCEDURE ^ AddModule*(VAR T: Tree; s: ARRAY OF CHAR; opts: ARRAY OF CHAR); 
	PROCEDURE ^ Mark(VAR T: Tree; m: Mod; layer, n: INTEGER); 
	PROCEDURE ^ Hierarchy*(VAR T: Tree); 
	PROCEDURE ^ Append(VAR list: Display.Frame; f: Display.Frame); 
	PROCEDURE ^ InsertHierarchy*; 
	PROCEDURE ^ Compile*; 
	PROCEDURE ^ Free*; 
	PROCEDURE ^ Init; 
BEGIN
END Builder.
