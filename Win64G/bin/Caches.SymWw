MODULE Caches;
	IMPORT KernelLog, Objects, Disks;
CONST 
	LockedBit = 0; 
	DirtyBit = 1; 
	CacheUpdateTime = (5 * 1000); 
	Trace = TRUE; 
TYPE 
	Buffer* = OBJECT 
	VAR 
		data*: POINTER TO ARRAY OF CHAR; 
		dev*: Disks.Device; 
		block*: LONGINT; 
		state: SET; 
		nextHash, prevHash, nextLRU, prevLRU, nextDirty: Buffer; 

		PROCEDURE ^  & Init*(size: LONGINT); 
	END Buffer; 

	Cache* = OBJECT {EXCLUSIVE} 
	VAR 
		blockSize*: LONGINT; 
		hashTable: POINTER TO ARRAY OF Buffer; 
		lru: Buffer; 
		lruClean: LONGINT; 
		syncNow: BOOLEAN; 
		timer: Objects.Timer; 

		PROCEDURE ^ Acquire*(dev: Disks.Device; block: LONGINT; VAR buffer: Buffer; VAR valid: BOOLEAN); 
		PROCEDURE ^ Release*(buffer: Buffer; modified, written: BOOLEAN); 
		PROCEDURE ^ Synchronize*; 
		PROCEDURE ^ AcquireDirty(VAR list: Buffer); 
		PROCEDURE ^ ReleaseDirty(buffer: Buffer); 
		PROCEDURE ^ AwaitSync; 
		PROCEDURE ^ Hash(dev: Disks.Device; block: LONGINT): LONGINT; 
		PROCEDURE ^ MoveBuffer(buf: Buffer; from, to: LONGINT); 
		PROCEDURE ^ HandleTimeout; 
		PROCEDURE ^  & Init*(blockSize, hashSize, cacheSize: LONGINT); 
	BEGIN{ACTIVE, SAFE} 
	END Cache; 

	PROCEDURE ^ ReportError(dev: Disks.Device; block, num, res: LONGINT); 
BEGIN
END Caches.
