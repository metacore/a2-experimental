MODULE Effects IN Oberon;
	IMPORT Display, Display3, Input, Oberon;
CONST 
	markW = 5; 
	GravQ = 4; 
	MinGrav = 2; 
	left = 2; 
	middle = 1; 
	right = 0; 
TYPE 
	Callback* = PROCEDURE (MX, MY, X, Y, W, H: INTEGER; keysum: SET); 

	Area = RECORD 
		X, Y, W, H: INTEGER; 
		buf: POINTER TO ARRAY OF CHAR; 
		pix: LONGINT; 
		offscreen: BOOLEAN; 
	END; 

	Tracker = POINTER TO TrackerDesc; 

	Drawer = PROCEDURE (T: Tracker; X, Y: INTEGER); 

	TrackerDesc = RECORD 
		R: Display3.Mask; 
		exit: BOOLEAN; 
		keysum, keys: SET; 
		MX, MY, X, Y, W, H: INTEGER; 
		Fade, Draw: Drawer; 
		X0, Y0: INTEGER; 
	END; 
VAR 
	FlatHand*: Oberon.Marker; 
	PointHand*: Oberon.Marker; 
	Arrow*: Oberon.Marker; 
	MoveHand*: Oberon.Marker; 
	CopyHand*: Oberon.Marker; 
	Cross*: Oberon.Marker; 
	gravity*: INTEGER; 
	moveRect, cross, bar, highlight: Tracker; 
	flatHand, pointHand: Display.Pattern; 
	movePat, copyPat, crossPat, crossPat2: Display.Pattern; 
	block, A: Area; 
	snapX, snapY, snapW, snapH: INTEGER; 
	X0, Y0, bX, bY: INTEGER; 
	arrowshape: Display.Pattern; 

	PROCEDURE ^ Min(x, y: INTEGER): INTEGER; 
	PROCEDURE ^ Max(x, y: INTEGER): INTEGER; 
	PROCEDURE ^ SetSnap*(sX, sY, sW, sH: INTEGER); 
	PROCEDURE ^ Snap*(VAR X, Y: INTEGER); 
	PROCEDURE ^ FadeMouse; 
	PROCEDURE ^ GetBlock(X, Y, W, H: INTEGER; VAR A: Area; cursor: BOOLEAN); 
	PROCEDURE ^ RestoreBlock(VAR A: Area; cursor: BOOLEAN); 
	PROCEDURE ^ OpenMenu*(X, Y, W, H: INTEGER); 
	PROCEDURE ^ CloseMenu*; 
	PROCEDURE ^ OpenCursor*(X, Y, W, H: INTEGER); 
	PROCEDURE ^ CloseCursor*; 
	PROCEDURE ^ Invicinity*(mx, my, X, Y: LONGINT): BOOLEAN; 
	PROCEDURE ^ Inside*(mx, my, X, Y, W, H: INTEGER): BOOLEAN; 
	PROCEDURE ^ InCorner*(mx, my, X, Y, W, H: INTEGER): BOOLEAN; 
	PROCEDURE ^ InBorder*(mx, my, X, Y, W, H: INTEGER): BOOLEAN; 
	PROCEDURE ^ InLineVicinity*(mx, my, X, Y, X1, Y1: INTEGER): BOOLEAN; 
	PROCEDURE ^ Intersect*(X, Y, W, H, X1, Y1, W1, H1: INTEGER): BOOLEAN; 
	PROCEDURE ^ TrackerValues(tracker: Tracker; VAR keys, keysum: SET; VAR MX, MY, X, Y, W, H: INTEGER); 
	PROCEDURE ^ TrackMouse*(VAR keys: SET; VAR X, Y: INTEGER; marker: Oberon.Marker); 
	PROCEDURE ^ Track(tracker: Tracker; marker: Oberon.Marker); 
	PROCEDURE ^ TrackDrag(tracker: Tracker); 
	PROCEDURE ^ OpenTracker(tracker: Tracker; R: Display3.Mask; draw, fade: Drawer; keys: SET; MX, MY, X, Y, W, H: INTEGER); 
	PROCEDURE ^ drawMoveRect(T: Tracker; X, Y: INTEGER); 
	PROCEDURE ^ OpenMoveRect(tracker: Tracker; R: Display3.Mask; keys: SET; MX, MY, X, Y, W, H: INTEGER); 
	PROCEDURE ^ drawCross(T: Tracker; X, Y: INTEGER); 
	PROCEDURE ^ fadeCross(T: Tracker; X, Y: INTEGER); 
	PROCEDURE ^ OpenTrackCross(tracker: Tracker; R: Display3.Mask; keys: SET; MX, MY, X, Y, W, H: INTEGER); 
	PROCEDURE ^ drawHighlight(T: Tracker; X, Y: INTEGER); 
	PROCEDURE ^ OpenHighlight(tracker: Tracker; VAR R: Display3.Mask; keys: SET; MX, MY, X, Y, W, H: INTEGER); 
	PROCEDURE ^ BarValue*(X, Y, W, H, B, BW: INTEGER; min, max: LONGINT): LONGINT; 
	PROCEDURE ^ BarPos*(X, Y, W, H, BW: INTEGER; min, max, val: LONGINT): INTEGER; 
	PROCEDURE ^ DrawSlider(T: Tracker); 
	PROCEDURE ^ drawBar(T: Tracker; X, Y: INTEGER); 
	PROCEDURE ^ OpenBar(tracker: Tracker; R: Display3.Mask; keys: SET; MX, MY, X, Y, W, H, B, BW: INTEGER); 
	PROCEDURE ^ Bar*(R: Display3.Mask; X, Y, W, H, B, BW: INTEGER); 
	PROCEDURE ^ MoveRect*(R: Display3.Mask; VAR keysum: SET; VAR MX, MY, X, Y, W, H: INTEGER); 
	PROCEDURE ^ SizeRect*(R: Display3.Mask; VAR keysum: SET; VAR MX, MY, X, Y, W, H: INTEGER; callback: Callback); 
	PROCEDURE ^ TrackCross*(R: Display3.Mask; VAR keysum: SET; VAR MX, MY, X, Y, W, H: INTEGER); 
	PROCEDURE ^ TrackBar*(R: Display3.Mask; VAR keysum: SET; VAR MX, MY, X, Y, W, H, B, BW: INTEGER); 
	PROCEDURE ^ TrackHighlight*(R: Display3.Mask; VAR keysum: SET; VAR MX, MY: INTEGER; X, Y, W, H: INTEGER); 
	PROCEDURE ^ DrawFlatHand(x, y: INTEGER); 
	PROCEDURE ^ DrawPointHand(x, y: INTEGER); 
	PROCEDURE ^ DrawCopyHand(x, y: INTEGER); 
	PROCEDURE ^ DrawMoveHand(x, y: INTEGER); 
	PROCEDURE ^ DrawCross(x, y: INTEGER); 
	PROCEDURE ^ Fade(x, y: INTEGER); 
	PROCEDURE ^ DrawArrow(x, y: INTEGER); 
	PROCEDURE ^ FadeArrow(x, y: INTEGER); 
	PROCEDURE ^ InitCursors; 
BEGIN
END Effects.
