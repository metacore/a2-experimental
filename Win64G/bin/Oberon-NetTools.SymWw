MODULE NetTools IN Oberon;
	IMPORT SYSTEM, IP IN A2, Input, Files, Objects, Strings, Texts, Oberon, NetSystem, Gadgets, Documents, HyperDocs, Attributes, Streams;
CONST 
	MaxLine* = 1024; 
	BufLen* = MaxLine; 
	ServerStrLen* = HyperDocs.ServerStrLen; 
	PathStrLen* = HyperDocs.PathStrLen; 
	Esc = 1BX; 
	BreakChar = Esc; 
	Done* = 0; 
	Failed* = MAX(INTEGER); 
TYPE 
	ProxyMsg* = RECORD (HyperDocs.LinkSchemeMsg)
		host*: ARRAY ServerStrLen OF CHAR; 
		D*: Documents.Document; 
		port*: INTEGER; 
	END; 

	Session* = POINTER TO SessionDesc; 

	SessionDesc* = RECORD 
		C*: NetSystem.Connection; 
		S*: Streams.Stream; 
		reply*: ARRAY MaxLine OF CHAR; 
		status*: INTEGER; 
		res*: INTEGER; 
	END; 

	TCPStream* = POINTER TO TCPStreamDesc; 

	TCPStreamDesc* = RECORD (Streams.StreamDesc)
		C*: NetSystem.Connection; 
		avail: LONGINT; 
	END; 
VAR 
	W: Texts.Writer; 
	curLen*: LONGINT; 
	prevPos, curPos*: LONGINT; 
	TimeOut*: LONGINT; 
	progM: Objects.Object; 
	buffer: ARRAY BufLen OF CHAR; 
	proxyDomain: ARRAY 64 OF CHAR; 

	PROCEDURE ^ UserBreak*(): BOOLEAN; 
	PROCEDURE ^ ProgMNotify*; 
	PROCEDURE ^ Connect*(VAR C: NetSystem.Connection; port: INTEGER; host: ARRAY OF CHAR; log: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ AsyncConnect*(VAR C: NetSystem.Connection; port: INTEGER; host: ARRAY OF CHAR; log: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ Connected*(C: NetSystem.Connection; mode: INTEGER): BOOLEAN; 
	PROCEDURE ^ Disconnect*(VAR C: NetSystem.Connection); 
	PROCEDURE ^ SendString*(C: NetSystem.Connection; str: ARRAY OF CHAR); 
	PROCEDURE ^ ReadTCPBytes(S: Streams.Stream; VAR x: ARRAY OF SYSTEM.BYTE; n: LONGINT); 
	PROCEDURE ^ WriteTCPBytes(S: Streams.Stream; VAR x: ARRAY OF SYSTEM.BYTE; n: LONGINT); 
	PROCEDURE ^ TCPAvailable*(S: Streams.Stream): LONGINT; 
	PROCEDURE ^ TCPState(S: Streams.Stream): INTEGER; 
	PROCEDURE ^ TCPFlush(S: Streams.Stream); 
	PROCEDURE ^ TCPClose(S: Streams.Stream); 
	PROCEDURE ^ OpenStream*(C: NetSystem.Connection): Streams.Stream; 
	PROCEDURE ^ ReadData*(C: NetSystem.Connection; VAR R: Files.Rider; maxLen: LONGINT); 
	PROCEDURE ^ WriteData*(C: NetSystem.Connection; VAR R: Files.Rider); 
	PROCEDURE ^ QueryString*(key: ARRAY OF CHAR; VAR s: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ GetHostPort*(key: ARRAY OF CHAR; VAR host: ARRAY OF CHAR; VAR port: INTEGER; defPort: INTEGER); 
	PROCEDURE ^ QueryBool*(key: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ SplitHostPort*(VAR url, host: ARRAY OF CHAR; VAR port: INTEGER); 
	PROCEDURE ^ UseProxy*(VAR host: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ InitProxy; 
BEGIN
END NetTools.
