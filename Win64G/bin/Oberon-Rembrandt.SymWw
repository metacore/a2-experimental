MODULE Rembrandt IN Oberon;
	IMPORT Rembrandt0, Files, Display, D3 := Display3, Texts, Printer3, Printer, Effects, Objects, Gadgets, Fonts, Oberon, Pictures, Out, Input, Attributes;
CONST 
	MM = 1; 
	MR = 0; 
	ML = 2; 
	Cancel = {MM, MR, ML}; 
	No* = 0; 
	Block* = 1; 
	Image* = 2; 
	Object* = 3; 
	Freehand* = 4; 
	idMove* = 0; 
	idRotate* = 1; 
	idScale* = 2; 
TYPE 
	Element = POINTER TO ElemDesc; 

	ElemDesc = RECORD 
		next: Element; 
		x, y, w: INTEGER; 
	END; 

	Lockrec = RECORD 
		scaledpict: Pictures.Picture; 
		lw, lh, lpx, lpy, actlw, actlh: INTEGER; 
	END; 

	Frame* = POINTER TO FrameDesc; 

	FrameDesc* = RECORD (Gadgets.FrameDesc)
		pict*: Pictures.Picture; 
		px, py: INTEGER; 
		locked: BOOLEAN; 
		lockdata: Lockrec; 
		border: BOOLEAN; 
		selection*: INTEGER; 
		sx*, sy*, sw*, sh*: INTEGER; 
		selstruct: Element; 
		seloutline: Element; 
		selcolor: INTEGER; 
		selcol: INTEGER; 
		seltime: LONGINT; 
		selpict: Pictures.Picture; 
		car*: BOOLEAN; 
		cx*, cy*: INTEGER; 
		string: RECORD 
			len, x, y: INTEGER; 
		END; 
		zoom: INTEGER; 
		grid: BOOLEAN; 
		time: LONGINT; 
		col*: INTEGER; 
	END; 

	TrackMMProc* = PROCEDURE (F: Frame; VAR M: Oberon.InputMsg; x, y: INTEGER); 

	DrawSelectionMsg = RECORD (Display.FrameMsg)
	END; 

	DrawCaretMsg = RECORD (Display.FrameMsg)
	END; 

	DrawGridMsg = RECORD (Display.FrameMsg)
		u, v, w, h: INTEGER; 
	END; 

	ZoomMsg = RECORD (Display.DisplayMsg)
		zoom: INTEGER; 
	END; 

	FocusMsg = RECORD (Display.FrameMsg)
		u, v: INTEGER; 
	END; 

	SelectMsg = RECORD (Display.SelectMsg)
		pict: Pictures.Picture; 
		u, v, w, h: INTEGER; 
	END; 

	Region = POINTER TO RegionDesc; 

	RegionDesc = RECORD 
		next: Region; 
		px, py: INTEGER; 
		P, pict: Pictures.Picture; 
	END; 

	; 

	; 

	; 
VAR 
	trackMM*: TrackMMProc; 
	trackSelMM*: RECORD 
		id*: SHORTINT; 
		track*: TrackMMProc; 
	END; 
	undo: Region; 
	cursor*: Oberon.Marker; 
	seltype: INTEGER; 
	selcolor*: INTEGER; 
	clipboard: RECORD 
		id, col: INTEGER; 
		P: Pictures.Picture; 
		selstruct: Element; 
		sw, sh: INTEGER; 
		Paste: PROCEDURE (D: Pictures.Picture; dx, dy: INTEGER); 
	END; 
	seldir: ARRAY 4 OF RECORD 
		dx, dy, ind: SHORTINT; 
	END; 

	PROCEDURE ^ Min(a, b: INTEGER): INTEGER; 
	PROCEDURE ^ Max(a, b: INTEGER): INTEGER; 
	PROCEDURE ^ SizeFrame(F: Frame; d: INTEGER); 
	PROCEDURE ^ FrameAttributes*(F: Frame; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ FrameLinks(F: Frame; VAR M: Objects.LinkMsg); 
	PROCEDURE ^ ScreentoPict*(F: Frame; x, y, absx, absy: INTEGER; VAR px, py: INTEGER); 
	PROCEDURE ^ PicttoScreen*(F: Frame; x, y, relx, rely: INTEGER; VAR absx, absy: INTEGER); 
	PROCEDURE ^ RemoveSelection*(F: Frame); 
	PROCEDURE ^ SetSelection(F: Frame; id: INTEGER); 
	PROCEDURE ^ GetSelection(VAR F: Frame; VAR P: Pictures.Picture; VAR time: LONGINT; VAR x, y, w, h: INTEGER); 
	PROCEDURE ^ DrawOutline(F: Frame; Q: D3.Mask; sx, sy: INTEGER); 
	PROCEDURE ^ DrawSelection(F: Frame; Q: D3.Mask; x, y: INTEGER); 
	PROCEDURE ^ CopyPalette*(S, D: Pictures.Picture); 
	PROCEDURE ^ GetSelectedPict*(VAR P: Pictures.Picture; VAR x, y, w, h: INTEGER); 
	PROCEDURE ^ GetSelectioninFrame*(F: Frame; VAR P: Pictures.Picture; VAR x, y, w, h: INTEGER); 
	PROCEDURE ^ Select(F: Frame; x, y: INTEGER; VAR M: Display.SelectMsg); 
	PROCEDURE ^ DisplayText*(sx, sy, sw, sh: INTEGER; text: ARRAY OF CHAR); 
	PROCEDURE ^ InsidePict*(F: Frame; mx, my, x, y: INTEGER): BOOLEAN; 
	PROCEDURE ^ Defocus(F: Frame); 
	PROCEDURE ^ Neutralize(F: Frame; x, y, w, h: INTEGER); 
	PROCEDURE ^ DrawGrid(F: Frame; Q: D3.Mask; x, y, w, h, picx, picy, picw, pich: INTEGER); 
	PROCEDURE ^ DisplayBlock(F: Frame; Q: D3.Mask; p: Pictures.Picture; x, y, w, h, picx, picy, picw, pich: INTEGER); 
	PROCEDURE ^ RestorePict*(F: Frame; Q: D3.Mask; x, y, w, h, picx, picy, picw, pich: INTEGER); 
	PROCEDURE ^ Restore(F: Frame; Q: D3.Mask; x, y, w, h, picx, picy, picw, pich: INTEGER); 
	PROCEDURE ^ DrawCaret(Q: D3.Mask; x, y: INTEGER); 
	PROCEDURE ^ SetCaret(F: Frame; cx, cy: INTEGER); 
	PROCEDURE ^ Print(F: Frame; VAR M: Display.DisplayMsg); 
	PROCEDURE ^ Copy*(VAR M: Objects.CopyMsg; from, to: Frame); 
	PROCEDURE ^ StoreFrame(F: Frame; VAR M: Objects.FileMsg); 
	PROCEDURE ^ LoadFrame(F: Frame; VAR M: Objects.FileMsg); 
	PROCEDURE ^ SavePicture*(P: Pictures.Picture; x, y, w, h: INTEGER); 
	PROCEDURE ^ ScanBorder(S: Pictures.Picture; y0: INTEGER; VAR list: Element); 
	PROCEDURE ^ SelectArea(F: Frame; P: Pictures.Picture; x0, y0: INTEGER); 
	PROCEDURE ^ TrackObjectSelection(F: Frame; VAR M: Oberon.InputMsg; x, y: INTEGER); 
	PROCEDURE ^ ProcessList(F: Frame; VAR first: Element); 
	PROCEDURE ^ Line(x0, y0, x1, y1: INTEGER; VAR first: Element); 
	PROCEDURE ^ DisplayLine*(F: Frame; x, y: INTEGER; Q: D3.Mask; col, x0, y0, x1, y1, dw: INTEGER); 
	PROCEDURE ^ TrackFreehandSelection(F: Frame; VAR M: Oberon.InputMsg; x, y: INTEGER); 
	PROCEDURE ^ Undo*; 
	PROCEDURE ^ WriteChar(F: Frame; lib: Objects.Library; col: INTEGER; ch: CHAR; VAR px, py: INTEGER); 
	PROCEDURE ^ Write(F: Frame; VAR M: Oberon.InputMsg; x, y: INTEGER); 
	PROCEDURE ^ CopyText(F: Frame; text: Texts.Text; beg, end: LONGINT; x, y: INTEGER); 
	PROCEDURE ^ CopyOver(F: Frame; P: Pictures.Picture; x, y: INTEGER); 
	PROCEDURE ^ SizeRect*(F: Frame; x, y: INTEGER; Q: D3.Mask; VAR keysum: SET; VAR mx, my, sx, sy, sw, sh: INTEGER; info: BOOLEAN); 
	PROCEDURE ^ TrackSelection*(F: Frame; VAR M: Oberon.InputMsg; x, y, w, h: INTEGER); 
	PROCEDURE ^ MovePicture(F: Frame; VAR M: Oberon.InputMsg; x, y: INTEGER); 
	PROCEDURE ^ MakePictMask(F: Frame; x, y: INTEGER; Q: D3.Mask); 
	PROCEDURE ^ MoveBlock(F: Frame; x, y: INTEGER; Q: D3.Mask; VAR M: Oberon.InputMsg; P: Pictures.Picture; VAR sx, sy: INTEGER; w, h: INTEGER; interclick: BOOLEAN); 
	PROCEDURE ^ MoveStructure(F: Frame; x, y: INTEGER; VAR M: Oberon.InputMsg; fselcol, typ: INTEGER; fp: Pictures.Picture; struct: Element; first: BOOLEAN; VAR selx, sely, selw, selh: INTEGER; interclick: BOOLEAN); 
	PROCEDURE ^ HandleStructure(F: Frame; x, y: INTEGER; VAR M: Oberon.InputMsg; f: Frame; struct: Element; same: BOOLEAN; selx, sely, selw, selh: INTEGER); 
	PROCEDURE ^ HandleMove(F: Frame; VAR M: Oberon.InputMsg; x, y: INTEGER); 
	PROCEDURE ^ HandleStamp(F: Frame; VAR M: Oberon.InputMsg; x, y: INTEGER); 
	PROCEDURE ^ TrackCaret(F: Frame; VAR M: Oberon.InputMsg; x, y: INTEGER); 
	PROCEDURE ^ TrackEffects(F: Frame; VAR M: Oberon.InputMsg; x, y, w, h: INTEGER); 
	PROCEDURE ^ Edit(F: Frame; VAR M: Oberon.InputMsg; x, y, w, h: INTEGER); 
	PROCEDURE ^ Zoom(F: Frame; Q: D3.Mask; x, y, w, h, factor: INTEGER); 
	PROCEDURE ^ GetZoom*(F: Frame; VAR factor: INTEGER); 
	PROCEDURE ^ SetZoom*(F: Frame; factor: INTEGER); 
	PROCEDURE ^ GetGrid*(F: Frame; VAR set: BOOLEAN); 
	PROCEDURE ^ SetGrid*(F: Frame; set: BOOLEAN); 
	PROCEDURE ^ GetLocked*(F: Frame; VAR locked: BOOLEAN); 
	PROCEDURE ^ SetLocked*(F: Frame; locked: BOOLEAN); 
	PROCEDURE ^ GetBorder*(F: Frame; VAR border: BOOLEAN); 
	PROCEDURE ^ SetBorder*(F: Frame; border: BOOLEAN); 
	PROCEDURE ^ Move*; 
	PROCEDURE ^ ClipboardStamp*; 
	PROCEDURE ^ ClipboardDraw(D: Pictures.Picture; dx, dy: INTEGER); 
	PROCEDURE ^ CutCopy(clear: BOOLEAN); 
	PROCEDURE ^ ClipboardCopy*; 
	PROCEDURE ^ ClipboardCut*; 
	PROCEDURE ^ ClipboardPaste*; 
	PROCEDURE ^ BlockSelect*; 
	PROCEDURE ^ ObjectSelect*; 
	PROCEDURE ^ FreehandSelect*; 
	PROCEDURE ^ MakePattern*; 
	PROCEDURE ^ Handle*(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ New*; 
	PROCEDURE ^ Insert*; 
	PROCEDURE ^ NewP*(F: Frame; pict: Pictures.Picture); 
BEGIN
END Rembrandt.
