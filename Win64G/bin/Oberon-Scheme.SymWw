MODULE Scheme IN Oberon;
	IMPORT MathL IN A2, Files, Modules, Reals IN A2, Objects, Texts, Oberon, Strings;
CONST 
	null* = 0; 
	bool* = 1; 
	char* = 2; 
	string* = 3; 
	number* = 4; 
	reference* = 5; 
	symbol* = 6; 
	pair* = 7; 
	vector* = 8; 
	procedure* = 9; 
	port* = 10; 
	eofobj* = 11; 
	newline* = 0DX; 
	errEval* = 1; 
	errUnbound* = 2; 
	errArg* = 3; 
	errVar* = 5; 
	errOp* = 6; 
	errMany* = 7; 
	errFormal* = 8; 
	fixnum = 1; 
	rational = 2; 
	flonum = 3; 
	primitive = 5; 
	compound = 6; 
	input = 8; 
	output = 9; 
	maxPoolSize = 4096; 
	stackBlock = 256; 
	dirSize = 128; 
	envSize = 32; 
	invalid = 0; 
	ident = 1; 
	boolean = 2; 
	character = 3; 
	literal = 4; 
	intnum = 5; 
	ratnum = 6; 
	realnum = 7; 
	complexnum = 8; 
	dot = 9; 
	lpar = 10; 
	rpar = 11; 
	lvec = 12; 
	quote = 13; 
	quasiquote = 14; 
	unquote = 15; 
	unquotelist = 16; 
	eof = 17; 
TYPE 
	Context* = POINTER TO ContextDesc; 

	Object* = POINTER TO ObjDesc; 

	ObjDesc = RECORD 
		type: SHORTINT; 
		sub: SHORTINT; 
		dsc, next: Object; 
	END; 

	PrimEval* = PROCEDURE (ctxt: Context; args: Object; VAR res: Object); 

	Evaluator = PROCEDURE (ctxt: Context); 

	Buffer = POINTER TO ARRAY OF CHAR; 

	Stretch = RECORD 
		pos, len: LONGINT; 
		buf: Buffer; 
	END; 

	Pool* = RECORD 
		avail, pos: LONGINT; 
		buf: Buffer; 
	END; 

	Symbol = POINTER TO RECORD (ObjDesc)
		stretch: Stretch; 
		hash: LONGINT; 
		link: Symbol; 
	END; 

	Binding = POINTER TO RECORD 
		next: Binding; 
		sym: Symbol; 
		value: Object; 
	END; 

	Environment* = POINTER TO RECORD 
		outer: Environment; 
		chain: ARRAY envSize OF Binding; 
	END; 

	Bool = POINTER TO RECORD (ObjDesc)
		b: BOOLEAN; 
	END; 

	Char = POINTER TO RECORD (ObjDesc)
		ch: CHAR; 
	END; 

	String = POINTER TO RECORD (ObjDesc)
		stretch: Stretch; 
	END; 

	Fixnum = POINTER TO RECORD (ObjDesc)
		int: LONGINT; 
	END; 

	Flonum = POINTER TO RECORD (ObjDesc)
		real: LONGREAL; 
	END; 

	Rational = POINTER TO RECORD (ObjDesc)
		num, denom: LONGINT; 
	END; 

	Reference = POINTER TO RECORD (ObjDesc)
		obj: Objects.Object; 
	END; 

	Vector = POINTER TO RECORD (ObjDesc)
		size: LONGINT; 
		elem: POINTER TO ARRAY OF Object; 
	END; 

	Primitive = POINTER TO RECORD (ObjDesc)
		sym: Symbol; 
		eval: PrimEval; 
	END; 

	Procedure = POINTER TO RECORD (ObjDesc)
		env: Environment; 
		body: Object; 
		par: Object; 
	END; 

	Input = POINTER TO InputDesc; 

	InputDesc = RECORD (ObjDesc)
		open, ready, eof: BOOLEAN; 
		read: PROCEDURE (port: Input; VAR ch: CHAR); 
		unread: PROCEDURE (port: Input); 
		getpos: PROCEDURE (port: Input):LONGINT; 
	END; 

	FileInput = POINTER TO RECORD (InputDesc)
		r: Files.Rider; 
	END; 

	TextInput = POINTER TO RECORD (InputDesc)
		r: Texts.Reader; 
		text: Texts.Text; 
	END; 

	StringInput = POINTER TO RECORD (InputDesc)
		pos: LONGINT; 
		ps: POINTER TO ARRAY OF CHAR; 
	END; 

	Output = POINTER TO OutputDesc; 

	OutputDesc = RECORD (ObjDesc)
		open: BOOLEAN; 
		write: PROCEDURE (port: Output; ch: CHAR); 
		close, flush: PROCEDURE (port: Output); 
	END; 

	FileOutput = POINTER TO RECORD (OutputDesc)
		r: Files.Rider; 
	END; 

	TextOutput = POINTER TO RECORD (OutputDesc)
		text: Texts.Text; 
	END; 

	ObjectElems = POINTER TO ARRAY OF Object; 

	EvalElems = POINTER TO ARRAY OF Evaluator; 

	EnvElems = POINTER TO ARRAY OF Environment; 

	Stack = RECORD 
		obj: RECORD 
			size, top: LONGINT; 
			elem: ObjectElems; 
		END; 
		eval: RECORD 
			size, top: LONGINT; 
			elem: EvalElems; 
		END; 
		env: RECORD 
			size, top: LONGINT; 
			elem: EnvElems; 
		END; 
	END; 

	Token = RECORD 
		pos: LONGINT; 
		kind: INTEGER; 
		bool: BOOLEAN; 
		char: CHAR; 
		num, denom: LONGINT; 
		real: LONGREAL; 
		s: ARRAY 256 OF CHAR; 
	END; 

	ContextDesc* = RECORD 
		failed*: BOOLEAN; 
		in*, out*, err*: Object; 
		pool*: Pool; 
		env*: Environment; 
		exp*: Object; 
		res, unev, args: Object; 
		eval, cont: Evaluator; 
		stack: Stack; 
	END; 
VAR 
	globals*: Environment; 
	zero*, one*, inf*, ninf*, nan*, nil*, false*, true*, EOF*: Object; 
	symPool: Pool; 
	symTab: ARRAY dirSize OF Symbol; 
	quoteSym, quasiquoteSym, unquoteSym, unquotelistSym, setSym, defineSym, lambdaSym, ifSym, beginSym, letSym, condSym, caseSym, elseSym, andSym, orSym, letXSym, letrecSym, unassignedSym, doSym, delaySym: Object; 
	OutText: TextOutput; 
	OutW: Texts.Writer; 

	PROCEDURE ^ InitPool*(VAR pool: Pool); 
	PROCEDURE ^ AllocStretch(len: LONGINT; VAR pool: Pool; VAR str: Stretch); 
	PROCEDURE ^ MakeStretch(VAR s: ARRAY OF CHAR; VAR pool: Pool; VAR str: Stretch); 
	PROCEDURE ^ GetStretch(VAR str: Stretch; pos, len: LONGINT; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ SetStretch(VAR str: Stretch; pos, len: LONGINT; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ StretchEquals(VAR str: Stretch; VAR s: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ NewNull(): Object; 
	PROCEDURE ^ IsNull*(obj: Object): BOOLEAN; 
	PROCEDURE ^ NewBool(val: BOOLEAN): Object; 
	PROCEDURE ^ IsBool*(obj: Object): BOOLEAN; 
	PROCEDURE ^ BoolValue*(obj: Object): BOOLEAN; 
	PROCEDURE ^ NewChar*(val: CHAR): Object; 
	PROCEDURE ^ IsChar*(obj: Object): BOOLEAN; 
	PROCEDURE ^ CharValue*(obj: Object): CHAR; 
	PROCEDURE ^ NewLiteral*(val: ARRAY OF CHAR; VAR pool: Pool): Object; 
	PROCEDURE ^ NewString*(len: LONGINT; fill: CHAR; VAR pool: Pool): Object; 
	PROCEDURE ^ IsString*(obj: Object): BOOLEAN; 
	PROCEDURE ^ StringLen*(obj: Object): LONGINT; 
	PROCEDURE ^ GetString*(obj: Object; pos, len: LONGINT; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ SetString*(obj: Object; pos, len: LONGINT; s: ARRAY OF CHAR); 
	PROCEDURE ^ CopyString*(src, dst: Object; spos, len, dpos: LONGINT); 
	PROCEDURE ^ GCD(a, b: LONGINT): LONGINT; 
	PROCEDURE ^ NewInteger*(val: LONGINT): Object; 
	PROCEDURE ^ NewRational*(num, denom: LONGINT): Object; 
	PROCEDURE ^ NewReal*(val: LONGREAL): Object; 
	PROCEDURE ^ ToExact*(obj: Object): Object; 
	PROCEDURE ^ ToInexact*(obj: Object): Object; 
	PROCEDURE ^ GetInteger*(obj: Object; VAR val: LONGINT; VAR exact: BOOLEAN); 
	PROCEDURE ^ GetRational*(obj: Object; VAR num, denom: LONGINT; VAR exact: BOOLEAN); 
	PROCEDURE ^ GetReal*(obj: Object; VAR val: LONGREAL); 
	PROCEDURE ^ IsNumber*(obj: Object): BOOLEAN; 
	PROCEDURE ^ IsComplex*(obj: Object): BOOLEAN; 
	PROCEDURE ^ IsReal*(obj: Object): BOOLEAN; 
	PROCEDURE ^ IsRational*(obj: Object): BOOLEAN; 
	PROCEDURE ^ IsInteger*(obj: Object): BOOLEAN; 
	PROCEDURE ^ IsExact*(obj: Object): BOOLEAN; 
	PROCEDURE ^ IsInexact*(obj: Object): BOOLEAN; 
	PROCEDURE ^ Compare*(obj1, obj2: Object): LONGINT; 
	PROCEDURE ^ Add*(obj1, obj2: Object): Object; 
	PROCEDURE ^ Neg*(obj: Object): Object; 
	PROCEDURE ^ Sub*(obj1, obj2: Object): Object; 
	PROCEDURE ^ Mul*(obj1, obj2: Object): Object; 
	PROCEDURE ^ Inv*(obj: Object): Object; 
	PROCEDURE ^ Div*(obj1, obj2: Object): Object; 
	PROCEDURE ^ Quotient*(obj1, obj2: Object; VAR q, r, m: Object); 
	PROCEDURE ^ Sqrt*(obj: Object): Object; 
	PROCEDURE ^ Exp*(obj: Object): Object; 
	PROCEDURE ^ Ln*(obj: Object): Object; 
	PROCEDURE ^ Expt*(base, power: Object): Object; 
	PROCEDURE ^ Sin*(obj: Object): Object; 
	PROCEDURE ^ ASin*(obj: Object): Object; 
	PROCEDURE ^ Cos*(obj: Object): Object; 
	PROCEDURE ^ ACos*(obj: Object): Object; 
	PROCEDURE ^ Tan*(obj: Object): Object; 
	PROCEDURE ^ ATan*(obj: Object): Object; 
	PROCEDURE ^ ATan2*(obj1, obj2: Object): Object; 
	PROCEDURE ^ Floor*(obj: Object): Object; 
	PROCEDURE ^ Rationalize*(x, eps: Object): Object; 
	PROCEDURE ^ NewRef*(refobj: Objects.Object): Object; 
	PROCEDURE ^ IsReference*(obj: Object): BOOLEAN; 
	PROCEDURE ^ RefValue*(obj: Object): Objects.Object; 
	PROCEDURE ^ HashCode(VAR s: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ NewSymbol*(name: ARRAY OF CHAR): Object; 
	PROCEDURE ^ IsSymbol*(obj: Object): BOOLEAN; 
	PROCEDURE ^ GetSymbol*(obj: Object; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ NewPair*(car, cdr: Object): Object; 
	PROCEDURE ^ IsPair*(obj: Object): BOOLEAN; 
	PROCEDURE ^ GetPair*(obj: Object; VAR car, cdr: Object); 
	PROCEDURE ^ Car*(obj: Object): Object; 
	PROCEDURE ^ SetCar*(p, obj: Object); 
	PROCEDURE ^ Cdr*(obj: Object): Object; 
	PROCEDURE ^ SetCdr*(p, obj: Object); 
	PROCEDURE ^ NewVector*(size: LONGINT; fill: Object): Object; 
	PROCEDURE ^ IsVector*(obj: Object): BOOLEAN; 
	PROCEDURE ^ VectorLen*(obj: Object): LONGINT; 
	PROCEDURE ^ VectorAt*(obj: Object; idx: LONGINT): Object; 
	PROCEDURE ^ SetVectorAt*(obj: Object; idx: LONGINT; val: Object); 
	PROCEDURE ^ NewPrimitive*(sym: Object; eval: PrimEval): Object; 
	PROCEDURE ^ NewProcedure*(env: Environment; par, body: Object): Object; 
	PROCEDURE ^ IsProcedure*(obj: Object): BOOLEAN; 
	PROCEDURE ^ NewEof(): Object; 
	PROCEDURE ^ IsEof*(obj: Object): BOOLEAN; 
	PROCEDURE ^ IsPort*(obj: Object): BOOLEAN; 
	PROCEDURE ^ IsInput*(obj: Object): BOOLEAN; 
	PROCEDURE ^ IsOpenInput*(obj: Object): BOOLEAN; 
	PROCEDURE ^ Eof*(obj: Object): BOOLEAN; 
	PROCEDURE ^ Ready*(obj: Object): BOOLEAN; 
	PROCEDURE ^ ReadCh*(obj: Object; VAR ch: CHAR); 
	PROCEDURE ^ PeekCh*(obj: Object; VAR ch: CHAR): BOOLEAN; 
	PROCEDURE ^ Unread*(obj: Object); 
	PROCEDURE ^ Pos*(obj: Object): LONGINT; 
	PROCEDURE ^ CloseInput*(obj: Object); 
	PROCEDURE ^ ReadFile(ip: Input; VAR ch: CHAR); 
	PROCEDURE ^ UnreadFile(ip: Input); 
	PROCEDURE ^ FilePos(ip: Input): LONGINT; 
	PROCEDURE ^ NewFileInput*(file: Files.File): Object; 
	PROCEDURE ^ ReadText(ip: Input; VAR ch: CHAR); 
	PROCEDURE ^ UnreadText(ip: Input); 
	PROCEDURE ^ TextPos(ip: Input): LONGINT; 
	PROCEDURE ^ NewTextInput*(text: Texts.Text; pos: LONGINT): Object; 
	PROCEDURE ^ ReadString(ip: Input; VAR ch: CHAR); 
	PROCEDURE ^ UnreadString(ip: Input); 
	PROCEDURE ^ StringPos(ip: Input): LONGINT; 
	PROCEDURE ^ NewStringInput*(s: ARRAY OF CHAR): Object; 
	PROCEDURE ^ IsOutput*(obj: Object): BOOLEAN; 
	PROCEDURE ^ IsOpenOutput*(obj: Object): BOOLEAN; 
	PROCEDURE ^ Write*(obj: Object; ch: CHAR); 
	PROCEDURE ^ WriteStr*(obj: Object; s: ARRAY OF CHAR); 
	PROCEDURE ^ Flush*(obj: Object); 
	PROCEDURE ^ CloseOutput*(obj: Object); 
	PROCEDURE ^ WriteFile(op: Output; ch: CHAR); 
	PROCEDURE ^ FlushFile(op: Output); 
	PROCEDURE ^ CloseFile(op: Output); 
	PROCEDURE ^ NewFileOutput*(file: Files.File): Object; 
	PROCEDURE ^ WriteText(op: Output; ch: CHAR); 
	PROCEDURE ^ FlushText(op: Output); 
	PROCEDURE ^ NewTextOutput*(text: Texts.Text): Object; 
	PROCEDURE ^ WriteObj*(out, obj: Object); 
	PROCEDURE ^ Eqv*(obj1, obj2: Object): BOOLEAN; 
	PROCEDURE ^ Eq*(obj1, obj2: Object): BOOLEAN; 
	PROCEDURE ^ InitStack(VAR stack: Stack); 
	PROCEDURE ^ PushObj(VAR stack: Stack; obj: Object); 
	PROCEDURE ^ PushEnv(VAR stack: Stack; env: Environment); 
	PROCEDURE ^ PushEval(VAR stack: Stack; eval: Evaluator); 
	PROCEDURE ^ PopObj(VAR stack: Stack; VAR obj: Object); 
	PROCEDURE ^ PopEnv(VAR stack: Stack; VAR env: Environment); 
	PROCEDURE ^ PopEval(VAR stack: Stack; VAR eval: Evaluator); 
	PROCEDURE ^ InitContext*(ctxt: Context; in, out, err: Object); 
	PROCEDURE ^ Fail*(ctxt: Context; msg: ARRAY OF CHAR; obj: Object); 
	PROCEDURE ^ FailCode*(ctxt: Context; code: INTEGER; obj: Object); 
	PROCEDURE ^ NewEnvironment*(outer: Environment): Environment; 
	PROCEDURE ^ Extend*(outer: Environment; par, arg: Object; ctxt: Context): Environment; 
	PROCEDURE ^ DefineVariable*(var, val: Object; env: Environment); 
	PROCEDURE ^ FindBinding(sym: Symbol; env: Environment): Binding; 
	PROCEDURE ^ LookupVariable*(var: Object; env: Environment; VAR val: Object): BOOLEAN; 
	PROCEDURE ^ SetVariable*(var, val: Object; env: Environment): BOOLEAN; 
	PROCEDURE ^ WriteEnv*(out: Object; env: Environment); 
	PROCEDURE ^ CondToIf(ctxt: Context; exp: Object; VAR res: Object); 
	PROCEDURE ^ CaseToIf(ctxt: Context; exp: Object; VAR res: Object); 
	PROCEDURE ^ AndToIf(ctxt: Context; exp: Object; VAR res: Object); 
	PROCEDURE ^ OrToIf(ctxt: Context; exp: Object; VAR res: Object); 
	PROCEDURE ^ Append(VAR list: Object; obj: Object); 
	PROCEDURE ^ LetToLambda(ctxt: Context; exp: Object; VAR res: Object); 
	PROCEDURE ^ LetXToLet(ctxt: Context; exp: Object; VAR res: Object); 
	PROCEDURE ^ LetrecToLet(ctxt: Context; exp: Object; VAR res: Object); 
	PROCEDURE ^ BeginToLambda(ctxt: Context; exp: Object; VAR res: Object); 
	PROCEDURE ^ DoToLetrec(ctxt: Context; exp: Object; VAR res: Object); 
	PROCEDURE ^ DelayToPromise(ctxt: Context; exp: Object; VAR res: Object); 
	PROCEDURE ^ EvalIf(ctxt: Context); 
	PROCEDURE ^ EvalAssignment(ctxt: Context); 
	PROCEDURE ^ EvalDefinition(ctxt: Context); 
	PROCEDURE ^ EvalContinueSeq(ctxt: Context); 
	PROCEDURE ^ EvalSequence(ctxt: Context); 
	PROCEDURE ^ EvalApply(ctxt: Context); 
	PROCEDURE ^ AppendArg(ctxt: Context); 
	PROCEDURE ^ EvalLastArg(ctxt: Context); 
	PROCEDURE ^ EvalNonListArg(ctxt: Context); 
	PROCEDURE ^ EvalAddArg(ctxt: Context); 
	PROCEDURE ^ EvalNextArg(ctxt: Context); 
	PROCEDURE ^ EvalArgs(ctxt: Context); 
	PROCEDURE ^ EvalDispatch(ctxt: Context); 
	PROCEDURE ^ Evaluate*(ctxt: Context; env: Environment; exp: Object): Object; 
	PROCEDURE ^ EvaluateSequence*(ctxt: Context; env: Environment; seq: Object); 
	PROCEDURE ^ Call*(ctxt: Context; proc, args: Object); 
	PROCEDURE ^ ScanCh(in: Object; VAR ch: CHAR); 
	PROCEDURE ^ ScanNumber(in: Object; VAR ch: CHAR; radix: LONGINT; VAR t: Token); 
	PROCEDURE ^ Scan(in: Object; VAR t: Token); 
	PROCEDURE ^ ReadObj(ctxt: Context; VAR token: Token; VAR obj: Object): BOOLEAN; 
	PROCEDURE ^ Read*(ctxt: Context): Object; 
	PROCEDURE ^ Load*(ctxt: Context; from: Object); 
	PROCEDURE ^ NumberToString*(obj: Object; radix: LONGINT; VAR pool: Pool): Object; 
	PROCEDURE ^ StringToNumber*(obj: Object; radix: LONGINT): Object; 
	PROCEDURE ^ SymbolToString*(obj: Object): Object; 
	PROCEDURE ^ StringToSymbol*(obj: Object): Object; 
	PROCEDURE ^ Execute*; 
	PROCEDURE ^ InitSymbols; 
	PROCEDURE ^ InitGlobals; 
	PROCEDURE ^ Def*(name: ARRAY OF CHAR; eval: PrimEval); 
BEGIN
END Scheme.
