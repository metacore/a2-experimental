MODULE vyReal IN Oberon;
	IMPORT Files, Reals IN A2, vyBase;
CONST 
	idversion* = \" v0r0a3x"\; 
	fmtany* = 0; 
	fmtend* = 0; 
	fmtplain* = 1; 
	fmtpacked* = 2; 
TYPE 
	real = REAL; 

	index = LONGINT; 

	tOp1* = PROCEDURE (VAR arg: real); 

	tOp2* = PROCEDURE (VAR arg1: real; arg2: real); 

	tOp3* = PROCEDURE (VAR arg1: real; arg2, arg3: real); 
VAR 
	IBETA-, IEXP-, IRND-, IT-, MACHEP-, MAXEXP-, MINEXP-, NEGEP-, NGRD-: INTEGER; 
	EPS-, EPSNEG-, XMAX-, XMIN-: real; 

	PROCEDURE ^ Machar; 
	PROCEDURE ^ Write*(VAR R: Files.Rider; count: index; VAR x: ARRAY OF real; start: index); 
	PROCEDURE ^ Read*(VAR R: Files.Rider; count: index; VAR x: ARRAY OF real; start: index); 
	PROCEDURE ^ WriteFmt*(prefform: LONGINT; VAR R: Files.Rider; count: index; VAR x: ARRAY OF real; start: index); 
	PROCEDURE ^ ReadFmt*(VAR form: LONGINT; VAR R: Files.Rider; count: index; VAR x: ARRAY OF real; start: index); 
	PROCEDURE ^ Fill*(len: index; VAR x: ARRAY OF real; start: index; val: real); 
	PROCEDURE ^ FillPat*(count: index; VAR x: ARRAY OF real; start, step: index; val: real); 
	PROCEDURE ^ Copy*(len: index; VAR src: ARRAY OF real; srcstart: index; VAR dest: ARRAY OF real; deststart: index); 
	PROCEDURE ^ CopyPat*(count: index; VAR src: ARRAY OF real; start, step: index; VAR dest: ARRAY OF real; deststart, deststep: index); 
	PROCEDURE ^ Min*(len: index; VAR x: ARRAY OF real; start: index; VAR minpos: index): real; 
	PROCEDURE ^ Max*(len: index; VAR x: ARRAY OF real; start: index; VAR maxpos: index): real; 
	PROCEDURE ^ MinMax*(len: index; VAR x: ARRAY OF real; start: index; VAR min: real; VAR minpos: index; VAR max: real; VAR maxpos: index; VAR nans: index); 
	PROCEDURE ^ sort5*(VAR data: ARRAY OF real; start: index); 
	PROCEDURE ^ Sort5*(VAR data: ARRAY OF real; start: index); 
	PROCEDURE ^ bt(x1, x2: real): BOOLEAN; 
	PROCEDURE ^ Sort*(count: index; VAR x: ARRAY OF real; start: index); 
	PROCEDURE ^ MergeSort*(count: index; VAR x: ARRAY OF real; start: index); 
	PROCEDURE ^ SortIndexed*(count: index; VAR data: ARRAY OF real; start: index; VAR Index: ARRAY OF index); 
	PROCEDURE ^ SortTwoDepArrays*(VAR reg, resp: ARRAY OF real); 
	PROCEDURE ^ Order*(count: index; x: ARRAY OF real; start: index; ith: index): real; 
	PROCEDURE ^ Summary*(len: index; VAR x: ARRAY OF real; start: index; VAR min, max, mean, ssq: LONGREAL); 
	PROCEDURE ^ MeanSSq*(len: index; VAR x: ARRAY OF real; start: index; VAR mean, ssq: LONGREAL; VAR nans: index); 
	PROCEDURE ^ Abs*(len: index; VAR x: ARRAY OF real; start: index); 
	PROCEDURE ^ AddConst*(len: index; VAR x: ARRAY OF real; start: index; y: real); 
	PROCEDURE ^ AddConstPat*(count: index; VAR x: ARRAY OF real; start, step: index; y: real); 
	PROCEDURE ^ SubConst*(len: index; VAR x: ARRAY OF real; start: index; y: real); 
	PROCEDURE ^ SubConstPat*(count: index; VAR x: ARRAY OF real; start, step: index; y: real); 
	PROCEDURE ^ MulConst*(len: index; VAR x: ARRAY OF real; start: index; fact: real); 
	PROCEDURE ^ MulConstPat*(count: index; VAR x: ARRAY OF real; start, step: index; fact: real); 
	PROCEDURE ^ DivConst*(len: index; VAR x: ARRAY OF real; start: index; divisor: real); 
	PROCEDURE ^ DivConstPat*(count: index; VAR x: ARRAY OF real; start, step: index; divisor: real); 
	PROCEDURE ^ Scale*(len: index; VAR x: ARRAY OF real; start: index; offs, factor: real); 
	PROCEDURE ^ ScalePat*(count: index; VAR x: ARRAY OF real; start, step: index; offs, factor: real); 
	PROCEDURE ^ Add*(VAR x, y: ARRAY OF real; VAR z: ARRAY OF real; len: index); 
	PROCEDURE ^ Sub*(VAR x, y: ARRAY OF real; VAR z: ARRAY OF real; len: index); 
	PROCEDURE ^ Mul*(VAR x, y: ARRAY OF real; VAR z: ARRAY OF real; len: index); 
	PROCEDURE ^ Div*(VAR x, y: ARRAY OF real; VAR z: ARRAY OF real; len: index); 
	PROCEDURE ^ SSQxy*(VAR x, y: ARRAY OF real; mx, my: LONGREAL; len: index): LONGREAL; 
	PROCEDURE ^ Get2d*(VAR x: ARRAY OF real; rows, row, column: index): real; 
	PROCEDURE ^ Set2d*(VAR x: ARRAY OF real; rows, row, column: index; val: real); 
	PROCEDURE ^ Get2dM*(VAR x: ARRAY OF real; rowoffset, coloffset, nrrows, nrcolumns: index; VAR dest: ARRAY OF ARRAY OF real); 
	PROCEDURE ^ Set2dM*(VAR x: ARRAY OF real; rowoffset, coloffset, nrrows, nrcolumns: index; VAR src: ARRAY OF ARRAY OF real); 
	PROCEDURE ^ Get2dF*(VAR x: ARRAY OF real; columns, row, column: index): real; 
	PROCEDURE ^ Set2dF*(VAR x: ARRAY OF real; columns, row, column: index; val: real); 
	PROCEDURE ^ SkalProd*(len: index; VAR x: ARRAY OF real; xstart: index; VAR y: ARRAY OF real; ystart: index): LONGREAL; 
	PROCEDURE ^ SkalProdPat*(count: index; VAR x: ARRAY OF real; xstart, xstep: index; VAR y: ARRAY OF real; ystart, ystep: index): LONGREAL; 
	PROCEDURE ^ Norm2Sq*(len: index; VAR x: ARRAY OF real; xstart: index): LONGREAL; 
	PROCEDURE ^ Norm2SqPat*(count: index; VAR x: ARRAY OF real; xstart, xstep: index): LONGREAL; 
	PROCEDURE ^ Dist2Sq*(len: index; VAR x: ARRAY OF real; xstart: index; VAR y: ARRAY OF real; ystart: index): LONGREAL; 
	PROCEDURE ^ Dist2SqPat*(count: index; VAR x: ARRAY OF real; xstart, xstep: index; VAR y: ARRAY OF real; ystart, ystep: index): LONGREAL; 
	PROCEDURE ^ Norm1*(len: index; VAR x: ARRAY OF real; xstart: index): LONGREAL; 
	PROCEDURE ^ Norm1Pat*(count: index; VAR x: ARRAY OF real; xstart, xstep: index): LONGREAL; 
	PROCEDURE ^ Dist1*(len: index; VAR x: ARRAY OF real; xstart: index; VAR y: ARRAY OF real; ystart: index): LONGREAL; 
	PROCEDURE ^ Dist1Pat*(count: index; VAR x: ARRAY OF real; xstart, xstep: index; VAR y: ARRAY OF real; ystart, ystep: index): real; 
	PROCEDURE ^ NormSup*(len: index; VAR x: ARRAY OF real; xstart: index; VAR mindist: LONGREAL): LONGREAL; 
	PROCEDURE ^ NormSupPat*(count: index; VAR x: ARRAY OF real; xstart, xstep: index; VAR mindist: real): real; 
	PROCEDURE ^ DistSup*(len: index; VAR x: ARRAY OF real; xstart: index; VAR y: ARRAY OF real; ystart: index; VAR mindist: LONGREAL): LONGREAL; 
	PROCEDURE ^ DistSupPat*(count: index; VAR x: ARRAY OF real; xstart, xstep: index; VAR y: ARRAY OF real; ystart, ystep: index; VAR mindist: LONGREAL): LONGREAL; 
	PROCEDURE ^ Entier*(len: index; VAR x: ARRAY OF real; start: index; offs, factor: real; VAR result: ARRAY OF index); 
	PROCEDURE ^ Short*(len: index; VAR x: ARRAY OF real; start: index; VAR result: ARRAY OF REAL); 
	PROCEDURE ^ Long*(len: index; VAR x: ARRAY OF REAL; start: index; VAR result: ARRAY OF real); 
	PROCEDURE ^ Convolution*(len, start: index; VAR src, dest, kernel: ARRAY OF real; kernelw: index); 
BEGIN
END vyReal.
