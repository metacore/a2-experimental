MODULE Tetris IN Oberon;
	IMPORT Attributes, BasicGadgets, Desktops, Display, Display3, Documents, Effects, Files, Gadgets, In, Modules, Oberon, Objects, Out, Panels, RandomNumbers, TextFields;
CONST 
	Version = \"V 3.0"\; 
	Date = \"February '96"\; 
	CompVers = \"V 2.4"\; 
	DefName = \"Tetris.Doc"\; 
	DocMenu = \"Desktops.StoreDoc[Store] Tetris.NewGame[New]"\; 
	DocIcon = \"Icons3.Tetris"\; 
	LogRemoval = FALSE; 
	replace = Display3.replace; 
	paint = Display3.paint; 
	Left = 2; 
	Fudge = 3; 
	TextW = 6; 
	TextH = 17; 
	ButtonW = 60; 
	Figures = 7; 
	Levels = 10; 
	Ranks = 5; 
	LapTime = 60000; 
	LineBonus = 2; 
	DropBonus = 5; 
	FullBonus = 10; 
	NameW = 10; 
	PointsW = 6; 
	LevelW = 4; 
	RowsW = 4; 
	PreviewScale = 10; 
	FigLines = 4; 
	FigRows = 4; 
	ScrnLines = 20; 
	ScrnRows = 10; 
	PotLines = (ScrnLines + FigLines); 
	PotRows = (ScrnRows + (2 * FigRows)); 
	UpArrow = 0C1X; 
	DownArrow = 0C2X; 
	RightArrow = 0C3X; 
	LeftArrow = 0C4X; 
	KeyPrev = \"V"\; 
	Keyprev = \"v"\; 
	KeyPause = \"P"\; 
	Keypause = \"p"\; 
TYPE 
	Object = Objects.Object; 

	Document = Documents.Document; 

	AttrMsg = Objects.AttrMsg; 

	BindMsg = Objects.BindMsg; 

	ConsumeMsg = Display.ConsumeMsg; 

	ControlMsg = Oberon.ControlMsg; 

	CopyMsg = Objects.CopyMsg; 

	DisplayMsg = Display.DisplayMsg; 

	FileMsg = Objects.FileMsg; 

	InputMsg = Oberon.InputMsg; 

	LinkMsg = Objects.LinkMsg; 

	ModifyMsg = Display.ModifyMsg; 

	UpdateMsg = Gadgets.UpdateMsg; 

	Figure = ARRAY FigLines OF ARRAY (FigRows + 1) OF CHAR; 

	Pot = ARRAY PotLines OF ARRAY (PotRows + 1) OF CHAR; 

	Field = POINTER TO FieldDesc; 

	Timer = POINTER TO TimerDesc; 

	TimerDesc = RECORD (Oberon.TaskDesc)
		model: Field; 
		nxt: Timer; 
	END; 

	Score = RECORD 
		name: Objects.Name; 
		points: LONGINT; 
		level, rows: INTEGER; 
	END; 

	FieldDesc = RECORD (Gadgets.ObjDesc)
		score: ARRAY Ranks OF Score; 
		curr, next, angle, line, row, rank, mult: SHORTINT; 
		delay, figures: INTEGER; 
		focus, match, preview, paused: BOOLEAN; 
		lap1, lap2: LONGINT; 
		timer: Timer; 
		pot: Pot; 
	END; 

	ScoreField = POINTER TO ScoreFieldDesc; 

	ScoreFieldDesc = RECORD (TextFields.TextFieldDesc)
		ndx, xofs: INTEGER; 
	END; 

	Frame = POINTER TO FrameDesc; 

	FrameDesc = RECORD (Panels.PanelDesc)
		scale: INTEGER; 
		blank: BOOLEAN; 
	END; 

	AlignMsg = RECORD (Objects.ObjMsg)
		X, Y, W, H: INTEGER; 
	END; 

	BackdropMsg = RECORD (Display.FrameMsg)
		model: Object; 
		ndx: INTEGER; 
	END; 

	FigureMsg = RECORD (Display.FrameMsg)
		model: Object; 
		id: INTEGER; 
		ndx, angle0, line0, row0, angle1, line1, row1: SHORTINT; 
	END; 
VAR 
	figure: ARRAY Figures OF ARRAY 4 OF Figure; 
	color, xofs, yofs: ARRAY Figures OF SHORTINT; 
	clrpot: Pot; 
	timers: Timer; 
	delay: ARRAY Levels OF INTEGER; 
	backdrop: ARRAY Levels OF Objects.Name; 
	fudge: LONGINT; 

	PROCEDURE ^ OtherFrame(me: Object; VAR M: Objects.ObjMsg): BOOLEAN; 
	PROCEDURE ^ RemoveTimer(T: Timer; verbose: BOOLEAN); 
	PROCEDURE ^ NextFigure(F: Field); 
	PROCEDURE ^ IncScore(F: Field; score, bonus: INTEGER); 
	PROCEDURE ^ IncRows(F: Field; rows: INTEGER); 
	PROCEDURE ^ IncLevel(F: Field); 
	PROCEDURE ^ ResetScore(VAR score: Score); 
	PROCEDURE ^ UpdSelection(M: Display3.Mask; state: SET; x, y, w, h: INTEGER); 
	PROCEDURE ^ Model(D: Object): Field; 
	PROCEDURE ^ PX(R: Frame; dX, row, offs: INTEGER): INTEGER; 
	PROCEDURE ^ PY(R: Frame; dY, line, offs: INTEGER): INTEGER; 
	PROCEDURE ^ DrawBlock(R: Frame; c, x, y: INTEGER); 
	PROCEDURE ^ DrawLine(R: Frame; line: ARRAY OF CHAR; dX, dY, l: INTEGER); 
	PROCEDURE ^ DrawFigure(R: Frame; fig: Figure; dX, dY, c, r, l: INTEGER); 
	PROCEDURE ^ DrawDrop(R: Frame; fig: Figure; dX, dY, c, r, l: INTEGER); 
	PROCEDURE ^ DrawPot(R: Frame; dX, dY: INTEGER; pot: Pot); 
	PROCEDURE ^ DrawPreview(R: Frame; fig: Figure; xofs, yofs, c: INTEGER); 
	PROCEDURE ^ MatchFigure(F: Field; fig: Figure; r, l: SHORTINT): BOOLEAN; 
	PROCEDURE ^ SetFigure(F: Field; fig: Figure; r, l: SHORTINT; c: CHAR); 
	PROCEDURE ^ FieldFigure(F: Field; set: BOOLEAN); 
	PROCEDURE ^ InitPot(VAR pot: Pot); 
	PROCEDURE ^ CheckPot(VAR pot: Pot): INTEGER; 
	PROCEDURE ^ Move(F: Field; c: CHAR): BOOLEAN; 
	PROCEDURE ^ Drop(F: Field); 
	PROCEDURE ^ TimerHandler(me: Oberon.Task); 
	PROCEDURE ^ ResetField(F: Field); 
	PROCEDURE ^ FieldAttr(F: Field; VAR M: AttrMsg); 
	PROCEDURE ^ FieldFile(F: Field; VAR M: FileMsg); 
	PROCEDURE ^ FieldHandler*(F: Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ PotAlign(R: Frame; VAR M: AlignMsg); 
	PROCEDURE ^ PotAttr(R: Frame; VAR M: AttrMsg); 
	PROCEDURE ^ PotCopy(R: Frame; VAR M: CopyMsg); 
	PROCEDURE ^ PotDisplay(R: Frame; VAR M: DisplayMsg); 
	PROCEDURE ^ PotFigure(R: Frame; VAR M: FigureMsg); 
	PROCEDURE ^ PotFile(R: Frame; VAR M: FileMsg); 
	PROCEDURE ^ PotUpdate(R: Frame; VAR M: UpdateMsg); 
	PROCEDURE ^ PotHandler*(R: Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ PreviewAlign(P: Frame; VAR M: AlignMsg); 
	PROCEDURE ^ PreviewAttr(P: Frame; VAR M: AttrMsg); 
	PROCEDURE ^ PreviewCopy(P: Frame; VAR M: CopyMsg); 
	PROCEDURE ^ PreviewDisplay(P: Frame; VAR M: DisplayMsg); 
	PROCEDURE ^ PreviewUpdate(P: Frame; VAR M: UpdateMsg); 
	PROCEDURE ^ PreviewHandler*(P: Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ ScoreAlign(S: ScoreField; VAR M: AlignMsg); 
	PROCEDURE ^ ScoreAttr(S: ScoreField; VAR M: AttrMsg); 
	PROCEDURE ^ ScoreCopy(S: ScoreField; VAR M: CopyMsg); 
	PROCEDURE ^ ScoreFile(S: ScoreField; VAR M: FileMsg); 
	PROCEDURE ^ ScoreInput(S: ScoreField; VAR M: InputMsg); 
	PROCEDURE ^ ScoreHandler*(S: Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ PreviewButtonAlign(B: BasicGadgets.Button; VAR M: AlignMsg); 
	PROCEDURE ^ PreviewButtonAttr(B: BasicGadgets.Button; VAR M: AttrMsg); 
	PROCEDURE ^ PreviewButtonHandler*(B: Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ PauseButtonAlign(B: BasicGadgets.Button; VAR M: AlignMsg); 
	PROCEDURE ^ PauseButtonAttr(B: BasicGadgets.Button; VAR M: AttrMsg); 
	PROCEDURE ^ PauseButtonHandler*(B: Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ MainBackdrop(D: Object; VAR M: BackdropMsg); 
	PROCEDURE ^ MainControl(D: Panels.Panel; VAR M: ControlMsg); 
	PROCEDURE ^ MainDisplay(D: Panels.Panel; VAR M: DisplayMsg); 
	PROCEDURE ^ MainInput(D: Panels.Panel; VAR M: InputMsg); 
	PROCEDURE ^ MainModify(D: Panels.Panel; VAR M: ModifyMsg); 
	PROCEDURE ^ MainHandler*(D: Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ DocAttr(D: Document; VAR M: AttrMsg); 
	PROCEDURE ^ DocLink(D: Document; VAR M: LinkMsg); 
	PROCEDURE ^ DocHandler*(D: Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewTop(txt: ARRAY OF CHAR; len, ofs: INTEGER): Object; 
	PROCEDURE ^ NewScore(c: CHAR; num, len, ofs: INTEGER; model: Object): Object; 
	PROCEDURE ^ ScoreArray(model: Object): Object; 
	PROCEDURE ^ NewButton(gen, capt: ARRAY OF CHAR; model: Object): Object; 
	PROCEDURE ^ OldDocument(F: Files.File; D: Document; VAR f: Gadgets.Frame); 
	PROCEDURE ^ NewDocument(D: Document; VAR f: Gadgets.Frame); 
	PROCEDURE ^ LoadDocument(D: Document); 
	PROCEDURE ^ StoreDocument(D: Document); 
	PROCEDURE ^ NewField*; 
	PROCEDURE ^ NewView*; 
	PROCEDURE ^ NewScoreField*; 
	PROCEDURE ^ NewPreviewButton*; 
	PROCEDURE ^ NewPauseButton*; 
	PROCEDURE ^ NewPreview*; 
	PROCEDURE ^ NewDoc*; 
	PROCEDURE ^ NewGame*; 
	PROCEDURE ^ Backdrop*; 
	PROCEDURE ^ Delay*; 
	PROCEDURE ^ StopTimers; 
BEGIN
END Tetris.
