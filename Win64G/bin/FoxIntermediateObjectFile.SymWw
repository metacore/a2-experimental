MODULE FoxIntermediateObjectFile;
	IMPORT Formats := FoxFormats, Sections := FoxSections, IntermediateCode := FoxIntermediateCode, ObjectFile, Files, Strings, Options, Diagnostics, TextualSymbolFile := FoxTextualSymbolFile, Streams, Basic := FoxBasic, SyntaxTree := FoxSyntaxTree, D := Debugging, Global := FoxGlobal, Parser := FoxIntermediateParser, Commands, KernelLog, Backend := FoxBackend;
CONST 
	Trace = FALSE; 
	DeveloperVersion = TRUE; 
	Version = 2; 
TYPE 
	ObjectFileFormat* = OBJECT (Formats.ObjectFileFormat)
	VAR 
		prefix, extension: Files.FileName; 
		textual: BOOLEAN; 

		PROCEDURE ^  & InitObjectFileFormat*; 
		PROCEDURE ^ ExportModuleTextual(module: Sections.Module; writer: Streams.Writer); 
		PROCEDURE ^ ExportModuleBinary(module: Sections.Module; w: Streams.Writer; poolMap: ObjectFile.PoolMap); 
		PROCEDURE ^ Export*(module: Formats.GeneratedModule; symbolFileFormat: Formats.SymbolFileFormat): BOOLEAN; 
		PROCEDURE ^ ImportModuleBinary(r: Streams.Reader; module: Sections.Module; system: Global.System; poolMap: ObjectFile.PoolMap): BOOLEAN; 
		PROCEDURE ^ ImportModuleTextual(r: Streams.Reader; module: Sections.Module; system: Global.System): BOOLEAN; 
		PROCEDURE ^ Import*(CONST moduleName: ARRAY OF CHAR; system: Global.System): Sections.Module; 
		PROCEDURE ^ DefineOptions*(options: Options.Options); 
		PROCEDURE ^ GetOptions*(options: Options.Options); 
		PROCEDURE ^ DefaultSymbolFileFormat*(): Formats.SymbolFileFormat; 
		PROCEDURE ^ GetExtension*(VAR ext: ARRAY OF CHAR); 
		PROCEDURE ^ SetExtension*(CONST ext: ARRAY OF CHAR); 
	END ObjectFileFormat; 

	PROCEDURE ^ Get*(): Formats.ObjectFileFormat; 
	PROCEDURE ^ ReadHeader(reader: Streams.Reader; VAR binary: BOOLEAN; VAR poolMap: ObjectFile.PoolMap); 
	PROCEDURE ^ WriteHeader(writer: Streams.Writer; binary: BOOLEAN; sections: Sections.SectionList; VAR poolMap: ObjectFile.PoolMap); 
	PROCEDURE ^ Show*(context: Commands.Context); 
BEGIN
END FoxIntermediateObjectFile.
