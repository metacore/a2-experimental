MODULE UndoManager;
	IMPORT Texts;
CONST 
	None = 99; 
	CStyle = 100; 
	PStyle = 101; 
	Attribute = 102; 
	SpecialPiece = 103; 
	AdvancedUndoStrategy = TRUE; 
TYPE 
	ListenerProc* = PROCEDURE {DELEGATE}(nrUndos, nrRedos: LONGINT); 

	UndoManager* = OBJECT (Texts.UndoManager)
	VAR 
		text: Texts.Text; 
		undoQu, redoQu: Buffer; 
		objUpdate: StyleUpdateInfo; 
		nrUndoUpdates-, nrRedoUpdates-: LONGINT; 
		nrUpdatesListener*: ListenerProc; 
		redo: BOOLEAN; 
		actualPos-: LONGINT; 

		PROCEDURE ^  & New*(memorySize: LONGINT; redo: BOOLEAN); 
		PROCEDURE ^ ResetRedo; 
		PROCEDURE ^ NextOperation(u: UpdateInfo); 
		PROCEDURE ^ SaveOperation(u: UpdateInfo); 
		PROCEDURE ^ InsertText*(pos: LONGINT; text: Texts.Text); 
		PROCEDURE ^ DeleteText*(pos: LONGINT; text: Texts.Text); 
		PROCEDURE ^ BeginObjectChange*(pos: LONGINT); 
		PROCEDURE ^ ObjectChanged*(pos, len, type: LONGINT; obj: ANY); 
		PROCEDURE ^ EndObjectChange*(len, type: LONGINT; to: ANY); 
		PROCEDURE ^ SetText*(text: Texts.Text); 
		PROCEDURE ^ Undo*; 
		PROCEDURE ^ Redo*; 
		PROCEDURE ^ InformListeners*; 
	END UndoManager; 

	Buffer = OBJECT 
	VAR 
		head, num: LONGINT; 
		buffer: POINTER TO ARRAY OF UpdateInfo; 

		PROCEDURE ^ Push*(x: UpdateInfo); 
		PROCEDURE ^ RemoveOldest*(): UpdateInfo; 
		PROCEDURE ^ Peek*(): UpdateInfo; 
		PROCEDURE ^ Pop*(): UpdateInfo; 
		PROCEDURE ^ IsFull*(): BOOLEAN; 
		PROCEDURE ^ IsEmpty*(): BOOLEAN; 
		PROCEDURE ^ Clear*; 
		PROCEDURE ^  & Init*(n: LONGINT); 
	END Buffer; 

	UpdateInfo = OBJECT 
	VAR 
		pos: LONGINT; 
		sealed*: BOOLEAN; 

		PROCEDURE ^ Undo(text: Texts.Text); 
		PROCEDURE ^ Redo(text: Texts.Text); 
	END UpdateInfo; 

	InsertUpdateInfo = OBJECT (UpdateInfo)
	VAR 
		len: LONGINT; 
		t: Texts.Text; 

		PROCEDURE ^  & New*(pos: LONGINT; text: Texts.Text); 
		PROCEDURE ^ Undo(text: Texts.Text); 
		PROCEDURE ^ Redo(text: Texts.Text); 
	END InsertUpdateInfo; 

	DeleteUpdateInfo = OBJECT (UpdateInfo)
	VAR 
		len: LONGINT; 
		t: Texts.Text; 

		PROCEDURE ^  & New*(pos: LONGINT; text: Texts.Text); 
		PROCEDURE ^ Undo(text: Texts.Text); 
		PROCEDURE ^ Redo(text: Texts.Text); 
	END DeleteUpdateInfo; 

	StyleInfo = POINTER TO RECORD 
		next: StyleInfo; 
		pos, len: LONGINT; 
		style: ANY; 
		type: LONGINT; 
	END; 

	StyleUpdateInfo = OBJECT (UpdateInfo)
	VAR 
		len, type: LONGINT; 
		new: ANY; 
		old: StyleInfo; 

		PROCEDURE ^  & New*(pos: LONGINT); 
		PROCEDURE ^ Append(pos, len: LONGINT; style: ANY; type: LONGINT); 
		PROCEDURE ^ SetObject(new: ANY); 
		PROCEDURE ^ SetLen(len: LONGINT); 
		PROCEDURE ^ SetStyle*(textpos, len: LONGINT; style: ANY); 
		PROCEDURE ^ Undo(text: Texts.Text); 
		PROCEDURE ^ Redo(text: Texts.Text); 
	END StyleUpdateInfo; 

	PROCEDURE ^ IsSeparator(uc: Texts.Char32): BOOLEAN; 
BEGIN
END UndoManager.
