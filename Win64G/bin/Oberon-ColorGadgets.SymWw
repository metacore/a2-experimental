MODULE ColorGadgets IN Oberon;
	IMPORT Files, Objects, Math IN A2, Display, Printer, Input, Texts, Oberon, Strings, Attributes, Display3, Printer3, Effects, Gadgets, Colors, Images;
CONST 
TYPE 
	Well* = POINTER TO WellDesc; 

	WellDesc* = RECORD (Gadgets.FrameDesc)
		dcol: Display.Color; 
	END; 

	Disc* = POINTER TO DiscDesc; 

	DiscDesc* = RECORD (Gadgets.FrameDesc)
		bg: Display.Color; 
		hue, sat: REAL; 
		img: Images.Image; 
	END; 

	Wedge* = POINTER TO WedgeDesc; 

	WedgeDesc* = RECORD (Gadgets.FrameDesc)
		bg: Display.Color; 
		hue, sat, val: REAL; 
		img: Images.Image; 
	END; 

	; 
VAR 
	DragMarker: Oberon.Marker; 
	MarkerFG, MarkerBG: Display.Pattern; 
	Enum: RECORD 
		img: Images.Image; 
		x, y: INTEGER; 
	END; 

	PROCEDURE ^ atan2(x, y: REAL): REAL; 
	PROCEDURE ^ RestoreRuns(x, y, w, h: INTEGER); 
	PROCEDURE ^ RestoreBlock(x, y, w, h: INTEGER); 
	PROCEDURE ^ RestoreImageRect(img: Images.Image; x, y, w, h, dx, dy: INTEGER; mask: Display3.Mask); 
	PROCEDURE ^ DrawMarker(x, y: INTEGER); 
	PROCEDURE ^ FadeMarker(x, y: INTEGER); 
	PROCEDURE ^ InitDragMarker; 
	PROCEDURE ^ TrackWell(well: Well; VAR msg: Oberon.InputMsg); 
	PROCEDURE ^ RestoreWell(well: Well; fx, fy: INTEGER; mask: Display3.Mask); 
	PROCEDURE ^ PrintWell(well: Well; VAR msg: Display.DisplayMsg); 
	PROCEDURE ^ UpdateWell(well: Well; VAR msg: Display.FrameMsg); 
	PROCEDURE ^ ConsumeWell(well: Well; VAR msg: Display.ConsumeMsg); 
	PROCEDURE ^ WellAttr(well: Well; VAR msg: Objects.AttrMsg); 
	PROCEDURE ^ CopyWell*(VAR msg: Objects.CopyMsg; from, to: Well); 
	PROCEDURE ^ HandleWell*(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ NewWell*; 
	PROCEDURE ^ GetDiscCoords(disc: Disc; VAR x, y: INTEGER); 
	PROCEDURE ^ UpdateDiscModel(disc: Disc); 
	PROCEDURE ^ TrackDisc(disc: Disc; VAR msg: Oberon.InputMsg); 
	PROCEDURE ^ RestoreDiscImage(disc: Disc); 
	PROCEDURE ^ RestoreDisc(disc: Disc; fx, fy: INTEGER; mask: Display3.Mask); 
	PROCEDURE ^ PrintDisc(disc: Disc; VAR msg: Display.DisplayMsg); 
	PROCEDURE ^ UpdateDisc(disc: Disc; VAR msg: Display.FrameMsg); 
	PROCEDURE ^ DiscAttr(disc: Disc; VAR msg: Objects.AttrMsg); 
	PROCEDURE ^ CopyDisc*(VAR msg: Objects.CopyMsg; from, to: Disc); 
	PROCEDURE ^ HandleDisc*(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ NewDisc*; 
	PROCEDURE ^ GetWedgeCoords(wedge: Wedge; VAR x, y: INTEGER); 
	PROCEDURE ^ UpdateWedgeModel(wedge: Wedge); 
	PROCEDURE ^ TrackWedge(wedge: Wedge; VAR msg: Oberon.InputMsg); 
	PROCEDURE ^ RestoreWedgeImage(wedge: Wedge); 
	PROCEDURE ^ RestoreWedge(wedge: Wedge; fx, fy: INTEGER; mask: Display3.Mask); 
	PROCEDURE ^ PrintWedge(wedge: Wedge; VAR msg: Display.DisplayMsg); 
	PROCEDURE ^ UpdateWedge(wedge: Wedge; VAR msg: Display.FrameMsg); 
	PROCEDURE ^ WedgeAttr*(wedge: Wedge; VAR msg: Objects.AttrMsg); 
	PROCEDURE ^ CopyWedge*(VAR msg: Objects.CopyMsg; from, to: Wedge); 
	PROCEDURE ^ HandleWedge*(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ NewWedge*; 
	PROCEDURE ^ SetText*; 
	PROCEDURE ^ GetText*; 
	PROCEDURE ^ SetAttr*; 
	PROCEDURE ^ GetAttr*; 
BEGIN
END ColorGadgets.
