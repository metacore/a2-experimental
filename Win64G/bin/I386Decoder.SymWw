MODULE I386Decoder;
	IMPORT Decoder, Streams, Strings, KernelLog;
CONST 
	objFileSuffix = \"Obx"\; 
	pCS = 2EX; 
	pDS = 3EX; 
	pES = 26X; 
	pFS = 64X; 
	pGS = 65X; 
	pSS = 36X; 
	pREP = 0F3X; 
	AdrSize = 67X; 
	OpSize = 66X; 
	none =  -1; 
	FPSizeNone = 0; 
	FPSizeSingle = 1; 
	FPSizeDouble = 2; 
	FPSizeExtended = 3; 
	FPSizeWord = 4; 
	FPSizeShort = 5; 
	FPSizeLong = 6; 
	FPSizeSmall = 7; 
	FPSizeBig = 9; 
	FPSizeBCD = 10; 
	RepInt = 0; 
	RepHex = 1; 
	RepBoth = 2; 
	RepRelJmp = 3; 
	ArgNone =  -2; 
	ArgImm = 0; 
	ArgReg = 1; 
	ArgMem = 2; 
	ArgRegReg = 3; 
	ArgRegImm = 4; 
	ArgRegMem = 5; 
	ArgMemReg = 6; 
	ArgMemImm = 7; 
	ArgImmReg = 8; 
	ArgImmImm = 9; 
	ArgRegRegImm = 10; 
	ArgRegMemImm = 11; 
	ArgMemRegImm = 12; 
	ArgRegRegReg = 13; 
	ArgMemRegReg = 14; 
	EAX = 0; 
	ECX = 1; 
	EDX = 2; 
	EBX = 3; 
	ESP = 4; 
	EBP = 5; 
	ESI = 6; 
	EDI = 7; 
	AX = 0; 
	CX = 1; 
	DX = 2; 
	BX = 3; 
	SP = 4; 
	BP = 5; 
	SI = 6; 
	DI = 7; 
	AL = 0; 
	CL = 1; 
	DL = 2; 
	BL = 3; 
	AH = 4; 
	CH = 5; 
	DH = 6; 
	BH = 7; 
	ES = 20; 
	CS = 21; 
	SS = 22; 
	DS = 23; 
	FS = 24; 
	GS = 25; 
	CR = 0; 
	DR = 8; 
	TR = 16; 
	SRegTR = 0; 
	SRegDR = 1; 
	SRegCR = 2; 
	SRegFP = 3; 
	opAAA = 1; 
	opAAD = 2; 
	opAAM = 3; 
	opAAS = 4; 
	opADC = 5; 
	opADD = 6; 
	opADDPD = 7; 
	opADDPS = 8; 
	opADDSD = 9; 
	opADDSS = 10; 
	opAND = 11; 
	opANDPD = 12; 
	opANDPS = 13; 
	opANDNPD = 14; 
	opANDNPS = 15; 
	opARPL = 16; 
	opBOUND = 17; 
	opBSF = 18; 
	opBSR = 19; 
	opBSWAP = 20; 
	opBT = 21; 
	opBTC = 22; 
	opBTR = 23; 
	opBTS = 24; 
	opCALL = 25; 
	opCALLFAR = 26; 
	opCBW = 27; 
	opCDQ = 28; 
	opCLC = 29; 
	opCLD = 30; 
	opCLFLUSH = 31; 
	opCLI = 32; 
	opCLTS = 33; 
	opCMC = 34; 
	opCMOVcc = 35; 
	opCMOVO = 36; 
	opCMOVNO = 37; 
	opCMOVB = 38; 
	opCMOVNB = 39; 
	opCMOVZ = 40; 
	opCMOVNZ = 41; 
	opCMOVBE = 42; 
	opCMOVNBE = 43; 
	opCMOVS = 44; 
	opCMOVNS = 45; 
	opCMOVP = 46; 
	opCMOVNP = 47; 
	opCMOVL = 48; 
	opCMOVNL = 49; 
	opCMOVLE = 50; 
	opCMOVNLE = 51; 
	opCMP = 52; 
	opCMPPD = 53; 
	opCMPPS = 54; 
	opCMPS = 55; 
	opCMPSB = 56; 
	opCMPSW = 57; 
	opCMPSD = 58; 
	opCMPSS = 59; 
	opCMPXCHG = 60; 
	opCMPXCHG8B = 61; 
	opCOMISD = 62; 
	opCOMISS = 63; 
	opCPUID = 64; 
	opCVTDQ2PD = 65; 
	opCVTD12PS = 66; 
	opCVTD2DQ = 67; 
	opCVTPD2PI = 68; 
	opCVTPD2PS = 69; 
	opCVTPI2PD = 70; 
	opCVTPI2PS = 71; 
	opCVTPS2DQ = 72; 
	opCVTPS2PD = 73; 
	opCVTPS2PI = 74; 
	opCVTSD2SI = 75; 
	opCVTSD2SS = 76; 
	opCVTSI2SD = 77; 
	opCVTSI2SS = 78; 
	opCVTSS2SD = 79; 
	opCVTSS2SI = 80; 
	opCVTTPD2PI = 81; 
	opCVTTPD2DQ = 82; 
	opCVTTPS2DQ = 83; 
	opCVTTPS2PI = 84; 
	opCVTTDS2SI = 85; 
	opCVTTSS2SI = 86; 
	opCWD = 87; 
	opCWDE = 88; 
	opDAA = 89; 
	opDAS = 90; 
	opDEC = 91; 
	opDIV = 92; 
	opDIVPD = 93; 
	opDIVPS = 94; 
	opDIVSD = 95; 
	opDIVSS = 96; 
	opEMMS = 97; 
	opENTER = 98; 
	opF2XM1 = 99; 
	opFABS = 100; 
	opFADD = 101; 
	opFADDP = 102; 
	opFIADD = 103; 
	opFBLD = 104; 
	opFBSTP = 105; 
	opFCHS = 106; 
	opFCLEX = 107; 
	opFNCLEX = 108; 
	opFCMOVcc = 109; 
	opFCOM = 111; 
	opFCOMP = 112; 
	opFCOMPP = 113; 
	opFCOMI = 114; 
	opFCOMIP = 115; 
	opFUCOMI = 116; 
	opFUCOMIP = 117; 
	opFCOS = 118; 
	opFDECSTP = 119; 
	opFDIV = 120; 
	opFDIVP = 121; 
	opFIDIV = 122; 
	opFDIVR = 123; 
	opFDIVRP = 124; 
	opFIDIVR = 125; 
	opFFREE = 126; 
	opFICOM = 127; 
	opFICOMP = 128; 
	opFILD = 129; 
	opFINCSTP = 130; 
	opFINIT = 131; 
	opFNINIT = 132; 
	opFIST = 133; 
	opFISTP = 134; 
	opFLD = 135; 
	opFLD1 = 136; 
	opFLDL2T = 137; 
	opFLDL2E = 138; 
	opFLDPI = 139; 
	opFLDLG2 = 140; 
	opFLDLN2 = 141; 
	opFLDZ = 142; 
	opFLDCW = 143; 
	opFLDENV = 144; 
	opFMUL = 145; 
	opFMULP = 146; 
	opFIMUL = 147; 
	opFNOP = 148; 
	opFPATAN = 149; 
	opFPREM = 150; 
	opFPREM1 = 151; 
	opFPTAN = 152; 
	opFRNDINT = 153; 
	opFRSTOR = 154; 
	opFSAVE = 155; 
	opFNSAVE = 156; 
	opFSCALE = 157; 
	opFSIN = 158; 
	opFSINCOS = 159; 
	opFSQRT = 160; 
	opFST = 161; 
	opFSTP = 162; 
	opFSTCW = 163; 
	opFNSTCW = 164; 
	opFSTENV = 165; 
	opFNSTENV = 166; 
	opFSTSW = 167; 
	opFNSTSW = 168; 
	opFSUB = 169; 
	opFSUBP = 170; 
	opFISUB = 171; 
	opFSUBR = 172; 
	opFSUBRP = 173; 
	opFISUBR = 174; 
	opFTST = 175; 
	opFUCOM = 176; 
	opFUCOMP = 177; 
	opFUCOMPP = 178; 
	opFWAIT = 179; 
	opFXAM = 180; 
	opFXCH = 181; 
	opFXRSTOR = 182; 
	opFXSAVE = 183; 
	opFXTRACT = 184; 
	opFYL2X = 185; 
	opFYL2XP1 = 186; 
	opHLT = 187; 
	opIDIV = 188; 
	opIMUL = 189; 
	opIN = 190; 
	opINC = 191; 
	opINS = 192; 
	opINSB = 193; 
	opINSW = 194; 
	opINSD = 195; 
	opINT = 196; 
	opINTO = 197; 
	opINVD = 198; 
	opINVLPG = 199; 
	opIRET = 200; 
	opIRETD = 201; 
	opJcc = 202; 
	opJO = 203; 
	opJNO = 204; 
	opJB = 205; 
	opJNB = 206; 
	opJZ = 207; 
	opJNZ = 208; 
	opJBE = 209; 
	opJNBE = 210; 
	opJS = 211; 
	opJNS = 212; 
	opJP = 213; 
	opJNP = 214; 
	opJL = 215; 
	opJNL = 216; 
	opJLE = 217; 
	opJNLE = 218; 
	opJCXZ = 219; 
	opJECXZ = 220; 
	opJMP = 221; 
	opJMPFAR = 222; 
	opLAHF = 223; 
	opLAR = 224; 
	opLDMXCSR = 225; 
	opLDS = 226; 
	opLEA = 227; 
	opLEAVE = 228; 
	opLES = 229; 
	opLFENCE = 230; 
	opLFS = 231; 
	opLGDT = 232; 
	opLGS = 233; 
	opLLDT = 234; 
	opLIDT = 235; 
	opLMSW = 236; 
	opLOCK = 237; 
	opLODS = 238; 
	opLODSB = 239; 
	opLODSW = 240; 
	opLODSD = 241; 
	opLOOP = 242; 
	opLOOPE = 243; 
	opLOOPNE = 244; 
	opLOOPcc = 245; 
	opLSL = 246; 
	opLSS = 247; 
	opLTR = 248; 
	opMASKMOVDQU = 249; 
	opMASKMOVQ = 250; 
	opMAXPD = 251; 
	opMAXPS = 252; 
	opMAXSD = 253; 
	opMAXSS = 254; 
	opMFENCE = 255; 
	opMINPD = 256; 
	opMINPS = 257; 
	opMINSD = 258; 
	opMINSS = 259; 
	opMOV = 260; 
	opMOVAPD = 261; 
	opMOVAPS = 262; 
	opMOVD = 263; 
	opMOVDQA = 264; 
	opMOVDQU = 265; 
	opMOVDQ2Q = 266; 
	opMOVHLPS = 267; 
	opMOVHPD = 268; 
	opMOVHPS = 269; 
	opMOVLHPS = 270; 
	opMOVLPD = 271; 
	opMOVLPS = 272; 
	opMOVMSKPD = 273; 
	opMOVMSKPS = 274; 
	opMOVNTDQ = 275; 
	opMOVNTI = 276; 
	opMOVNTPD = 277; 
	opMOVNTPS = 278; 
	opMOVNTQ = 279; 
	opMOVQ = 280; 
	opMOVQ2DQ = 281; 
	opMOVS = 282; 
	opMOVSB = 283; 
	opMOVSW = 284; 
	opMOVSD = 285; 
	opMOVSS = 286; 
	opMOVSX = 287; 
	opMOVUPD = 288; 
	opMOVUPS = 289; 
	opMOVZX = 290; 
	opMUL = 292; 
	opMULPD = 293; 
	opMULPS = 294; 
	opMULSD = 295; 
	opMULSS = 296; 
	opNEG = 297; 
	opNOP = 298; 
	opNOT = 299; 
	opOR = 300; 
	opORPD = 301; 
	opORPS = 302; 
	opOUT = 303; 
	opOUTS = 304; 
	opOUTSB = 305; 
	opOUTSW = 306; 
	opOUTSD = 307; 
	opPACKSSWB = 308; 
	opPACKSSDW = 309; 
	opPACKUSWB = 310; 
	opPADDB = 311; 
	opPADDW = 312; 
	opPADDD = 313; 
	opPADDQ = 314; 
	opPADDSB = 315; 
	opPADDSW = 316; 
	opPADDUSB = 317; 
	opPADDUSW = 318; 
	opPAND = 319; 
	opPANDN = 320; 
	opPAUSE = 321; 
	opPAVGB = 322; 
	opPAVGW = 323; 
	opPCMPEQB = 324; 
	opPCMPEQW = 325; 
	opPCMPEQD = 326; 
	opPCMPGTB = 327; 
	opPCMPGTW = 328; 
	opPCMPGTD = 329; 
	opPEXTRW = 330; 
	opPINSRW = 331; 
	opPMADDWD = 332; 
	opPMAXSW = 333; 
	opPMINSW = 334; 
	opPMINUB = 335; 
	opPMOVMSKB = 336; 
	opPMULHUW = 337; 
	opPMULHW = 338; 
	opPMULLW = 339; 
	opPMULUDQ = 340; 
	opPOP = 342; 
	opPOPWPTR = 343; 
	opPOPDWPTR = 344; 
	opPOPA = 345; 
	opPOPAD = 346; 
	opPOPF = 347; 
	opPOPFD = 348; 
	opPOR = 349; 
	opPREFETCHh = 350; 
	opPSADBW = 351; 
	opPSHUFD = 352; 
	opPSHUFHW = 353; 
	opPOSHUFLW = 354; 
	opPSHUFW = 355; 
	opPSLLDQ = 356; 
	opPSLLW = 357; 
	opPSLLD = 358; 
	opPSLLQ = 359; 
	opPSRAW = 360; 
	opPSRAD = 361; 
	opPSRLDQ = 362; 
	opPSRLW = 363; 
	opPSRLD = 364; 
	opPSRLQ = 365; 
	opPSUBB = 366; 
	opPSUBW = 367; 
	opPSUBD = 368; 
	opPSUBQ = 369; 
	opPSUBSB = 370; 
	opPSUBSW = 371; 
	opPSUBUSB = 372; 
	opPSUBUSW = 373; 
	opPUNPCKHBW = 374; 
	opPUNPCKHWD = 375; 
	opPUNPCKHDQ = 376; 
	opPUNPCKHQDQ = 377; 
	opPUNPCKLBW = 378; 
	opPUNPCKLWD = 379; 
	opPUNPCKLDQ = 380; 
	opPUNPCKLQDQ = 381; 
	opPUSH = 382; 
	opPUSHA = 383; 
	opPUSHAD = 384; 
	opPUSHF = 385; 
	opPUSHFD = 386; 
	opPXOR = 387; 
	opRCL = 388; 
	opRCR = 389; 
	opROL = 390; 
	opROR = 391; 
	opRCPPS = 392; 
	opRCPSS = 393; 
	opRDMSR = 394; 
	opRDPMC = 395; 
	opRDTSC = 396; 
	opREP = 398; 
	opREPE = 399; 
	opREPZ = 400; 
	opREPNE = 401; 
	opREPNZ = 402; 
	opRET = 403; 
	opRETFAR = 404; 
	opRSM = 405; 
	opRSQRTPS = 406; 
	opRSQRTSS = 407; 
	opSAHF = 408; 
	opSAL = 409; 
	opSAR = 410; 
	opSHL = 411; 
	opSHR = 412; 
	opSBB = 413; 
	opSCAS = 414; 
	opSCASB = 415; 
	opSCASW = 416; 
	opSCASD = 417; 
	opSETcc = 418; 
	opSETO = 419; 
	opSETNO = 420; 
	opSETB = 421; 
	opSETNB = 422; 
	opSETZ = 423; 
	opSETNZ = 424; 
	opSETBE = 425; 
	opSETNBE = 426; 
	opSETS = 427; 
	opSETNS = 428; 
	opSETP = 429; 
	opSETNP = 430; 
	opSETL = 431; 
	opSETNL = 432; 
	opSETLE = 433; 
	opSETNLE = 434; 
	opSFENCE = 435; 
	opSGDT = 436; 
	opSHLD = 437; 
	opSHRD = 438; 
	opSHUFPD = 439; 
	opSHUFPS = 440; 
	opSIDT = 441; 
	opSLDT = 442; 
	opSMSW = 443; 
	opSQRTPD = 444; 
	opSWRTSD = 445; 
	opSQRTSS = 446; 
	opSTC = 447; 
	opSTD = 448; 
	opSTI = 450; 
	opSTMXCSR = 451; 
	opSTOS = 452; 
	opSTOSB = 453; 
	opSTOSW = 454; 
	opSTOSD = 455; 
	opSTR = 456; 
	opSUB = 457; 
	opSUBPD = 458; 
	opSUBPS = 459; 
	opSUBSD = 460; 
	opSUBSS = 461; 
	opSYSENTER = 462; 
	opSYSEXIT = 463; 
	opTEST = 464; 
	opUCOMISD = 465; 
	opUCOMISS = 466; 
	opUD2 = 467; 
	opUNPCKHPD = 468; 
	opUNPCKHPS = 469; 
	opUNPCKLPD = 470; 
	opUNPCKLPS = 471; 
	opVERR = 472; 
	opVERW = 473; 
	opWAIT = 474; 
	opWBINVD = 475; 
	opWRMSR = 476; 
	opXADD = 477; 
	opXCHG = 478; 
	opXLAT = 479; 
	opXLATB = 480; 
	opXOR = 481; 
	opXORPD = 482; 
	opXORPS = 483; 
TYPE 
	IA32Arg = OBJECT 
	END IA32Arg; 

	IA32ImmArg = OBJECT (IA32Arg)
	VAR 
		imm: LONGINT; 
		rep: LONGINT; 
		width: LONGINT; 

		PROCEDURE ^  & New*(imm: LONGINT; rep, width: LONGINT); 
	END IA32ImmArg; 

	IA32RegArg = OBJECT (IA32Arg)
	VAR 
		reg, width: LONGINT; 

		PROCEDURE ^  & New*(reg: LONGINT); 
	END IA32RegArg; 

	IA32SpecialRegArg = OBJECT (IA32RegArg)
	VAR 
		specialKind: LONGINT; 

		PROCEDURE ^ GetRepresentation(w: Streams.Writer); 
	END IA32SpecialRegArg; 

	IA32MemArg = OBJECT (IA32Arg)
	VAR 
		base, index, scale, disp, fpSize: LONGINT; 
		bytePtr, wordPtr: BOOLEAN; 

		PROCEDURE ^  & New*(b, i, s, d: LONGINT); 
	END IA32MemArg; 

	IA32Opcode = OBJECT (Decoder.Opcode)
	VAR 
		op: LONGINT; 
		prefixes: LONGINT; 
		prefix: ARRAY 4 OF CHAR; 
		adrPrefix, opPrefix: BOOLEAN; 
		opcodeBytes: LONGINT; 
		opcodeByte: ARRAY 3 OF CHAR; 
		argStructure: LONGINT; 
		width: LONGINT; 
		arg1, arg2, arg3: IA32Arg; 

		PROCEDURE ^  & New*(proc: Decoder.ProcedureInfo; stream: Streams.Writer); 
		PROCEDURE ^ AddOpcodeByte(b: CHAR); 
		PROCEDURE ^ AddPrefixByte(b: CHAR); 
		PROCEDURE ^ PrintOpcodeBytes*(w: Streams.Writer); 
		PROCEDURE ^ PrintInstruction*(w: Streams.Writer); 
		PROCEDURE ^ PrintArguments*(w: Streams.Writer); 
		PROCEDURE ^ PrintVariables*(w: Streams.Writer); 
		PROCEDURE ^ ToString*(): Strings.String; 
		PROCEDURE ^ WriteImm(immArg: IA32ImmArg; w: Streams.Writer); 
		PROCEDURE ^ WriteAdrReg(regNr: LONGINT; w: Streams.Writer); 
		PROCEDURE ^ WriteReg(regArg: IA32RegArg; writer: Streams.Writer); 
		PROCEDURE ^ WriteMem(memArg: IA32MemArg; w: Streams.Writer); 
	END IA32Opcode; 

	IA32Decoder = OBJECT {EXCLUSIVE} (Decoder.Decoder)
	VAR 
		previousOpcode, opcodeBeforeWait: IA32Opcode; 

		PROCEDURE ^ DoPrefixes(VAR opcode: IA32Opcode); 
		PROCEDURE ^ GetImm(bytes: LONGINT): LONGINT; 
		PROCEDURE ^ ModRm(VAR regArg: IA32RegArg; VAR memOrRegArg: IA32Arg); 
		PROCEDURE ^ Type1(opcode: IA32Opcode; baseOp: LONGINT); 
		PROCEDURE ^ Push(opcode: IA32Opcode); 
		PROCEDURE ^ Mov(opcode: IA32Opcode); 
		PROCEDURE ^ Mov2(opcode: IA32Opcode); 
		PROCEDURE ^ Call(opcode: IA32Opcode); 
		PROCEDURE ^ Pop(opcode: IA32Opcode); 
		PROCEDURE ^ Ret(opcode: IA32Opcode); 
		PROCEDURE ^ Bound(opcode: IA32Opcode); 
		PROCEDURE ^ Add(opcode: IA32Opcode); 
		PROCEDURE ^ Adc(opcode: IA32Opcode); 
		PROCEDURE ^ Sbb(opcode: IA32Opcode); 
		PROCEDURE ^ And(opcode: IA32Opcode); 
		PROCEDURE ^ Or(opcode: IA32Opcode); 
		PROCEDURE ^ Sub(opcode: IA32Opcode); 
		PROCEDURE ^ Xor(opcode: IA32Opcode); 
		PROCEDURE ^ Cmp(opcode: IA32Opcode); 
		PROCEDURE ^ Inc(opcode: IA32Opcode); 
		PROCEDURE ^ Dec(opcode: IA32Opcode); 
		PROCEDURE ^ Test(opcode: IA32Opcode); 
		PROCEDURE ^ Lea(opcode: IA32Opcode); 
		PROCEDURE ^ Les(opcode: IA32Opcode); 
		PROCEDURE ^ Lds(opcode: IA32Opcode); 
		PROCEDURE ^ Bit(opcode: IA32Opcode); 
		PROCEDURE ^ Shift(opcode: IA32Opcode); 
		PROCEDURE ^ Enter(opcode: IA32Opcode); 
		PROCEDURE ^ Jmp(opcode: IA32Opcode); 
		PROCEDURE ^ InOut(opcode: IA32Opcode); 
		PROCEDURE ^ Jcc(opcode: IA32Opcode); 
		PROCEDURE ^ Jcc2(opcode: IA32Opcode); 
		PROCEDURE ^ Loop(opcode: IA32Opcode); 
		PROCEDURE ^ Lar(opcode: IA32Opcode); 
		PROCEDURE ^ Lsl(opcode: IA32Opcode); 
		PROCEDURE ^ Setcc(opcode: IA32Opcode); 
		PROCEDURE ^ Int(opcode: IA32Opcode); 
		PROCEDURE ^ Movs(opcode: IA32Opcode); 
		PROCEDURE ^ Movx(opcode: IA32Opcode); 
		PROCEDURE ^ Cmps(opcode: IA32Opcode); 
		PROCEDURE ^ Stos(opcode: IA32Opcode); 
		PROCEDURE ^ Lods(opcode: IA32Opcode); 
		PROCEDURE ^ Scas(opcode: IA32Opcode); 
		PROCEDURE ^ Imul(opcode: IA32Opcode); 
		PROCEDURE ^ Ins(opcode: IA32Opcode); 
		PROCEDURE ^ Outs(opcode: IA32Opcode); 
		PROCEDURE ^ Xchg(opcode: IA32Opcode); 
		PROCEDURE ^ MP(opcode: IA32Opcode); 
		PROCEDURE ^ Grp1(opcode: IA32Opcode); 
		PROCEDURE ^ Grp2(opcode: IA32Opcode); 
		PROCEDURE ^ Grp3(opcode: IA32Opcode); 
		PROCEDURE ^ Grp4(opcode: IA32Opcode); 
		PROCEDURE ^ Grp5(opcode: IA32Opcode); 
		PROCEDURE ^ Grp6(opcode: IA32Opcode); 
		PROCEDURE ^ Grp7(opcode: IA32Opcode); 
		PROCEDURE ^ Grp8(opcode: IA32Opcode); 
		PROCEDURE ^ Grp9(opcode: IA32Opcode); 
		PROCEDURE ^ Float0(opcode: IA32Opcode); 
		PROCEDURE ^ Float1(opcode: IA32Opcode); 
		PROCEDURE ^ Float2(opcode: IA32Opcode); 
		PROCEDURE ^ Float3(opcode: IA32Opcode); 
		PROCEDURE ^ Float4(opcode: IA32Opcode); 
		PROCEDURE ^ Float5(opcode: IA32Opcode); 
		PROCEDURE ^ Float6(opcode: IA32Opcode); 
		PROCEDURE ^ Float7(opcode: IA32Opcode); 
		PROCEDURE ^ Cmov(opcode: IA32Opcode); 
		PROCEDURE ^ PushPop2(opcode: IA32Opcode); 
		PROCEDURE ^ Cmpxchg(opcode: IA32Opcode); 
		PROCEDURE ^ Ldseg(opcode: IA32Opcode); 
		PROCEDURE ^ Xadd(opcode: IA32Opcode); 
		PROCEDURE ^ Bswap(opcode: IA32Opcode); 
		PROCEDURE ^ Escape(opcode: IA32Opcode); 
		PROCEDURE ^ DecodeThis*(opcode: Decoder.Opcode); 
		PROCEDURE ^ NewOpcode*(): Decoder.Opcode; 
	END IA32Decoder; 

	PROCEDURE ^ IntToHex(h, width: LONGINT; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ IA32DecoderFactory(reader: Streams.Reader): Decoder.Decoder; 
	PROCEDURE ^ Init*; 
BEGIN
END I386Decoder.
