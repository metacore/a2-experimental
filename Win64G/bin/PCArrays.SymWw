MODULE PCArrays;
	IMPORT PCT, StringPool, PCS, PCC, PCM, Strings := UTF8Strings;
CONST 
	abs = PCC.absfn; 
	minus = PCS.minus; 
	plus = PCS.plus; 
	times = PCS.times; 
	mod = PCS.mod; 
	div = PCS.div; 
	elementproduct = PCS.elementproduct; 
	elementquotient = PCS.elementquotient; 
	scalarproduct = PCS.scalarproduct; 
	eql = PCS.eql; 
	neq = PCS.neq; 
	assign = PCS.becomes; 
	transpose = PCS.transpose; 
	dtimes = PCS.dtimes; 
	copy* = 1024; 
	copy2* = 1025; 
	zerocopy* = 1026; 
	zerocopy2* = 1027; 
	selfcopy* = 1028; 
	selfcopy2* = 1029; 
	incmul* = 1030; 
	allocateTensor* = 1031; 
	incmule* = 1032; 
	decmul* = 1033; 
	eeql = PCS.eeql; 
	eneq = PCS.eneq; 
	elss = PCS.elss; 
	eleq = PCS.eleq; 
	egtr = PCS.egtr; 
	egeq = PCS.egeq; 
	lss = PCS.lss; 
	leq = PCS.leq; 
	gtr = PCS.gtr; 
	geq = PCS.geq; 
	or = PCS.or; 
	and = PCS.and; 
	not = PCS.not; 
	lenfn* = 154; 
	maxfn* = 148; 
	minfn* = 149; 
	incrfn* = 176; 
	swapfn* = 177; 
	convert* = 178; 
	applyaop* = 179; 
	sumfn* = 180; 
	dimfn* = 181; 
	reshapefn* = 182; 
	incrfnA* = 183; 
	lenfnA* = 184; 
	shallowcopyfn* = 185; 
	ArrayModuleName = \"ArrayBase"\; 
	anydim = MAX(LONGINT); 
	scalar = 0; 
	none =  -1; 
	any =  -2; 
	match =  -3; 
	add =  -4; 
TYPE 
	Operator = LONGINT; 

	BaseTypes = POINTER TO RECORD 
		left, right, res: PCT.Struct; 
		idx: StringPool.Index; 
		next: BaseTypes; 
	END; 

	OperatorEntry = OBJECT 
	VAR 
		op: Operator; 
		pname: ARRAY 256 OF CHAR; 
		lshape, rshape, resshape: LONGINT; 
		next: OperatorEntry; 
		first, last: BaseTypes; 

		PROCEDURE ^  & Init*(op: Operator; CONST name: ARRAY OF CHAR; lshape, rshape, resshape: LONGINT); 
		PROCEDURE ^ Enter(left, right, res: PCT.Struct; CONST suffix: ARRAY OF CHAR); 
		PROCEDURE ^ Enter3(left, right, res: PCT.Struct); 
		PROCEDURE ^ EnterDefault(t: PCT.Struct); 
		PROCEDURE ^ EnterDefaultB(t: PCT.Struct); 
		PROCEDURE ^ EnterDefaults; 
		PROCEDURE ^ EnterDefaultsB; 
		PROCEDURE ^ Match(l, r: PCT.Struct; VAR type: PCT.Struct): StringPool.Index; 
		PROCEDURE ^ Report; 
	END OperatorEntry; 
VAR 
	ArrayModuleIdx-: StringPool.Index; 
	ArrayModule-: PCT.Module; 
	NoProc-: StringPool.Index; 
	modscope: PCT.ModScope; 
	Any: PCT.Struct; 
	firstop, lastop: OperatorEntry; 

	PROCEDURE ^ FindArrayOp*(op: Operator; l, r: PCT.Struct; VAR type: PCT.Struct): StringPool.Index; 
	PROCEDURE ^ FindProcedure*(pos: LONGINT; idx: StringPool.Index): PCT.Proc; 
	PROCEDURE ^ IsNumType(t: PCT.Struct): BOOLEAN; 
	PROCEDURE ^ Largest*(a, b: PCT.Struct): PCT.Struct; 
	PROCEDURE ^ Init; 
	PROCEDURE ^ InitScope*(scope: PCT.ModScope); 
	PROCEDURE ^ Report*; 
BEGIN
END PCArrays.
