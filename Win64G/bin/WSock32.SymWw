MODULE WSock32;
	IMPORT SYSTEM, Kernel32, Modules, User32, KernelLog;
CONST 
	MAXGETHOSTSTRUCT* = 1024; 
	AFINet* = 2; 
	PFINet* = AFINet; 
	IPProtoIP* = 0; 
	IPProtoICMP* = 1; 
	IPProtoIGMP* = 2; 
	IPProtoTCP* = 6; 
	IPProtoUDP* = 17; 
	IPProtoRAW* = 255; 
	InvalidSocket* =  -1; 
	SocketError* =  -1; 
	SockUndefined* = 0; 
	SockStream* = 1; 
	SockDGram* = 2; 
	SockRaw* = 3; 
	SockRDM* = 4; 
	SockSeqPacket* = 5; 
	FDRead* = 1; 
	FDWrite* = 2; 
	FDAccept* = 8; 
	FDConnect* = 16; 
	FDClose* = 32; 
	WSADescriptionLen* = 256; 
	WSASysStatusLen* = 128; 
	WSABaseErr = 10000; 
	WSAEInProgress* = (WSABaseErr + 36); 
	WSAEConnAborted* = (WSABaseErr + 53); 
	WSAEConnReset* = (WSABaseErr + 54); 
	WSAEShutdown* = (WSABaseErr + 58); 
	WSAEInval* = (WSABaseErr + 22); 
	WSAEWouldBlock* = (WSABaseErr + 35); 
	WSAENoBufs* = (WSABaseErr + 55); 
	WSAEConnRefused* = (WSABaseErr + 61); 
	FIONRead* = 1074030207; 
	SOLSocket* = 65535; 
	SOMaxConn* = 2147483647; 
	SOSndBuf* = 4097; 
	SORcvBuf* = 4098; 
	SOSndTimeo* = 4101; 
	SORcvTimeo* = 4102; 
	SIORcvAll* = LONGINT(2550136833); 
	SDReceive* = 0; 
	SDSend* = 1; 
	SDboth* = 2; 
	MsgPeek* = 2; 
TYPE 
	TimeVal* = POINTER TO TimeValDesc; 

	TimeValDesc* = RECORD 
		sec*, musec*: LONGINT; 
	END; 

	WSAData* = RECORD 
		wVersion*, wHighVersion*: INTEGER; 
		szDescription*: ARRAY (WSADescriptionLen + 1) OF CHAR; 
		szSystemStatus*: ARRAY (WSASysStatusLen + 1) OF CHAR; 
		iMaxSockets*, iMaxUdpDg*: INTEGER; 
		lpVendorInfo*: ADDRESS; 
	END; 

	inAddr* = LONGINT; 

	PsockaddrIn* = POINTER TO sockaddrIn; 

	sockaddrIn* = RECORD 
		sinFamily*, sinPort*: INTEGER; 
		sinAddr*: inAddr; 
		inZero: ARRAY 8 OF CHAR; 
	END; 

	Paddrinfo* = POINTER TO addrinfo; 

	addrinfo* = RECORD 
		aiFlags*: SET; 
		aiFamily*, aiSocktype*, aiProtocol*: LONGINT; 
		aiAddrlen*: LONGINT; 
		aiCanonname*: ADDRESS; 
		aiAddr*{UNTRACED} : PsockaddrIn; 
		aiNext*{UNTRACED} : Paddrinfo; 
	END; 

	Socket* = Kernel32.HANDLE; 

	Group* = LONGINT; 

	FDSet* = RECORD 
		fdcount*: LONGINT; 
		socket*: ARRAY 64 OF Socket; 
	END; 

	WSAProtocolInfo* = RECORD 
		data: ARRAY 372 OF SYSTEM.BYTE; 
	END; 

	LPHostent* = ADDRESS; 

	PHostent* = POINTER {UNTRACED} TO Hostent; 

	Hostent* = RECORD 
		hName*: ADDRESS; 
		hAliases*: ADDRESS; 
		hAddrtype*, hLength*: INTEGER; 
		hAddrList*: ADDRESS; 
	END; 

	Error = OBJECT 
	VAR 
		nr: LONGINT; 
		name: ARRAY 64 OF CHAR; 
		msg: ARRAY 256 OF CHAR; 
		left, right: Error; 
	END Error; 
VAR 
	wsock32: Kernel32.HMODULE; 
	wship6: Kernel32.HMODULE; 
	wsaStarted: BOOLEAN; 
	errors: Error; 
	WSACleanup-: PROCEDURE {WINAPI}():LONGINT; 
	WSAAsyncGetHostByAddr-: PROCEDURE {WINAPI}(hWnd: User32.HWND; wMsg: LONGINT; VAR addr: ARRAY OF SYSTEM.BYTE; len: LONGINT; type: LONGINT; VAR buf: ARRAY OF SYSTEM.BYTE; buflen: LONGINT):Kernel32.HANDLE; 
	WSAAsyncGetHostByName-: PROCEDURE {WINAPI}(hWnd: User32.HWND; wMsg: LONGINT; name: ARRAY OF CHAR; VAR buf: ARRAY OF SYSTEM.BYTE; buflen: LONGINT):Kernel32.HANDLE; 
	WSAAsyncSelect-: PROCEDURE {WINAPI}(s: Socket; hWnd: User32.HWND; wMsg: LONGINT; lEvent: LONGINT):LONGINT; 
	WSAGetLastError-: PROCEDURE {WINAPI}():LONGINT; 
	WSASocket-: PROCEDURE {WINAPI}(af, type, protocol: LONGINT; VAR lpProtocolInfo: WSAProtocolInfo; g: Group; dwFlags: LONGINT):Socket; 
	WSAStartup-: PROCEDURE {WINAPI}(wVersionRequested: LONGINT; VAR lpWSAData: WSAData):LONGINT; 
	WSAIoctl-: PROCEDURE {WINAPI}(s: Socket; ioControlCode: LONGINT; VAR in: LONGINT; inSize: LONGINT; VAR outBuffer: ARRAY OF CHAR; outBufLen: LONGINT; VAR lenReturned: LONGINT; Overlapped: LONGINT; completionRoutine: LONGINT):LONGINT; 
	accept-: PROCEDURE {WINAPI}(s: Socket; VAR addr: ARRAY OF SYSTEM.BYTE; VAR addrlen: LONGINT):Socket; 
	bind-: PROCEDURE {WINAPI}(s: Socket; VAR name: ARRAY OF SYSTEM.BYTE; namelen: LONGINT):LONGINT; 
	closesocket-: PROCEDURE {WINAPI}(s: Socket):LONGINT; 
	connect-: PROCEDURE {WINAPI}(s: Socket; VAR name: ARRAY OF SYSTEM.BYTE; namelen: LONGINT):LONGINT; 
	freeaddrinfo-: PROCEDURE {WINAPI}(ai: Paddrinfo); 
	getaddrinfo-: PROCEDURE {WINAPI}(VAR nodename, servname: ARRAY OF CHAR; VAR hints: ARRAY OF SYSTEM.BYTE; VAR res: Paddrinfo):LONGINT; 
	gethostbyname-: PROCEDURE {WINAPI}(VAR name: ARRAY OF CHAR):PHostent; 
	gethostname-: PROCEDURE {WINAPI}(VAR name: ARRAY OF CHAR; namelen: LONGINT):LONGINT; 
	getpeername-: PROCEDURE {WINAPI}(s: Socket; VAR name: ARRAY OF SYSTEM.BYTE; VAR namelen: LONGINT):LONGINT; 
	getsockname-: PROCEDURE {WINAPI}(s: Socket; VAR name: ARRAY OF SYSTEM.BYTE; VAR namelen: LONGINT):LONGINT; 
	htonl-: PROCEDURE {WINAPI}(x: LONGINT):LONGINT; 
	htons-: PROCEDURE {WINAPI}(x: INTEGER):INTEGER; 
	ioctlsocket-: PROCEDURE {WINAPI}(s: Socket; cmd: LONGINT; VAR argp: LONGINT):LONGINT; 
	listen-: PROCEDURE {WINAPI}(s: Socket; backlog: LONGINT):LONGINT; 
	ntohl-: PROCEDURE {WINAPI}(x: LONGINT):LONGINT; 
	ntohs-: PROCEDURE {WINAPI}(x: INTEGER):INTEGER; 
	recv-: PROCEDURE {WINAPI}(s: Socket; VAR buf: ARRAY OF SYSTEM.BYTE; len: LONGINT; flags: SET):LONGINT; 
	recvfrom-: PROCEDURE {WINAPI}(s: Socket; VAR buf: ARRAY OF SYSTEM.BYTE; len: LONGINT; flags: LONGINT; VAR from: sockaddrIn; VAR fromlen: LONGINT):LONGINT; 
	select-: PROCEDURE {WINAPI}(nfds: INTEGER; VAR readfds, writefds, exceptfds: FDSet; timeout: TimeVal):LONGINT; 
	send-: PROCEDURE {WINAPI}(s: Socket; CONST buf: ARRAY OF SYSTEM.BYTE; len: LONGINT; flags: SET):LONGINT; 
	sendto-: PROCEDURE {WINAPI}(s: Socket; CONST buf: ARRAY OF SYSTEM.BYTE; len: LONGINT; flags: LONGINT; VAR to: ARRAY OF SYSTEM.BYTE; tolen: LONGINT):LONGINT; 
	setsockopt-: PROCEDURE {WINAPI}(s: Socket; level, optname: LONGINT; VAR optval: ARRAY OF SYSTEM.BYTE; optlen: LONGINT):LONGINT; 
	getsockopt-: PROCEDURE {WINAPI}(s: Socket; level, optname: LONGINT; VAR optval: ARRAY OF SYSTEM.BYTE; VAR optlen: LONGINT):LONGINT; 
	socket-: PROCEDURE {WINAPI}(af, type, protocol: LONGINT):Socket; 
	shutdown-: PROCEDURE {WINAPI}(s: Socket; how: LONGINT):LONGINT; 

	PROCEDURE ^ TermMod; 
	PROCEDURE ^ Init; 
	PROCEDURE ^ Startup*; 
	PROCEDURE ^ CleanUp*; 
	PROCEDURE ^ DispError*; 
	PROCEDURE ^ Enter(nr: LONGINT; short, desc: ARRAY OF CHAR); 
	PROCEDURE ^ InitErrs; 
BEGIN
END WSock32.
