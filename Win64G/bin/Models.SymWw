MODULE Models;
	IMPORT Streams, Locks, Types, Strings, XML, Texts, TextUtilities, Repositories, XMLObjects;
CONST 
	Ok* = Types.Ok; 
	NoNotifications* = 0; 
	OnChanged* = 1; 
	InitialStringSize = 128; 
	AttributeName = \"name"\; 
TYPE 
	Model* = OBJECT {EXCLUSIVE} (Repositories.Component)
	VAR 
		changed: BOOLEAN; 
		notificationMode: SHORTINT; 
		lock: Locks.RWLock; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ SetGeneric*(CONST value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ GetGeneric*(VAR value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ AcquireRead*; 
		PROCEDURE ^ ReleaseRead*; 
		PROCEDURE ^ HasReadLock*(): BOOLEAN; 
		PROCEDURE ^ AcquireWrite*; 
		PROCEDURE ^ ReleaseWrite*; 
		PROCEDURE ^ HasWriteLock*(): BOOLEAN; 
		PROCEDURE ^ SetNotificationMode*(mode: SHORTINT); 
		PROCEDURE ^ Changed*; 
		PROCEDURE ^ AddContent*(content: XML.Content); 
		PROCEDURE ^ WriteValue*(w: Streams.Writer; level: LONGINT); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END Model; 

	Boolean* = OBJECT {EXCLUSIVE} (Model)
	VAR 
		value: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Set*(value: BOOLEAN); 
		PROCEDURE ^ Get*(): BOOLEAN; 
		PROCEDURE ^ SetGeneric*(CONST value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ GetGeneric*(VAR value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ WriteValue*(w: Streams.Writer; level: LONGINT); 
	END Boolean; 

	Integer* = OBJECT {EXCLUSIVE} (Model)
	VAR 
		value: LONGINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Set*(value: LONGINT); 
		PROCEDURE ^ Get*(): LONGINT; 
		PROCEDURE ^ Add*(value: LONGINT); 
		PROCEDURE ^ SetGeneric*(CONST value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ GetGeneric*(VAR value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ WriteValue*(w: Streams.Writer; level: LONGINT); 
	END Integer; 

	Real* = OBJECT {EXCLUSIVE} (Model)
	VAR 
		value: REAL; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Set*(value: REAL); 
		PROCEDURE ^ Get*(): REAL; 
		PROCEDURE ^ SetGeneric*(CONST value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ GetGeneric*(VAR value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ WriteValue*(w: Streams.Writer; level: LONGINT); 
	END Real; 

	Longreal* = OBJECT {EXCLUSIVE} (Model)
	VAR 
		value: LONGREAL; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Set*(value: LONGREAL); 
		PROCEDURE ^ Get*(): LONGREAL; 
		PROCEDURE ^ SetGeneric*(CONST value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ GetGeneric*(VAR value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ WriteValue*(w: Streams.Writer; level: LONGINT); 
	END Longreal; 

	Char* = OBJECT {EXCLUSIVE} (Model)
	VAR 
		value: CHAR; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Set*(value: CHAR); 
		PROCEDURE ^ Get*(): CHAR; 
		PROCEDURE ^ SetGeneric*(CONST value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ GetGeneric*(VAR value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ WriteValue*(w: Streams.Writer; level: LONGINT); 
	END Char; 

	String* = OBJECT {EXCLUSIVE} (Model)
	VAR 
		value: Strings.String; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Set*(value: Strings.String); 
		PROCEDURE ^ Get*(): Strings.String; 
		PROCEDURE ^ SetAOC*(CONST value: ARRAY OF CHAR); 
		PROCEDURE ^ GetAOC*(VAR value: ARRAY OF CHAR); 
		PROCEDURE ^ SetGeneric*(CONST value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ GetGeneric*(VAR value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ WriteValue*(w: Streams.Writer; level: LONGINT); 
	END String; 

	Set* = OBJECT {EXCLUSIVE} (Model)
	VAR 
		value: SET; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Set*(value: SET); 
		PROCEDURE ^ Get*(): SET; 
		PROCEDURE ^ Include*(element: LONGINT); 
		PROCEDURE ^ Exclude*(element: LONGINT); 
		PROCEDURE ^ Contains*(element: LONGINT): BOOLEAN; 
		PROCEDURE ^ SetGeneric*(CONST value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ GetGeneric*(VAR value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ WriteValue*(w: Streams.Writer; level: LONGINT); 
	END Set; 

	Text* = OBJECT {EXCLUSIVE} (Model)
	VAR 
		value: Texts.Text; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ AcquireRead*; 
		PROCEDURE ^ ReleaseRead*; 
		PROCEDURE ^ HasReadLock*(): BOOLEAN; 
		PROCEDURE ^ AcquireWrite*; 
		PROCEDURE ^ ReleaseWrite*; 
		PROCEDURE ^ HasWriteLock*(): BOOLEAN; 
		PROCEDURE ^ Set*(value: Texts.Text); 
		PROCEDURE ^ SetReference*(value: Texts.Text); 
		PROCEDURE ^ Get*(): Texts.Text; 
		PROCEDURE ^ OnTextChanged(sender, data: ANY); 
		PROCEDURE ^ SetAsString*(CONST string: ARRAY OF CHAR); 
		PROCEDURE ^ GetAsString*(VAR string: ARRAY OF CHAR); 
		PROCEDURE ^ SetGeneric*(CONST value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ GetGeneric*(VAR value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ WriteValue*(w: Streams.Writer; level: LONGINT); 
	END Text; 

	Container* = OBJECT {EXCLUSIVE} (Model)

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ FindModel(CONST name: ARRAY OF CHAR): Model; 
		PROCEDURE ^ FindModelByName(CONST fullname: ARRAY OF CHAR): Model; 
		PROCEDURE ^ SetField*(CONST name: ARRAY OF CHAR; CONST value: Types.Any; VAR res: LONGINT); 
		PROCEDURE ^ GetField*(CONST name: ARRAY OF CHAR; VAR value: Types.Any; VAR res: LONGINT); 
	END Container; 
VAR 
	StrBoolean, StrInteger, StrReal, StrLongreal, StrChar, StrString, StrSet, StrText, StrContainer: Strings.String; 

	PROCEDURE ^ NewLine*(w: Streams.Writer; level: LONGINT); 
	PROCEDURE ^ IsPrintableCharacter(ch: CHAR): BOOLEAN; 
	PROCEDURE ^ GetReal*(m: Model; VAR r: LONGREAL): BOOLEAN; 
	PROCEDURE ^ GetInteger*(m: Model; VAR i: LONGINT): BOOLEAN; 
	PROCEDURE ^ SetReal*(m: Model; r: LONGREAL); 
	PROCEDURE ^ GenBoolean*(): XML.Element; 
	PROCEDURE ^ GenInteger*(): XML.Element; 
	PROCEDURE ^ GenReal*(): XML.Element; 
	PROCEDURE ^ GenLongreal*(): XML.Element; 
	PROCEDURE ^ GenChar*(): XML.Element; 
	PROCEDURE ^ GenString*(): XML.Element; 
	PROCEDURE ^ GenSet*(): XML.Element; 
	PROCEDURE ^ GenText*(): XML.Element; 
	PROCEDURE ^ GenContainer*(): XML.Element; 
	PROCEDURE ^ InitStrings; 
BEGIN
END Models.
