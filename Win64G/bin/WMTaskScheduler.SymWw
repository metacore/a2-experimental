MODULE WMTaskScheduler;
	IMPORT Modules, Kernel, Commands, Dates, Strings, Files, TaskScheduler, WMRectangles, WMGraphics, WMGraphicUtilities, WMWindowManager, WMRestorable, WMMessages, WMComponents, WMStandardComponents, WMEditors, WMDialogs, WMCalendar, WMDropDownLists, WMPopups;
CONST 
	WindowWidth = 400; 
	WindowHeight = 200; 
	Bearing = 5; 
	Border = 5; 
	NotInitialized = 0; 
	Today = 1; 
	Tomorrow = 2; 
	ThisWeek = 3; 
	Date = 4; 
	Select_Today = 0; 
	Select_ThisWeek = 1; 
	Select_All = 2; 
	Waiting = 0; 
	Ok = 1; 
	Cancel = 2; 
TYPE 
	ClickInfo = OBJECT 
	VAR 
		cmd: Strings.String; 
	END ClickInfo; 

	TaskView = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		task: TaskScheduler.Task; 
		taskInfo: TaskScheduler.TaskInfo; 
		timestamp: LONGINT; 
		image: WMGraphics.Image; 
		indicateTriggered: BOOLEAN; 
		indicationValue: LONGINT; 
		indicationStep: LONGINT; 
		dateStringType: LONGINT; 
		dateString: ARRAY 32 OF CHAR; 
		timeString: ARRAY 32 OF CHAR; 
		fontName: WMGraphics.Font; 

		PROCEDURE ^  & New(task: TaskScheduler.Task); 
		PROCEDURE ^ UpdateTaskInfo(forceUpdate: BOOLEAN); 
		PROCEDURE ^ GetFillColor(secondsLeft: LONGINT): LONGINT; 
		PROCEDURE ^ GetIndicationColor(): LONGINT; 
		PROCEDURE ^ Update(dt: Dates.DateTime); 
		PROCEDURE ^ PointerUp*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ PointerDown*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ RightClickAction(sender, data: ANY); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
	END TaskView; 

	InputWindow = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		okBtn, cancelBtn: WMStandardComponents.Button; 
		timeEditor, dateEditor, nameEditor, descriptionEditor, commandEditor: WMEditors.Editor; 
		imageList, repeatList: WMDropDownLists.DropDownList; 
		calendar: WMCalendar.Calendar; 
		control: WMCalendar.CalendarController; 
		state: LONGINT; 

		PROCEDURE ^  & New(x, y, width, height: LONGINT); 
		PROCEDURE ^ CreateForm(): WMComponents.VisualComponent; 
		PROCEDURE ^ GetNewTask(): TaskScheduler.Task; 
		PROCEDURE ^ EditTask(VAR task: TaskScheduler.Task; VAR error: BOOLEAN); 
		PROCEDURE ^ GetTaskContent(VAR info: TaskScheduler.TaskInfo; VAR error: BOOLEAN); 
		PROCEDURE ^ SetTaskContent(task: TaskScheduler.Task); 
		PROCEDURE ^ ButtonHandler(sender, data: ANY); 
		PROCEDURE ^ HandleDateSelected(sender, data: ANY); 
		PROCEDURE ^ SetState(state: LONGINT); 
	END InputWindow; 

	KillerMsg = OBJECT 
	END KillerMsg; 

	Window* = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		taskList: TaskScheduler.TaskList; 
		newTasks, currentTasks: TaskScheduler.TaskArray; 
		scrollpanel: WMStandardComponents.Panel; 
		selectMode: LONGINT; 
		statusLabel: WMStandardComponents.Label; 
		lastNofSelectedTasks, lastNofTasks: LONGINT; 
		filenameEditor: WMEditors.Editor; 
		loadBtn, storeBtn, addBtn, todayBtn, thisWeekBtn, allBtn: WMStandardComponents.Button; 
		inputWindow: InputWindow; 
		alive, dead: BOOLEAN; 
		timer: Kernel.Timer; 

		PROCEDURE ^  & New(context: WMRestorable.Context); 
		PROCEDURE ^ CreateForm(): WMComponents.VisualComponent; 
		PROCEDURE ^ ButtonHandler(sender, data: ANY); 
		PROCEDURE ^ AddTask; 
		PROCEDURE ^ EditTask(task: TaskScheduler.Task); 
		PROCEDURE ^ Load(CONST filename: ARRAY OF CHAR); 
		PROCEDURE ^ Store(CONST filename: ARRAY OF CHAR); 
		PROCEDURE ^ SetSelectMode(mode: LONGINT); 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ Handle*(VAR x: WMMessages.Message); 
		PROCEDURE ^ Selector(time: Dates.DateTime; task: TaskScheduler.Task): BOOLEAN; 
		PROCEDURE ^ CreateTaskViews(tasks: TaskScheduler.TaskArray); 
		PROCEDURE ^ RemoveTaskViews(tasks: TaskScheduler.TaskArray); 
		PROCEDURE ^ UpdateTaskViews(dt: Dates.DateTime; tasks: TaskScheduler.TaskArray); 
		PROCEDURE ^ UpdateStatusLabel(nofSelectedTasks, nofTasks: LONGINT); 
		PROCEDURE ^ CheckTasks; 
	BEGIN{ACTIVE} 
	END Window; 
VAR 
	DefaultImage: WMGraphics.Image; 
	nofWindows: LONGINT; 

	PROCEDURE ^ SameDay(dt1, dt2: Dates.DateTime): BOOLEAN; 
	PROCEDURE ^ IsTomorrow(start, end: Dates.DateTime): BOOLEAN; 
	PROCEDURE ^ SameWeek(dt1, dt2: Dates.DateTime): BOOLEAN; 
	PROCEDURE ^ ToSeconds(days, hours, minutes, seconds: LONGINT): LONGINT; 
	PROCEDURE ^ Open*(context: Commands.Context); 
	PROCEDURE ^ Restore*(context: WMRestorable.Context); 
	PROCEDURE ^ Init; 
	PROCEDURE ^ IncCount; 
	PROCEDURE ^ DecCount; 
	PROCEDURE ^ Cleanup; 
BEGIN
END WMTaskScheduler.
