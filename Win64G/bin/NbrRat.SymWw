MODULE NbrRat;
	IMPORT Streams, NbrInt, NbrInt64;
CONST 
TYPE 
	Rational* = RECORD 
		n, d: NbrInt64.Integer; 
	END; 
VAR 
	MinNbr-, MaxNbr-: Rational; 

	PROCEDURE ^ CommonDenominator(num, denom: NbrInt64.Integer; VAR cd: NbrInt64.Integer); 
	PROCEDURE ^ Simplify(VAR x: Rational); 
	OPERATOR ^ "-"-(x: Rational): Rational; 
	OPERATOR ^ ":="-(VAR l: Rational; r: NbrInt.Integer); 
	OPERATOR ^ "="-(l, r: Rational): BOOLEAN; 
	OPERATOR ^ "="-(l: Rational; r: NbrInt.Integer): BOOLEAN; 
	OPERATOR ^ "="-(l: NbrInt.Integer; r: Rational): BOOLEAN; 
	OPERATOR ^ "#"-(l, r: Rational): BOOLEAN; 
	OPERATOR ^ "#"-(l: Rational; r: NbrInt.Integer): BOOLEAN; 
	OPERATOR ^ "#"-(l: NbrInt.Integer; r: Rational): BOOLEAN; 
	OPERATOR ^ "<"-(l, r: Rational): BOOLEAN; 
	OPERATOR ^ "<"-(l: Rational; r: NbrInt.Integer): BOOLEAN; 
	OPERATOR ^ "<"-(l: NbrInt.Integer; r: Rational): BOOLEAN; 
	OPERATOR ^ ">"-(l, r: Rational): BOOLEAN; 
	OPERATOR ^ ">"-(l: Rational; r: NbrInt.Integer): BOOLEAN; 
	OPERATOR ^ ">"-(l: NbrInt.Integer; r: Rational): BOOLEAN; 
	OPERATOR ^ "<="-(l, r: Rational): BOOLEAN; 
	OPERATOR ^ "<="-(l: Rational; r: NbrInt.Integer): BOOLEAN; 
	OPERATOR ^ "<="-(l: NbrInt.Integer; r: Rational): BOOLEAN; 
	OPERATOR ^ ">="-(l, r: Rational): BOOLEAN; 
	OPERATOR ^ ">="-(l: Rational; r: NbrInt.Integer): BOOLEAN; 
	OPERATOR ^ ">="-(l: NbrInt.Integer; r: Rational): BOOLEAN; 
	OPERATOR ^ "+"-(l, r: Rational): Rational; 
	OPERATOR ^ "+"-(l: Rational; r: NbrInt.Integer): Rational; 
	OPERATOR ^ "+"-(l: NbrInt.Integer; r: Rational): Rational; 
	OPERATOR ^ "-"-(l, r: Rational): Rational; 
	OPERATOR ^ "-"-(l: Rational; r: NbrInt.Integer): Rational; 
	OPERATOR ^ "-"-(l: NbrInt.Integer; r: Rational): Rational; 
	OPERATOR ^ "*"-(l, r: Rational): Rational; 
	OPERATOR ^ "*"-(l: Rational; r: NbrInt.Integer): Rational; 
	OPERATOR ^ "*"-(l: NbrInt.Integer; r: Rational): Rational; 
	OPERATOR ^ "/"-(l, r: Rational): Rational; 
	OPERATOR ^ "/"-(l: Rational; r: NbrInt.Integer): Rational; 
	OPERATOR ^ "/"-(l: NbrInt.Integer; r: Rational): Rational; 
	PROCEDURE ^ Abs*(x: Rational): Rational; 
	PROCEDURE ^ Frac*(x: Rational): Rational; 
	PROCEDURE ^ Max*(x1, x2: Rational): Rational; 
	PROCEDURE ^ Min*(x1, x2: Rational): Rational; 
	PROCEDURE ^ Sign*(x: Rational): NbrInt.Integer; 
	PROCEDURE ^ StringToRat*(string: ARRAY OF CHAR; VAR x: Rational); 
	PROCEDURE ^ RatToString*(x: Rational; VAR string: ARRAY OF CHAR); 
	PROCEDURE ^ Load*(R: Streams.Reader; VAR x: Rational); 
	PROCEDURE ^ Store*(W: Streams.Writer; x: Rational); 
	PROCEDURE ^ Numer*(x: Rational): NbrInt64.Integer; 
	PROCEDURE ^ Denom*(x: Rational): NbrInt64.Integer; 
	PROCEDURE ^ Int*(x: Rational): NbrInt64.Integer; 
	PROCEDURE ^ Round*(x: Rational): NbrInt64.Integer; 
	PROCEDURE ^ Floor*(x: Rational): NbrInt64.Integer; 
	PROCEDURE ^ Ceiling*(x: Rational): NbrInt64.Integer; 
	PROCEDURE ^ Set*(numerator, denominator: NbrInt64.Integer; VAR x: Rational); 
BEGIN
END NbrRat.
