MODULE WMNavigate;
	IMPORT Modules, Kernel, Commands, Options, Locks, Strings, Raster, Plugins, Displays, KernelLog, Inputs, XML, WMMessages, WMRectangles, WMGraphics, WMGraphicUtilities, WMWindowManager, WMComponents, WMProperties, WMRestorable, Files, Dates;
CONST 
	Text* = 0; 
	Icons* = 1; 
	Left* = 0; 
	Top* = 1; 
	Right* = 2; 
	Bottom* = 3; 
	Fixed* = 0; 
	Default* = 1; 
	ScaleUp* = 2; 
	ScaleUpWidthOnly* = 3; 
	ScaleUpHeightOnly* = 4; 
	Aspect* = 5; 
	ThumbnailWidth = 128; 
	ThumbnailHeight = 92; 
	UpdateInterval = 100; 
	MaxNofWindows = 100; 
	MaxNavigationWindows = 10; 
	Running = 0; 
	Terminating = 1; 
	Terminated = 2; 
	Border = 2; 
	TitleHeight = 20; 
	ShadowWidth = 5; 
	LineHeight = 20; 
	LeftBorder = 25; 
	RightBorder = 5; 
	NofSystemCommands = 8; 
	SystemCommand = 99; 
	SystemCommand_Close = 0; 
	SystemCommand_Hide = 1; 
	SystemCommand_StayOnTop = 2; 
	SystemCommand_StayOnBottom = 3; 
	SystemCommand_Frame = 4; 
	SystemCommand_WindowShot = 5; 
	SystemCommand_StoreComponent = 6; 
	SystemCommand_StoreData = 7; 
	Document = 1; 
	MenuSize = 10; 
TYPE 
	Layout = OBJECT 
	VAR 
		width, height: LONGINT; 
		entryWidth, entryHeight: LONGINT; 
		fixX, fixY: LONGINT; 
		nofRows, nofColumns: LONGINT; 
		nofEntries: LONGINT; 

		PROCEDURE ^ GetIndexOf(x, y: LONGINT): LONGINT; 
		PROCEDURE ^ GetPositionOf(x, y: LONGINT): WMRectangles.Rectangle; 
		PROCEDURE ^ Compute(nofEntries, width, height, desiredEntryWidth, desiredEntryHeight, mode: LONGINT); 
		PROCEDURE ^ ComputeDefault; 
		PROCEDURE ^ ComputeAspect; 
		PROCEDURE ^ Show; 
	END Layout; 

	DoCloseWindow = OBJECT {EXCLUSIVE} 
	VAR 
		window: WMWindowManager.Window; 

		PROCEDURE ^  & Init(window: WMWindowManager.Window); 
	BEGIN{ACTIVE} 
	END DoCloseWindow; 

	Info = RECORD 
		nofWindows: LONGINT; 
		windows: Windows; 
		extImages: POINTER TO ARRAY OF WMGraphics.Image; 
		focusIdx: LONGINT; 
		wTimestamp: LONGINT; 
		oTimestamp: LONGINT; 
	END; 

	Base* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		clDefault-, clSelected-, clMouseOver-, clSelectedMouseOver-, clTextDefault-, clTextSelected-, clTextMouseOver-, clTextSelectedMouseOver-, clIndicateHidden-: WMProperties.ColorProperty; 
		borderWidth-: WMProperties.Int32Property; 
		layoutMode-: WMProperties.Int32Property; 
		itemWidth-, itemHeight-: WMProperties.Int32Property; 
		info: Info; 
		layout: Layout; 
		lock: Locks.Lock; 
		state: LONGINT; 
		mouseOverIdx, lastMouseOverIdx: LONGINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ PropertyChanged*(sender, data: ANY); 
		PROCEDURE ^ PointerMove*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ PointerLeave*; 
		PROCEDURE ^ PointerDown*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ DrawInternal(canvas: WMGraphics.Canvas; x, y, width, height: LONGINT; window: WMWindowManager.Window; hasFocus, mouseOver: BOOLEAN; VAR extImage: WMGraphics.Image); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
	END Base; 

	WindowOverview* = OBJECT {EXCLUSIVE} (Base)
	VAR 
		aux_canvas: WMGraphics.BufferCanvas; 
		rect: WMRectangles.Rectangle; 
		font: WMGraphics.Font; 
		timer: Kernel.Timer; 

		PROCEDURE ^ CreateAuxCanvas(width, height: LONGINT; alpha: BOOLEAN): WMGraphics.BufferCanvas; 
		PROCEDURE ^ PropertyChanged*(sender, data: ANY); 
		PROCEDURE ^ UpdateLayout; 
		PROCEDURE ^  & Init*; 
		PROCEDURE ^ DrawInternal(canvas: WMGraphics.Canvas; x, y, width, height: LONGINT; window: WMWindowManager.Window; hasFocus, mouseOver: BOOLEAN; VAR extImage: WMGraphics.Image); 
		PROCEDURE ^ Finalize*; 
		PROCEDURE ^ Update; 
	BEGIN{ACTIVE} 
	END WindowOverview; 

	TaskList* = OBJECT {EXCLUSIVE} (Base)
	VAR 
		style-: WMProperties.Int32Property; 
		menuLocation-: WMProperties.Int32Property; 
		showThumbnails-: WMProperties.BooleanProperty; 
		showNames-: WMProperties.BooleanProperty; 
		viewport: WMWindowManager.ViewPort; 
		dummyInfo: WMWindowManager.WindowInfo; 
		lastKeys: SET; 
		lastWindow: WMWindowManager.Window; 
		msg: WMMessages.Message; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ PropertyChanged*(sender, data: ANY); 
		PROCEDURE ^ GoToWindow(window: WMWindowManager.Window; moveViewport: BOOLEAN); 
		PROCEDURE ^ FocusLost*; 
		PROCEDURE ^ PointerDown*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ PointerUp*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ DrawInternalIcons(canvas: WMGraphics.Canvas; x, y, width, height: LONGINT; window: WMWindowManager.Window; hasFocus, mouseOver: BOOLEAN; VAR extImage: WMGraphics.Image); 
		PROCEDURE ^ DrawInternalText(canvas: WMGraphics.Canvas; x, y, width, height: LONGINT; window: WMWindowManager.Window; hasFocus, mouseOver: BOOLEAN); 
		PROCEDURE ^ DrawInternal(canvas: WMGraphics.Canvas; x, y, width, height: LONGINT; window: WMWindowManager.Window; hasFocus, mouseOver: BOOLEAN; VAR extImage: WMGraphics.Image); 
		PROCEDURE ^ Finalize*; 
	BEGIN{ACTIVE} 
	END TaskList; 

	InfoView = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		window: WMWindowManager.Window; 
		info: WMWindowManager.WindowInfo; 
		nofDocuments: LONGINT; 
		documentOffset, commandOffset, imageOffset: LONGINT; 
		owner: MenuWindow; 
		menuLocation: LONGINT; 
		showThumbnails: BOOLEAN; 
		type, index: LONGINT; 
		keys: SET; 
		xt, yt: LONGINT; 
		image: WMGraphics.Image; 
		imgX, imgY: LONGINT; 
		imageYes, imageNo: WMGraphics.Image; 

		PROCEDURE ^  & New(owner: MenuWindow; menuLocation: LONGINT; showThumbnails: BOOLEAN); 
		PROCEDURE ^ SetInfo(window: WMWindowManager.Window; CONST info: WMWindowManager.WindowInfo); 
		PROCEDURE ^ PointerMove*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ PointerLeave*; 
		PROCEDURE ^ PointerDown*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ Draw*(canvas: WMGraphics.Canvas); 
	END InfoView; 

	MenuWindow = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		isClosed: BOOLEAN; 
		shadowRectB, shadowRectR, borderRect: WMRectangles.Rectangle; 
		infoView: InfoView; 
		info: WMWindowManager.WindowInfo; 
		close: BOOLEAN; 

		PROCEDURE ^ GetSelection(VAR type, index: LONGINT; VAR keys: SET); 
		PROCEDURE ^  & New(x, y, width, menuLocation: LONGINT; showThumbnails: BOOLEAN; window: WMWindowManager.Window; CONST info: WMWindowManager.WindowInfo); 
		PROCEDURE ^ Draw*(canvas: WMGraphics.Canvas; w, h, q: LONGINT); 
		PROCEDURE ^ SetClosed; 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ KeyEvent*(ucs: LONGINT; flags: SET; keysym: LONGINT); 
		PROCEDURE ^ FocusLost*; 
	END MenuWindow; 

	Window = OBJECT {EXCLUSIVE} (WMComponents.FormWindow)
	VAR 
		myId: LONGINT; 

		PROCEDURE ^  & New*(id: LONGINT; component: WMComponents.VisualComponent; x, y, width, height: LONGINT; alpha: BOOLEAN; flags: SET); 
		PROCEDURE ^ Close*; 
	END Window; 

	Windows = ARRAY MaxNofWindows OF WMWindowManager.Window; 
VAR 
	windows: ARRAY MaxNavigationWindows OF Window; 
	manager: WMWindowManager.WindowManager; 
	viewport: WMWindowManager.ViewPort; 
	StrWindowOverview: Strings.String; 
	StrNoName: Strings.String; 
	StrBase: Strings.String; 
	StrTaskList: Strings.String; 
	StrOverview: Strings.String; 
	width, height: LONGINT; 
	windowShotScale*: REAL; 
	windowsAreHidden: BOOLEAN; 
	navigationIsHidden: BOOLEAN; 
	showWindowNames: BOOLEAN; 
	ProtoClDefault, ProtoClSelected, ProtoClMouseOver, ProtoClSelectedMouseOver, ProtoClTextDefault, ProtoClTextSelected, ProtoClTextMouseOver, ProtoClTextSelectedMouseOver, ProtoClIndicateHidden: WMProperties.ColorProperty; 
	ProtoBorderWidth: WMProperties.Int32Property; 
	ProtoTaskListStyle, ProtoTaskListMenuLocation: WMProperties.Int32Property; 
	ProtoTaskListShowThumbnails, ProtoTaskListShowNames: WMProperties.BooleanProperty; 
	ProtoItemWidth, ProtoItemHeight: WMProperties.Int32Property; 
	ProtoLayoutMode: WMProperties.Int32Property; 

	PROCEDURE ^ GetWindowImage(window: WMWindowManager.Window; width, height: LONGINT): WMGraphics.Image; 
	PROCEDURE ^ GenerateName(prefix: Strings.String; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ WindowShot(window: WMWindowManager.Window; scale: REAL); 
	PROCEDURE ^ StoreWindow(window: WMWindowManager.Window); 
	PROCEDURE ^ DrawIntoCanvas(window: WMWindowManager.Window; canvas: WMGraphics.BufferCanvas; width, height: LONGINT; VAR offsetX, offsetY: LONGINT); 
	PROCEDURE ^ Clear(VAR windows: Windows); 
	PROCEDURE ^ GetFocusOwnerIndex(CONST windows: Windows; nofWindows: LONGINT): LONGINT; 
	PROCEDURE ^ GetWindows(VAR windows: Windows; VAR nofWindows: LONGINT); 
	PROCEDURE ^ Open*(context: Commands.Context); 
	PROCEDURE ^ Close*(context: Commands.Context); 
	PROCEDURE ^ ToggleVisibility*(context: Commands.Context); 
	PROCEDURE ^ HideNavigation*; 
	PROCEDURE ^ RestoreNavigation*; 
	PROCEDURE ^ ToggleNavigation*; 
	PROCEDURE ^ SetIsVisibleNavigation(isVisible: BOOLEAN); 
	PROCEDURE ^ FocusToNext*; 
	PROCEDURE ^ FocusToPrevious*; 
	PROCEDURE ^ SwitchFocus(backwards: BOOLEAN); 
	PROCEDURE ^ HideAll*; 
	PROCEDURE ^ RestoreAll*; 
	PROCEDURE ^ ToggleAll*; 
	PROCEDURE ^ SetIsVisible(isVisible: BOOLEAN); 
	PROCEDURE ^ ToggleFullscreen*; 
	PROCEDURE ^ MoveWindow*(context: Commands.Context); 
	PROCEDURE ^ CloseWindow*; 
	PROCEDURE ^ SetViewportRange*(context: Commands.Context); 
	PROCEDURE ^ GenTaskList*(): XML.Element; 
	PROCEDURE ^ GenOverview*(): XML.Element; 
	PROCEDURE ^ InitStrings; 
	PROCEDURE ^ InitProtos; 
	PROCEDURE ^ Init; 
	PROCEDURE ^ Cleanup; 
BEGIN
END WMNavigate.
