MODULE Oberon IN Oberon;
	IMPORT KernelLog IN A2, AosFS := Files IN A2, Commands IN A2, Fido IN A2, Kernel, Modules, Display, Input, Objects, Viewers, Fonts, Texts, Files;
CONST 
	defocus* = 0; 
	neutralize* = 1; 
	mark* = 2; 
	consume* = 0; 
	track* = 1; 
	get* = 0; 
	set* = 1; 
	reset* = 2; 
	GCInterval = 10000; 
	ActVal = 2000; 
	Neutralise = 0A5X; 
	SETUP = 0A4X; 
TYPE 
	Painter* = PROCEDURE (x, y: INTEGER); 

	Marker* = RECORD 
		Fade*, Draw*: Painter; 
	END; 

	Cursor* = RECORD 
		marker*: Marker; 
		on*: BOOLEAN; 
		X*, Y*: INTEGER; 
	END; 

	ParList* = POINTER TO ParRec; 

	ParRec* = RECORD 
		vwr*: Viewers.Viewer; 
		frame*: Display.Frame; 
		obj*: Objects.Object; 
		text*: Texts.Text; 
		pos*: LONGINT; 
	END; 

	ControlMsg* = RECORD (Display.FrameMsg)
		id*: INTEGER; 
		X*, Y*: INTEGER; 
	END; 

	InputMsg* = RECORD (Display.FrameMsg)
		id*: INTEGER; 
		keys*: SET; 
		X*, Y*: INTEGER; 
		ch*: CHAR; 
		fnt*: Fonts.Font; 
		col*, voff*: SHORTINT; 
	END; 

	CaretMsg* = RECORD (Display.FrameMsg)
		id*: INTEGER; 
		car*: Display.Frame; 
		text*: Texts.Text; 
		pos*: LONGINT; 
	END; 

	SelectMsg* = RECORD (Display.FrameMsg)
		id*: INTEGER; 
		time*: LONGINT; 
		sel*: Display.Frame; 
		text*: Texts.Text; 
		beg*, end*: LONGINT; 
	END; 

	ConsumeMsg* = RECORD (Display.FrameMsg)
		text*: Texts.Text; 
		beg*, end*: LONGINT; 
	END; 

	RecallMsg* = RECORD (Display.FrameMsg)
	END; 

	Task* = POINTER TO TaskDesc; 

	Handler* = PROCEDURE (me: Task); 

	TaskDesc* = RECORD 
		next*: Task; 
		time*: LONGINT; 
		safe*: BOOLEAN; 
		handle*: Handler; 
	END; 
VAR 
	Arrow*, Star*: Marker; 
	Mouse*, Pointer*: Cursor; 
	Log*: Texts.Text; 
	Par*: ParList; 
	CurFnt*: Fonts.Font; 
	CurCol*, CurOff*: SHORTINT; 
	OptionChar*: CHAR; 
	OpenText*: PROCEDURE (title: ARRAY OF CHAR; T: Texts.Text; W, H: INTEGER); 
	CurTask: Task; 
	NextTask*: Task; 
	New*: BOOLEAN; 
	DW, DH, CL, W0, H0, H1, H2, H3: INTEGER; 
	GCTask: Task; 
	ScreenOn: BOOLEAN; 
	FillerColor: SHORTINT; 
	conftext: Texts.Text; 
	conftime, confdate: LONGINT; 
	fido: Fido.Watchdog; 
	OberonText: AosFS.FileName; 

	PROCEDURE ^ GetClock*(VAR t, d: LONGINT); 
	PROCEDURE ^ SetClock*(t, d: LONGINT); 
	PROCEDURE ^ Time*(): LONGINT; 
	PROCEDURE ^ FlipArrow(X, Y: INTEGER); 
	PROCEDURE ^ FlipStar(X, Y: INTEGER); 
	PROCEDURE ^ OpenCursor*(VAR c: Cursor); 
	PROCEDURE ^ FadeCursor*(VAR c: Cursor); 
	PROCEDURE ^ DrawCursor*(VAR c: Cursor; VAR m: Marker; X, Y: INTEGER); 
	PROCEDURE ^ Defocus*; 
	PROCEDURE ^ RemoveMarks*(X, Y, W, H: INTEGER); 
	PROCEDURE ^ HandleFiller(V: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ OpenDisplay*(UW, SW, H: INTEGER); 
	PROCEDURE ^ UpdateDisplay; 
	PROCEDURE ^ DisplayWidth*(X: INTEGER): INTEGER; 
	PROCEDURE ^ DisplayHeight*(X: INTEGER): INTEGER; 
	PROCEDURE ^ OpenTrack*(X, W: INTEGER); 
	PROCEDURE ^ UserTrack*(X: INTEGER): INTEGER; 
	PROCEDURE ^ SystemTrack*(X: INTEGER): INTEGER; 
	PROCEDURE ^ UY(X: INTEGER): INTEGER; 
	PROCEDURE ^ AllocateUserViewer*(DX: INTEGER; VAR X, Y: INTEGER); 
	PROCEDURE ^ SY(X: INTEGER): INTEGER; 
	PROCEDURE ^ AllocateSystemViewer*(DX: INTEGER; VAR X, Y: INTEGER); 
	PROCEDURE ^ MarkedViewer*(): Viewers.Viewer; 
	PROCEDURE ^ MarkedFrame*(): Display.Frame; 
	PROCEDURE ^ MarkedText*(): Texts.Text; 
	PROCEDURE ^ Call*(name: ARRAY OF CHAR; par: ParList; new: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ GetSelection*(VAR text: Texts.Text; VAR beg, end, time: LONGINT); 
	PROCEDURE ^ GC(me: Task); 
	PROCEDURE ^ Install*(T: Task); 
	PROCEDURE ^ Remove*(T: Task); 
	PROCEDURE ^ Collect*; 
	PROCEDURE ^ SetFont*(fnt: Fonts.Font); 
	PROCEDURE ^ SetColor*(col: SHORTINT); 
	PROCEDURE ^ SetOffset*(voff: SHORTINT); 
	PROCEDURE ^ SkipGroup(VAR S: Texts.Scanner); 
	PROCEDURE ^ OpenScanner*(VAR S: Texts.Scanner; name: ARRAY OF CHAR); 
	PROCEDURE ^ ResetPalette; 
	PROCEDURE ^ Reboot; 
	PROCEDURE ^ SwitchToWM; 
	PROCEDURE ^ Loop*; 
	PROCEDURE ^ Init; 
BEGIN
END Oberon.
