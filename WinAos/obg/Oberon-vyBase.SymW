MODULE vyBase IN Oberon;
	IMPORT SYSTEM, Oberon, Texts, Files, vyLinks, vyOOPT := OPT, Objects, Display, Attributes, Links, Display3, Gadgets, Fonts, BasicGadgets, vyHost, vyHostTexts, Strings, vyHostStrings;
CONST 
	idversion* = \"vy0.0a5"\; 
	idname* = \"VoyagerBase"\; 
	cprofileversion* = 1X; 
	minVersion = 0; 
	maxVersion = 0; 
	vy* = \"vy"\; 
	charset* = \"Oberon"\; 
	TextElemCode* = 1CX; 
	precc* = 100; 
	postcc* = 120; 
	notyetcc* = 99; 
	fatalcc* = 98; 
	rightKey* = 0; 
	middleKey* = 1; 
	leftKey* = 2; 
	cnonumber* = 1; 
	Var* = 1; 
	VarPar* = 2; 
	Con* = 3; 
	Fld* = 4; 
	Typ* = 5; 
	LProc* = 6; 
	XProc* = 7; 
	SProc* = 8; 
	CProc* = 9; 
	Mod* = 11; 
	Head* = 12; 
	TProc* = 13; 
	Alias* = 14; 
	cUndef* = 0; 
	cByte* = 1; 
	cBool* = 2; 
	cChar* = 3; 
	cSInt* = 4; 
	cInt* = 5; 
	cLInt* = 6; 
	cReal* = 7; 
	cLReal* = 8; 
	cSet* = 9; 
	cString* = 10; 
	cNilTyp* = 11; 
	cNoTyp* = 12; 
	cPointer* = 13; 
	cProcTyp* = 14; 
	cComp* = 15; 
	Basic* = 1; 
	Array* = 2; 
	DynArr* = 3; 
	Record* = 4; 
	cNotYetImplemented* = 0; 
	cBadType* = 1; 
	cBadLen* = 2; 
	cOK* = {}; 
	cpurgable = 1; 
TYPE 
	Index* = SIGNED32; 

	Real* = FLOAT64; 

	Text* = Texts.Text; 

	TextElemBaseType* = Objects.Object; 

	TextElemType* = Gadgets.FrameDesc; 

	TextsWriter* = Texts.Writer; 

	TextsReader* = Texts.Reader; 

	TextsScanner* = Texts.Scanner; 

	FilesReader* = Files.Rider; 

	FilesWriter* = Files.Rider; 

	OPTConst* = vyOOPT.Const; 

	OPTModule* = vyOOPT.Module; 

	OPTNode* = vyOOPT.Node; 

	OPTObject* = vyOOPT.Object; 

	OPTStruct* = vyOOPT.Struct; 

	TickMsg* = RECORD (Display.FrameMsg)
	END; 

	RecursiveMsg = RECORD (Objects.ObjMsg)
	END; 

	tName* = POINTER TO tNameDesc; 

	tKey* = Objects.Object; 

	tKeyDesc* = Objects.ObjDesc; 

	tAction* = POINTER TO tActionDesc; 

	tActionProc* = PROCEDURE (action: tAction; VAR failed: BOOLEAN); 

	tActionDesc* = RECORD (Oberon.TaskDesc)
		Do*: tActionProc; 
		failed-: BOOLEAN; 
		todoCount-: SIGNED32; 
		preAction-: tAction; 
		TickDelta: SIGNED32; 
		termination: tAction; 
		Input*, Output*: vyLinks.Link; 
		ControlPar*: vyLinks.Link; 
	END; 

	tCache* = POINTER TO tCacheDesc; 

	tCacheDesc* = RECORD 
		nextcache*: tCache; 
	END; 

	Object* = POINTER TO ObjDesc; 

	ObjDesc* = RECORD (Gadgets.ObjDesc)
		ObjectId-: SIGNED32; 
		Name-: tName; 
		createdT-, createdD-: SIGNED32; 
		modifiedT-, modifiedD-: SIGNED32; 
		key: tKey; 
		struct-: OPTStruct; 
		disposition-: SET; 
		cache*: tCache; 
		users*, sources*: vyLinks.Link; 
	END; 

	UpdateMessage* = RECORD (Objects.ObjMsg)
	END; 

	SubscrBroadcastMsg* = RECORD (Objects.ObjMsg)
	END; 

	NewSimMsg* = RECORD (SubscrBroadcastMsg)
	END; 

	ReadMessage* = RECORD (Objects.ObjMsg)
	END; 

	DumpMessage* = RECORD (Objects.ObjMsg)
	END; 

	tStatus* = SET; 

	tData* = POINTER TO tDataDesc; 

	tDataDesc* = RECORD (ObjDesc)
		status*: tStatus; 
		type*: OPTStruct; 
		storagetype*: OPTStruct; 
		cacheHighlight*: Object; 
	END; 

	tOp1* = PROCEDURE (VAR arg: tData); 

	tOp2* = PROCEDURE (VAR arg1, arg2: tData); 

	tOp3* = PROCEDURE (VAR arg1, arg2, arg3: tData); 

	tBuf* = POINTER TO tBufDesc; 

	tBufDesc* = RECORD 
		str*: OPTStruct; 
		len*: SIGNED32; 
		usedentries*: SIGNED32; 
		aux*: tBuf; 
		cache*: tCache; 
		next*: tBuf; 
	END; 

	tSBLProc* = PROCEDURE (buf1, buf2: tBuf):BOOLEAN; 

	tLenArray* = POINTER TO tLenArrayDesc; 

	tLenArrayDesc = ARRAY OF SIGNED32; 

	tLayout* = POINTER TO tLayoutDesc; 

	tLayoutDesc* = RECORD 
		dim*: SIGNED16; 
		transposed*: BOOLEAN; 
	END; 

	tArray* = POINTER TO tArrayDesc; 

	tArrayDesc* = RECORD (tLayoutDesc)
		lens*: tLenArray; 
	END; 

	tVector* = POINTER TO tVectorDesc; 

	tVectorDesc* = RECORD (tDataDesc)
		Layout*: tLayout; 
		nrData*: SIGNED32; 
		buf*: tBuf; 
	END; 

	tThread = POINTER TO tThreadDesc; 

	tThreadDesc = RECORD (ObjDesc)
		lastObject: vyLinks.Link; 
	END; 

	tTransformation* = POINTER TO tTransDesc; 

	tTransDesc* = RECORD (ObjDesc)
		input-: vyLinks.Link; 
		output-: vyLinks.Link; 
		controlpars-: vyLinks.Link; 
	END; 

	tNameDesc* = Gadgets.ObjDesc; 

	TickProc* = PROCEDURE ; 

	ProcQPtr = POINTER TO ProcQElem; 

	ProcQElem = RECORD 
		Proc: TickProc; 
		TickDelta: SIGNED32; 
		NextTime: SIGNED32; 
		next: ProcQPtr; 
	END; 

	Frame* = POINTER TO FrameDesc; 

	FrameObject = POINTER TO FrameObjDesc; 

	FrameObjDesc = RECORD (ObjDesc)
		gadget: Frame; 
	END; 

	FrameDesc* = RECORD (Gadgets.FrameDesc)
		borderW*: SIGNED16; 
		hotupdate*: BOOLEAN; 
		vyobj: FrameObject; 
		vylinks*: vyLinks.Link; 
	END; 
VAR 
	undftyp*, bytetyp*, booltyp*, chartyp*, sinttyp*, inttyp*, linttyp*, realtyp*, lrltyp*, settyp*, stringtyp*, niltyp*, notyp*, ptrtyp*: OPTStruct; 
	dynboolarray*, dynintarray*, dynlintarray*, dynrealarray*, dynlrlarray*: OPTStruct; 
	hd: ARRAY 17 OF CHAR; 
	Context-: tThread; 
	currentThread-: tThread; 
	lastThread-: tThread; 
	Trash-: tThread; 
	objcount-: SIGNED32; 
	objecthandle*: Objects.Handler; 
	framehandle*: Objects.Handler; 
	w*: TextsWriter; 
	werr*: TextsWriter; 
	Log*: Text; 
	slow*: SIGNED16; 
	lastmsg-: Objects.ObjMsg; 
	ProcToCall: ProcQPtr; 
	countTask: Oberon.Task; 
	ticks-: SIGNED32; 
	showParameter*: vyLinks.Link; 
	parameterCount*: SIGNED16; 
	recurse: BOOLEAN; 
	Register*: PROCEDURE (ob: Object); 
	DeRegister*: PROCEDURE (ob: Object); 

	PROCEDURE ^ AppendToLog*(VAR w: TextsWriter); 
	PROCEDURE ^ NextIdCount(): SIGNED32; 
	PROCEDURE ^ DoHandle*(o: vyLinks.Link; VAR m: Objects.ObjMsg); 
	PROCEDURE ^ DumpItem*(item: vyLinks.Link); 
	PROCEDURE ^ Write*(VAR w: TextsWriter; ob: Object); 
	PROCEDURE ^ DebugDump*(VAR w: TextsWriter; ob: Object); 
	PROCEDURE ^ Purge*(ob: Object); 
	PROCEDURE ^ Update*(ob: Objects.Object); 
	PROCEDURE ^ ForUsersHandle*(ob: Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ GetKey*(ob: Object): tKey; 
	PROCEDURE ^ SetKey*(ob: Object; key: tKey); 
	PROCEDURE ^ register*(ob: Object); 
	PROCEDURE ^ GetLastInThread*(t: tThread): vyLinks.Link; 
	PROCEDURE ^ deRegister*(ob: Object); 
	PROCEDURE ^ Name*(ob: Object; VAR name: tName); 
	PROCEDURE ^ RegisterNamed*(ob: Object; name: tName); 
	PROCEDURE ^ EffObject(o: Objects.Object): Object; 
	PROCEDURE ^ RecursiveHandler(obj: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ Recursive*(parent, newchild: Objects.Object): BOOLEAN; 
	PROCEDURE ^ Subscribe*(o: Objects.Object; subscriber: Objects.Object); 
	PROCEDURE ^ UnSubscribe*(o, subscriber: Objects.Object); 
	PROCEDURE ^ StoreObject0*(ob: Object; VAR M: Objects.FileMsg); 
	PROCEDURE ^ LoadObject0*(ob: Object; VAR M: Objects.FileMsg); 
	PROCEDURE ^ CopyObject*(VAR M: Objects.CopyMsg; src, dest: Object); 
	PROCEDURE ^ SetCurrentThread*(thread: tThread); 
	PROCEDURE ^ GetCurrentThread*(): tThread; 
	PROCEDURE ^ Report*(VAR w: TextsWriter); 
	PROCEDURE ^ WriteVS*(VAR w: TextsWriter; name, vs: ARRAY OF CHAR); 
	PROCEDURE ^ Dump*; 
	PROCEDURE ^ GetUsers*(o: Object): vyLinks.Link; 
	PROCEDURE ^ GetSources*(o: Object): vyLinks.Link; 
	PROCEDURE ^ Test*; 
	PROCEDURE ^ DateTimeString(d, t: SIGNED32; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ HandleObjectAttributes(obj: Object; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ HandleObjectLinks(obj: Object; VAR M: Objects.LinkMsg); 
	PROCEDURE ^ HandleObjectFind(obj: Object; VAR M: Objects.FindMsg); 
	PROCEDURE ^ ObjectHandler*(obj: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitObj(obj: Object); 
	PROCEDURE ^ NewObj*; 
	PROCEDURE ^ HandleFrameAttributes(obj: Frame; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ HandleFrameFileMsg(obj: Frame; VAR M: Objects.FileMsg); 
	PROCEDURE ^ CopyFrame*(VAR M: Objects.CopyMsg; src, dest: Frame); 
	PROCEDURE ^ FrameHandler*(obj: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ FrameObjHandler*(obj: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitFrameObj(obj: FrameObject); 
	PROCEDURE ^ NewFrameObj*; 
	PROCEDURE ^ NewFrame*; 
	PROCEDURE ^ DebugObjectHandler*(o: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ HandleDataAttributes(obj: Object; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ DataHandler*(obj: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitData(obj: Object); 
	PROCEDURE ^ NewData*; 
	PROCEDURE ^ HandleVectorAttributes(obj: tVector; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ VectorHandler*(obj: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitVector(obj: Object); 
	PROCEDURE ^ NewVec*; 
	PROCEDURE ^ FindAllocLen*(v: tVector; VAR l, freetrail: SIGNED32; VAR firstfree: tBuf); 
	PROCEDURE ^ MarkUsed*(count: SIGNED32; v: tVector); 
	PROCEDURE ^ Loc*(i: SIGNED32; v: tVector; VAR chunk: tBuf; VAR loc: SIGNED32); 
	PROCEDURE ^ Pos*(v: tVector; chunk: tBuf; loc: SIGNED32): SIGNED32; 
	PROCEDURE ^ Len*(v: tData; dim: SIGNED16): SIGNED32; 
	PROCEDURE ^ CloneLayout*(model: tData): tLayout; 
	PROCEDURE ^ VecIndex*(VAR lens, indices: ARRAY OF Index): Index; 
	PROCEDURE ^ VecIndexT*(VAR lens, indices: ARRAY OF Index): Index; 
	PROCEDURE ^ VecIndex2*(len0, len1, index0, index1: Index): Index; 
	PROCEDURE ^ VecIndex2T*(len0, len1, index0, index1: Index): Index; 
	PROCEDURE ^ GC*(count: SIGNED32; v: tData; pos: SIGNED32); 
	PROCEDURE ^ FlushCaches*(data: tData); 
	PROCEDURE ^ DoToAllChunks*(src: tData; action: PROCEDURE (VAR buf: tBuf)); 
	PROCEDURE ^ Piece*(VAR count: SIGNED32; src: tVector; srcpos: SIGNED32; dest: tVector; destpos: SIGNED32; VAR piececount: SIGNED32; VAR srcchunk: tBuf; VAR srcloc: SIGNED32; VAR destchunk: tBuf; VAR destloc: SIGNED32); 
	PROCEDURE ^ DoToAllPieces*(src, dest: tData; action: PROCEDURE (VAR piececount: SIGNED32; VAR srcchunk: tBuf; VAR srcloc: SIGNED32; VAR destchunk: tBuf; VAR destloc: SIGNED32)); 
	PROCEDURE ^ ApndChunks*(chunk: tBuf; o: tVector); 
	PROCEDURE ^ SortBufferList*(VAR chunk: tBuf; ordered: tSBLProc); 
	PROCEDURE ^ HandletOp1*(VAR arg: tData; t: tOp1); 
	PROCEDURE ^ HandletOp2*(VAR arg1, arg2: tData; t: tOp1); 
	PROCEDURE ^ HandletOp3*(VAR arg1, arg2, arg3: tData; t: tOp1); 
	PROCEDURE ^ GenericCatBuf*(ch: tBuf; len: SIGNED32; VAR size: SIGNED32; VAR first, last: tBuf); 
	PROCEDURE ^ NextBuf*(c: tBuf): tBuf; 
	PROCEDURE ^ GetUsedEntries*(c: tBuf): SIGNED32; 
	PROCEDURE ^ MatrixLayout*(rows, columns: SIGNED32): tArray; 
	PROCEDURE ^ SetArrayLayout*(sizes: ARRAY OF SIGNED32; v: tVector; VAR total: SIGNED32); 
	PROCEDURE ^ Clear*(v: tData); 
	PROCEDURE ^ HexToStr(pre: ARRAY OF CHAR; i: SIGNED32; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ StringSize(s: ARRAY OF CHAR; VAR w, h: SIGNED16); 
	PROCEDURE ^ ButtonHandler*(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitButton(F: Objects.Object); 
	PROCEDURE ^ NewButton*; 
	PROCEDURE ^ Slow*; 
	PROCEDURE ^ ActionReset*; 
	PROCEDURE ^ Stop*; 
	PROCEDURE ^ Step*; 
	PROCEDURE ^ ActionRegister*(p: TickProc; delta: SIGNED32); 
	PROCEDURE ^ ActionDeRegister*(p: TickProc); 
	PROCEDURE ^ Tick(me: Oberon.Task); 
	PROCEDURE ^ NewCountTask(VAR T: Oberon.Task); 
	PROCEDURE ^ Run*; 
	PROCEDURE ^ AppendAction*(newaction, prevaction: tAction); 
	PROCEDURE ^ DoAction*(action: tAction); 
	PROCEDURE ^ TerminateAction*(action: tAction); 
	PROCEDURE ^ Suspend*(action: tAction); 
	PROCEDURE ^ Resume*(action: tAction); 
	PROCEDURE ^ DoRunAction(action: Oberon.Task); 
	PROCEDURE ^ RunAction*(action: tAction; requcount: SIGNED32; delay: SIGNED32; termination: tAction); 
	PROCEDURE ^ COPYB*(VAR src: ARRAY OF BOOLEAN; srcoffs, len: SIGNED32; VAR dest: ARRAY OF BOOLEAN; destoffs: SIGNED32); 
	PROCEDURE ^ COPYCHAR*(VAR src: ARRAY OF CHAR; srcoffs, len: SIGNED32; VAR dest: ARRAY OF CHAR; destoffs: SIGNED32); 
	PROCEDURE ^ COPYSHORT*(VAR src: ARRAY OF SIGNED8; srcoffs, len: SIGNED32; VAR dest: ARRAY OF SIGNED8; destoffs: SIGNED32); 
	PROCEDURE ^ COPYI*(VAR src: ARRAY OF SIGNED16; srcoffs, len: SIGNED32; VAR dest: ARRAY OF SIGNED16; destoffs: SIGNED32); 
	PROCEDURE ^ COPYL*(VAR src: ARRAY OF SIGNED32; srcoffs, len: SIGNED32; VAR dest: ARRAY OF SIGNED32; destoffs: SIGNED32); 
	PROCEDURE ^ COPYR*(VAR src: ARRAY OF FLOAT32; srcoffs, len: SIGNED32; VAR dest: ARRAY OF FLOAT32; destoffs: SIGNED32); 
	PROCEDURE ^ COPYX*(VAR src: ARRAY OF FLOAT64; srcoffs, len: SIGNED32; VAR dest: ARRAY OF FLOAT64; destoffs: SIGNED32); 
	PROCEDURE ^ COPYSET*(VAR src: ARRAY OF SET; srcoffs, len: SIGNED32; VAR dest: ARRAY OF SET; destoffs: SIGNED32); 
	PROCEDURE ^ CallWString*(caller, name, pars: ARRAY OF CHAR; new: BOOLEAN; VAR res: SIGNED16); 
	PROCEDURE ^ GetVFromObj*(obj: Objects.Object): tVector; 
	PROCEDURE ^ Show*(list: vyLinks.Link; obCount: SIGNED16; as: ARRAY OF CHAR); 
	PROCEDURE ^ NextParObj*(): Objects.Object; 
BEGIN
END vyBase.
