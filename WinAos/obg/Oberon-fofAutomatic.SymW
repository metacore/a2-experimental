MODULE fofAutomatic IN Oberon;
	IMPORT Texts, Oberon, antsCommands, Input, TextFrames, Display, Gadgets, Objects, Out, antsSecurity, aM := antsMessages;
CONST 
TYPE 
	Loop = OBJECT 
	VAR 
		startpos: SIGNED32; 
		total: SIGNED32; 
		current: SIGNED32; 
		loop: Loop; 

		PROCEDURE ^  & Init(pos: SIGNED32); 
	END Loop; 

	Task = POINTER TO TaskDesc; 

	TaskDesc = RECORD (Oberon.TaskDesc)
		executorObj: Objects.Object; 
		context: Objects.Object; 
		curnum, num: SIGNED32; 
		interactive: BOOLEAN; 
		text: Texts.Text; 
		pos: SIGNED32; 
		curtext: Texts.Text; 
		curpos: SIGNED32; 
		checktime: SIGNED32; 
		contextFrame: Display.Frame; 
		mynext: Task; 
	END; 
VAR 
	diag: BOOLEAN; 
	mintime, maxtime, minchecktime: SIGNED32; 
	tempX: SIGNED16; 
	lastcontext: Objects.Object; 
	found: BOOLEAN; 
	tasks: Task; 
	current*, stopped*, demon*: Oberon.Task; 
	locked*: BOOLEAN; 

	PROCEDURE ^ NextLine(text: Texts.Text; pos: SIGNED32): SIGNED32; 
	PROCEDURE ^ NextCommand(VAR text: Texts.Text; VAR pos: SIGNED32; execute: BOOLEAN; VAR bt: SIGNED32); 
	PROCEDURE ^ OneTimeSlice(t: Oberon.Task): BOOLEAN; 
	PROCEDURE ^ TempHandle(obj: Objects.Object; VAR msg: Objects.ObjMsg); 
	PROCEDURE ^ CheckOnDisplay(t: Task): BOOLEAN; 
	PROCEDURE ^ DoTask(t: Oberon.Task); 
	PROCEDURE ^ Search(c: Objects.Object): Task; 
	PROCEDURE ^ Remove(t: Task); 
	PROCEDURE ^ Install(t: Task); 
	PROCEDURE ^ TCopy(t: Texts.Text; from, to: SIGNED32): Texts.Text; 
	PROCEDURE ^ Do*; 
	PROCEDURE ^ Schedule*; 
	PROCEDURE ^ Pause*; 
	PROCEDURE ^ DiagOn*; 
	PROCEDURE ^ DiagOff*; 
	PROCEDURE ^ Stop*; 
	PROCEDURE ^ StopAll*; 
	PROCEDURE ^ Lock*; 
	PROCEDURE ^ Unlock*; 
BEGIN
END fofAutomatic.
