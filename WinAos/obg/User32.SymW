MODULE User32;
	IMPORT SYSTEM, Kernel32;
CONST 
	WMCreate* = 1; 
	WMDestroy* = 2; 
	WMMove* = 3; 
	WMSize* = 5; 
	WMActivate* = 6; 
	WMSetFocus* = 7; 
	WMKillFocus* = 8; 
	WMPaint* = 15; 
	WMClose* = 16; 
	WMQuit* = 18; 
	WMSetCursor* = 32; 
	WMMouseActivate* = 33; 
	WMGetMinMaxInfo* = 36; 
	WMWindowPosChanging* = 70; 
	WMGetIcon* = 127; 
	WMSetIcon* = 128; 
	WMNCHitTest* = 132; 
	WMKeyFirst* = 256; 
	WMKeyDown* = 256; 
	WMKeyUp* = 257; 
	WMChar* = 258; 
	WMDeadChar* = 259; 
	WMSysKeyDown* = 260; 
	WMSysKeyUp* = 261; 
	WMSysChar* = 262; 
	WMSysDeadChar* = 263; 
	WMKeyLast* = 264; 
	WMCommand* = 273; 
	WMMouseFirst* = 512; 
	WMMouseMove* = 512; 
	WMMouseLast* = 525; 
	WMLButtonDown* = 513; 
	WMLButtonUp* = 514; 
	WMRButtonDown* = 516; 
	WMRButtonUp* = 517; 
	WMMButtonDown* = 519; 
	WMMButtonUp* = 520; 
	WMMouseWheel* = 522; 
	WMXButtonDown* = 523; 
	WMXButtonUp* = 524; 
	WMDropFiles* = 563; 
	WMCut* = 768; 
	WMCopy* = 769; 
	WMPaste* = 302; 
	WMClear* = 771; 
	WMUndo* = 772; 
	WMUser* = 1024; 
	CSVRedraw* = 0; 
	CSHRedraw* = 1; 
	CSOwnDC* = 5; 
	CSSaveBits* = 11; 
	CSGlobalClass* = 14; 
	WSMaximizeBox* = 16; 
	WSMinimizeBox* = 17; 
	WSThickFrame* = 18; 
	WSSysMenu* = 19; 
	WSBorder* = 23; 
	WSMaximize* = 24; 
	WSVisible* = 28; 
	WSMinimize* = 29; 
	WSChild* = 30; 
	CWUseDefault* = LONGINT(80000000H); 
	SizeRestored* = 0; 
	SizeMinimized* = 1; 
	SizeMaximized* = 2; 
	SizeMaxshow* = 3; 
	SizeMaxhide* = 4; 
	WAInactive* = 0; 
	WAActive* = 1; 
	WAClickActive* = 2; 
	MAActivate* = 1; 
	MANoActivate* = 3; 
	SMCXScreen* = 0; 
	SMCYScreen* = 1; 
	SMCYCaption* = 4; 
	SMCXDlgFrame* = 7; 
	SMCYDlgFrame* = 8; 
	SMCXFixedFrame* = SMCXDlgFrame; 
	SMCYFixedFrame* = SMCYDlgFrame; 
	SMCYMenu* = 15; 
	SMCXFrame* = 32; 
	SMCYFrame* = 33; 
	SMCMouseButtons* = 43; 
	HWNDDesktop* = 0; 
	HWNDBroadcast* = 65535; 
	VKCancel* = 3; 
	VKBack* = 8; 
	VKTab* = 9; 
	VKClear* = 12; 
	VKReturn* = 13; 
	VKShift* = 16; 
	VKControl* = 17; 
	VKMenu* = 18; 
	VKPause* = 19; 
	VKCapital* = 20; 
	VKEscape* = 27; 
	VKPrior* = 33; 
	VKNext* = 34; 
	VKEnd* = 35; 
	VKHome* = 36; 
	VKLeft* = 37; 
	VKUp* = 38; 
	VKRight* = 39; 
	VKDown* = 40; 
	VKSelect* = 41; 
	VKPrint* = 42; 
	VKExecute* = 43; 
	VKSnapshot* = 44; 
	VKInsert* = 45; 
	VKDelete* = 46; 
	VKHelp* = 47; 
	VKLWin* = 91; 
	VKRWin* = 92; 
	VKApps* = 93; 
	VKF1* = 112; 
	VKF2* = 113; 
	VKF3* = 114; 
	VKF4* = 115; 
	VKF5* = 116; 
	VKF6* = 117; 
	VKF7* = 118; 
	VKF8* = 119; 
	VKF9* = 120; 
	VKF10* = 121; 
	VKF11* = 122; 
	VKF12* = 123; 
	MKLButton* = 0; 
	MKRButton* = 1; 
	MKShift* = 2; 
	MKControl* = 3; 
	MKMButton* = 4; 
	IDCArrow* = 32512; 
	IDCWait* = 32514; 
	HTClient* = 1; 
	SWHide* = 0; 
	SWShow* = 5; 
	SWNormal* = 1; 
	SWShowNormal* = 1; 
	SWMinimize* = 6; 
	SWShowMinimized* = 2; 
	SWMaximize* = 3; 
	SWShowMaximized* = 3; 
	SWRestore* = 9; 
	SWShowDefault* = 10; 
	SWPNoSize* = 0; 
	SWPNoMove* = 1; 
	SWPNoZOrder* = 2; 
	SWPNoRedraw* = 3; 
	SWPNoActivate* = 4; 
	SWPFrameChanged* = 5; 
	SWPShowWindow* = 6; 
	SWPHideWindow* = 7; 
	CFText* = 1; 
	CFBitmap* = 2; 
	CFMetafilePict* = 3; 
	CFDIB* = 8; 
	CFEnhMetafile* = 14; 
	CFHDrop* = 15; 
	MFByCommand* = {}; 
	MFByPosition* = 10; 
	MFPopup* = 4; 
	MFSeparator* = 11; 
	MFEnabled* = {}; 
	MFGrayed* = 0; 
	MFDisabled* = 1; 
	MFUnchecked* = {}; 
	MFChecked* = 3; 
	MFString* = {}; 
	MIIMID* = 1; 
	MIIMType* = 4; 
	IconSmall* = 0; 
	IconBig* = 1; 
	GWLWndProc* =  -4; 
	GWLStyle* =  -16; 
	GWLExStyle* =  -20; 
	MBOk* = {}; 
	MBOkCancel* = {0}; 
	MBAbortRetryIgnore* = {1}; 
	MBYesNoCancel* = {0, 1}; 
	MBYesNo* = {2}; 
	MBRetryCancel* = {0, 2}; 
	MBIconHand* = {4}; 
	MBIconQuestion* = {5}; 
	MBIconExclamation* = {4, 5}; 
	MBIconAsterisk* = {6}; 
	MBIconWarning* = MBIconExclamation; 
	MBIconError* = MBIconHand; 
	MBIconInformation* = MBIconAsterisk; 
	MBIconStop* = MBIconHand; 
	TPMLeftButton* = {}; 
	TPMRightButton* = 1; 
	TPMLeftAlign* = {}; 
	TPMCenterAlign* = 2; 
	TPMRightAlign* = 3; 
	TPMTopAlign* = {}; 
	TPMVCenterAlign* = 4; 
	TPMBottomAlign* = 5; 
	TPMHorizontal* = {}; 
	TPMVertical* = 6; 
	TPMNoNotify* = 7; 
	TPMReturnCmd* = 8; 
	WHKeyboard* = 2; 
	ColorWindow* = 5; 
	ColorWindowText* = 8; 
	ColorBtnFace* = 15; 
	ColorBtnShadow* = 16; 
	Color3DLight* = 22; 
	Color3DFace* = ColorBtnFace; 
	Color3DShadow* = ColorBtnShadow; 
TYPE 
	HWND* = Kernel32.HANDLE; 

	HDC* = Kernel32.HANDLE; 

	HGDIObj* = Kernel32.HANDLE; 

	HFont* = HGDIObj; 

	HBrush* = HGDIObj; 

	HRgn* = HGDIObj; 

	HBitmap* = HGDIObj; 

	HIcon* = Kernel32.HANDLE; 

	HCursor* = Kernel32.HANDLE; 

	HMenu* = Kernel32.HANDLE; 

	HPalette* = Kernel32.HANDLE; 

	HAccel* = Kernel32.HANDLE; 

	HHook* = Kernel32.HANDLE; 

	ColorRef* = LONGINT; 

	Point* = RECORD 
		x*, y*: LONGINT; 
	END; 

	PointL* = Point; 

	PointF* = RECORD 
		x*, y*: REAL; 
	END; 

	Rect* = RECORD 
		left*, top*, right*, bottom*: LONGINT; 
	END; 

	RectL* = Rect; 

	Size* = RECORD 
		cx*, cy*: LONGINT; 
	END; 

	SizeL* = Size; 

	MinMaxInfo* = RECORD 
		ptReserved*, ptMaxSize*, ptMaxPosition*, ptMinTrackSize*, ptMaxTrackSize*: Point; 
	END; 

	Msg* = RECORD 
		hwnd*: HWND; 
		message*: LONGINT; 
		wParam*, lParam*: LONGINT; 
		time*: LONGINT; 
		point*: Point; 
	END; 

	WParam* = LONGINT; 

	LParam* = LONGINT; 

	LResult* = LONGINT; 

	WndProc* = PROCEDURE {WINAPI}(hwnd: HWND; uMsg: LONGINT; wParam: WParam; lParam: LParam):LResult; 

	WndClassEx* = RECORD 
		cbSize*: LONGINT; 
		style*: SET; 
		lpfnWndProc*: WndProc; 
		cbClsExtra*, cbWndExtra*: LONGINT; 
		hInstance*: Kernel32.HINSTANCE; 
		hIcon*: HIcon; 
		hCursor*: HCursor; 
		hbrBackground*: HBrush; 
		lpszMenuName*, lpszClassName*: Kernel32.LPSTR; 
		hIconSm*: HIcon; 
	END; 

	WndEnumProc* = PROCEDURE {WINAPI}(hwnd: HWND; lParam: LParam):Kernel32.BOOL; 

	WindowPos* = RECORD 
		hwnd*, hwndInsertAfter*: HWND; 
		x*, y*, cx*, cy*: LONGINT; 
		flags*: SET; 
	END; 

	WindowPlacement* = RECORD 
		length*: LONGINT; 
		flags*: SET; 
		showCmd*: LONGINT; 
		ptMinPosition*, ptMaxPosition*: Point; 
		rcNormalPosition*: Rect; 
	END; 

	MenuItemInfo* = RECORD 
		cbSize*: LONGINT; 
		fMask*, fType*, fState*: SET; 
		wID*: LONGINT; 
		hSubMenu*: HMenu; 
		hbmpChecked*, hbmpUnchecked*: HBitmap; 
		dwItemData*: LONGINT; 
		dwTypeData*: Kernel32.LPSTR; 
		cch*: LONGINT; 
	END; 

	Accel* = RECORD 
		fVirt*: CHAR; 
		key*, cmd*: INTEGER; 
	END; 

	HookProc* = PROCEDURE {WINAPI}(code: LONGINT; wParam: WParam; lParam: LParam):LResult; 

	PaintStruct* = RECORD 
		hdc*: HDC; 
		fErase*: Kernel32.BOOL; 
		rcPaint*: Rect; 
		fRestore, fIncUpdate: Kernel32.BOOL; 
		rgbReserved: ARRAY 32 OF CHAR; 
	END; 
VAR 
	BeginPaint-: PROCEDURE {WINAPI}(hWnd: HWND; VAR lpPaint: PaintStruct):HDC; 
	BringWindowToTop-: PROCEDURE {WINAPI}(hWnd: HWND):Kernel32.BOOL; 
	CallNextHookEx-: PROCEDURE {WINAPI}(hhk: HHook; nCode: LONGINT; wParam: WParam; lParam: LParam):LResult; 
	CloseClipboard-: PROCEDURE {WINAPI}():Kernel32.BOOL; 
	CreateAcceleratorTable-: PROCEDURE {WINAPI}(lpaccl: ADDRESS; cEntries: LONGINT):HAccel; 
	CreateMenu-: PROCEDURE {WINAPI}():HMenu; 
	CreateWindowEx-: PROCEDURE {WINAPI}(dwExStyle: LONGINT; VAR lpClassName, lpWindowName: ARRAY OF CHAR; dwStyle: SET; x, y, nWidth, nHeight: LONGINT; hWndParent: HWND; hMenu: HMenu; hInstance: Kernel32.HINSTANCE; lpParam: LONGINT):HWND; 
	DefWindowProc-: WndProc; 
	DestroyAcceleratorTable-: PROCEDURE {WINAPI}(hAccel: HAccel):Kernel32.BOOL; 
	DestroyCursor-: PROCEDURE {WINAPI}(hCursor: HCursor):Kernel32.BOOL; 
	DestroyIcon-: PROCEDURE {WINAPI}(hIcon: HIcon):Kernel32.BOOL; 
	DestroyMenu-: PROCEDURE {WINAPI}(hMenu: HMenu):Kernel32.BOOL; 
	DestroyWindow-: PROCEDURE {WINAPI}(hWnd: HWND):Kernel32.BOOL; 
	DispatchMessage-: PROCEDURE {WINAPI}(VAR lpMsg: Msg):LONGINT; 
	DrawMenuBar-: PROCEDURE {WINAPI}(hWnd: HWND):Kernel32.BOOL; 
	EmptyClipboard-: PROCEDURE {WINAPI}():Kernel32.BOOL; 
	EnableWindow-: PROCEDURE {WINAPI}(hWnd: HWND; bEnable: Kernel32.BOOL):Kernel32.BOOL; 
	EndPaint-: PROCEDURE {WINAPI}(hWnd: HWND; VAR lpPaint: PaintStruct):Kernel32.BOOL; 
	EnumWindows-: PROCEDURE {WINAPI}(lpEnumProc: WndEnumProc; lParam: LParam):Kernel32.BOOL; 
	EqualRect-: PROCEDURE {WINAPI}(lprc1, lprc2: Rect):Kernel32.BOOL; 
	GetAsyncKeyState-: PROCEDURE {WINAPI}(vKey: LONGINT):INTEGER; 
	GetClientRect-: PROCEDURE {WINAPI}(hWnd: HWND; VAR lpRect: Rect):Kernel32.BOOL; 
	GetClipboardData-: PROCEDURE {WINAPI}(uFormat: LONGINT):Kernel32.HANDLE; 
	GetClipboardFormatName-: PROCEDURE {WINAPI}(format: LONGINT; VAR lpszFormatName: ARRAY OF CHAR; cchMaxCount: LONGINT):LONGINT; 
	GetCursorPos-: PROCEDURE {WINAPI}(VAR lpPoint: Point):Kernel32.BOOL; 
	GetDC-: PROCEDURE {WINAPI}(hWnd: HWND):HDC; 
	GetFocus-: PROCEDURE {WINAPI}():HWND; 
	GetForegroundWindow-: PROCEDURE {WINAPI}():HWND; 
	GetKeyState-: PROCEDURE {WINAPI}(vKey: LONGINT):INTEGER; 
	GetMenu-: PROCEDURE {WINAPI}(hWnd: HWND):HMenu; 
	GetMenuItemInfo-: PROCEDURE {WINAPI}(hMenu: HMenu; uItem: LONGINT; fyByPosition: Kernel32.BOOL; VAR lpmii: MenuItemInfo):Kernel32.BOOL; 
	GetMenuString-: PROCEDURE {WINAPI}(hMenu: HMenu; uIDItem: LONGINT; VAR lpString: ARRAY OF CHAR; nMaxCount: LONGINT; uFlag: SET):Kernel32.BOOL; 
	GetMessage-: PROCEDURE {WINAPI}(VAR lpMsg: Msg; hWnd: HWND; wMsgFilterMin, wMsgFilterMax: LONGINT):LONGINT; 
	GetParent-: PROCEDURE {WINAPI}(hWnd: HWND):HWND; 
	GetProp-: PROCEDURE {WINAPI}(hWnd: HWND; lpString: LONGINT):LONGINT; 
	GetSysColor-: PROCEDURE {WINAPI}(nIndex: LONGINT):ColorRef; 
	GetSystemMetrics-: PROCEDURE {WINAPI}(nIndex: LONGINT):LONGINT; 
	GetWindowLong-: PROCEDURE {WINAPI}(hWnd: HWND; nIndex: LONGINT):LONGINT; 
	GetWindowPlacement-: PROCEDURE {WINAPI}(hWnd: HWND; VAR lpwndpl: WindowPlacement):Kernel32.BOOL; 
	GetWindowRect-: PROCEDURE {WINAPI}(hWnd: HWND; VAR lpRect: Rect):Kernel32.BOOL; 
	GetWindowRgn-: PROCEDURE {WINAPI}(hWnd: HWND; VAR hRgn: HRgn):LONGINT; 
	GetWindowText-: PROCEDURE {WINAPI}(hWnd: HWND; VAR lpString: ARRAY OF CHAR; nMaxCount: LONGINT):LONGINT; 
	GetUpdateRect-: PROCEDURE {WINAPI}(hWnd: HWND; VAR lpRect: Rect; bErase: Kernel32.BOOL):Kernel32.BOOL; 
	GetUpdateRgn-: PROCEDURE {WINAPI}(hWnd: HWND; VAR hRgn: HRgn; bErase: Kernel32.BOOL):LONGINT; 
	InsertMenu-: PROCEDURE {WINAPI}(hMenu: HMenu; uPosition: LONGINT; uFlags: SET; uIDNewItem: LONGINT; VAR lpNewItem: ARRAY OF CHAR):Kernel32.BOOL; 
	IntersectRect-: PROCEDURE {WINAPI}(VAR lprcDst: Rect; lprcSrc1, lprcSrc2: Rect):Kernel32.BOOL; 
	InvalidateRect-: PROCEDURE {WINAPI}(hWnd: HWND; lpRect: Rect; bErase: Kernel32.BOOL):Kernel32.BOOL; 
	IsChild-: PROCEDURE {WINAPI}(hWndParent, hWnd: HWND):Kernel32.BOOL; 
	LoadCursor-: PROCEDURE {WINAPI}(hInstance: Kernel32.HINSTANCE; VAR lpCursorName: ARRAY OF CHAR):HCursor; 
	LoadCursorFromFile-: PROCEDURE {WINAPI}(VAR lpFileName: ARRAY OF CHAR):HCursor; 
	LoadIcon-: PROCEDURE {WINAPI}(hInstance: Kernel32.HINSTANCE; VAR lpIconName: ARRAY OF CHAR):HIcon; 
	MessageBeep-: PROCEDURE {WINAPI}(uType: LONGINT):Kernel32.BOOL; 
	MessageBox-: PROCEDURE {WINAPI}(hWnd: HWND; VAR lpText, lpCaption: ARRAY OF CHAR; uType: SET):LONGINT; 
	MoveWindow-: PROCEDURE {WINAPI}(hWnd: HWND; X, Y, nWidth, nHeight: LONGINT; bRepaint: Kernel32.BOOL):Kernel32.BOOL; 
	OffsetRect-: PROCEDURE {WINAPI}(VAR lprc: Rect; dx, dy: LONGINT):Kernel32.BOOL; 
	OpenClipboard-: PROCEDURE {WINAPI}(hWndNewOwner: HWND):Kernel32.BOOL; 
	PtInRect-: PROCEDURE {WINAPI}(lprc: Rect; ptx, pty: LONGINT):Kernel32.BOOL; 
	PostMessage-: PROCEDURE {WINAPI}(hWnd: HWND; Msg: LONGINT; wParam: WParam; lParam: LParam):Kernel32.BOOL; 
	PostQuitMessage-: PROCEDURE {WINAPI}(nExitCode: LONGINT); 
	RegisterClassEx-: PROCEDURE {WINAPI}(VAR lpwcx: WndClassEx):Kernel32.ATOM; 
	RegisterHotKey-: PROCEDURE {WINAPI}(hWnd: HWND; id: LONGINT; fsmodifiers, vk: LONGINT):Kernel32.BOOL; 
	RegisterClipboardFormat-: PROCEDURE {WINAPI}(VAR lpszFormat: ARRAY OF CHAR):INTEGER; 
	RegisterWindowMessage-: PROCEDURE {WINAPI}(VAR lpString: ARRAY OF CHAR):LONGINT; 
	ReleaseCapture-: PROCEDURE {WINAPI}():Kernel32.BOOL; 
	ReleaseDC-: PROCEDURE {WINAPI}(hWnd: HWND; hDC: HDC):LONGINT; 
	RemoveProp-: PROCEDURE {WINAPI}(hWnd: HWND; lpString: LONGINT):LONGINT; 
	ScreenToClient-: PROCEDURE {WINAPI}(hWnd: HWND; VAR lpPoint: Point):Kernel32.BOOL; 
	SendMessage-: PROCEDURE {WINAPI}(hWnd: HWND; Msg: LONGINT; wParam: WParam; lParam: LParam):LResult; 
	SetCapture-: PROCEDURE {WINAPI}(hWnd: HWND):HWND; 
	SetClipboardData-: PROCEDURE {WINAPI}(uFormat: LONGINT; hMem: Kernel32.HANDLE):Kernel32.HANDLE; 
	SetCursor-: PROCEDURE {WINAPI}(hCursor: HCursor):HCursor; 
	SetCursorPos-: PROCEDURE {WINAPI}(X, Y: LONGINT):Kernel32.BOOL; 
	SetFocus-: PROCEDURE {WINAPI}(hWnd: HWND):HWND; 
	SetForegroundWindow-: PROCEDURE {WINAPI}(hWnd: HWND):Kernel32.BOOL; 
	SetMenu-: PROCEDURE {WINAPI}(hWnd: HWND; hMenu: HMenu):Kernel32.BOOL; 
	SetMenuItemInfo-: PROCEDURE {WINAPI}(hMenu: HMenu; uItem: LONGINT; fyByPosition: Kernel32.BOOL; VAR lpmii: MenuItemInfo):Kernel32.BOOL; 
	SetProp-: PROCEDURE {WINAPI}(hWnd: HWND; lpString, hData: LONGINT):Kernel32.BOOL; 
	SetWindowsHookEx-: PROCEDURE {WINAPI}(idHook: LONGINT; lpfn: HookProc; hMod: Kernel32.HINSTANCE; dwThreadId: LONGINT):HHook; 
	SetWindowLong-: PROCEDURE {WINAPI}(hWnd: HWND; nIndex, dwNewLong: LONGINT):LONGINT; 
	SetWindowPos-: PROCEDURE {WINAPI}(hWnd, hWndInsertAfter: HWND; X, Y, cx, cy: LONGINT; uFlags: SET):Kernel32.BOOL; 
	SetWindowRgn-: PROCEDURE {WINAPI}(hWnd: HWND; hRgn: HRgn; bRedraw: Kernel32.BOOL):LONGINT; 
	SetWindowText-: PROCEDURE {WINAPI}(hWnd: HWND; VAR lpString: ARRAY OF CHAR):Kernel32.BOOL; 
	ShowCursor-: PROCEDURE {WINAPI}(bShow: Kernel32.BOOL):LONGINT; 
	ShowWindow-: PROCEDURE {WINAPI}(hWnd: HWND; nCmdShow: LONGINT):Kernel32.BOOL; 
	ShowWindowAsync-: PROCEDURE {WINAPI}(hWnd: HWND; nCmdShow: LONGINT):Kernel32.BOOL; 
	TrackPopupMenu-: PROCEDURE {WINAPI}(hMenu: HMenu; uFlags: SET; x, y, nReserved: LONGINT; hWnd: HWND; VAR prcRect: Rect):Kernel32.BOOL; 
	TranslateAccelerator-: PROCEDURE {WINAPI}(hWnd: HWND; hAccTable: HAccel; VAR lpMsg: Msg):LONGINT; 
	TranslateMessage-: PROCEDURE {WINAPI}(VAR lpMsg: Msg):Kernel32.BOOL; 
	UnhookWindowsHookEx-: PROCEDURE {WINAPI}(hhk: HHook):Kernel32.BOOL; 
	UnregisterClass-: PROCEDURE {WINAPI}(VAR lpClassName: ARRAY OF CHAR; hInstance: Kernel32.HINSTANCE):Kernel32.BOOL; 
	UpdateWindow-: PROCEDURE {WINAPI}(hWnd: HWND):Kernel32.BOOL; 
	ValidateRect-: PROCEDURE {WINAPI}(hWnd: HWND; VAR lpRect: Rect):Kernel32.BOOL; 
	GetConsoleWindow-: PROCEDURE {WINAPI}():LONGINT; 

	PROCEDURE ^ EqualSize*(VAR a, b: Size): BOOLEAN; 
	PROCEDURE ^ Init; 
BEGIN
END User32.
