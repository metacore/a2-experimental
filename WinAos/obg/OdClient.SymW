MODULE OdClient;
	IMPORT TCP, Streams, IP, Files, DNS, WebHTTP, Modules, Kernel, XML, XMLObjects, OdAuthBase, OdXml, OdUtil, Strings, MultiLogger, Commands;
CONST 
	Ok* = 0; 
	ResCOULDNOTCONNECT* =  -1; 
	ResHOSTNOTFOUND* =  -2; 
	UserAgent = \"ObeDAV 0.15"\; 
	ShowDebugWindow = FALSE; 
	TlHeader = 1; 
	TlBody = 2; 
TYPE 
	Vcc* = OBJECT 
	VAR 
		state: ARRAY 16 OF CHAR; 
		client: OdClient; 
		xml: OdXml.OdXml; 

		PROCEDURE ^  & init*(c: OdClient); 
		PROCEDURE ^ SplitConfRes(CONST confRes: ARRAY OF CHAR; VAR conf, res: ARRAY OF CHAR); 
		PROCEDURE ^ VersionMembers(CONST remote: ARRAY OF CHAR; VAR all, unversioned, checkedin, checkedout: OdUtil.Lines); 
		PROCEDURE ^ Url(CONST remote, resName: ARRAY OF CHAR): OdUtil.Line; 
		PROCEDURE ^ ClientMembers(CONST dir: ARRAY OF CHAR): OdUtil.Lines; 
		PROCEDURE ^ ClientRes(CONST local: ARRAY OF CHAR): OdUtil.Lines; 
		PROCEDURE ^ AbsRes(CONST local, resName: ARRAY OF CHAR): OdUtil.Line; 
		PROCEDURE ^ put*(CONST remote, local: ARRAY OF CHAR); 
		PROCEDURE ^ get*(CONST remote, local: ARRAY OF CHAR); 
		PROCEDURE ^ checkin*(CONST remote, author, desc: ARRAY OF CHAR); 
		PROCEDURE ^ checkout*(CONST remote: ARRAY OF CHAR); 
		PROCEDURE ^ uncheckout*(CONST remote: ARRAY OF CHAR); 
	END Vcc; 

	Repos* = OBJECT 
	VAR 
		host*, path*: ARRAY 128 OF CHAR; 

		PROCEDURE ^  & Init*(CONST host, path: ARRAY OF CHAR); 
		PROCEDURE ^ expand*(VAR url: ARRAY OF CHAR); 
	END Repos; 

	OdClient* = OBJECT 
	VAR 
		repos*: Repos; 
		basicAuth: ARRAY 64 OF CHAR; 
		lw: MultiLogger.LogWindow; 
		l: Streams.Writer; 
		activity*: ARRAY 256 OF CHAR; 
		server*: ARRAY 32 OF CHAR; 
		reqLocation*: ARRAY 256 OF CHAR; 
		xmlInCount: SIGNED16; 
		xml*: OdXml.OdXml; 
		con: TCP.Connection; 
		reconnect: BOOLEAN; 
		actualHost: ARRAY 256 OF CHAR; 
		actualPort: SIGNED32; 

		PROCEDURE ^  & Init*(x: OdXml.OdXml); 
		PROCEDURE ^ ParseProps*(doc: XML.Document; VAR propList: WebHTTP.AdditionalField); 
		PROCEDURE ^ XmlResult*(VAR resHeader: WebHTTP.ResponseHeader; res: INTEGER; out: Streams.Reader): XML.Document; 
		PROCEDURE ^ SvnSetBasicAuth*(pwd: ARRAY OF CHAR); 
		PROCEDURE ^ SetBasicAuth*(context: Commands.Context); 
		PROCEDURE ^ SetTraceLevel*(context: Commands.Context); 
		PROCEDURE ^ SetServer*(context: Commands.Context); 
		PROCEDURE ^ SetReqLocation*(context: Commands.Context); 
		PROCEDURE ^ SetActivity*(context: Commands.Context); 
		PROCEDURE ^ GetRepos*(): Repos; 
		PROCEDURE ^ SvnSetRepos*(CONST url: ARRAY OF CHAR); 
		PROCEDURE ^ SetRepos*(context: Commands.Context); 
		PROCEDURE ^ OpenConnection(CONST url: ARRAY OF CHAR; VAR host, path: ARRAY OF CHAR; VAR port: SIGNED32; VAR res: INTEGER): BOOLEAN; 
		PROCEDURE ^ CloseConnection*; 
		PROCEDURE ^ Net(CONST url: ARRAY OF CHAR; VAR reqHeader: WebHTTP.RequestHeader; VAR resHeader: WebHTTP.ResponseHeader; xmlReq: XML.Document; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ ParseReply(out: Streams.Reader; VAR resHeader: WebHTTP.ResponseHeader; VAR res: INTEGER); 
		PROCEDURE ^ BaselineControlFreeze*(CONST url: ARRAY OF CHAR; VAR reqHeader: WebHTTP.RequestHeader; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ BaselineControlSelect*(CONST url, baseline: ARRAY OF CHAR; VAR reqHeader: WebHTTP.RequestHeader; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Head*(CONST url: ARRAY OF CHAR; VAR resHeader: WebHTTP.ResponseHeader; VAR res: INTEGER); 
		PROCEDURE ^ Get*(CONST url: ARRAY OF CHAR; VAR reqHeader: WebHTTP.RequestHeader; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Put*(CONST url: ARRAY OF CHAR; VAR reqHeader: WebHTTP.RequestHeader; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; in: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ VersionControlFreeze*(CONST url: ARRAY OF CHAR; VAR reqHeader: WebHTTP.RequestHeader; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ VersionControlSelect*(CONST url, ver: ARRAY OF CHAR; VAR reqHeader: WebHTTP.RequestHeader; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Checkout*(CONST url: ARRAY OF CHAR; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Merge*(CONST url, source: ARRAY OF CHAR; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Uncheckout*(CONST url: ARRAY OF CHAR; VAR reqHeader: WebHTTP.RequestHeader; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Report1*(CONST type: ARRAY OF CHAR; VAR reqHeader: WebHTTP.RequestHeader; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Report*(CONST url, depth: ARRAY OF CHAR; reqBody: XML.Document; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Propfind*(CONST url, depth: ARRAY OF CHAR; props: WebHTTP.AdditionalField; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Proppatch*(CONST url, mode: ARRAY OF CHAR; props: WebHTTP.AdditionalField; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Checkin*(CONST url: ARRAY OF CHAR; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Move*(CONST url, destUrl: ARRAY OF CHAR; overwrite: BOOLEAN; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Copy*(CONST url, destUrl: ARRAY OF CHAR; overwrite: BOOLEAN; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Delete*(CONST url: ARRAY OF CHAR; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Mkcol*(CONST url: ARRAY OF CHAR; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Mkactivity*(CONST url: ARRAY OF CHAR; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Options*(CONST url: ARRAY OF CHAR; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ Update*(CONST url, version: ARRAY OF CHAR; VAR reqHeader: WebHTTP.RequestHeader; VAR resHeader: WebHTTP.ResponseHeader; VAR out: Streams.Reader; VAR res: INTEGER); 
	END OdClient; 
VAR 
	log*: OdUtil.Log; 
	traceLevel*: SIGNED32; 

	PROCEDURE ^ ls(CONST prompt, string: ARRAY OF CHAR); 
	PROCEDURE ^ li(CONST prompt: ARRAY OF CHAR; i: SIGNED64); 
	PROCEDURE ^ SendData*(src: Streams.Reader; dst: Streams.Writer); 
	PROCEDURE ^ Terminate; 
	PROCEDURE ^ ShowMethodUrl*(method: SIGNED32; CONST url: ARRAY OF CHAR); 
	PROCEDURE ^ ShowStatus*(VAR res: WebHTTP.ResponseHeader); 
	PROCEDURE ^ StoreResult2File*(VAR resHeader: WebHTTP.ResponseHeader; res: INTEGER; out: Streams.Reader; CONST target: ARRAY OF CHAR; VAR f: Files.File); 
BEGIN
END OdClient.
