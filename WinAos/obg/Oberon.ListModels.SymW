MODULE ListModels IN Oberon;
	IMPORT Files, Objects, Gadgets, Strings, ListRiders;
CONST 
	VersionNo = 1; 
	NoKey = MIN(LONGINT); 
	sorted = 0; 
	unique = 1; 
	linear = 2; 
TYPE 
	Node = POINTER TO NodeDesc; 

	NodeDesc = RECORD 
		prev, next, dsc: Node; 
		key, stamp, state, pos: LONGINT; 
		d: ListRiders.Data; 
		s: ARRAY 256 OF CHAR; 
	END; 

	List* = POINTER TO ListDesc; 

	ListDesc* = RECORD (Gadgets.ObjDesc)
		tail: Node; 
		key: LONGINT; 
		state0: SET; 
	END; 

	Rider* = POINTER TO RiderDesc; 

	RiderDesc* = RECORD (ListRiders.RiderDesc)
		node: Node; 
	END; 
VAR 
	method*: ListRiders.Method; 

	PROCEDURE ^ GetKey(obj: List): LONGINT; 
	PROCEDURE ^ NewNode(val: ListRiders.Data; key: LONGINT): Node; 
	PROCEDURE ^ SetNode(R: Rider; n: Node); 
	PROCEDURE ^ DuplicateNode(list: List; n: Node): Node; 
	PROCEDURE ^ IsUnique(n: Node; val: ARRAY OF CHAR; acceptSelf: BOOLEAN): BOOLEAN; 
	PROCEDURE ^ Key(R: ListRiders.Rider): LONGINT; 
	PROCEDURE ^ Seek(R: ListRiders.Rider; key: LONGINT); 
	PROCEDURE ^ Pos(R: ListRiders.Rider): LONGINT; 
	PROCEDURE ^ Set(R: ListRiders.Rider; pos: LONGINT); 
	PROCEDURE ^ Write(R: ListRiders.Rider; d: ListRiders.Data); 
	PROCEDURE ^ WriteLink(R, linkR: ListRiders.Rider); 
	PROCEDURE ^ DeleteLink(R, linkR: ListRiders.Rider); 
	PROCEDURE ^ GetStamp(R: ListRiders.Rider): LONGINT; 
	PROCEDURE ^ SetStamp(R: ListRiders.Rider; stamp: LONGINT); 
	PROCEDURE ^ State(R: ListRiders.Rider): LONGINT; 
	PROCEDURE ^ SetState(R: ListRiders.Rider; s: LONGINT); 
	PROCEDURE ^ Desc(R, old: ListRiders.Rider): ListRiders.Rider; 
	PROCEDURE ^ ConnectRider(R: Rider; base: List); 
	PROCEDURE ^ Sort(VAR tail: Node); 
	PROCEDURE ^ Unify(tail: Node); 
	PROCEDURE ^ CopyList*(VAR M: Objects.CopyMsg; from, to: List); 
	PROCEDURE ^ WriteList(obj: List; VAR M: Objects.FileMsg); 
	PROCEDURE ^ ReadList(obj: List; VAR M: Objects.FileMsg); 
	PROCEDURE ^ ListAttr(obj: List; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ ListHandler*(obj: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitList*(obj: List; linearList: BOOLEAN); 
	PROCEDURE ^ NewList*; 
	PROCEDURE ^ NewTree*; 
BEGIN
END ListModels.
