MODULE vySet IN Oberon;
	IMPORT Files, vyBase;
CONST 
	idversion* = \" v0r0a2"\; 
	fmtany* = 0; 
	fmtend* = 0; 
	fmtplain* = 1; 
	fmtpacked* = 2; 

	PROCEDURE ^ Write*(VAR R: Files.Rider; count: SIGNED32; VAR x: ARRAY OF SET; start: SIGNED32); 
	PROCEDURE ^ Read*(VAR R: Files.Rider; count: SIGNED32; VAR x: ARRAY OF SET; start: SIGNED32); 
	PROCEDURE ^ WriteFmt*(prefform: SIGNED32; VAR R: Files.Rider; count: SIGNED32; VAR x: ARRAY OF SET; start: SIGNED32); 
	PROCEDURE ^ ReadFmt*(VAR form: SIGNED32; VAR R: Files.Rider; count: SIGNED32; VAR x: ARRAY OF SET; start: SIGNED32); 
	PROCEDURE ^ Fill*(len: SIGNED32; VAR x: ARRAY OF SET; start: SIGNED32; val: SET); 
	PROCEDURE ^ FillPat*(count: SIGNED32; VAR x: ARRAY OF SET; start, step: SIGNED32; val: SET); 
	PROCEDURE ^ Copy*(len: SIGNED32; VAR src: ARRAY OF SET; srcstart: SIGNED32; VAR dest: ARRAY OF SET; deststart: SIGNED32); 
	PROCEDURE ^ CopyPat*(count: SIGNED32; VAR src: ARRAY OF SET; start, step: SIGNED32; VAR dest: ARRAY OF SET; deststart, deststep: SIGNED32); 
	PROCEDURE ^ Count*(VAR x: ARRAY OF SET; len: SIGNED32): SIGNED32; 
	PROCEDURE ^ And*(VAR x, y: ARRAY OF SET; VAR z: ARRAY OF SET; len: SIGNED32); 
	PROCEDURE ^ Or*(VAR x, y: ARRAY OF SET; VAR z: ARRAY OF SET; len: SIGNED32); 
	PROCEDURE ^ XOr*(VAR x, y: ARRAY OF SET; VAR z: ARRAY OF SET; len: SIGNED32); 
	PROCEDURE ^ Not*(VAR x: ARRAY OF SET; VAR z: ARRAY OF SET; len: SIGNED32); 
	PROCEDURE ^ Get2d*(VAR x: ARRAY OF SET; rows, row, column: SIGNED32): SET; 
	PROCEDURE ^ Set2d*(VAR x: ARRAY OF SET; rows, row, column: SIGNED32; val: SET); 
	PROCEDURE ^ Get2dM*(VAR x: ARRAY OF SET; rowoffset, coloffset, nrrows, nrcolumns: SIGNED32; VAR dest: ARRAY OF ARRAY OF SET); 
	PROCEDURE ^ Set2dM*(VAR x: ARRAY OF SET; rowoffset, coloffset, nrrows, nrcolumns: SIGNED32; VAR src: ARRAY OF ARRAY OF SET); 
	PROCEDURE ^ Get2dF*(VAR x: ARRAY OF SET; columns, row, column: SIGNED32): SET; 
	PROCEDURE ^ Set2dF*(VAR x: ARRAY OF SET; columns, row, column: SIGNED32; val: SET); 
BEGIN
END vySet.
