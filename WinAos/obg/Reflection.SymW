MODULE Reflection;
	IMPORT Modules, Streams, Machine, Heaps, Objects, SYSTEM;
CONST 
	ShowAllProcs = TRUE; 
	MaxFrames = 128; 
	MaxString = 64; 
	MaxArray = 8; 
	MaxCols = 70; 
	Sep = \"  "\; 
	SepLen = 2; 
	LineDelay = 0; 
TYPE 
	Variable* = RECORD 
		adr-: ADDRESS; 
		type-, size-, n-, tdadr-: LONGINT; 
	END; 
VAR 
	modes: ARRAY 25 OF CHAR; 

	PROCEDURE ^ WriteVar*(w: Streams.Writer; v: Variable; VAR col: LONGINT); 
	PROCEDURE ^ CheckHeapAddress(address: ADDRESS): BOOLEAN; 
	PROCEDURE ^ GetNum(refs: Modules.Bytes; VAR i, num: LONGINT); 
	PROCEDURE ^ NextVar*(refs: Modules.Bytes; VAR refpos: LONGINT; base: ADDRESS; VAR name: ARRAY OF CHAR; VAR v: Variable); 
	PROCEDURE ^ FindVar*(mod: Modules.Module; CONST name: ARRAY OF CHAR; VAR v: Variable): BOOLEAN; 
	PROCEDURE ^ InitVar*(mod: Modules.Module; VAR refs: Modules.Bytes; VAR refpos: LONGINT; VAR base: ADDRESS); 
	PROCEDURE ^ NewObjectFile(refs: Modules.Bytes): BOOLEAN; 
	PROCEDURE ^ FindProc(refs: Modules.Bytes; modpc: ADDRESS; VAR startpc: ADDRESS): LONGINT; 
	PROCEDURE ^ FindProcByName*(mod: Modules.Module; CONST name: ARRAY OF CHAR; VAR from, to: ADDRESS): BOOLEAN; 
	PROCEDURE ^ Wait(w: Streams.Writer); 
	PROCEDURE ^ Variables(w: Streams.Writer; refs: Modules.Bytes; refpos: LONGINT; base: ADDRESS); 
	PROCEDURE ^ ModuleState*(w: Streams.Writer; mod: Modules.Module); 
	PROCEDURE ^ WriteProc0(w: Streams.Writer; mod: Modules.Module; pc, fp: ADDRESS; VAR refs: Modules.Bytes; VAR refpos: LONGINT; VAR base: ADDRESS); 
	PROCEDURE ^ WriteProc*(w: Streams.Writer; pc: ADDRESS); 
	PROCEDURE ^ GetProcedureName*(pc: ADDRESS; VAR name: ARRAY OF CHAR; VAR startpc: ADDRESS); 
	PROCEDURE ^ GetVariableAdr*(pc, fp: ADDRESS; CONST varname: ARRAY OF CHAR): ADDRESS; 
	PROCEDURE ^ ThisTypeByAdr(adr: ADDRESS; VAR m: Modules.Module; VAR t: Modules.TypeDesc); 
	PROCEDURE ^ WriteType*(w: Streams.Writer; adr: ADDRESS); 
	PROCEDURE ^ WriteSimpleVar(w: Streams.Writer; adr, type, tdadr: ADDRESS; VAR col: LONGINT); 
	PROCEDURE ^ StackTraceBack*(w: Streams.Writer; pc, bp: ADDRESS; stackhigh: ADDRESS; long, overflow: BOOLEAN); 
	PROCEDURE ^ WriteProcess*(w: Streams.Writer; p: Objects.Process); 
BEGIN
END Reflection.
