MODULE FoxFingerprinter;
	IMPORT SyntaxTree := FoxSyntaxTree, Basic := FoxBasic, SYSTEM, Global := FoxGlobal, Scanner := FoxScanner, D := Debugging, Streams;
CONST 
	fpModeVar = 1; 
	fpModePar = 1; 
	fpModeVarPar = 2; 
	fpModeConstPar = fpModeVarPar; 
	fpModeConst = 3; 
	fpModeField = 4; 
	fpModeType = 5; 
	fpModeExportedProcedure = 7; 
	fpModeInlineProcedure = 9; 
	fpModeMethod = 13; 
	fpTypeByte = 1; 
	fpTypeBoolean = 2; 
	fpTypeChar8 = 3; 
	fpTypeShortint = 4; 
	fpTypeInteger = 5; 
	fpTypeLongint = 6; 
	fpTypeReal = 7; 
	fpTypeLongreal = 8; 
	fpTypeSet = 9; 
	fpTypeString = 10; 
	fpTypeNone = 12; 
	fpTypePointer = 13; 
	fpTypeProcedure = 14; 
	fpTypeComposite = 15; 
	fpTypeHugeint = 16; 
	fpTypeChar16 = 17; 
	fpTypeChar32 = 18; 
	fpTypeAll = 19; 
	fpTypeSame = 20; 
	fpTypeRange = 21; 
	fpTypeEnum = 22; 
	fpTypePort = 23; 
	fpTypeChannel = 23; 
	fpTypeComplex = 24; 
	fpTypeLongcomplex = 25; 
	fpTypeModule = 26; 
	fpTypeSize = 27; 
	fpTypeAddress = 28; 
	fpTypeBasic = 1; 
	fpTypeStaticArray = 2; 
	fpTypeDynamicArray = 4; 
	fpTypeOpenArray = 5; 
	fpTypeRecord = 6; 
	fpIntern = 0; 
	fpExtern = 1; 
	fpExternR = 2; 
	fpOther = 3; 
	fpFalse = 0; 
	fpTrue = 1; 
	fpHasBody = 1; 
	fpProtected = 4; 
	fpActive = 5; 
	fpDelegate = 5; 
	fpSystemType = 6; 
	fpUntraced = 4; 
	Trace = FALSE; 
TYPE 
	Fingerprinter* = OBJECT (SyntaxTree.Visitor)
	VAR 
		fp-: Basic.Fingerprint; 
		fingerprint: SyntaxTree.Fingerprint; 
		deep: BOOLEAN; 
		traceLevel: SIGNED32; 
		level: SIGNED32; 

		PROCEDURE ^  & InitFingerprinter*; 
		PROCEDURE ^ VisitBasicType*(x: SyntaxTree.BasicType); 
		PROCEDURE ^ SetTypeFingerprint(x: SyntaxTree.Type; fp: Basic.Fingerprint); 
		PROCEDURE ^ VisitRangeType*(x: SyntaxTree.RangeType); 
		PROCEDURE ^ VisitBooleanType*(x: SyntaxTree.BooleanType); 
		PROCEDURE ^ VisitByteType*(x: SyntaxTree.ByteType); 
		PROCEDURE ^ VisitSetType*(x: SyntaxTree.SetType); 
		PROCEDURE ^ VisitNilType*(x: SyntaxTree.NilType); 
		PROCEDURE ^ VisitAnyType*(x: SyntaxTree.AnyType); 
		PROCEDURE ^ VisitAddressType*(x: SyntaxTree.AddressType); 
		PROCEDURE ^ VisitSizeType*(x: SyntaxTree.SizeType); 
		PROCEDURE ^ VisitObjectType*(x: SyntaxTree.ObjectType); 
		PROCEDURE ^ VisitCharacterType*(x: SyntaxTree.CharacterType); 
		PROCEDURE ^ VisitIntegerType*(x: SyntaxTree.IntegerType); 
		PROCEDURE ^ VisitFloatType*(x: SyntaxTree.FloatType); 
		PROCEDURE ^ VisitComplexType*(x: SyntaxTree.ComplexType); 
		PROCEDURE ^ VisitStringType*(x: SyntaxTree.StringType); 
		PROCEDURE ^ VisitEnumerationType*(x: SyntaxTree.EnumerationType); 
		PROCEDURE ^ VisitQualifiedType*(x: SyntaxTree.QualifiedType); 
		PROCEDURE ^ VisitArrayType*(x: SyntaxTree.ArrayType); 
		PROCEDURE ^ VisitMathArrayType*(x: SyntaxTree.MathArrayType); 
		PROCEDURE ^ TypeName(VAR fp: Basic.Fingerprint; x: SyntaxTree.Type); 
		PROCEDURE ^ VisitPointerType*(x: SyntaxTree.PointerType); 
		PROCEDURE ^ VisitPortType*(x: SyntaxTree.PortType); 
		PROCEDURE ^ FPrintMethod(VAR private, public: Basic.Fingerprint; procedure, body: SyntaxTree.Procedure); 
		PROCEDURE ^ VisitCellType*(x: SyntaxTree.CellType); 
		PROCEDURE ^ VisitRecordType*(x: SyntaxTree.RecordType); 
		PROCEDURE ^ VisitProcedureType*(x: SyntaxTree.ProcedureType); 
		PROCEDURE ^ VisitBooleanValue*(x: SyntaxTree.BooleanValue); 
		PROCEDURE ^ VisitIntegerValue*(x: SyntaxTree.IntegerValue); 
		PROCEDURE ^ VisitEnumerationValue*(x: SyntaxTree.EnumerationValue); 
		PROCEDURE ^ VisitProcedureValue*(x: SyntaxTree.ProcedureValue); 
		PROCEDURE ^ VisitCharacterValue*(x: SyntaxTree.CharacterValue); 
		PROCEDURE ^ VisitSetValue*(x: SyntaxTree.SetValue); 
		PROCEDURE ^ VisitMathArrayExpression*(x: SyntaxTree.MathArrayExpression); 
		PROCEDURE ^ VisitMathArrayValue*(x: SyntaxTree.MathArrayValue); 
		PROCEDURE ^ VisitRealValue*(x: SyntaxTree.RealValue); 
		PROCEDURE ^ VisitComplexValue*(x: SyntaxTree.ComplexValue); 
		PROCEDURE ^ VisitNilValue*(x: SyntaxTree.NilValue); 
		PROCEDURE ^ VisitStringValue*(x: SyntaxTree.StringValue); 
		PROCEDURE ^ FPValue(VAR fp: Basic.Fingerprint; x: SyntaxTree.Expression); 
		PROCEDURE ^ FPType(VAR fp: Basic.Fingerprint; t: SyntaxTree.Type); 
		PROCEDURE ^ FPSignature(VAR fp: Basic.Fingerprint; t: SyntaxTree.ProcedureType; isOperator: BOOLEAN); 
		PROCEDURE ^ VisitTypeDeclaration*(x: SyntaxTree.TypeDeclaration); 
		PROCEDURE ^ VisitConstant*(x: SyntaxTree.Constant); 
		PROCEDURE ^ VisitVariable*(x: SyntaxTree.Variable); 
		PROCEDURE ^ VisitProperty*(x: SyntaxTree.Property); 
		PROCEDURE ^ VisitParameter*(x: SyntaxTree.Parameter); 
		PROCEDURE ^ VisitProcedure*(x: SyntaxTree.Procedure); 
		PROCEDURE ^ VisitOperator*(x: SyntaxTree.Operator); 
		PROCEDURE ^ VisitModule*(x: SyntaxTree.Module); 
		PROCEDURE ^ VisitSymbol*(x: SyntaxTree.Symbol); 
		PROCEDURE ^ TraceIndent; 
		PROCEDURE ^ TraceEnter(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ TraceExit(CONST name: ARRAY OF CHAR; CONST fingerprint: SyntaxTree.Fingerprint); 
		PROCEDURE ^ TraceFP(CONST fingerprint: SyntaxTree.Fingerprint); 
		PROCEDURE ^ TypeFP*(this: SyntaxTree.Type): SyntaxTree.Fingerprint; 
		PROCEDURE ^ SymbolFP*(this: SyntaxTree.Symbol): SyntaxTree.Fingerprint; 
	END Fingerprinter; 

	PROCEDURE ^ IsOberonProcedure(type: SyntaxTree.ProcedureType): BOOLEAN; 
	PROCEDURE ^ FPNumber*(VAR fp: Basic.Fingerprint; val: SIGNED64); 
	PROCEDURE ^ FPSet*(VAR fp: Basic.Fingerprint; set: SET64); 
	PROCEDURE ^ FPReal*(VAR fp: Basic.Fingerprint; real: FLOAT64); 
	PROCEDURE ^ FPName*(VAR fp: Basic.Fingerprint; x: SyntaxTree.Identifier); 
	PROCEDURE ^ FPString*(VAR fp: Basic.Fingerprint; CONST str: ARRAY OF CHAR); 
	PROCEDURE ^ FPVisibility*(VAR fp: Basic.Fingerprint; vis: SET); 
	PROCEDURE ^ DumpFingerprint*(w: Streams.Writer; CONST fp: SyntaxTree.Fingerprint); 
BEGIN
END FoxFingerprinter.
