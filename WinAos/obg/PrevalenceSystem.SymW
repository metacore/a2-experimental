MODULE PrevalenceSystem;
	IMPORT XML, XMLObjects, XMLScanner, XMLParser, TFClasses, Strings, Modules, Kernel, Files, Streams, KernelLog, Configuration;
CONST 
	DEBUG = FALSE; 
	ConfigurationSupperSectionName = \"PrevalenceSystem"\; 
	ConfigurationSubSectionName = \"PersistentObjectModules"\; 
	ProcNameGetDescriptors = \"GetPersistentObjectDescriptors"\; 
	SnapShotIntervall = ((15 * 60) * 100); 
	StandardPrevSystemName = \"StandardPrevalenceSystem"\; 
	StandardSnapShotFileName = \"PrevalenceSnapShot.XML"\; 
	StandardLogFileName = \"PrevalenceLog.XML"\; 
	XMLProlog = \"<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>"\; 
	XMLRootElemName = \"instances"\; 
	XMLOidCounterAttrName = \"oidcounter"\; 
	XMLInstanceElemName = \"instance"\; 
	XMLAttrModuleName = \"module"\; 
	XMLAttrObjectName = \"object"\; 
	XMLAttrOidName = \"oid"\; 
	XMLAttrIsRootName = \"isroot"\; 
	XMLAttrSavingCounter = \"time"\; 
	XMLLogRootElemName = \"log"\; 
	XMLLogDelInstElemName = \"deleted"\; 
	TermTimeout = (1000 * 1000); 
TYPE 
	PersistentObject* = OBJECT {EXCLUSIVE} 
	VAR 
		oid*: LONGINT; 
		inModification, takingSnapShot: BOOLEAN; 
		registeredAt*: PrevalenceSystem; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ BeginModification*; 
		PROCEDURE ^ EndModification*; 
		PROCEDURE ^ Externalize*(): XML.Content; 
		PROCEDURE ^ Internalize*(xml: XML.Content); 
		PROCEDURE ^ GetReferrencedObjects*(): PersistentObjectList; 
	END PersistentObject; 

	PersistentObjectList* = POINTER TO ARRAY OF PersistentObject; 

	PersistentObjectFactory* = PROCEDURE ():PersistentObject; 

	PersistentObjectDescriptor* = OBJECT 
	VAR 
		moduleName*, objectName*: Strings.String; 
		factory*: PersistentObjectFactory; 

		PROCEDURE ^  & Init*(CONST modName, objName: ARRAY OF CHAR; factoryProc: PersistentObjectFactory); 
	END PersistentObjectDescriptor; 

	PersistentObjectDescSet* = OBJECT 
	VAR 
		descriptors*: POINTER TO ARRAY OF PersistentObjectDescriptor; 

		PROCEDURE ^  & Init*(CONST descs: ARRAY OF PersistentObjectDescriptor); 
		PROCEDURE ^ GetCount*(): SIZE; 
		PROCEDURE ^ GetItem*(i: SIZE): PersistentObjectDescriptor; 
	END PersistentObjectDescSet; 

	PersistentObjectDescSetFactory = PROCEDURE ():PersistentObjectDescSet; 

	FilterPredicate* = PROCEDURE {DELEGATE}(obj: PersistentObject):BOOLEAN; 

	PersistentObjectWrapper = OBJECT 
	VAR 
		prevalenceSystem: PrevalenceSystem; 
		instance: PersistentObject; 
		descriptor: PersistentObjectDescriptor; 
		savingCounter: LONGINT; 
		isRoot: BOOLEAN; 
		isMarked: BOOLEAN; 

		PROCEDURE ^  & Init*(prevSys: PrevalenceSystem; obj: PersistentObject; desc: PersistentObjectDescriptor); 
	END PersistentObjectWrapper; 

	SnapShotManager = OBJECT {EXCLUSIVE} 
	VAR 
		timer: Kernel.Timer; 
		alive, terminated: BOOLEAN; 
		i: SIZE; 
		p: ANY; 
		prevSys: PrevalenceSystem; 

	BEGIN{ACTIVE} 
	END SnapShotManager; 

	PrevalenceSystem* = OBJECT {EXCLUSIVE} 
	VAR 
		SnapShotFileName*: Strings.String; 
		LogFileName*: Strings.String; 
		SystemName*: Strings.String; 
		persistentObjectList: TFClasses.List; 
		oidCounter: LONGINT; 
		lockSnapShotFile: BOOLEAN; 
		lockLogFile: BOOLEAN; 
		lockPersList: BOOLEAN; 

		PROCEDURE ^  & Init*(CONST name, snapShotFn, logFn: ARRAY OF CHAR); 
		PROCEDURE ^ AddPersistentObject*(obj: PersistentObject; desc: PersistentObjectDescriptor); 
		PROCEDURE ^ AddPersistentObjectToRootSet*(obj: PersistentObject; desc: PersistentObjectDescriptor); 
		PROCEDURE ^ RemovePersistentRootObject*(obj: PersistentObject); 
		PROCEDURE ^ GetPersistentObject*(oid: LONGINT): PersistentObject; 
		PROCEDURE ^ GetDescriptorByObject*(obj: PersistentObject): PersistentObjectDescriptor; 
		PROCEDURE ^ FindPersistentObjects*(pred: FilterPredicate): PersistentObjectList; 
		PROCEDURE ^ GetNewOid(): LONGINT; 
		PROCEDURE ^ GetXMLDocument(file: Files.File): XML.Document; 
		PROCEDURE ^ LockSnapShotFile; 
		PROCEDURE ^ UnlockSnapShotFile; 
		PROCEDURE ^ LockLoggingFile; 
		PROCEDURE ^ UnlockLoggingFile; 
		PROCEDURE ^ LockPersistentObjList; 
		PROCEDURE ^ UnlockPersistentObjList; 
		PROCEDURE ^ CompactLogFile; 
		PROCEDURE ^ GarbageCollect*; 
		PROCEDURE ^ PersistAllObjects; 
		PROCEDURE ^ GetSerializedXMLInstance(wrapper: PersistentObjectWrapper): XML.Element; 
		PROCEDURE ^ GetXMLInstanceDeletion(wrapper: PersistentObjectWrapper): XML.Element; 
		PROCEDURE ^ LogXMLElement(elem: XML.Element); 
		PROCEDURE ^ Log(obj: PersistentObject); 
		PROCEDURE ^ LogRemovalFromRootSet(wrapper: PersistentObjectWrapper); 
		PROCEDURE ^ RestoreAllObjects; 
		PROCEDURE ^ GetRegisteredWrapperByOid(oid: LONGINT): PersistentObjectWrapper; 
		PROCEDURE ^ GetRegisteredWrapper(obj: PersistentObject): PersistentObjectWrapper; 
	END PrevalenceSystem; 
VAR 
	prevSystemList: TFClasses.List; 
	standardPrevalenceSystem*: PrevalenceSystem; 
	persistentObjectDescs: TFClasses.List; 
	snapShotMgr: SnapShotManager; 
	xmlParserErrorMsg: ARRAY 1024 OF CHAR; 
	xmlParserErrorOccurred: BOOLEAN; 
	lockParsingScanning: BOOLEAN; 
	lockPrevSystemList: BOOLEAN; 

	PROCEDURE ^ GetPrevalenceSystem*(CONST name: ARRAY OF CHAR): PrevalenceSystem; 
	PROCEDURE ^ AddPersistentObject*(obj: PersistentObject; desc: PersistentObjectDescriptor); 
	PROCEDURE ^ AddPersistentObjectToRootSet*(obj: PersistentObject; desc: PersistentObjectDescriptor); 
	PROCEDURE ^ RemovePersistentRootObject*(obj: PersistentObject); 
	PROCEDURE ^ GetPersistentObject*(oid: LONGINT): PersistentObject; 
	PROCEDURE ^ GetDescriptorByObject*(obj: PersistentObject): PersistentObjectDescriptor; 
	PROCEDURE ^ FindPersistentObjects*(pred: FilterPredicate): PersistentObjectList; 
	PROCEDURE ^ LockPrevSystemList; 
	PROCEDURE ^ UnlockPrevSystemList; 
	PROCEDURE ^ LockParsingScanning; 
	PROCEDURE ^ UnlockParsingScanning; 
	PROCEDURE ^ ReportXMLParserScannerError(pos, line, row: Streams.Position; CONST msg: ARRAY OF CHAR); 
	PROCEDURE ^ IsModuleLoaded(CONST modName: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ FindRegisteredDescriptor(CONST moduleName, objectName: ARRAY OF CHAR): PersistentObjectDescriptor; 
	PROCEDURE ^ RegisterDescriptor(desc: PersistentObjectDescriptor); 
	PROCEDURE ^ ReadRegisteredModules; 
	PROCEDURE ^ RegisterModuleByName(moduleName: Strings.String); 
	PROCEDURE ^ Terminator; 
BEGIN
END PrevalenceSystem.
