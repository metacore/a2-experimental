MODULE Serials;
	IMPORT Streams, Modules, KernelLog, Commands, Machine, Trace;
CONST 
	Verbose = TRUE; 
	MaxPorts* = 64; 
	ParNo* = 0; 
	ParOdd* = 1; 
	ParEven* = 2; 
	ParMark* = 3; 
	ParSpace* = 4; 
	Stop1* = 1; 
	Stop2* = 2; 
	Stop1dot5* = 3; 
	DefaultBPS = 115200; 
	DefaultDataBits = 8; 
	DefaultParity = ParNo; 
	DefaultStop = Stop1; 
	DTR* = 0; 
	RTS* = 1; 
	Break* = 2; 
	DSR* = 3; 
	CTS* = 4; 
	RI* = 5; 
	DCD* = 6; 
	OverrunError* = 10; 
	ParityError* = 11; 
	FramingError* = 12; 
	BreakInterrupt* = 13; 
	Ok* = 0; 
	Closed* =  -1; 
	TransportError* =  -2; 
	TimeoutExpired* =  -3; 
	PortInUse* = 1; 
	NoSuchPort* = 2; 
	WrongBPS* = 3; 
	WrongData* = 4; 
	WrongParity* = 5; 
	WrongStop* = 6; 
TYPE 
	Port* = OBJECT (Streams.Connection)
	VAR 
		name-: ARRAY 6 OF CHAR; 
		description-: ARRAY 128 OF CHAR; 
		charactersSent*, charactersReceived*: LONGINT; 

		PROCEDURE ^ Open*(bps, data, parity, stop: LONGINT; VAR res: WORD); 
		PROCEDURE ^ Close*; 
		PROCEDURE ^ SendChar*(ch: CHAR; VAR res: WORD); 
		PROCEDURE ^ Send*(CONST buf: ARRAY OF CHAR; ofs, len: LONGINT; propagate: BOOLEAN; VAR res: WORD); 
		PROCEDURE ^ ReceiveChar*(VAR ch: CHAR; VAR res: WORD); 
		PROCEDURE ^ Receive*(VAR buf: ARRAY OF CHAR; ofs, size, min: LONGINT; VAR len, res: LONGINT); 
		PROCEDURE ^ Available*(): LONGINT; 
		PROCEDURE ^ GetPortState*(VAR openstat: BOOLEAN; VAR bps, data, parity, stop: LONGINT); 
		PROCEDURE ^ ClearMC*(s: SET); 
		PROCEDURE ^ SetMC*(s: SET); 
		PROCEDURE ^ GetMC*(VAR s: SET); 
		PROCEDURE ^ SetReceiveTimeout*(timeout: LONGINT); 
		PROCEDURE ^ Show*; 
	END Port; 
VAR 
	ports: ARRAY MaxPorts OF Port; 
	tracePort: Port; 
	traceChar0: Trace.CharProc; 

	PROCEDURE ^ RegisterPort*(port: Port; CONST description: ARRAY OF CHAR); 
	PROCEDURE ^ UnRegisterPort*(port: Port); 
	PROCEDURE ^ RegisterOnboardPort*(portNumber: LONGINT; port: Port; CONST name, description: ARRAY OF CHAR); 
	PROCEDURE ^ GetPort*(portNumber: LONGINT): Port; 
	PROCEDURE ^ TraceChar(ch: CHAR); 
	PROCEDURE ^ SetTracePort*(portNumber: LONGINT; bps, data, parity, stop: LONGINT; VAR res: WORD); 
	PROCEDURE ^ IsTracePort*(port: Port): BOOLEAN; 
	PROCEDURE ^ GetPortParameters*(r: Streams.Reader; VAR portNumber, bps, data, parity, stop: LONGINT; VAR params: SET; VAR res: WORD); 
	PROCEDURE ^ SetTrace*(context: Commands.Context); 
	PROCEDURE ^ Show*(context: Commands.Context); 
	PROCEDURE ^ Test*(context: Commands.Context); 
	PROCEDURE ^ CloseAllPorts*(context: Commands.Context); 
	PROCEDURE ^ Cleanup; 
BEGIN
END Serials.
