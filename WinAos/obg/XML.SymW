MODULE XML;
	IMPORT Streams, Strings, UTF8Strings, Modules, DynamicStrings, Objects := XMLObjects, KernelLog;
CONST 
	Ok* = 0; 
	InvalidString* = 1; 
	BufferError* = 2; 
	Tab = DynamicStrings.Tab; 
	Space = 20X; 
	GeneralEntity* = 0; 
	ParameterEntity* = 1; 
	Any* = 0; 
	Empty* = 1; 
	ElementContent* = 2; 
	MixedContent* = 3; 
	ZeroOrOnce* = 0; 
	ZeroOrMore* = 1; 
	Once* = 2; 
	OnceOrMore* = 3; 
	Choice* = 1; 
	Sequence* = 2; 
	CData* = 0; 
	Id* = 1; 
	IdRef* = 2; 
	IdRefs* = 3; 
	Entity* = 4; 
	Entities* = 5; 
	NmToken* = 6; 
	NmTokens* = 7; 
	Notation* = 8; 
	Enumeration* = 9; 
TYPE 
	String* = Strings.String; 

	Content* = OBJECT 
	VAR 
		pos: LONGINT; 
		previous, next: Content; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetPos*(): LONGINT; 
		PROCEDURE ^ SetPos*(pos: LONGINT); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END Content; 

	NameContent* = OBJECT (Content)
	VAR 
		name: String; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetName*(): String; 
		PROCEDURE ^ SetName*(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ SetNameAsString*(name: String); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END NameContent; 

	Container* = OBJECT {EXCLUSIVE} (Content)
	VAR 
		first, last: Content; 
		nofContents: LONGINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ RemoveContent0(c: Content): BOOLEAN; 
		PROCEDURE ^ MoveContentAfter*(this, previous: Content); 
		PROCEDURE ^ MoveContentBefore*(this, next: Content); 
		PROCEDURE ^ AddContent*(c: Content); 
		PROCEDURE ^ RemoveContent*(c: Content); 
		PROCEDURE ^ GetContents*(): Objects.Enumerator; 
		PROCEDURE ^ GetNumberOfContents*(): LONGINT; 
		PROCEDURE ^ GetFirst*(): Content; 
		PROCEDURE ^ GetLast*(): Content; 
		PROCEDURE ^ GetNext*(content: Content): Content; 
		PROCEDURE ^ GetPrevious*(content: Content): Content; 
	END Container; 

	Document* = OBJECT {EXCLUSIVE} (Container)
	VAR 
		xmldecl: XMLDecl; 
		dtd: DocTypeDecl; 
		root: Element; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetXMLDecl*(): XMLDecl; 
		PROCEDURE ^ GetDocTypeDecl*(): DocTypeDecl; 
		PROCEDURE ^ GetRoot*(): Element; 
		PROCEDURE ^ AddContent*(c: Content); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END Document; 

	TextDecl* = OBJECT (Content)
	VAR 
		version, encoding: String; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetVersion*(): String; 
		PROCEDURE ^ SetVersion*(CONST version: ARRAY OF CHAR); 
		PROCEDURE ^ GetEncoding*(): String; 
		PROCEDURE ^ SetEncoding*(CONST encoding: ARRAY OF CHAR); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END TextDecl; 

	XMLDecl* = OBJECT (TextDecl)
	VAR 
		standalone: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ IsStandalone*(): BOOLEAN; 
		PROCEDURE ^ SetStandalone*(standalone: BOOLEAN); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END XMLDecl; 

	DocTypeDecl* = OBJECT (NameContent)
	VAR 
		elementDecls, notationDecls, generalEntities, parameterEntities: Objects.Dictionary; 
		allMarkupDecls: Objects.Collection; 
		externalSubset: EntityDecl; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ AddMarkupDecl*(c: Content); 
		PROCEDURE ^ GetElementDecl*(CONST name: ARRAY OF CHAR): ElementDecl; 
		PROCEDURE ^ GetNotationDecl*(CONST name: ARRAY OF CHAR): NotationDecl; 
		PROCEDURE ^ GetEntityDecl*(CONST name: ARRAY OF CHAR; type: SHORTINT): EntityDecl; 
		PROCEDURE ^ GetExternalSubset*(): EntityDecl; 
		PROCEDURE ^ SetExternalSubset*(externalSubset: EntityDecl); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END DocTypeDecl; 

	NotationDecl* = OBJECT (NameContent)
	VAR 
		systemId, publicId: String; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetSystemId*(): String; 
		PROCEDURE ^ SetSystemId*(CONST systemId: ARRAY OF CHAR); 
		PROCEDURE ^ GetPublicId*(): String; 
		PROCEDURE ^ SetPublicId*(CONST publicId: ARRAY OF CHAR); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END NotationDecl; 

	EntityDecl* = OBJECT (NotationDecl)
	VAR 
		value, notationName: String; 
		type: SHORTINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetType*(): SHORTINT; 
		PROCEDURE ^ SetType*(type: SHORTINT); 
		PROCEDURE ^ GetValue*(): String; 
		PROCEDURE ^ SetValue*(CONST value: ARRAY OF CHAR); 
		PROCEDURE ^ GetNotationName*(): String; 
		PROCEDURE ^ SetNotationName*(CONST notationName: ARRAY OF CHAR); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END EntityDecl; 

	ElementDecl* = OBJECT (NameContent)
	VAR 
		contentType: SHORTINT; 
		content: CollectionCP; 
		attributeDecls: Objects.Dictionary; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetContentType*(): SHORTINT; 
		PROCEDURE ^ SetContentType*(contentType: SHORTINT); 
		PROCEDURE ^ GetContent*(): CollectionCP; 
		PROCEDURE ^ SetContent*(lcp: CollectionCP); 
		PROCEDURE ^ GetAttributeDecl*(CONST name: ARRAY OF CHAR): AttributeDecl; 
		PROCEDURE ^ GetAttributeDecls*(): Objects.Enumerator; 
		PROCEDURE ^ AddAttributeDecl*(attributeDecl: AttributeDecl); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END ElementDecl; 

	ContentParticle* = OBJECT (Content)
	VAR 
		occurence: SHORTINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetOccurence*(): SHORTINT; 
		PROCEDURE ^ SetOccurence*(occ: SHORTINT); 
		PROCEDURE ^ GetOccurenceChar(): CHAR; 
	END ContentParticle; 

	NameContentParticle* = OBJECT (ContentParticle)
	VAR 
		name: String; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetName*(): String; 
		PROCEDURE ^ SetName*(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ SetNameAsString*(name: String); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END NameContentParticle; 

	CollectionCP* = OBJECT (ContentParticle)
	VAR 
		children: Objects.Collection; 
		type: SHORTINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetType*(): SHORTINT; 
		PROCEDURE ^ SetType*(type: SHORTINT); 
		PROCEDURE ^ GetChildren*(): Objects.Enumerator; 
		PROCEDURE ^ AddChild*(cp: ContentParticle); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END CollectionCP; 

	AttributeDecl* = OBJECT (NameContent)
	VAR 
		defaultValue: String; 
		type: SHORTINT; 
		allowedValues: Objects.Dictionary; 
		required: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetDefaultValue*(): String; 
		PROCEDURE ^ SetDefaultValue*(CONST defaultValue: ARRAY OF CHAR); 
		PROCEDURE ^ GetType*(): SHORTINT; 
		PROCEDURE ^ SetType*(type: SHORTINT); 
		PROCEDURE ^ GetAllowedValues*(): Objects.Enumerator; 
		PROCEDURE ^ AddAllowedValue*(CONST value: ARRAY OF CHAR); 
		PROCEDURE ^ IsRequired*(): BOOLEAN; 
		PROCEDURE ^ SetRequired*(required: BOOLEAN); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END AttributeDecl; 

	CharReference* = OBJECT (Content)
	VAR 
		code: LONGINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ SetCode*(code: LONGINT); 
		PROCEDURE ^ GetCode*(): LONGINT; 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END CharReference; 

	EntityRef* = OBJECT (NameContent)
	VAR 
		decl: EntityDecl; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetEntityDecl*(): EntityDecl; 
		PROCEDURE ^ SetDocument(document: Document); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END EntityRef; 

	InternalEntityRef* = OBJECT (EntityRef)

		PROCEDURE ^ GetValue*(): String; 
	END InternalEntityRef; 

	ExternalEntityRef* = OBJECT (EntityRef)
	VAR 
		coll: Objects.Collection; 
		textDecl: TextDecl; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetTextDecl*(): TextDecl; 
		PROCEDURE ^ GetContents*(): Objects.Enumerator; 
		PROCEDURE ^ AddContent*(c: Content); 
		PROCEDURE ^ IsParsed*(): BOOLEAN; 
		PROCEDURE ^ GetIdElement(CONST name, id: ARRAY OF CHAR): Element; 
	END ExternalEntityRef; 

	Chars* = OBJECT (Content)

		PROCEDURE ^ GetStr*(): String; 
		PROCEDURE ^ GetLength*(): LONGINT; 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END Chars; 

	ArrayChars* = OBJECT (Chars)
	VAR 
		str: String; 
		len: LONGINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetStr*(): String; 
		PROCEDURE ^ GetLength*(): LONGINT; 
		PROCEDURE ^ SetStr*(CONST str: ARRAY OF CHAR); 
		PROCEDURE ^ SetStrAsString*(str: String); 
	END ArrayChars; 

	Comment* = OBJECT (ArrayChars)

		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END Comment; 

	CDataSect* = OBJECT (ArrayChars)

		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END CDataSect; 

	ProcessingInstruction* = OBJECT (Content)
	VAR 
		target, instruction: String; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetTarget*(): String; 
		PROCEDURE ^ SetTarget*(CONST target: ARRAY OF CHAR); 
		PROCEDURE ^ GetInstruction*(): String; 
		PROCEDURE ^ SetInstruction*(CONST instruction: ARRAY OF CHAR); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END ProcessingInstruction; 

	Attribute* = OBJECT (NameContent)
	VAR 
		value, elementName: String; 
		document: Document; 
		decl: AttributeDecl; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ SetDocument(document: Document; elementName: String); 
		PROCEDURE ^ IsAllowedValue*(CONST value: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ GetValue*(): String; 
		PROCEDURE ^ SetValue*(CONST value: ARRAY OF CHAR); 
		PROCEDURE ^ SetValueAsString*(value: String); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END Attribute; 

	TraverseProc* = PROCEDURE {DELEGATE}(c: Content; data: ANY); 

	Element* = OBJECT {EXCLUSIVE} (Container)
	VAR 
		root, parent: Element; 
		name: String; 
		document: Document; 
		attributes: Attribute; 
		idAttribute: Attribute; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ AddContent*(content: Content); 
		PROCEDURE ^ RemoveContent*(content: Content); 
		PROCEDURE ^ SetDocument(document: Document); 
		PROCEDURE ^ SetName*(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ SetNameAsString*(name: String); 
		PROCEDURE ^ GetName*(): String; 
		PROCEDURE ^ GetId*(): String; 
		PROCEDURE ^ GetIdElement*(CONST name, id: ARRAY OF CHAR): Element; 
		PROCEDURE ^ AddAttribute*(attribute: Attribute); 
		PROCEDURE ^ RemoveAttributeInternal(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ RemoveAttribute*(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ SetAttributeValue*(CONST name, value: ARRAY OF CHAR); 
		PROCEDURE ^ GetAttribute*(CONST name: ARRAY OF CHAR): Attribute; 
		PROCEDURE ^ GetAttributeValue*(CONST name: ARRAY OF CHAR): String; 
		PROCEDURE ^ GetAttributes*(): Objects.Enumerator; 
		PROCEDURE ^ HasAttribute*(CONST name: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ GetRoot*(): Element; 
		PROCEDURE ^ GetParent*(): Element; 
		PROCEDURE ^ GetFirstChild*(): Element; 
		PROCEDURE ^ GetNextSibling*(): Element; 
		PROCEDURE ^ GetPreviousSibling*(): Element; 
		PROCEDURE ^ Traverse*(traverseProc: TraverseProc; data: ANY); 
		PROCEDURE ^ WriteAttributes*(w: Streams.Writer; context: ANY; level: LONGINT); 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
	END Element; 

	GeneratorProcedure* = PROCEDURE ():Element; 

	ElementEntry* = OBJECT 
	VAR 
		name-: ARRAY 32 OF CHAR; 
		generator-: GeneratorProcedure; 
		generatorModule-, generatorProcedure-: Modules.Name; 

		PROCEDURE ^  & Init*; 
	END ElementEntry; 

	ElementArray* = POINTER TO ARRAY OF ElementEntry; 

	ElementRegistry* = OBJECT 
	VAR 
		generators: Objects.Dictionary; 
		timestamp: LONGINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ RegisterElement*(CONST name: ARRAY OF CHAR; generator: GeneratorProcedure); 
		PROCEDURE ^ RegisterElementByName*(CONST name: ARRAY OF CHAR; CONST generatorModule, generatorProcedure: Modules.Name); 
		PROCEDURE ^ UnregisterElement*(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ InstantiateElement*(CONST name: ARRAY OF CHAR): Element; 
		PROCEDURE ^ InstantiateLate*(e: Element): Element; 
		PROCEDURE ^ GetTimestamp*(): LONGINT; 
		PROCEDURE ^ GetElements*(): ElementArray; 
	END ElementRegistry; 
VAR 
	StrNoName: Strings.String; 

	PROCEDURE ^ UTF8ToStream*(CONST string: ARRAY OF CHAR; w: Streams.Writer; VAR res: WORD); 
	PROCEDURE ^ UTF8FromStream*(VAR string: ARRAY OF CHAR; r: Streams.Reader; VAR res: WORD); 
	PROCEDURE ^ NewLine(w: Streams.Writer; level: LONGINT); 
	PROCEDURE ^ NewString(CONST value: ARRAY OF CHAR): String; 
BEGIN
END XML.
