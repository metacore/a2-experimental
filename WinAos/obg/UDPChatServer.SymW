MODULE UDPChatServer;
	IMPORT Base := UDPChatBase, UDP, IP, Dates, Strings, Modules, Kernel, Events;
CONST 
	branchInit = 0; 
	branchPacketReceive = 1; 
	branchVersionCheck = 2; 
	branchAuthentication = 3; 
	branchPacketHandle = 4; 
	branchEnd = 5; 
	branchTerminated = 6; 
	moduleName = \"UDPChatServer"\; 
	EventClass = 3; 
	EventSubclass = 3; 
TYPE 
	String = Strings.String; 

	Instance = OBJECT {EXCLUSIVE} 
	VAR 
		s: UDP.Socket; 
		dt: Dates.DateTime; 
		running, terminated: BOOLEAN; 
		ip: IP.Adr; 
		branch, command, seqNum, messageType: SIGNED16; 
		uin, receiverUin, port, receiveBufOffset: SIGNED32; 
		len: SIZE; 
		res: INTEGER; 
		user: Base.User; 
		users: Base.Users; 
		clients: Base.List; 
		client, receiver: Base.Client; 
		sendBuf: Base.Buffer; 
		receiveBuf, password, shortName, fullName, eMail, message, textCode: String; 
		str1, str2: ARRAY 256 OF CHAR; 
		ACKReq: Base.ACKRec; 

		PROCEDURE ^  & New*(udp: UDP.Socket); 
		PROCEDURE ^ Destroy; 
		PROCEDURE ^ FinalizeClients(clients: Base.List); 
		PROCEDURE ^ FindClient(clients: Base.List; uin: SIGNED32; VAR client: Base.Client): BOOLEAN; 
		PROCEDURE ^ CheckKeepAlive(clients: Base.List); 
		PROCEDURE ^ Server_NewUserReply(ip: IP.Adr; port: SIGNED32; uin: SIGNED32; seqNum: SIGNED16; sendBuf: Base.Buffer; s: UDP.Socket); 
		PROCEDURE ^ Server_LoginReply(client: Base.Client; sendBuf: Base.Buffer; s: UDP.Socket); 
		PROCEDURE ^ Server_InfoReply(client: Base.Client; user: Base.User; sendBuf: Base.Buffer; s: UDP.Socket); 
		PROCEDURE ^ Server_ACK(client: Base.Client; sendBuf: Base.Buffer; s: UDP.Socket); 
		PROCEDURE ^ Server_UserStatus(client, receiver: Base.Client; status: SIGNED16; sendBuf: Base.Buffer; s: UDP.Socket); 
		PROCEDURE ^ Server_ReceiveMessage(client, receiver: Base.Client; dt: Dates.DateTime; messageType: SIGNED16; message: String; sendBuf: Base.Buffer; s: UDP.Socket); 
		PROCEDURE ^ MulticastStatus(clients: Base.List; client: Base.Client; status: SIGNED16; sendBuf: Base.Buffer; s: UDP.Socket); 
		PROCEDURE ^ MulticastMessage(clients: Base.List; client: Base.Client; dt: Dates.DateTime; messageType: SIGNED16; message: String; sendBuf: Base.Buffer; s: UDP.Socket); 
	BEGIN{ACTIVE} 
	END Instance; 
VAR 
	instance: Instance; 

	PROCEDURE ^ Log(type, code: SIGNED8; msg: ARRAY OF CHAR; showOnKernelLog: BOOLEAN); 
	PROCEDURE ^ Start*; 
	PROCEDURE ^ Stop*; 
	PROCEDURE ^ Cleanup; 
BEGIN
END UDPChatServer.
