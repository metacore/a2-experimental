MODULE FoxARMInstructionSet;
	IMPORT D := Debugging, Commands, Streams, Files, BinaryCode := FoxBinaryCode, Disassembler := FoxDisassembler, BitSets, Options, Strings, ObjectFile;
CONST 
	TraceDecode = FALSE; 
	None* =  -1; 
	conditionEQ* = 0; 
	conditionNE* = 1; 
	conditionCS* = 2; 
	conditionHS* = 2; 
	conditionCC* = 3; 
	conditionLO* = 3; 
	conditionMI* = 4; 
	conditionPL* = 5; 
	conditionVS* = 6; 
	conditionVC* = 7; 
	conditionHI* = 8; 
	conditionLS* = 9; 
	conditionGE* = 10; 
	conditionLT* = 11; 
	conditionGT* = 12; 
	conditionLE* = 13; 
	conditionAL* = 14; 
	unconditional* = conditionAL; 
	conditionNV* = 15; 
	NumberConditionEntries* = 18; 
	Increment* = 0; 
	Decrement* = 1; 
	PostIndexed* = 2; 
	PreIndexed* = 3; 
	opADC* = 0; 
	opADD* = 1; 
	opAND* = 2; 
	opB* = 3; 
	opBIC* = 4; 
	opBKPT* = 5; 
	opBL* = 6; 
	opBLX* = 7; 
	opBX* = 8; 
	opCDP* = 9; 
	opCDP2* = 10; 
	opCLZ* = 11; 
	opCMN* = 12; 
	opCMP* = 13; 
	opEOR* = 14; 
	opFABSD* = 15; 
	opFABSS* = 16; 
	opFADDD* = 17; 
	opFADDS* = 18; 
	opFCMPD* = 19; 
	opFCMPED* = 20; 
	opFCMPES* = 21; 
	opFCMPEZD* = 22; 
	opFCMPEZS* = 23; 
	opFCMPS* = 24; 
	opFCMPZD* = 25; 
	opFCMPZS* = 26; 
	opFCPYD* = 27; 
	opFCPYS* = 28; 
	opFCVTDS* = 29; 
	opFCVTSD* = 30; 
	opFDIVD* = 31; 
	opFDIVS* = 32; 
	opFLDD* = 33; 
	opFLDMIAD* = 34; 
	opFLDMIAS* = 35; 
	opFLDMIAX* = 36; 
	opFLDMDBD* = 37; 
	opFLDMDBS* = 38; 
	opFLDMDBX* = 39; 
	opFLDS* = 40; 
	opFMACD* = 41; 
	opFMACS* = 42; 
	opFMDHR* = 43; 
	opFMDLR* = 44; 
	opFMRDH* = 45; 
	opFMRDL* = 46; 
	opFMRS* = 47; 
	opFMRX* = 48; 
	opFMSCD* = 49; 
	opFMSCS* = 50; 
	opFMSR* = 51; 
	opFMSTAT* = 52; 
	opFMULD* = 53; 
	opFMULS* = 54; 
	opFMXR* = 55; 
	opFNEGD* = 56; 
	opFNEGS* = 57; 
	opFNMACD* = 58; 
	opFNMACS* = 59; 
	opFNMSCD* = 60; 
	opFNMSCS* = 61; 
	opFNMULD* = 62; 
	opFNMULS* = 63; 
	opFSITOD* = 64; 
	opFSITOS* = 65; 
	opFSQRTD* = 66; 
	opFSQRTS* = 67; 
	opFSTD* = 68; 
	opFSTMIAD* = 69; 
	opFSTMIAS* = 70; 
	opFSTMIAX* = 71; 
	opFSTMDBD* = 72; 
	opFSTMDBS* = 73; 
	opFSTMDBX* = 74; 
	opFSTS* = 75; 
	opFSUBD* = 76; 
	opFSUBS* = 77; 
	opFTOSID* = 78; 
	opFTOSIZD* = 79; 
	opFTOSIS* = 80; 
	opFTOSIZS* = 81; 
	opFTOUID* = 82; 
	opFTOUIZD* = 83; 
	opFTOUIS* = 84; 
	opFTOUIZS* = 85; 
	opFUITOD* = 86; 
	opFUITOS* = 87; 
	opLDC* = 88; 
	opLDC2* = 89; 
	opLDM* = 90; 
	opLDR* = 91; 
	opMCR* = 92; 
	opMCR2* = 93; 
	opMCRR* = 94; 
	opMLA* = 95; 
	opMOV* = 96; 
	opMRC* = 97; 
	opMRC2* = 98; 
	opMRRC* = 99; 
	opMRS* = 100; 
	opMSR* = 101; 
	opMUL* = 102; 
	opMVN* = 103; 
	opORR* = 104; 
	opPLD* = 105; 
	opQADD* = 106; 
	opQDADD* = 107; 
	opQDSUB* = 108; 
	opQSUB* = 109; 
	opRSB* = 110; 
	opRSC* = 111; 
	opSBC* = 112; 
	opSMLABB* = 113; 
	opSMLABT* = 114; 
	opSMLAL* = 115; 
	opSMLATB* = 116; 
	opSMLATT* = 117; 
	opSMLALBB* = 118; 
	opSMLALBT* = 119; 
	opSMLALTB* = 120; 
	opSMLALTT* = 121; 
	opSMLAWB* = 122; 
	opSMLAWT* = 123; 
	opSMULBB* = 124; 
	opSMULBT* = 125; 
	opSMULTB* = 126; 
	opSMULTT* = 127; 
	opSMULWB* = 128; 
	opSMULWT* = 129; 
	opSMULL* = 130; 
	opSTC* = 131; 
	opSTC2* = 132; 
	opSTM* = 133; 
	opSTR* = 134; 
	opSUB* = 135; 
	opSWI* = 136; 
	opSWP* = 137; 
	opTEQ* = 138; 
	opTST* = 139; 
	opUMLAL* = 140; 
	opUMULL* = 141; 
	opISB* = 142; 
	opVADD* = 143; 
	opVADDL* = 144; 
	opVADDW* = 145; 
	opVMUL* = 146; 
	opVMULL* = 147; 
	opVMSR* = 148; 
	opVMRS* = 149; 
	opVLDR* = 150; 
	opVSTR* = 151; 
	opVDIV* = 152; 
	opVMLA* = 153; 
	opVMLS* = 154; 
	opVMIN* = 155; 
	opVMAX* = 156; 
	opVSUB* = 157; 
	opVABS* = 158; 
	opVABD* = 159; 
	opLSL* = 160; 
	opLSR* = 161; 
	opVLD1* = 162; 
	opVST1* = 163; 
	opVPADD* = 164; 
	opVMOV* = 165; 
	opSEV* = 166; 
	opDSB* = 167; 
	opLDREX* = 168; 
	opSTREX* = 169; 
	opADR* = 170; 
	opLDREXB* = 171; 
	opSTREXB* = 172; 
	opDMB* = 173; 
	opCLREX* = 174; 
	opREV* = 175; 
	opREV16* = 176; 
	opUXTH* = 177; 
	opWFE* = 178; 
	opWFI* = 179; 
	NumberMnemonics* = 180; 
	MaxOperands* = 6; 
	flagB* = 0; 
	flagBT* = 1; 
	flagD* = 2; 
	flagDA* = 3; 
	flagDB* = 4; 
	flagH* = 5; 
	flagIA* = 6; 
	flagIB* = 7; 
	flagL* = 8; 
	flagS* = 9; 
	flagSB* = 10; 
	flagSH* = 11; 
	flagT* = 12; 
	flagNEON8bits = 13; 
	flagNEON16bits = 14; 
	flagNEON32bits = 15; 
	flagNEON64bits = 16; 
	flagNEONInt = 17; 
	flagNEONSigned = 18; 
	flagNEONUnsigned = 19; 
	flagNEONFloat = 20; 
	flagNEONPoly = 21; 
	flagNEONUndef = 22; 
	NumberFlags* = 23; 
	flagCondition* = 23; 
	flagUserMode* = 24; 
	flagBaseRegisterUpdate* = 25; 
	NumberInstructions = (NumberMnemonics + 19); 
	encodingR16 = 0; 
	encodingR12 = 1; 
	encodingR8 = 2; 
	encodingR0 = 3; 
	encodingAddressingMode1 = 4; 
	encodingAddressingMode2 = 5; 
	encodingAddressingMode3 = 6; 
	encodingAddressingMode5 = 7; 
	encodingCoprocessor = 8; 
	encodingCR0 = 9; 
	encodingCR12 = 10; 
	encodingCR16 = 11; 
	encodingOpcode20 = 12; 
	encodingOpcode21 = 13; 
	encodingOpcode5 = 14; 
	encodingOpcode4 = 15; 
	encodingSignedImm24 = 16; 
	encodingImm24 = 17; 
	encodingImm16 = 18; 
	encodingRotImm8 = 19; 
	encodingRegisterList = 20; 
	encodingPSR = 21; 
	encodingFields = 22; 
	encodingDR0 = 23; 
	encodingDR12 = 24; 
	encodingDR16 = 25; 
	encodingFR0 = 26; 
	encodingFR12 = 27; 
	encodingFR16 = 28; 
	encodingDRegisterList = 29; 
	encodingFRegisterList = 30; 
	encodingAddressingMode5V = 31; 
	encodingNEONQd = 32; 
	encodingNEONQn = 33; 
	encodingNEONQm = 34; 
	encodingNEONDd = 35; 
	encodingNEONDn = 36; 
	encodingNEONDm = 37; 
	encodingNEONSd = 38; 
	encodingNEONSn = 39; 
	encodingNEONSm = 40; 
	encodingNEONImmAndSize = 41; 
	encodingNEON8bitImm = 42; 
	encodingNEON3bitImm = 43; 
	encodingNEONQorDd = 44; 
	encodingNEONQorDn = 45; 
	encodingNEONQorDm = 46; 
	encodingNEONDorSd = 47; 
	encodingNEONDorSn = 48; 
	encodingNEONDorSm = 49; 
	encodingNEONDRegList = 50; 
	encodingNEONSysReg = 51; 
	encodingNEONSigned8bitImm = 52; 
	encodingImm7to11 = 53; 
	modeImmediate* = 0; 
	modeRegister* = 1; 
	modeMemory* = 2; 
	modeOpcode* = 3; 
	modeCoprocessor* = 4; 
	modeRegisterList* = 5; 
	modeRegisterWithFields* = 6; 
	modeOption* = 7; 
	R0* = 0; 
	R1* = (R0 + 1); 
	R2* = (R0 + 2); 
	R3* = (R0 + 3); 
	R4* = (R0 + 4); 
	R5* = (R0 + 5); 
	R6* = (R0 + 6); 
	R7* = (R0 + 7); 
	R8* = (R0 + 8); 
	R9* = (R0 + 9); 
	R10* = (R0 + 10); 
	R11* = (R0 + 11); 
	R12* = (R0 + 12); 
	R13* = (R0 + 13); 
	R14* = (R0 + 14); 
	R15* = (R0 + 15); 
	CR0* = 16; 
	CR1* = (CR0 + 1); 
	CR2* = (CR0 + 2); 
	CR3* = (CR0 + 3); 
	CR4* = (CR0 + 4); 
	CR5* = (CR0 + 5); 
	CR6* = (CR0 + 6); 
	CR7* = (CR0 + 7); 
	CR8* = (CR0 + 8); 
	CR9* = (CR0 + 9); 
	CR10* = (CR0 + 10); 
	CR11* = (CR0 + 11); 
	CR12* = (CR0 + 12); 
	CR13* = (CR0 + 13); 
	CR14* = (CR0 + 14); 
	CR15* = (CR0 + 15); 
	DR0* = 32; 
	DR1* = (DR0 + 1); 
	DR2* = (DR0 + 2); 
	DR3* = (DR0 + 3); 
	DR4* = (DR0 + 4); 
	DR5* = (DR0 + 5); 
	DR6* = (DR0 + 6); 
	DR7* = (DR0 + 7); 
	DR8* = (DR0 + 8); 
	DR9* = (DR0 + 9); 
	DR10* = (DR0 + 10); 
	DR11* = (DR0 + 11); 
	DR12* = (DR0 + 12); 
	DR13* = (DR0 + 13); 
	DR14* = (DR0 + 14); 
	DR15* = (DR0 + 15); 
	DR16* = (DR0 + 16); 
	DR17* = (DR0 + 17); 
	DR18* = (DR0 + 18); 
	DR19* = (DR0 + 19); 
	DR20* = (DR0 + 20); 
	DR21* = (DR0 + 21); 
	DR22* = (DR0 + 22); 
	DR23* = (DR0 + 23); 
	DR24* = (DR0 + 24); 
	DR25* = (DR0 + 25); 
	DR26* = (DR0 + 26); 
	DR27* = (DR0 + 27); 
	DR28* = (DR0 + 28); 
	DR29* = (DR0 + 29); 
	DR30* = (DR0 + 30); 
	DR31* = (DR0 + 31); 
	SR0* = 64; 
	SR1* = (SR0 + 1); 
	SR2* = (SR0 + 2); 
	SR3* = (SR0 + 3); 
	SR4* = (SR0 + 4); 
	SR5* = (SR0 + 5); 
	SR6* = (SR0 + 6); 
	SR7* = (SR0 + 7); 
	SR8* = (SR0 + 8); 
	SR9* = (SR0 + 9); 
	SR10* = (SR0 + 10); 
	SR11* = (SR0 + 11); 
	SR12* = (SR0 + 12); 
	SR13* = (SR0 + 13); 
	SR14* = (SR0 + 14); 
	SR15* = (SR0 + 15); 
	CPSR* = 80; 
	SPSR* = 81; 
	SR16* = 82; 
	SR17* = (SR0 + 17); 
	SR18* = (SR0 + 18); 
	SR19* = (SR0 + 19); 
	SR20* = (SR0 + 20); 
	SR21* = (SR0 + 21); 
	SR22* = (SR0 + 22); 
	SR23* = (SR0 + 23); 
	SR24* = (SR0 + 24); 
	SR25* = (SR0 + 25); 
	SR26* = (SR0 + 26); 
	SR27* = (SR0 + 27); 
	SR28* = (SR0 + 28); 
	SR29* = (SR0 + 29); 
	SR30* = (SR0 + 30); 
	SR31* = (SR0 + 31); 
	QR0* = 98; 
	QR1* = (QR0 + 1); 
	QR2* = (QR0 + 2); 
	QR3* = (QR0 + 3); 
	QR4* = (QR0 + 4); 
	QR5* = (QR0 + 5); 
	QR6* = (QR0 + 6); 
	QR7* = (QR0 + 7); 
	QR8* = (QR0 + 8); 
	QR9* = (QR0 + 9); 
	QR10* = (QR0 + 10); 
	QR11* = (QR0 + 11); 
	QR12* = (QR0 + 12); 
	QR13* = (QR0 + 13); 
	QR14* = (QR0 + 14); 
	QR15* = (QR0 + 15); 
	FPSID* = 114; 
	FPSCR* = 115; 
	FPEXC* = 116; 
	PC* = R15; 
	LR* = R14; 
	SP* = R13; 
	FP* = R12; 
	RESHI* = R1; 
	RES* = R0; 
	RESFS* = SR0; 
	RESFD* = DR0; 
	NumberRegisters* = 117; 
	NumberRegisterEntries* = 123; 
	shiftLSL* = 0; 
	shiftLSR* = 1; 
	shiftASR* = 2; 
	shiftROR* = 3; 
	shiftRRX* = 4; 
	NumberShifts* = 5; 
	CP0* = 0; 
	CP1* = 1; 
	CP2* = 2; 
	CP3* = 3; 
	CP4* = 4; 
	CP5* = 5; 
	CP6* = 6; 
	CP7* = 7; 
	CP8* = 8; 
	CP9* = 9; 
	CP10* = 10; 
	CP11* = 11; 
	CP12* = 12; 
	CP13* = 13; 
	CP14* = 14; 
	CP15* = 15; 
	NumberCoprocessors* = 16; 
	fieldC* = 0; 
	fieldX* = 1; 
	fieldS* = 2; 
	fieldF* = 3; 
	Bits12* = 4096; 
	Bits10* = 1024; 
	Bits7* = 128; 
	Bits5* = 32; 
TYPE 
	Name = ARRAY 10 OF CHAR; 

	Entry = RECORD 
		name: Name; 
		number: LONGINT; 
	END; 

	Mnemonic = RECORD 
		name: Name; 
		number: INTEGER; 
		firstInstructionFormat, lastInstructionFormat: LONGINT; 
	END; 

	InstructionFormat = RECORD 
		mnemonic: INTEGER; 
		opcode, mask: SET; 
		flags: SET; 
		operands: ARRAY MaxOperands OF INTEGER; 
		isNEON: BOOLEAN; 
		Unsigned, Quadword, Length, Float, Operation: SET; 
		SizeH: INTEGER; 
	END; 

	Instruction* = RECORD 
		format: LONGINT; 
		condition: LONGINT; 
		flags: SET; 
		operands: ARRAY MaxOperands OF Operand; 
	END; 

	Operand* = RECORD 
		mode*: INTEGER; 
		register*: LONGINT; 
		immediate*, shiftImmediate: LONGINT; 
		shiftRegister: LONGINT; 
		shiftMode: INTEGER; 
		offsetImmediate: LONGINT; 
		offsetRegister: LONGINT; 
		indexing: SET; 
		registerList: SET; 
		coprocessor: INTEGER; 
		opcode: LONGINT; 
		fields: SET; 
		option: LONGINT; 
		fixup-: BinaryCode.Fixup; 
	END; 
VAR 
	mnemonics: ARRAY NumberMnemonics OF Mnemonic; 
	registerEntries: ARRAY NumberRegisterEntries OF Entry; 
	conditionEntries: ARRAY NumberConditionEntries OF Entry; 
	flagNames: ARRAY NumberFlags OF Name; 
	shiftNames: ARRAY NumberShifts OF Name; 
	coprocessorNames: ARRAY NumberCoprocessors OF Name; 
	instructionFormats: ARRAY NumberInstructions OF InstructionFormat; 

	PROCEDURE ^ RegisterNumberFromName*(registerName: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ CoprocessorNumberFromName*(coprocessorName: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ ShiftModeNumberFromName*(shiftModeName: ARRAY OF CHAR): LONGINT; 
	PROCEDURE ^ FindMnemonic*(CONST name: ARRAY OF CHAR; VAR mnemonic, condition: LONGINT; VAR flags: SET): BOOLEAN; 
	PROCEDURE ^ InitInstruction*(VAR instruction: Instruction); 
	PROCEDURE ^ InitFixup*(VAR operand: Operand; bits: SHORTINT; fixup: BinaryCode.Fixup); 
	PROCEDURE ^ AddFixup*(VAR operand: Operand; fixup: BinaryCode.Fixup); 
	PROCEDURE ^ InitOperand*(VAR operand: Operand); 
	PROCEDURE ^ InitRegister*(VAR operand: Operand; registerNumber: LONGINT; shiftMode: LONGINT; shiftAmountRegisterNumber: LONGINT; shiftImmediate: LONGINT); 
	PROCEDURE ^ InitImmediate*(VAR operand: Operand; immediate: LONGINT); 
	PROCEDURE ^ InitImmediateOffsetMemory*(VAR operand: Operand; register: LONGINT; offset: LONGINT; indexing: SET); 
	PROCEDURE ^ InitRegisterOffsetMemory*(VAR operand: Operand; register, offsetRegister: LONGINT; shiftMode: LONGINT; shiftImmediate: LONGINT; indexing: SET); 
	PROCEDURE ^ NewRegister*(registerNumber: LONGINT; shiftMode: LONGINT; shiftAmountRegisterNumber: LONGINT; shiftImmediate: LONGINT): Operand; 
	PROCEDURE ^ NewImmediate*(immediate: LONGINT): Operand; 
	PROCEDURE ^ NewImmediateOffsetMemory*(register: LONGINT; offset: LONGINT; indexing: SET): Operand; 
	PROCEDURE ^ NewRegisterOffsetMemory*(register, offsetRegister: LONGINT; shiftMode: LONGINT; shiftImmediate: LONGINT; indexing: SET): Operand; 
	PROCEDURE ^ NewRegisterList*(registerBase: LONGINT; registerList: SET): Operand; 
	PROCEDURE ^ InitOption*(VAR operand: Operand; register: LONGINT; option: LONGINT); 
	PROCEDURE ^ InitCoprocessor*(VAR operand: Operand; coprocessor: LONGINT); 
	PROCEDURE ^ InitOpcode*(VAR operand: Operand; opcode: LONGINT); 
	PROCEDURE ^ InitRegisterList*(VAR operand: Operand; registerBase: LONGINT; registerList: SET); 
	PROCEDURE ^ InitRegisterWithFields*(VAR operand: Operand; registerNumber: LONGINT; fields: SET); 
	PROCEDURE ^ NewRegisterWithFields*(registerNumber: LONGINT; fields: SET): Operand; 
	PROCEDURE ^ MakeInstruction*(VAR instruction: Instruction; mnemonic, condition: LONGINT; flags: SET; CONST operands: ARRAY OF Operand): BOOLEAN; 
	PROCEDURE ^ NumberToSet(code: LONGINT): SET; 
	PROCEDURE ^ SetToNumber(set: SET): LONGINT; 
	PROCEDURE ^ RotateRight(val, rot: LONGINT): LONGINT; 
	PROCEDURE ^ EncodeImmediate*(imm: LONGINT; VAR val, rot: LONGINT): BOOLEAN; 
	PROCEDURE ^ Encode(CONST instruction: Instruction; VAR code: LONGINT): BOOLEAN; 
	PROCEDURE ^ Decode(code: LONGINT; VAR instruction: Instruction): BOOLEAN; 
	PROCEDURE ^ EmitInstruction*(CONST instruction: Instruction; code: BinaryCode.Section): BOOLEAN; 
	PROCEDURE ^ Emit*(mnemonic, condition: LONGINT; flags: SET; CONST operands: ARRAY OF Operand; code: BinaryCode.Section); 
	PROCEDURE ^ Init*; 
	PROCEDURE ^ DumpConditionName*(w: Streams.Writer; CONST conditionNumber: LONGINT); 
	PROCEDURE ^ DumpRegisterName*(w: Streams.Writer; registerNumber: LONGINT); 
	PROCEDURE ^ DumpOperand*(w: Streams.Writer; CONST operand: Operand); 
	PROCEDURE ^ DumpInstruction*(w: Streams.Writer; CONST instruction: Instruction); 
	PROCEDURE ^ Test*(context: Commands.Context); 
	PROCEDURE ^ Test2*(context: Commands.Context); 
	PROCEDURE ^ ReadCode(file: Files.File): BitSets.BitSet; 
	PROCEDURE ^ Disassemble*(context: Commands.Context); 
BEGIN
END FoxARMInstructionSet.
