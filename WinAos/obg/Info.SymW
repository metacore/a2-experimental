MODULE Info;
	IMPORT SYSTEM, Machine, Heaps, Objects, Streams, Reflection, Modules, Commands, Options, Strings, D := Debugging, Kernel;
CONST 
	AddressSize = SIZEOF(ADDRESS); 
	RecordBlock = 1; 
	ProtRecBlock = 2; 
	ArrayBlock = 3; 
	SystemBlock = 4; 
	MaxNofTypes = 2048; 
	SortNone = 0; 
	SortByCount = 1; 
	SortBySize = 2; 
	SortByTotalSize = 3; 
	SortByName = 4; 
	AllocatorHistorySize = 4096; 
TYPE 
	Type = RECORD 
		ptag: ADDRESS; 
		count: LONGINT; 
		size: SIZE; 
		type: SHORTINT; 
		pc: ADDRESS; 
	END; 

	Analyzer = OBJECT 
	VAR 
		types: POINTER TO ARRAY OF Type; 
		nofElements: LONGINT; 
		nofHeapBlocks, nofFreeBlocks, nofSystemBlocks, nofRecordBlocks, nofProtRecBlocks, nofArrayBlocks: LONGINT; 
		sizeHeapBlocks, sizeFreeBlocks, sizeSystemBlocks, sizeRecordBlocks, sizeProtRecBlocks, sizeArrayBlocks: SIZE; 

		PROCEDURE ^  & Init(size: LONGINT); 
		PROCEDURE ^ Reset; 
		PROCEDURE ^ SortBy(mode: LONGINT); 
		PROCEDURE ^ Add(CONST block: Heaps.HeapBlock; byPC: BOOLEAN); 
		PROCEDURE ^ ShowBlocks(CONST mask: ARRAY OF CHAR; out: Streams.Writer); 
		PROCEDURE ^ Show(out: Streams.Writer; CONST mask: ARRAY OF CHAR; sortMode: LONGINT; byPC: BOOLEAN); 
	END Analyzer; 

	; 
VAR 
	currentMarkValueAddress: ADDRESS; 
	recentAllocators*: ARRAY AllocatorHistorySize OF RECORD 
		pc*: ARRAY 3 OF ADDRESS; 
		time*: HUGEINT; 
	END; 
	numRecentAllocators*: LONGINT; 

	PROCEDURE ^ LogAlloc(p: ANY); 
	PROCEDURE ^ WriteB(b: SIZE; out: Streams.Writer); 
	PROCEDURE ^ ModuleDetails*(context: Commands.Context); 
	PROCEDURE ^ ModulePC*(context: Commands.Context); 
	PROCEDURE ^ AllObjects*(context: Commands.Context); 
	PROCEDURE ^ ShowRecentAllocators*(out: Streams.Writer; scale: HUGEINT); 
	PROCEDURE ^ ClearRecentAllocators*; 
	PROCEDURE ^ AddAllocatorLogger*; 
	PROCEDURE ^ RecentAllocators*(context: Commands.Context); 
	PROCEDURE ^ TraceModule*(context: Commands.Context); 
	PROCEDURE ^ TraceReference*(context: Commands.Context); 
	PROCEDURE ^ MarkReference(analyzer: Analyzer; ref: ANY); 
	PROCEDURE ^ TraceProcessID*(context: Commands.Context); 
	PROCEDURE ^ FindProcessByID(id: LONGINT): Objects.Process; 
	PROCEDURE ^ AnalyzeMarkedBlocks(analyzer: Analyzer); 
	PROCEDURE ^ WriteType(adr: LONGINT; out: Streams.Writer); 
	PROCEDURE ^ GetName(adr: ADDRESS; VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ GetCurrentMarkValue(): LONGINT; 
	PROCEDURE ^ SetCurrentMarkValue(value: LONGINT); 
	PROCEDURE ^ IncrementCurrentMarkValue; 
	PROCEDURE ^ GetCurrentMarkValueAddress(): ADDRESS; 
	PROCEDURE ^ Terminate; 
BEGIN
END Info.
