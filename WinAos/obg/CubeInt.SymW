MODULE CubeInt;
	IMPORT SYSTEM, NbrInt, ArrayXdBytes, ArrayXd := ArrayXdInt, DataErrors, DataIO;
CONST 
	VERSION* = 1; 
TYPE 
	Value* = ArrayXd.Value; 

	Index* = LONGINT; 

	Array* = ArrayXd.Array; 

	Map* = ArrayXd.Map; 

	ArrayC* = ArrayXd.Array3; 

	Cube* = OBJECT {EXCLUSIVE} (Array)
	VAR 
		lenx-, leny-, lenz-: LONGINT; 
		ox-, oy-, oz-: LONGINT; 
		Get-: PROCEDURE {DELEGATE}(x, y, z: Index):Value; 

		PROCEDURE ^ AlikeX*(): ArrayXdBytes.Array; 
		PROCEDURE ^ NewRangeX*(neworigin, newlen: ArrayXdBytes.IndexArray; copydata: BOOLEAN); 
		PROCEDURE ^ ValidateCache*; 
		PROCEDURE ^ SetBoundaryCondition*(c: SHORTINT); 
		PROCEDURE ^  & New*(ox, w, oy, h, oz, d: LONGINT); 
		PROCEDURE ^ Alike*(): Cube; 
		PROCEDURE ^ NewRange*(ox, w, oy, h, oz, d: LONGINT; copydata: BOOLEAN); 
		PROCEDURE ^ Copy*(): Cube; 
		PROCEDURE ^ Set*(x, y, z: Index; v: Value); 
		PROCEDURE ^ CopyToVec*(dest: Array; dim: Index; srcx, srcy, srcz, destx, len: Index); 
		PROCEDURE ^ CopyToMtx*(dest: Array; dimx, dimy: Index; srcx, srcy, srcz, destx, desty, lenx, leny: Index); 
		PROCEDURE ^ CopyToCube*(dest: Array; srcx, srcy, srcz, destx, desty, destz, lenx, leny, lenz: Index); 
		PROCEDURE ^ CopyToHCube*(dest: Array; dimx, dimy, dimz: Index; srcx, srcy, srcz, destx, desty, destz, destt, lenx, leny, lenz: Index); 
		PROCEDURE ^ CopyTo1dArray*(VAR dest: ARRAY OF Value; sx, sy, sz, slenx, sleny, slenz: Index; dpos, dlen: LONGINT); 
		PROCEDURE ^ CopyTo2dArray*(VAR dest: ARRAY OF ARRAY OF Value; sx, sy, sz, slenx, sleny, slenz: Index; dposx, dposy, dlenx, dleny: LONGINT); 
		PROCEDURE ^ CopyTo3dArray*(VAR dest: ARRAY OF ARRAY OF ARRAY OF Value; sx, sy, sz, slenx, sleny, slenz: Index; dposx, dposy, dposz, dlenx, dleny, dlenz: LONGINT); 
		PROCEDURE ^ CopyTo4dArray*(VAR dest: ARRAY OF ARRAY OF ARRAY OF ARRAY OF Value; sx, sy, sz, slenx, sleny, slenz: Index; dposx, dposy, dposz, dpost, dlenx, dleny, dlenz, dlent: LONGINT); 
		PROCEDURE ^ CopyFrom1dArray*(VAR src: ARRAY OF Value; spos, slen: Index; dx, dy, dz, dlenx, dleny, dlenz: Index); 
		PROCEDURE ^ CopyFrom2dArray*(VAR src: ARRAY OF ARRAY OF Value; sposx, spoxy, slenx, sleny: Index; dx, dy, dz, dlenx, dleny, dlenz: Index); 
		PROCEDURE ^ CopyFrom3dArray*(VAR src: ARRAY OF ARRAY OF ARRAY OF Value; sposx, spoxy, sposz, slenx, sleny, slenz: Index; dx, dy, dz, dlenx, dleny, dlenz: Index); 
		PROCEDURE ^ CopyFrom4dArray*(VAR src: ARRAY OF ARRAY OF ARRAY OF ARRAY OF Value; sposx, spoxy, sposz, spost, slenx, sleny, slenz, slent: Index; dx, dy, dz, dlenx, dleny, dlenz: Index); 
	END Cube; 

	OPERATOR ^ ":="-(VAR l: Cube; VAR r: ARRAY OF ARRAY OF ARRAY OF Value); 
	OPERATOR ^ ":="-(VAR l: Cube; r: Value); 
	OPERATOR ^ "+"-(l, r: Cube): Cube; 
	OPERATOR ^ "-"-(l, r: Cube): Cube; 
	OPERATOR ^ "+"-(l: Cube; r: Value): Cube; 
	OPERATOR ^ "+"-(l: Value; r: Cube): Cube; 
	OPERATOR ^ "-"-(l: Cube; r: Value): Cube; 
	OPERATOR ^ "-"-(l: Value; r: Cube): Cube; 
	OPERATOR ^ "-"-(l: Cube): Cube; 
	OPERATOR ^ "*"-(l: Cube; r: Value): Cube; 
	OPERATOR ^ "*"-(l: Value; r: Cube): Cube; 
	OPERATOR ^ "DIV"-(l: Cube; r: Value): Cube; 
	OPERATOR ^ "DIV"-(l: Value; r: Cube): Cube; 
	OPERATOR ^ "MOD"-(l: Cube; r: Value): Cube; 
	OPERATOR ^ "MOD"-(l: Value; r: Cube): Cube; 
	PROCEDURE ^ LoadCube(R: DataIO.Reader; VAR obj: OBJECT); 
	PROCEDURE ^ StoreCube(W: DataIO.Writer; obj: OBJECT); 
	PROCEDURE ^ Register; 
	PROCEDURE ^ Load*(R: DataIO.Reader; VAR obj: Cube); 
	PROCEDURE ^ Store*(W: DataIO.Writer; obj: Cube); 
BEGIN
END CubeInt.
