MODULE ListGadgets IN Oberon;
	IMPORT Files, Strings, Input, Display, Display3, Printer, Printer3, Objects, Links, Attributes, Fonts, Texts, Oberon, Effects, Gadgets, ListRiders;
CONST 
	Version = 1; 
	FoldSize = 7; 
	ScrollLag = 10; 
	LArrow = 0C4X; 
	RArrow = 0C3X; 
	UArrow = 0C1X; 
	DArrow = 0C2X; 
	CR = 0DX; 
	UPage = 0A2X; 
	DPage = 0A3X; 
	Home = 0A8X; 
	End = 0A9X; 
	Pointed = 1; 
	inclpath* = 0; 
	multisel* = 1; 
	extendsel* = 2; 
	exponpoint* = 3; 
	locked* = 4; 
TYPE 
	Frame* = POINTER TO FrameDesc; 

	Line* = POINTER TO LineDesc; 

	Method* = POINTER TO MethodBlock; 

	Loc* = RECORD 
		line*: Line; 
		y*: SIGNED16; 
	END; 

	LineDesc* = RECORD 
		next*, prev*: Line; 
		key*: SIGNED32; 
		dx*, w*, h*, dsr*: SIGNED16; 
		n*, lev*: SIGNED16; 
		sel*: BOOLEAN; 
		folded*: BOOLEAN; 
		hasSub: BOOLEAN; 
	END; 

	MethodBlock* = RECORD 
		GetRider*: PROCEDURE (F: Frame; new: BOOLEAN):ListRiders.Rider; 
		Format*: PROCEDURE (F: Frame; R: ListRiders.Rider; L: Line); 
		Display*: PROCEDURE (F: Frame; Q: Display3.Mask; x, y, w, h: SIGNED16; R: ListRiders.Rider; L: Line); 
		PrintFormat*: PROCEDURE (F: Frame; R: ListRiders.Rider; L: Line); 
		Print*: PROCEDURE (F: Frame; Q: Display3.Mask; x, y, w, h: SIGNED16; R: ListRiders.Rider; L: Line); 
	END; 

	FrameDesc* = RECORD (Gadgets.FrameDesc)
		R*: ListRiders.Rider; 
		state0*: SET; 
		time*: SIGNED32; 
		left*, right*, top*, bottom*: SIGNED16; 
		hoff, levs, tab*: SIGNED16; 
		textC*, pointC*, backC*: SIGNED16; 
		lines*: Line; 
		first, point: Line; 
		vPos, vMax: Objects.Object; 
		hPos, hMax: Objects.Object; 
		do*: Method; 
		fnt*: Fonts.Font; 
		car*: BOOLEAN; 
		carloc*: Loc; 
		sel*: BOOLEAN; 
	END; 

	CaretMsg = RECORD (Display.FrameMsg)
		carY: SIGNED16; 
	END; 
VAR 
	methods*: Method; 
	WaitTime, mayscroll: SIGNED32; 
	W: Texts.Writer; 
	pointText: Texts.Text; 
	saved: Oberon.CaretMsg; 

	PROCEDURE ^ P(x: SIGNED32): SIGNED16; 
	PROCEDURE ^ TimeOk(): BOOLEAN; 
	PROCEDURE ^ ValueToStr(d: ListRiders.Data; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ ClipAgainst(VAR x, y, w, h: SIGNED16; X, Y, W, H: SIGNED16); 
	PROCEDURE ^ DrawFold*(Q: Display3.Mask; x, y, dim, col: SIGNED16; folded: BOOLEAN); 
	PROCEDURE ^ PrintFold*(Q: Display3.Mask; x, y, dim, col: SIGNED16; folded: BOOLEAN); 
	PROCEDURE ^ SetVPos(F: Frame; update: BOOLEAN); 
	PROCEDURE ^ SetVRange(F: Frame); 
	PROCEDURE ^ SetHPos(F: Frame); 
	PROCEDURE ^ SetHRange(F: Frame); 
	PROCEDURE ^ FormatLevel(F: Frame; R: ListRiders.Rider; level: SIGNED16; L: Line); 
	PROCEDURE ^ UpdateLevel(F: Frame; R: ListRiders.Rider; VAR L: Line; level: SIGNED16); 
	PROCEDURE ^ ReformatFrame(F: Frame); 
	PROCEDURE ^ LocateLine(F: Frame; y, Y: SIGNED16; VAR loc: Loc; VAR cnt: SIGNED16); 
	PROCEDURE ^ LocatePos(F: Frame; L: Line): SIGNED16; 
	PROCEDURE ^ NextSelLine(F: Frame; L: Line): Line; 
	PROCEDURE ^ FindParent(F: Frame; L: Line; level: SIGNED16): Line; 
	PROCEDURE ^ DeleteLine(F: Frame; R, linkR: ListRiders.Rider; L: Line); 
	PROCEDURE ^ WritePath(F: Frame; L: Line; level: SIGNED16); 
	PROCEDURE ^ GetSelection(F: Frame; VAR T: Texts.Text); 
	PROCEDURE ^ RemoveSelection(F: Frame); 
	PROCEDURE ^ InvertSelection(F: Frame; Q: Display3.Mask; x, y, Y0: SIGNED16; L0, L1: Line); 
	PROCEDURE ^ DeleteSelection(F: Frame); 
	PROCEDURE ^ AscSelection(F: Frame); 
	PROCEDURE ^ DescSelection(F: Frame); 
	PROCEDURE ^ FlipCaret(F: Frame; Q: Display3.Mask; x, y, Y: SIGNED16); 
	PROCEDURE ^ FlipCaretMsg(F: Frame; carY: SIGNED16); 
	PROCEDURE ^ RemoveCaret(F: Frame); 
	PROCEDURE ^ SetCaret(F: Frame; carline: Line; carpos: SIGNED16); 
	PROCEDURE ^ ScrollUpdate(F: Frame; Q: Display3.Mask; x, y, dy: SIGNED16; dlink: Objects.Object); 
	PROCEDURE ^ ScrollSilent(F: Frame; dline: SIGNED16; adjust: BOOLEAN; VAR dy: SIGNED16); 
	PROCEDURE ^ Scroll(F: Frame; Q: Display3.Mask; x, y, dline: SIGNED16; dlink: Objects.Object; VAR dy: SIGNED16); 
	PROCEDURE ^ ToggleLine*(F: Frame; line: Line); 
	PROCEDURE ^ InsertItems(F: Frame; T: Texts.Text; beg, end: SIGNED32; L: Line); 
	PROCEDURE ^ InsertLink(F: Frame; L: Line); 
	PROCEDURE ^ GetStandardRider*(F: Frame; new: BOOLEAN): ListRiders.Rider; 
	PROCEDURE ^ FormatLine*(F: Frame; R: ListRiders.Rider; L: Line); 
	PROCEDURE ^ DisplayLine*(F: Frame; Q: Display3.Mask; x, y, w, h: SIGNED16; R: ListRiders.Rider; L: Line); 
	PROCEDURE ^ PrintFormatLine*(F: Frame; R: ListRiders.Rider; L: Line); 
	PROCEDURE ^ PrintLine*(F: Frame; Q: Display3.Mask; x, y, w, h: SIGNED16; R: ListRiders.Rider; L: Line); 
	PROCEDURE ^ RestoreFrame(F: Frame; Q: Display3.Mask; x, y, w, h: SIGNED16); 
	PROCEDURE ^ PrintFrame(F: Frame; VAR M: Display.DisplayMsg); 
	PROCEDURE ^ TrackSelection(F: Frame; x, y: SIGNED16; VAR M: Oberon.InputMsg); 
	PROCEDURE ^ TrackPoint(F: Frame; x, y: SIGNED16; VAR M: Oberon.InputMsg); 
	PROCEDURE ^ TrackWheel(F: Frame; x, y: SIGNED16; VAR M: Oberon.InputMsg); 
	PROCEDURE ^ TrackCaret(F: Frame; x, y: SIGNED16; VAR M: Oberon.InputMsg); 
	PROCEDURE ^ Consume(F: Frame; x, y: SIGNED16; VAR M: Oberon.InputMsg); 
	PROCEDURE ^ UpdateModel(F: Frame); 
	PROCEDURE ^ UpdateFrame(F: Frame; M: Gadgets.UpdateMsg); 
	PROCEDURE ^ FrameAttr(F: Frame; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ FrameLink(F: Frame; VAR M: Objects.LinkMsg); 
	PROCEDURE ^ FrameBind(F: Frame; VAR M: Objects.BindMsg); 
	PROCEDURE ^ CopyFrame*(VAR M: Objects.CopyMsg; from, to: Frame); 
	PROCEDURE ^ StoreFrame(F: Frame; VAR M: Objects.FileMsg); 
	PROCEDURE ^ LoadFrame(F: Frame; VAR M: Objects.FileMsg); 
	PROCEDURE ^ FrameHandler*(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ InitFrame*(F: Frame); 
	PROCEDURE ^ NewFrame*; 
	PROCEDURE ^ MakeSimpleList(frame, model: ARRAY OF CHAR; VAR P: Display.Frame; VAR F: Frame; VAR vBar: Display.Frame); 
	PROCEDURE ^ Integrate(P, F: Display.Frame); 
	PROCEDURE ^ InsertVScrollList*; 
	PROCEDURE ^ InsertHVScrollList*; 
BEGIN
END ListGadgets.
