MODULE PNGDecoder;
	IMPORT SYSTEM, KernelLog, CRC, Raster, Streams, Inflate, WMGraphics, Codecs, Kernel;
CONST 
	BufSize = (4096 * 8); 
	Trace = FALSE; 
TYPE 
	ChunkHeader = RECORD 
		length: LONGINT; 
		name: ARRAY 5 OF CHAR; 
	END; 

	PNGHead = RECORD 
		width: LONGINT; 
		height: LONGINT; 
		bitDepth: LONGINT; 
		colorType: LONGINT; 
		compressMethod: LONGINT; 
		filterMethod: LONGINT; 
		interlaceMethod: LONGINT; 
	END; 

	IDATReader* = OBJECT 
	VAR 
		inR: Streams.Reader; 
		remain: LONGINT; 
		eof: BOOLEAN; 

		PROCEDURE ^  & Init*(firstChunk: LONGINT; inR: Streams.Reader; VAR outR: Streams.Reader); 
		PROCEDURE ^ Receiver(VAR buf: ARRAY OF CHAR; ofs, size, min: SIZE; VAR len: SIZE; VAR res: WORD); 
	END IDATReader; 

	PNGDecoder = OBJECT (Codecs.ImageDecoder)
	VAR 
		in: Streams.Reader; 
		errors: BOOLEAN; 
		first, last, isIDAT: BOOLEAN; 
		hdr: PNGHead; 
		crc: CRC.CRC32Stream; 
		pic: Raster.Image; 
		format8: Raster.Format; 
		palette: Raster.Palette; 
		bpp: LONGINT; 
		decoder: Inflate.Reader; 

		PROCEDURE ^ GetLineSize(width: LONGINT): LONGINT; 
		PROCEDURE ^ Init; 
		PROCEDURE ^ Decode; 
		PROCEDURE ^ ReadChunkHeader(VAR x: ChunkHeader); 
		PROCEDURE ^ Error(x: ARRAY OF CHAR); 
		PROCEDURE ^ SkipChunk(x: ChunkHeader); 
		PROCEDURE ^ CheckCRC; 
		PROCEDURE ^ ProcessChunk(x: ChunkHeader); 
		PROCEDURE ^ GetByte(): CHAR; 
		PROCEDURE ^ GetLongint(): LONGINT; 
		PROCEDURE ^ Open*(in: Streams.Reader; VAR res: WORD); 
		PROCEDURE ^ GetImageInfo*(VAR width, height: SIZE; VAR format, maxProgressionLevel: LONGINT); 
		PROCEDURE ^ GetNativeImage*(VAR img: Raster.Image); 
		PROCEDURE ^ Render*(img: Raster.Image); 
	END PNGDecoder; 
VAR 
	StartingRow, StartingCol, RowIncrement, ColIncrement: ARRAY 7 OF LONGINT; 
	MagicID: ARRAY 8 OF CHAR; 

	PROCEDURE ^ PaethPredictor(a, b, c: LONGINT): CHAR; 
	PROCEDURE ^ Factory*(): Codecs.ImageDecoder; 
BEGIN
END PNGDecoder.
