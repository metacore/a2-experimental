MODULE GfxRaster;
	IMPORT Math, GfxMatrix, GfxImages, GfxPaths, GfxRegions, GfxFonts, Gfx;
CONST 
	In* = 0; 
	Out* = 1; 
	InOut* = 2; 
TYPE 
	ClipArea* = POINTER TO ClipAreaDesc; 

	ClipAreaDesc* = RECORD (Gfx.ClipAreaDesc)
		reg*: GfxRegions.Region; 
	END; 

	Context* = POINTER TO ContextDesc; 

	ContextDesc* = RECORD (Gfx.ContextDesc)
		clipReg*: GfxRegions.Region; 
		dot*: PROCEDURE (rc: Context; x, y: SIGNED32); 
		rect*: PROCEDURE (rc: Context; lx, ly, rx, uy: SIGNED32); 
		setColPat*: PROCEDURE (rc: Context; col: Gfx.Color; pat: Gfx.Pattern); 
		col*: Gfx.Color; 
		pat*: Gfx.Pattern; 
		clipState*: SIGNED8; 
		useRegion, lateStroke: BOOLEAN; 
		cp: GfxPaths.Path; 
		pathReg: GfxRegions.Region; 
		plx, ply, prx, puy: SIGNED16; 
		border: SIGNED16; 
		devWidth: FLOAT32; 
		u, v: FLOAT32; 
		su, sv: FLOAT32; 
		du, dv: FLOAT32; 
		tu, tv: FLOAT32; 
		px, py: SIGNED32; 
		fu, fv: FLOAT32; 
		offset: FLOAT32; 
		deferred: BOOLEAN; 
		u0, v0, u1, v1: FLOAT32; 
	END; 

	PathData = RECORD (GfxPaths.EnumData)
		context: Context; 
	END; 

	RegData = RECORD (GfxRegions.EnumData)
		context: Context; 
	END; 

	PROCEDURE ^ IsEllipse*(x0, y0, x1, y1, x2, y2, sx, sy, ex, ey, flatness: FLOAT32; VAR rx, ry: FLOAT32): BOOLEAN; 
	PROCEDURE ^ ResetClip*(ctxt: Gfx.Context); 
	PROCEDURE ^ GetClipRect*(ctxt: Gfx.Context; VAR llx, lly, urx, ury: FLOAT32); 
	PROCEDURE ^ GetClip*(ctxt: Gfx.Context): Gfx.ClipArea; 
	PROCEDURE ^ SetClip*(ctxt: Gfx.Context; clip: Gfx.ClipArea); 
	PROCEDURE ^ InitClipState(rc: Context; x, y: SIGNED16); 
	PROCEDURE ^ UpdateClipState(rc: Context; x, y: SIGNED16); 
	PROCEDURE ^ HairLineEnter(rc: Context; u, v: FLOAT32); 
	PROCEDURE ^ HairLineTo(rc: Context; u, v: FLOAT32); 
	PROCEDURE ^ HairCircle(rc: Context; mx, my, r: SIGNED32); 
	PROCEDURE ^ HairEllipse(rc: Context; mx, my, rx, ry: SIGNED32); 
	PROCEDURE ^ EnterLine(rc: Context; u, v: FLOAT32); 
	PROCEDURE ^ AddLine(rc: Context; u, v: FLOAT32); 
	PROCEDURE ^ AddCircle(rc: Context; mx, my, r: SIGNED32); 
	PROCEDURE ^ AddEllipse(rc: Context; mx, my, rx, ry: SIGNED32); 
	PROCEDURE ^ EnumRegion(lx, ly, rx, uy: SIGNED16; VAR data: GfxRegions.EnumData); 
	PROCEDURE ^ FillRegion(rc: Context); 
	PROCEDURE ^ AddPathElem(VAR data: GfxPaths.EnumData); 
	PROCEDURE ^ StrokeHalfJoin(rc: Context; cu, cv, u, v, du, dv, hu, hv: FLOAT32; part: SIGNED32); 
	PROCEDURE ^ StrokeFullJoin(rc: Context; su, sv, cu, cv, eu, ev, idu, idv, odu, odv, hu, hv: FLOAT32); 
	PROCEDURE ^ StrokeCap(rc: Context; u, v, du, dv: FLOAT32); 
	PROCEDURE ^ ThickVerticalLine(rc: Context; lu, v0, v1: FLOAT32); 
	PROCEDURE ^ ThickHorizontalLine(rc: Context; rv, u0, u1: FLOAT32); 
	PROCEDURE ^ ThickLine(rc: Context; su, sv, eu, ev, du, dv: FLOAT32); 
	PROCEDURE ^ TrimJoinLength(cu, cv, u, v, du, dv, hu, hv: FLOAT32; VAR tu, tv: FLOAT32); 
	PROCEDURE ^ ThickEnter(rc: Context; u, v, idu, idv: FLOAT32); 
	PROCEDURE ^ ThickLineTo(rc: Context; u, v: FLOAT32); 
	PROCEDURE ^ ThickExit(rc: Context; odu, odv: FLOAT32); 
	PROCEDURE ^ ThickClose(rc: Context); 
	PROCEDURE ^ DashEnter(rc: Context; su, sv, idu, idv: FLOAT32); 
	PROCEDURE ^ DashLineTo(rc: Context; u, v: FLOAT32); 
	PROCEDURE ^ DashExit(rc: Context; odu, odv: FLOAT32); 
	PROCEDURE ^ DashClose(rc: Context); 
	PROCEDURE ^ StrokePrepare(rc: Context); 
	PROCEDURE ^ StrokeEnter(rc: Context; u, v, du, dv: FLOAT32); 
	PROCEDURE ^ StrokeLineTo(rc: Context; u, v: FLOAT32); 
	PROCEDURE ^ StrokeExit(rc: Context; du, dv: FLOAT32); 
	PROCEDURE ^ StrokeClose(rc: Context); 
	PROCEDURE ^ StrokePathElem(VAR data: GfxPaths.EnumData); 
	PROCEDURE ^ Begin*(ctxt: Gfx.Context; mode: SET); 
	PROCEDURE ^ End*(ctxt: Gfx.Context); 
	PROCEDURE ^ Enter*(ctxt: Gfx.Context; x, y, dx, dy: FLOAT32); 
	PROCEDURE ^ Exit*(ctxt: Gfx.Context; dx, dy: FLOAT32); 
	PROCEDURE ^ Close*(ctxt: Gfx.Context); 
	PROCEDURE ^ Line*(ctxt: Gfx.Context; x, y: FLOAT32); 
	PROCEDURE ^ Arc*(ctxt: Gfx.Context; x, y, x0, y0, x1, y1, x2, y2: FLOAT32); 
	PROCEDURE ^ Bezier*(ctxt: Gfx.Context; x, y, x1, y1, x2, y2: FLOAT32); 
	PROCEDURE ^ Show*(ctxt: Gfx.Context; x, y: FLOAT32; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ Render*(ctxt: Gfx.Context; mode: SET); 
	PROCEDURE ^ Rect*(ctxt: Gfx.Context; x0, y0, x1, y1: FLOAT32); 
	PROCEDURE ^ Ellipse*(ctxt: Gfx.Context; x, y, rx, ry: FLOAT32); 
	PROCEDURE ^ SetColPat*(rc: Context; col: Gfx.Color; pat: Gfx.Pattern); 
	PROCEDURE ^ InitContext*(rc: Context); 
BEGIN
END GfxRaster.
