MODULE antsPotts1DSurvey IN Oberon;
	IMPORT Math := MathL IN A2, vyLongreal, vyLongrealVec, vyBase, antsCommands, Input, vyName, Display3, vyLinks, vyPort, aM := antsMessages, vyHostStrings, antsReadWrite, Objects, antsSecurity, Texts, vyHostTexts, Gadgets, Attributes, antsBellman, antsArrays, antsVecOpt;
CONST 
	cMedian* = 0; 
	cMean* = 1; 
	cHampel* = 2; 
	cSaegezahn* = 3; 
	cHuber* = 4; 
	cAbs* = 0; 
	cLog* = 1; 
	cGaussML* = 0; 
	cLaplaceML* = 1; 
	cUnbiased* = 2; 
TYPE 
	StatisticObj* = POINTER TO StatisticObjDesc; 

	StatisticObjDesc* = RECORD (vyBase.ObjDesc)
		s*: antsBellman.Statistic; 
		data*, XAIC, XAICEst, XAICC, XSchwarz, XSchwarzEst, XSchwarzCor, XVarDiff, Xresiduals: antsArrays.X1d; 
		Bellman*, Xstern*: antsArrays.X2d; 
		rstern*: antsArrays.I2d; 
		gamma*: antsArrays.X1d; 
		jumps*: antsArrays.I1d; 
		InterLength*: antsArrays.I2d; 
		aiciOpt*, aicEstOpt*, aiccOpt*, schwarzOpt*, schwarzEstOpt*, schwarzCorOpt*, scanningOpt*, scanningLogOpt*, scanningVarOpt*, VarDiffOpt*, KneeCheckOpt*, MultiResOpt*, LongestRunOpt*: SIGNED32; 
		mad*: FLOAT64; 
		reko*: antsArrays.X1d; 
	END; 

	ArrayFunction = PROCEDURE (VAR f: ARRAY OF FLOAT64; i: SIGNED32):FLOAT64; 
VAR 
	globalS: antsBellman.Statistic; 
	globalG: FLOAT64; 

	PROCEDURE ^ Sprungzaehler*; 
	PROCEDURE ^ DoSprungzaehler*(obj: vyBase.Object; VAR sprungzahl: SIGNED32); 
	PROCEDURE ^ SsqFct(k, n: SIGNED32): FLOAT64; 
	PROCEDURE ^ SsqFctGamma(k, n: SIGNED32): FLOAT64; 
	PROCEDURE ^ BellmanFunction(VAR Bellman: antsArrays.X2d; VAR rstern: antsArrays.I2d; s: antsBellman.Statistic); 
	PROCEDURE ^ getMean(k, n: SIGNED32): FLOAT64; 
	PROCEDURE ^ Parti(rstern: antsArrays.I2d; VAR Xstern: antsArrays.X2d; s: antsBellman.Statistic); 
	PROCEDURE ^ Minimize(VAR this: ARRAY OF FLOAT64; VAR kmin: SIGNED32); 
	PROCEDURE ^ Akaike(Bellman: antsArrays.X2d; VAR Vals: antsArrays.X1d; sigmaqu: FLOAT64); 
	PROCEDURE ^ AkaikeIndependent(Bellman: antsArrays.X2d; VAR Vals: antsArrays.X1d; sigmaqu: FLOAT64); 
	PROCEDURE ^ AkaikeIndependentEst(Bellman: antsArrays.X2d; VAR Vals: antsArrays.X1d); 
	PROCEDURE ^ AkaikeCor(Bellman: antsArrays.X2d; VAR Vals: antsArrays.X1d); 
	PROCEDURE ^ SchwarzIndependent(Bellman: antsArrays.X2d; VAR Vals: antsArrays.X1d; sigmaqu: FLOAT64); 
	PROCEDURE ^ SchwarzIndependentEst(Bellman: antsArrays.X2d; VAR Vals: antsArrays.X1d); 
	PROCEDURE ^ SchwarzCor(Bellman: antsArrays.X2d; InterLength: antsArrays.I2d; VAR Vals: antsArrays.X1d); 
	PROCEDURE ^ MaxPosArrayFunction(VAR f: ARRAY OF FLOAT64; VAR values: antsArrays.X1d; p: ArrayFunction; value: FLOAT64): SIGNED32; 
	PROCEDURE ^ ARatio(VAR f: ARRAY OF FLOAT64; i: SIGNED32): FLOAT64; 
	PROCEDURE ^ ALen(VAR f: ARRAY OF FLOAT64; i: SIGNED32): FLOAT64; 
	PROCEDURE ^ MaxLenPos(VAR f: ARRAY OF FLOAT64; p: ArrayFunction): SIGNED32; 
	PROCEDURE ^ VarianceGain(type: SIGNED16; data: antsArrays.X1d; Xstern: antsArrays.X2d; jumps: antsArrays.I1d; VAR kstern: SIGNED32); 
	PROCEDURE ^ EstimatedVariance*(VAR x, y: ARRAY OF FLOAT64; type: SIGNED16): FLOAT64; 
	PROCEDURE ^ VarianceEstimatorScanning(type: SIGNED16; data: antsArrays.X1d; Xstern: antsArrays.X2d; jumps: antsArrays.I1d; gamma: antsArrays.X1d; gammalen: SIGNED32; VAR Vals: antsArrays.X1d); 
	PROCEDURE ^ VarianceTest(type: SIGNED16; data: antsArrays.X1d; Xstern: antsArrays.X2d; VAR Vals: antsArrays.X1d; variance: FLOAT64); 
	PROCEDURE ^ VarianceTestScanning(type: SIGNED16; data: antsArrays.X1d; Xstern: antsArrays.X2d; jumps: antsArrays.I1d; VAR Vals: antsArrays.X1d; variance: FLOAT64); 
	PROCEDURE ^ SecondDiff(Bellman: antsArrays.X2d; VAR Vals: antsArrays.X1d); 
	PROCEDURE ^ MultiCoefficients(y: ARRAY OF FLOAT64; Xstern: ARRAY OF FLOAT64; VAR Coeff: antsArrays.X2d); 
	PROCEDURE ^ MAD*(y: vyLongrealVec.tVector): FLOAT64; 
	PROCEDURE ^ MultiResCheck(data: ARRAY OF FLOAT64; mad: FLOAT64; Xstern: antsArrays.X2d; jumps: antsArrays.I1d; factor: FLOAT64; VAR ksterndl: SIGNED32); 
	PROCEDURE ^ LongestRunCheck(data: ARRAY OF FLOAT64; mad: FLOAT64; Xstern: antsArrays.X2d; jumps: antsArrays.I1d; VAR kstern: SIGNED32); 
	PROCEDURE ^ LargestJump(reconstruction: vyBase.Object; VAR maxjump: FLOAT64); 
	PROCEDURE ^ LargestJumpPos*(reconstruction: vyBase.Object; VAR maxjump: FLOAT64; VAR maxpos: SIGNED32); 
	PROCEDURE ^ CreateStatistics*(VAR s: StatisticObj; degraded: vyBase.Object; type: SIGNED32); 
	PROCEDURE ^ CreateScaledStatisticsGamma*(VAR s: StatisticObj; degraded: vyBase.Object; gamma: FLOAT64); 
	PROCEDURE ^ LineToVec*(VAR line: ARRAY OF FLOAT64; vec: vyBase.Object); 
	PROCEDURE ^ GetColumn*(VAR A: ARRAY OF ARRAY OF FLOAT64; column: SIGNED32; VAR col: ARRAY OF FLOAT64); 
	PROCEDURE ^ GetColumnVec*(VAR A: ARRAY OF ARRAY OF FLOAT64; column: SIGNED32; VAR vec: vyBase.Object); 
	PROCEDURE ^ AppendValue*(value: FLOAT64; vec: vyBase.Object); 
	PROCEDURE ^ ViewVector*(vec: vyLongrealVec.tVector; as: ARRAY OF CHAR); 
	PROCEDURE ^ ViewArray*(VAR a: ARRAY OF FLOAT64; as, name: ARRAY OF CHAR); 
	PROCEDURE ^ DoViewScannings(degraded: vyBase.Object; statistic: StatisticObj); 
	PROCEDURE ^ ViewScannings*; 
	PROCEDURE ^ MakeStatistic*; 
	PROCEDURE ^ Header*(VAR statistic: StatisticObj; VAR vec: vyBase.Object): BOOLEAN; 
	PROCEDURE ^ MLOrNot(VAR type: SIGNED16); 
	PROCEDURE ^ DoAIC*(statistic: StatisticObj; VAR vec: vyBase.Object; variance: FLOAT64); 
	PROCEDURE ^ MakeAIC*; 
	PROCEDURE ^ DoAICEst*(statistic: StatisticObj; vec: vyBase.Object); 
	PROCEDURE ^ MakeAICEst*; 
	PROCEDURE ^ DoAICC*(statistic: StatisticObj; vec: vyBase.Object); 
	PROCEDURE ^ MakeAICC*; 
	PROCEDURE ^ DoSIC*(statistic: StatisticObj; vec: vyBase.Object; variance: FLOAT64); 
	PROCEDURE ^ MakeSIC*; 
	PROCEDURE ^ DoSICEst*(statistic: StatisticObj; vec: vyBase.Object); 
	PROCEDURE ^ MakeSICEst*; 
	PROCEDURE ^ DoSICC*(statistic: StatisticObj; vec: vyBase.Object); 
	PROCEDURE ^ MakeSICC*; 
	PROCEDURE ^ DoMaxInterval*(statistic: StatisticObj; vec: vyBase.Object); 
	PROCEDURE ^ MakeMaxInterval*; 
	PROCEDURE ^ DoMaxIntervalLog*(statistic: StatisticObj; vec: vyBase.Object); 
	PROCEDURE ^ MakeMaxIntervalLog*; 
	PROCEDURE ^ DoVarianceGain*(statistic: StatisticObj; vec: vyBase.Object; type: SIGNED16); 
	PROCEDURE ^ MakeVarianceGain*; 
	PROCEDURE ^ DoVarianceTest*(statistic: StatisticObj; vec: vyBase.Object; variance: FLOAT64; type: SIGNED16); 
	PROCEDURE ^ MakeVarianceTest*; 
	PROCEDURE ^ DoVarianceTestScanning*(statistic: StatisticObj; vec: vyBase.Object; variance: FLOAT64; type: SIGNED16); 
	PROCEDURE ^ MakeVarianceTestScanning*; 
	PROCEDURE ^ DoKneeCheck*(statistic: StatisticObj; vec: vyBase.Object); 
	PROCEDURE ^ MakeKneeCheck*; 
	PROCEDURE ^ DoMultiCoeff*(statistic: StatisticObj; vec: vyBase.Object; factor: FLOAT64); 
	PROCEDURE ^ MakeMultiCoeff*; 
	PROCEDURE ^ DoLongestRun*(statistic: StatisticObj; vec: vyBase.Object); 
	PROCEDURE ^ MakeLongestRun*; 
	PROCEDURE ^ DoIterativePotts*(input: vyBase.Object; vec, res: vyLongrealVec.tVector; type: SIGNED16; factor: FLOAT64); 
	PROCEDURE ^ MakeIterativePotts*; 
	PROCEDURE ^ VarianceCurve*; 
	PROCEDURE ^ Integrate*; 
	PROCEDURE ^ MakeModiMatrix*; 
	PROCEDURE ^ DoModiMatrix(columns, offset: SIGNED32; dimx, dimy: SIGNED32; Matrix: antsArrays.X2d; type: SIGNED16; from, to: SIGNED32; matrixname: ARRAY OF CHAR); 
	PROCEDURE ^ DoRecursiveScanning(degraded: vyBase.Object; vec, res: vyLongrealVec.tVector; type: SIGNED16); 
	PROCEDURE ^ sgn*(x: FLOAT64): SIGNED16; 
	PROCEDURE ^ MaxRun(x: ARRAY OF FLOAT64): SIGNED32; 
	PROCEDURE ^ RecursiveScanning*; 
	PROCEDURE ^ EmpiricalVariance*; 
	PROCEDURE ^ DoEmpiricalVariance(obj1: vyBase.Object; variance: FLOAT64; n: SIGNED32; type, type2: SIGNED16; vv2, vv: vyLongrealVec.tVector); 
	PROCEDURE ^ DoConsistencySimulation(obj1: vyBase.Object; variance: FLOAT64; n: SIGNED32; gamma: FLOAT64; heightvec, posvec: vyLongrealVec.tVector); 
	PROCEDURE ^ ConsistencySimulation*; 
	PROCEDURE ^ EmpiricalGamma*; 
	PROCEDURE ^ DoEmpiricalGamma(obj1, obj2: vyBase.Object; variance: FLOAT64; n: SIGNED32; type, type2: SIGNED16; vv2: vyLongrealVec.tVector; vecname: ARRAY OF CHAR; intervalnumbervec: vyLongrealVec.tVector; numbervecname: ARRAY OF CHAR; partivec: vyLongrealVec.tVector; partivecname: ARRAY OF CHAR); 
	PROCEDURE ^ UpdateMSSQ(val: FLOAT64; at: SIGNED32; VAR mean, var: FLOAT64); 
	PROCEDURE ^ DoGammaStatistics(from, to, step, n, jumps1: SIGNED32; variance: FLOAT64; type: SIGNED16); 
	PROCEDURE ^ GammaStatistics*; 
	PROCEDURE ^ Regression(y: vyLongrealVec.tVector; start, end: SIGNED32; VAR a, b, residuum: FLOAT64); 
	PROCEDURE ^ SumofResiduals(y: vyLongrealVec.tVector; knee: SIGNED32; VAR totalresi: FLOAT64); 
	PROCEDURE ^ KneeCheck(Bellman: antsArrays.X2d; VAR Vals: antsArrays.X1d); 
BEGIN
END antsPotts1DSurvey.
