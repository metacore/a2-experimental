MODULE DivXDecoder;
	IMPORT SYSTEM, Files, Streams, Raster, KernelLog, Math, Reals, DivXHelper, DT := DivXTypes, Codecs, AVI;
CONST 
TYPE 
	MacroBlock* = OBJECT 
	VAR 
		mp4State: DT.MP4State; 
		mv: MotionCompensation; 
		mbWidth*, mbHeight*: SIGNED32; 
		DQTab: ARRAY 4 OF SIGNED32; 
		MCBPCTabIntra: ARRAY 32 OF DT.TabType; 
		MCBPCTabInter: ARRAY 256 OF DT.TabType; 
		CBPYTab: ARRAY 48 OF DT.TabType; 
		log: Streams.Writer; 
		texture: DivXHelper.TextureDecoding; 

		PROCEDURE ^  & init*(state: DT.MP4State; VAR reader: DT.VideoBuffer; logWriter: Streams.Writer); 
		PROCEDURE ^ Decode(VAR s: DT.VideoBuffer): BOOLEAN; 
		PROCEDURE ^ AddBlockIntra(comp, bx, by: SIGNED32); 
		PROCEDURE ^ AddBlockInter(comp, bx, by: SIGNED32); 
		PROCEDURE ^ TransferIDCTAdd(source: ADDRESS; dest: DT.PointerToArrayOfCHAR; destOffset, stride: SIZE); 
		PROCEDURE ^ TransferIDCTCopy(source: ADDRESS; dest: DT.PointerToArrayOfCHAR; destOffset, stride: SIZE); 
		PROCEDURE ^ TransferIDCTAddGeneric(source: ADDRESS; dest: DT.PointerToArrayOfCHAR; destOffset, stride: SIZE); 
		PROCEDURE ^ TransferIDCTAddMMX(source, dest: ADDRESS; stride: SIZE); 
		PROCEDURE ^ TransferIDCTCopyGeneric(source: ADDRESS; dest: DT.PointerToArrayOfCHAR; destOffset, stride: SIZE); 
		PROCEDURE ^ TransferIDCTCopyMMX(source, dest: ADDRESS; stride: SIZE); 
		PROCEDURE ^ GetCBPY(VAR s: DT.VideoBuffer): SIGNED32; 
		PROCEDURE ^ GetMCBPC(VAR s: DT.VideoBuffer): SIGNED32; 
	END MacroBlock; 

	MotionCompensation = OBJECT 
	VAR 
		MVTab0: ARRAY 14 OF DT.TabType; 
		MVTab1: ARRAY 96 OF DT.TabType; 
		MVTab2: ARRAY 124 OF DT.TabType; 
		MV: ARRAY 2 OF ARRAY 6 OF ARRAY (DT.DecMbr + 1) OF ARRAY (DT.DecMbc + 2) OF SIGNED32; 
		RoundTab: ARRAY 16 OF SIGNED32; 
		mp4State: DT.MP4State; 
		log: Streams.Writer; 

		PROCEDURE ^  & init*(state: DT.MP4State; logWriter: Streams.Writer); 
		PROCEDURE ^ FindPMV(block, comp: SIGNED32): SIGNED32; 
		PROCEDURE ^ Mmin(a, b: SIGNED32): SIGNED32; 
		PROCEDURE ^ Mmax(a, b: SIGNED32): SIGNED32; 
		PROCEDURE ^ SetMV(blockNum: SIGNED32; VAR s: DT.VideoBuffer): BOOLEAN; 
		PROCEDURE ^ GetMVData(VAR s: DT.VideoBuffer): SIGNED32; 
		PROCEDURE ^ ResetIntraMV(yPos, xPos: SIGNED32); 
		PROCEDURE ^ ResetNotCodedMV(yPos, xPos: SIGNED32); 
		PROCEDURE ^ Reconstruct(bx, by, mode: SIGNED32); 
		PROCEDURE ^ ReconComp(s: DT.PointerToArrayOfCHAR; sBaseOffset: SIGNED32; d: DT.PointerToArrayOfCHAR; dBaseOffset, lx, w, h, x, y, dx, dy, chroma: SIGNED32); 
		PROCEDURE ^ CopyBlock(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
		PROCEDURE ^ CopyBlockHor(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
		PROCEDURE ^ CopyBlockVer(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
		PROCEDURE ^ CopyBlockHorVer(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
		PROCEDURE ^ CopyBlockHorRound(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
		PROCEDURE ^ CopyBlockVerRound(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
		PROCEDURE ^ CopyBlockHorVerRound(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
		PROCEDURE ^ CopyMBlock(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
		PROCEDURE ^ CopyMBlockHor(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
		PROCEDURE ^ CopyMBlockVer(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
		PROCEDURE ^ CopyMBlockHorVer(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
		PROCEDURE ^ CopyMBlockHorRound(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
		PROCEDURE ^ CopyMBlockVerRound(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
		PROCEDURE ^ CopyMBlockHorVerRound(src, dst: DT.PointerToArrayOfCHAR; sIndex, dIndex, stride: SIGNED32); 
	END MotionCompensation; 

	MMXConsts = POINTER TO MMXConstsDesc; 

	MMXConstsDesc = RECORD 
		mmwMultY, mmwMultUG, mmwMultUB, mmwMultVR, mmwMultVG: SIGNED64; 
		mmb10, mmw0080, mmw00ff, mmwCutRed, mmwCutGreen, mmwCutBlue: SIGNED64; 
		mask5, mask6, maskBlue: SIGNED64; 
	END; 

	ColorSpace = OBJECT 
	VAR 
		mmxConsts: MMXConsts; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Convert(src: DT.PointerToArrayOfCHAR; srcYBaseOffset: SIGNED32; yStride: SIGNED32; srcUBaseOffset, srcVBaseOffset, uvStride: SIGNED32; img: Raster.Image; width, height, dstStride: SIZE); 
		PROCEDURE ^ ConvertYUVToRGB565MMX(puc: DT.PointerToArrayOfCHAR; pucYBaseOffset: SIGNED32; strideY: SIGNED32; pucUBaseOffset, pucVBaseOffset, strideUV: SIGNED32; pucOut: Raster.Image; widthY, heightY, strideOut: SIGNED32); 
		PROCEDURE ^ ScanLine565MMX(horizCount, pucV, pucU, pucY, pucOut: SIGNED32; mmxConsts: SIGNED32); 
		PROCEDURE ^ ConvertYUVToRGB565(puc: DT.PointerToArrayOfCHAR; pucYBaseOffset: ADDRESS; strideY: SIZE; pucUBaseOffset, pucVBaseOffset: ADDRESS; strideUV: SIZE; pucOut: Raster.Image; widthY, heightY, strideOut: SIZE); 
		PROCEDURE ^ ConvertYUVToRGB888(puc: DT.PointerToArrayOfCHAR; pucYBaseOffset: ADDRESS; strideY: SIZE; pucUBaseOffset, pucVBaseOffset: ADDRESS; strideUV: SIZE; pucOut: Raster.Image; widthY, heightY, strideOut: SIZE); 
	END ColorSpace; 

	DivXDecoder* = OBJECT (Codecs.VideoDecoder)
	VAR 
		s: Streams.Reader; 
		mp4State: DT.MP4State; 
		mp4StateBefore: DT.MP4State; 
		mp4Buffers: DT.MP4Buffers; 
		macroBlock: MacroBlock; 
		col: ColorSpace; 
		opt: DT.DecoderOptions; 
		stride: SIZE; 
		util: DT.MyUtils; 
		log: Files.Writer; 
		debugFile: Files.File; 
		img: Raster.Image; 
		frameCounter: SIGNED32; 
		buffer: DT.VideoBuffer; 
		videoWidth: SIGNED32; 
		videoHeight: SIGNED32; 
		frameRate*: SIGNED32; 
		init: BOOLEAN; 
		firstFrame: BOOLEAN; 
		hasMoreBytes: BOOLEAN; 

		PROCEDURE ^ Next*; 
		PROCEDURE ^ Render*(img: Raster.Image); 
		PROCEDURE ^ HasMoreData*(): BOOLEAN; 
		PROCEDURE ^ DecodeVOP; 
		PROCEDURE ^ Open*(in: Streams.Reader; VAR res: INTEGER); 
		PROCEDURE ^ GetVideoInfo*(VAR width, height, milliSecondsPerFrame: SIGNED32); 
		PROCEDURE ^ CanSeek*(): BOOLEAN; 
		PROCEDURE ^ GetCurrentFrame*(): SIGNED32; 
		PROCEDURE ^ SeekFrame*(frame: SIGNED32; goKeyFrame: BOOLEAN; VAR res: INTEGER); 
		PROCEDURE ^ SeekMillisecond*(millisecond: SIGNED32; goKeyFrame: BOOLEAN; VAR res: INTEGER); 
		PROCEDURE ^ MakeEdge(framePic: DT.PointerToArrayOfCHAR; framePicBaseOffset, edgedWidth, edgedHeight, edge: SIGNED32); 
		PROCEDURE ^ GetVisualObjectHeader(): BOOLEAN; 
		PROCEDURE ^ GetGOPHeader(): BOOLEAN; 
		PROCEDURE ^ NextStartCode; 
		PROCEDURE ^ GetVideoObjectPlaneHeader(): BOOLEAN; 
	END DivXDecoder; 

	PROCEDURE ^ Factory*(): Codecs.VideoDecoder; 
BEGIN
END DivXDecoder.
