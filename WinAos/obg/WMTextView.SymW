MODULE WMTextView;
	IMPORT Kernel, Modules, Inputs, KernelLog, XML, Texts, TextUtilities, SyntaxHighlighter, WMGraphics, WMGraphicUtilities, WMMessages, WMComponents, WMStandardComponents, Strings, WMDropTarget, Raster, WMRectangles, WMWindowManager, WMProperties, Commands, FileHandlers, Streams, WMPopups, FP1616, WMPieMenu, WMEvents, UnicodeBidirectionality, PositionDebugging, ContextualDependency, D := Debugging;
CONST 
	TraceRenderOptimize = 0; 
	TraceLayout = 1; 
	TraceBaseLine = 2; 
	TraceInvalidate = 3; 
	TraceCopy = 4; 
	TraceCommands = 5; 
	Trace = {}; 
	AltMMCommand = \"WMUtilities.Call"\; 
	CallURLPointer = 0; 
	NoWrap* = 0; 
	Wrap* = 1; 
	WrapWord* = 2; 
	AlignLeft = 0; 
	AlignCenter = 1; 
	AlignRight = 2; 
	DragDist = 5; 
	MaxCallParameterBuf = ((1 * 1024) * 1024); 
	MaxCommandLength = 256; 
	UsePieMenu = TRUE; 
	InterclickNone = 0; 
	Interclick01 = 1; 
	Interclick02 = 2; 
	InterclickCancelled = 99; 
	SelectionColor = 65376; 
	SelectionColorInterclick01 = LONGINT(0FFFF0060H); 
	SelectionColorInterclick02 = LONGINT(0FF000060H); 
	HLOver* = 0; 
	HLUnder* = 1; 
	HLWave* = 2; 
TYPE 
	Char32 = Texts.Char32; 

	ClickInfo = OBJECT 
	VAR 
		cmd, cmdPar: Strings.String; 
	END ClickInfo; 

	TabStops* = OBJECT 
	VAR 
		tabDist: LONGINT; 

		PROCEDURE ^ GetNextTabStop*(x: LONGINT): LONGINT; 
	END TabStops; 

	TabPositions* = POINTER TO ARRAY OF LONGINT; 

	CustomTabStops* = OBJECT (TabStops)
	VAR 
		positions: TabPositions; 

		PROCEDURE ^ GetNextTabStop*(x: LONGINT): LONGINT; 
		PROCEDURE ^  & New*(tp: TabPositions); 
	END CustomTabStops; 

	LineInfo = RECORD 
		leftIndent, rightIndent, firstIndent, spaceBefore, spaceAfter: LONGINT; 
		firstInParagraph, lastInParagraph: BOOLEAN; 
		height, width, ascent: LONGINT; 
		pos: LONGINT; 
		align: LONGINT; 
		tabStops: TabStops; 
	END; 

	LineInfoArray = POINTER TO ARRAY OF LineInfo; 

	Layout = OBJECT 
	VAR 
		nofLines: LONGINT; 
		lines: LineInfoArray; 
		text: Texts.Text; 
		paperWidth: LONGINT; 
		textWidth: LONGINT; 
		textHeight: LONGINT; 
		layoutLineProc: PROCEDURE {DELEGATE}(VAR pos: LONGINT; VAR ch: Char32; VAR lineInfo: LineInfo; wrapWidth, stopPos, stopXPos: LONGINT); 
		bidiFormatter: UnicodeBidirectionality.BidiFormatter; 
		initialized: BOOLEAN; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ SetText(text: Texts.Text); 
		PROCEDURE ^ GrowLines; 
		PROCEDURE ^ FindLineNrByPos(pos: LONGINT): LONGINT; 
		PROCEDURE ^ GetLineStartPos(lineNr: LONGINT): LONGINT; 
		PROCEDURE ^ GetLineLength(lineNr: LONGINT): LONGINT; 
		PROCEDURE ^ GetNofLines(): LONGINT; 
		PROCEDURE ^ LayoutLine(VAR pos: LONGINT; VAR lineInfo: LineInfo); 
		PROCEDURE ^ FullLayout(textChanged: BOOLEAN); 
		PROCEDURE ^ FixLayoutFrom(pos, delta: LONGINT; VAR first, last: LONGINT; VAR linesChanged: BOOLEAN); 
	END Layout; 

	Highlight* = OBJECT 
	VAR 
		kind: LONGINT; 
		from*, to*: Texts.TextPosition; 
		a*, b*: LONGINT; 
		active*: BOOLEAN; 
		oldFrom, oldTo: LONGINT; 
		oldColor, color: WMGraphics.Color; 
		text: Texts.UnicodeText; 
		onChanged: WMMessages.CompCommand; 

		PROCEDURE ^  & New*; 
		PROCEDURE ^ SetKind*(kind: LONGINT); 
		PROCEDURE ^ SetColor*(color: WMGraphics.Color); 
		PROCEDURE ^ SetFrom*(from: LONGINT); 
		PROCEDURE ^ SetTo*(to: LONGINT); 
		PROCEDURE ^ SetFromTo*(from, to: LONGINT); 
		PROCEDURE ^ Sort*; 
		PROCEDURE ^ SetText(text: Texts.UnicodeText); 
	END Highlight; 

	HighlightArray = POINTER TO ARRAY OF Highlight; 

	PositionMarker* = OBJECT 
	VAR 
		pos: Texts.TextPosition; 
		img: WMGraphics.Image; 
		color: WMGraphics.Color; 
		hotX, hotY: LONGINT; 
		currentArea: WMRectangles.Rectangle; 
		text: Texts.UnicodeText; 
		onChanged: WMMessages.CompCommand; 
		visible: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Draw(canvas: WMGraphics.Canvas; x, y, ascent: LONGINT); 
		PROCEDURE ^ GetArea(x, y, ascent: LONGINT): WMRectangles.Rectangle; 
		PROCEDURE ^ Load*(CONST filename: ARRAY OF CHAR); 
		PROCEDURE ^ SetVisible*(visible: BOOLEAN); 
		PROCEDURE ^ SetPosition*(pos: LONGINT); 
		PROCEDURE ^ GetPosition*(): LONGINT; 
		PROCEDURE ^ SetColor*(color: WMGraphics.Color); 
		PROCEDURE ^ SetText(text: Texts.UnicodeText); 
		PROCEDURE ^ SetNextInternalPosition*(next: LONGINT); 
		PROCEDURE ^ GetNextInternalPosition*(): LONGINT; 
	END PositionMarker; 

	PositionMarkerArray = POINTER TO ARRAY OF PositionMarker; 

	Cursor = OBJECT (PositionMarker)
	VAR 
		isVisible: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ SetCurrentVisibility(isVisible: BOOLEAN); 
		PROCEDURE ^ GetArea(x, y, ascent: LONGINT): WMRectangles.Rectangle; 
		PROCEDURE ^ Draw(canvas: WMGraphics.Canvas; x, y, ascent: LONGINT); 
	END Cursor; 

	CursorBlinkerCallback = PROCEDURE {DELEGATE}(isVisible: BOOLEAN); 

	CursorBlinker* = OBJECT {EXCLUSIVE} 
	VAR 
		cursor: ANY; 
		callback: CursorBlinkerCallback; 
		interval: LONGINT; 
		isVisible: BOOLEAN; 
		alive, dead: BOOLEAN; 
		timer: Kernel.Timer; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Set*(cursor: ANY; callback: CursorBlinkerCallback); 
		PROCEDURE ^ SetInterval*(ms: LONGINT); 
		PROCEDURE ^ Remove*(cursor: ANY); 
		PROCEDURE ^ Show*(cursor: ANY); 
		PROCEDURE ^ Finalize; 
	BEGIN{ACTIVE} 
	END CursorBlinker; 

	TextDropTarget* = OBJECT (WMDropTarget.DropTarget)
	VAR 
		text: Texts.Text; 
		pos: Texts.TextPosition; 

		PROCEDURE ^  & New*(text: Texts.Text; pos: Texts.TextPosition); 
		PROCEDURE ^ GetInterface*(type: LONGINT): WMDropTarget.DropInterface; 
	END TextDropTarget; 

	LinkWrapper* = POINTER TO RECORD 
		link*: Texts.Link; 
	END; 

	TextView* = OBJECT {EXCLUSIVE} (WMComponents.VisualComponent)
	VAR 
		defaultTextColor-, defaultTextBgColor-: WMProperties.ColorProperty; 
		defaultTextColorI, defaultTextBgColorI: LONGINT; 
		isMultiLine-: WMProperties.BooleanProperty; 
		isMultiLineI: BOOLEAN; 
		wrapMode-: WMProperties.Int32Property; 
		wrapModeI: LONGINT; 
		firstLine-: WMProperties.Int32Property; 
		firstLineI: LONGINT; 
		leftShift-: WMProperties.Int32Property; 
		leftShiftI: LONGINT; 
		showBorder-: WMProperties.BooleanProperty; 
		showBorderI: BOOLEAN; 
		borders-: WMProperties.RectangleProperty; 
		bordersI, borderClip: WMRectangles.Rectangle; 
		x0: LONGINT; 
		alwaysShowCursor-: WMProperties.BooleanProperty; 
		alwaysShowCursorI: BOOLEAN; 
		showLabels-: WMProperties.BooleanProperty; 
		isPassword-: WMProperties.BooleanProperty; 
		isPasswordI: BOOLEAN; 
		passwordChar-: WMProperties.Int32Property; 
		mouseWheelScrollSpeed-: WMProperties.Int32Property; 
		mouseWheelScrollSpeedI: LONGINT; 
		allowCommandExecution-: WMProperties.BooleanProperty; 
		allowTextSelection-: WMProperties.BooleanProperty; 
		allowPiemenu-: WMProperties.BooleanProperty; 
		highlighting-: WMProperties.StringProperty; 
		highlighter: SyntaxHighlighter.Highlighter; 
		state: SyntaxHighlighter.State; 
		fontCache: FontCache; 
		textAlignV-: WMProperties.Int32Property; 
		showLineNumbers-: WMProperties.BooleanProperty; 
		showLineNumbersI: BOOLEAN; 
		lineNumberColor-, lineNumberBgColor-: WMProperties.ColorProperty; 
		lineNumberColorI, lineNumberBgColorI: LONGINT; 
		lineNumberFont, lineNumberFont10: WMGraphics.Font; 
		indicateTabs-: WMProperties.BooleanProperty; 
		indicateTabsI: BOOLEAN; 
		clBgCurrentLine-: WMProperties.ColorProperty; 
		clBgCurrentLineI: LONGINT; 
		selection-: Highlight; 
		cursor-: Cursor; 
		onLinkClicked-: WMEvents.EventSource; 
		onCtrlClicked-: WMEvents.EventSource; 
		commandCaller*: OBJECT; 
		commandWriter*, errorWriter*: Streams.Writer; 
		onCursorChanged*: PROCEDURE {DELEGATE}; 
		optimize*: BOOLEAN; 
		piemenu: WMPieMenu.Menu; 
		text: Texts.Text; 
		layout: Layout; 
		utilreader: Texts.TextReader; 
		clipState: WMGraphics.CanvasState; 
		defaultTabStops: TabStops; 
		vScrollbar: WMStandardComponents.Scrollbar; 
		hScrollbar: WMStandardComponents.Scrollbar; 
		nofHighlights: LONGINT; 
		highlights: HighlightArray; 
		nofPositionMarkers: LONGINT; 
		positionMarkers: PositionMarkerArray; 
		lastCursorPos: LONGINT; 
		selecting: BOOLEAN; 
		doubleclickedWord: BOOLEAN; 
		dragPossible: BOOLEAN; 
		dragSelA, dragSelB: Texts.TextPosition; 
		dragCopy: BOOLEAN; 
		canStart, openFile: BOOLEAN; 
		commandMarker: Highlight; 
		downX, downY: LONGINT; 
		selectWords: BOOLEAN; 
		wordSelOrdered: BOOLEAN; 
		lineEnter: LONGINT; 
		modifierFlags: SET; 
		oldFlags: SET; 
		interclick: LONGINT; 
		lastTimeStamp: LONGINT; 
		oldObject, focusObject: ANY; 
		oldPos, focusPos: LONGINT; 
		objHasFocus: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Initialize*; 
		PROCEDURE ^ Finalize*; 
		PROCEDURE ^ FocusReceived*; 
		PROCEDURE ^ FocusLost*; 
		PROCEDURE ^ InsertChar(char: Char32): INTEGER; 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ SetScrollbars*(hScrollbar, vScrollbar: WMStandardComponents.Scrollbar); 
		PROCEDURE ^ ScrollbarsChanged(sender, data: ANY); 
		PROCEDURE ^ UpdateScrollbars; 
		PROCEDURE ^ BordersChanged; 
		PROCEDURE ^ WrapModeChanged; 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
		PROCEDURE ^ Resized*; 
		PROCEDURE ^ SetText*(text: Texts.Text); 
		PROCEDURE ^ SetSyntaxHighlighter*(highlighter: SyntaxHighlighter.Highlighter); 
		PROCEDURE ^ ShowLineNumbers(enabled: BOOLEAN); 
		PROCEDURE ^ SetTabStops*(ts: TabStops); 
		PROCEDURE ^ AddHighlight(highlight: Highlight); 
		PROCEDURE ^ CreateHighlight*(): Highlight; 
		PROCEDURE ^ RemoveHighlight*(x: Highlight); 
		PROCEDURE ^ InvalidateRange(a, b: LONGINT); 
		PROCEDURE ^ HighlightChanged(sender, data: ANY); 
		PROCEDURE ^ AddPositionMarker(pm: PositionMarker); 
		PROCEDURE ^ CreatePositionMarker*(): PositionMarker; 
		PROCEDURE ^ CreateCursor*(): Cursor; 
		PROCEDURE ^ RemovePositionMarker*(x: PositionMarker); 
		PROCEDURE ^ PositionMarkerChanged(sender, data: ANY); 
		PROCEDURE ^ CheckNumberOfLines; 
		PROCEDURE ^ CheckCursor; 
		PROCEDURE ^ CheckParagraphBegin(lineNr: LONGINT; VAR height: LONGINT); 
		PROCEDURE ^ CheckParagraphEnd(lineNr: LONGINT; VAR height: LONGINT); 
		PROCEDURE ^ TextChanged(sender, data: ANY); 
		PROCEDURE ^ GetLineLeftIndent(linenr: LONGINT): LONGINT; 
		PROCEDURE ^ FindLineByY*(firstLine, y: LONGINT): LONGINT; 
		PROCEDURE ^ ViewToTextPos*(x, y: LONGINT; VAR pos: LONGINT); 
		PROCEDURE ^ GetHeight*(width: LONGINT): LONGINT; 
		PROCEDURE ^ GetMinMaxWidth*(VAR word, line: LONGINT); 
		PROCEDURE ^ LineYPos(lineNr: LONGINT; VAR y0, y1: LONGINT); 
		PROCEDURE ^ FindScreenPos*(pos: LONGINT; VAR x, y: LONGINT): BOOLEAN; 
		PROCEDURE ^ GetInternalPos*(pos: LONGINT): LONGINT; 
		PROCEDURE ^ GetDisplayPos*(pos: LONGINT): LONGINT; 
		PROCEDURE ^ IsRightToLeft*(pos: LONGINT): BOOLEAN; 
		PROCEDURE ^ GetParagraphEmbeddingLevel*(pos: LONGINT): LONGINT; 
		PROCEDURE ^ LayoutLine(VAR pos: LONGINT; VAR ch: Char32; VAR l: LineInfo; wrapwidth, stopPos, stopXPos: LONGINT); 
		PROCEDURE ^ RenderLine*(canvas: WMGraphics.Canvas; VAR l: LineInfo; linenr, top, llen: LONGINT); 
		PROCEDURE ^ RenderAboveTextMarkers*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ StoreLineEnter; 
		PROCEDURE ^ WheelMove*(dz: LONGINT); 
		PROCEDURE ^ AbortStart; 
		PROCEDURE ^ DoubleClickSelect(pos: LONGINT); 
		PROCEDURE ^ SetInterclick(new: LONGINT); 
		PROCEDURE ^ PointerDown*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ PointerMove*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ PointerUp*(x, y: LONGINT; keys: SET); 
		PROCEDURE ^ TransformCoordinates(VAR x, y: LONGINT; obj: WMComponents.VisualComponent); 
		PROCEDURE ^ ChangePointer(pointerInfo: WMWindowManager.PointerInfo); 
		PROCEDURE ^ HitObject(x, y: LONGINT; VAR pos: LONGINT; VAR obj: ANY): BOOLEAN; 
		PROCEDURE ^ HitLink(x, y: LONGINT; VAR pos: LONGINT; VAR link: Texts.Link): BOOLEAN; 
		PROCEDURE ^ LinkClick(link: Texts.Link); 
		PROCEDURE ^ LinkClicked*(sender, data: ANY); 
		PROCEDURE ^ FindLabel*(CONST label: ARRAY OF CHAR; VAR pos: LONGINT): BOOLEAN; 
		PROCEDURE ^ AutoStartDrag*; 
		PROCEDURE ^ DragWasAccepted(sender, data: ANY); 
		PROCEDURE ^ DragOver*(x, y: LONGINT; dragInfo: WMWindowManager.DragInfo); 
		PROCEDURE ^ DragDropped*(x, y: LONGINT; dragInfo: WMWindowManager.DragInfo); 
		PROCEDURE ^ CopySelection*; 
		PROCEDURE ^ DeleteSelection*; 
		PROCEDURE ^ Paste*; 
		PROCEDURE ^ SelectAll*; 
		PROCEDURE ^ KeyStartSelection(pos: LONGINT); 
		PROCEDURE ^ KeyUpdateSelection(pos: LONGINT); 
		PROCEDURE ^ CursorChanged; 
		PROCEDURE ^ CursorUp*(select: BOOLEAN); 
		PROCEDURE ^ CursorDown*(select: BOOLEAN); 
		PROCEDURE ^ CursorLeft*(word, select: BOOLEAN); 
		PROCEDURE ^ CursorRight*(word, select: BOOLEAN); 
		PROCEDURE ^ PageDown*(select: BOOLEAN); 
		PROCEDURE ^ PageUp*(select: BOOLEAN); 
		PROCEDURE ^ Home*(ctrl, select: BOOLEAN); 
		PROCEDURE ^ End*(ctrl, select: BOOLEAN); 
		PROCEDURE ^ KeyEvent*(ucs: LONGINT; flags: SET; VAR keysym: LONGINT); 
		PROCEDURE ^ SetFlags*(flags: SET); 
		PROCEDURE ^ FindCommandRange*(pos: LONGINT; VAR start, end, nofLastSelections: LONGINT); 
		PROCEDURE ^ FindCommand*(pos: LONGINT; VAR start, end: LONGINT); 
		PROCEDURE ^ StartCommand*(pos: LONGINT; openFile: BOOLEAN); 
		PROCEDURE ^ Start(sender, data: ANY); 
		PROCEDURE ^ Open(sender, data: ANY); 
		PROCEDURE ^ PieMenuStart(sender, data: ANY); 
		PROCEDURE ^ PieMenuOpen(sender, data: ANY); 
		PROCEDURE ^ PieMenuCopy(sender, data: ANY); 
		PROCEDURE ^ PieMenuPaste(sender, data: ANY); 
		PROCEDURE ^ ShowContextMenu*(x, y: LONGINT); 
		PROCEDURE ^ HandleInternal*(VAR x: WMMessages.Message); 
	END TextView; 

	FontEntry = OBJECT 
	VAR 
		name: ARRAY 256 OF CHAR; 
		attributes: FontAttributes; 
		next: FontEntry; 

		PROCEDURE ^  & Init(CONST name: ARRAY OF CHAR); 
	END FontEntry; 

	FontAttributes = OBJECT 
	VAR 
		font: WMGraphics.Font; 
		size: LONGINT; 
		style: SET; 
		next: FontAttributes; 

		PROCEDURE ^  & Init(size: LONGINT; style: SET); 
	END FontAttributes; 

	FontCache = OBJECT 
	VAR 
		entries: FontEntry; 
		defaultFont: WMGraphics.Font; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Find(CONST name: ARRAY OF CHAR; size: LONGINT; style: SET): WMGraphics.Font; 
		PROCEDURE ^ Add(CONST name: ARRAY OF CHAR; size: LONGINT; style: SET): WMGraphics.Font; 
		PROCEDURE ^ GetFont(CONST name: ARRAY OF CHAR; size: LONGINT; style: SET): WMGraphics.Font; 
	END FontCache; 

	; 
VAR 
	manager: WMWindowManager.WindowManager; 
	cursorBlinker-: CursorBlinker; 
	PTVIsMultiLine, PTVIsPassword, PTVShowBorder, PTValwaysShowCursor, PTVShowLabels: WMProperties.BooleanProperty; 
	PTVAllowCommandExecution, PTVAllowTextSelection, PTVAllowPiemenu: WMProperties.BooleanProperty; 
	PTVWrapMode, PTVMouseWheelScrollSpeed, PVTtextAlignV: WMProperties.Int32Property; 
	PTVfirstLine, PTVleftShift, PTVPasswordChar: WMProperties.Int32Property; 
	PTVdefaultTextColor, PTVdefaultTextBgColor: WMProperties.ColorProperty; 
	PTVborders: WMProperties.RectangleProperty; 
	PTVonLinkClick, PTVonLinkClickInfo: Strings.String; 
	PTVonCtrlLinkClick, PTVonCtrlLinkClickInfo: Strings.String; 
	PTVShowLineNumbers, PTVIndicateTabs: WMProperties.BooleanProperty; 
	PTVHighlighting: WMProperties.StringProperty; 
	PTVLineNumberColor, PTVLineNumberBgColor, PTVclBgCurrentLine: WMProperties.ColorProperty; 
	currentTextView: TextView; 
	StrTextView: Strings.String; 
	DefaultStyle: POINTER TO RECORD 
	END; 

	PROCEDURE ^ Limit(x, min, max: LONGINT): LONGINT; 
	PROCEDURE ^ GetFontFromAttr(info: Texts.FontInfo): WMGraphics.Font; 
	PROCEDURE ^ IsSameFont(f1, f2: WMGraphics.Font): BOOLEAN; 
	PROCEDURE ^ CheckFont(style: SyntaxHighlighter.Style; font: WMGraphics.Font; VAR fontCache: FontCache); 
	PROCEDURE ^ InitStrings; 
	PROCEDURE ^ InitPrototypes; 
	PROCEDURE ^ EnablePiemenu*; 
	PROCEDURE ^ DisablePiemenu*; 
	PROCEDURE ^ TextViewFactory*(): XML.Element; 
	PROCEDURE ^ InsertChar*(newChar: Char32): INTEGER; 
	PROCEDURE ^ Refresh*; 
	PROCEDURE ^ Cleanup; 
	PROCEDURE ^ GenTextView*(): XML.Element; 
BEGIN
END WMTextView.
