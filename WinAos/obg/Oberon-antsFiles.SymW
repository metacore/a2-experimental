MODULE antsFiles IN Oberon;
	IMPORT Files, Texts, Strings, antsSecurity, Reals IN A2, SYSTEM, aM := antsMessages, vyIntVec, vyLongintVec, vyRealVec, vyLongrealVec;
CONST 
	CR* = Strings.CR; 
	LF* = Strings.LF; 
	TAB* = Strings.Tab; 
	OldTextBlockId = 1X; 
	inval* = 0; 
	bin* = 1; 
	ascii* = 2; 
TYPE 
	Rider* = OBJECT 
	VAR 
		R*: Files.Rider; 
		type*: SIGNED16; 
		reverse*: BOOLEAN; 
		ignoreNL*, noExponent*: BOOLEAN; 
		eot*, err*: BOOLEAN; 
		nextCh: CHAR; 
		line*: SIGNED32; 
		class: SIGNED16; 
		i: SIGNED32; 
		x: FLOAT32; 
		y: FLOAT64; 
		c: CHAR; 
		len: SIGNED8; 
		s: ARRAY 64 OF CHAR; 
		scanneropen: BOOLEAN; 
		check: SIGNED32; 

		PROCEDURE ^ WriteType*; 
		PROCEDURE ^ ReadType*; 
		PROCEDURE ^ Read*(VAR ch: CHAR); 
		PROCEDURE ^ ReadBytes*(VAR ch: ARRAY OF SYSTEM.BYTE; num: SIGNED32); 
		PROCEDURE ^ ReadInt*(VAR x: SIGNED16); 
		PROCEDURE ^ ReadIntsFix*(VAR x: ARRAY OF SIGNED16; num: SIGNED32); 
		PROCEDURE ^ ReadIntsLine*(VAR x: vyIntVec.tVector); 
		PROCEDURE ^ ReadLInt*(VAR x: SIGNED32); 
		PROCEDURE ^ ReadLIntsFix*(VAR x: ARRAY OF SIGNED32; num: SIGNED32); 
		PROCEDURE ^ ReadLIntsLine*(VAR x: vyLongintVec.tVector); 
		PROCEDURE ^ ReadReal*(VAR x: FLOAT32); 
		PROCEDURE ^ ReadRealsFix*(VAR x: ARRAY OF FLOAT32; num: SIGNED32); 
		PROCEDURE ^ ReadRealsLine(VAR x: vyRealVec.tVector); 
		PROCEDURE ^ ReadLReal*(VAR x: FLOAT64); 
		PROCEDURE ^ ReadLRealsFix*(VAR x: ARRAY OF FLOAT64; num: SIGNED32); 
		PROCEDURE ^ ReadLRealsLine*(VAR x: vyLongrealVec.tVector); 
		PROCEDURE ^ ReadString*(VAR x: ARRAY OF CHAR); 
		PROCEDURE ^ ReadUntil*(ch: CHAR): BOOLEAN; 
		PROCEDURE ^ ReadLn*; 
		PROCEDURE ^ Write*(ch: CHAR); 
		PROCEDURE ^ WriteBytes*(VAR ch: ARRAY OF SYSTEM.BYTE; num: SIGNED32); 
		PROCEDURE ^ WriteInt*(x: SIGNED16); 
		PROCEDURE ^ WriteEmptyLine*; 
		PROCEDURE ^ WriteIntsFix*(VAR x: ARRAY OF SIGNED16; num: SIGNED32); 
		PROCEDURE ^ WriteIntsLine*(x: vyIntVec.tVector); 
		PROCEDURE ^ WriteLInt*(x: SIGNED32); 
		PROCEDURE ^ WriteLIntsFix*(VAR x: ARRAY OF SIGNED32; num: SIGNED32); 
		PROCEDURE ^ WriteLIntsLine*(x: vyLongintVec.tVector); 
		PROCEDURE ^ WriteReal*(x: FLOAT32); 
		PROCEDURE ^ WriteRealsFix*(VAR x: ARRAY OF FLOAT32; num: SIGNED32); 
		PROCEDURE ^ WriteRealsLine*(x: vyRealVec.tVector); 
		PROCEDURE ^ WriteLReal*(x: FLOAT64); 
		PROCEDURE ^ WriteLRealsFix*(VAR x: ARRAY OF FLOAT64; num: SIGNED32); 
		PROCEDURE ^ WriteLRealsLine*(x: vyLongrealVec.tVector); 
		PROCEDURE ^ WriteString*(x: ARRAY OF CHAR); 
		PROCEDURE ^ WriteLn*; 
		PROCEDURE ^ SetPos*(pos: SIGNED32); 
		PROCEDURE ^ Set*(type: SIGNED16); 
		PROCEDURE ^ SetAscii*; 
		PROCEDURE ^ SetBin*; 
		PROCEDURE ^ Enter*(VAR FR: Files.Rider); 
		PROCEDURE ^ Leave*(VAR FR: Files.Rider); 
		PROCEDURE ^ Old*(name: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ ForceOld*(name: ARRAY OF CHAR); 
		PROCEDURE ^ New*(name: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ ForceNew*(name: ARRAY OF CHAR); 
		PROCEDURE ^ Pos*(): SIGNED32; 
		PROCEDURE ^ Close*; 
	END Rider; 
VAR 
	nameChars: ARRAY 256 OF BOOLEAN; 
	TextBlockId, DocBlockId, NoSpex, NoSpex2, TextSpex: CHAR; 

	PROCEDURE ^ StartReading(R: Rider); 
	PROCEDURE ^ StopReading(R: Rider; VAR num: SIGNED32): BOOLEAN; 
	PROCEDURE ^ StartWriting(R: Rider; num: SIGNED32); 
	PROCEDURE ^ StopWriting(R: Rider); 
	PROCEDURE ^ AsciiWriteString(W: Rider; s: ARRAY OF CHAR); 
	PROCEDURE ^ WriteInt(W: Rider; x, n: SIGNED32); 
	PROCEDURE ^ AsciiWriteInt(W: Rider; x: SIGNED16); 
	PROCEDURE ^ AsciiWriteLInt(W: Rider; x: SIGNED32); 
	PROCEDURE ^ WriteReal(W: Rider; x: FLOAT32; n: SIGNED32); 
	PROCEDURE ^ WriteRealFix(W: Rider; x: FLOAT32; n, f, E: SIGNED32); 
	PROCEDURE ^ AsciiWriteReal(W: Rider; x: FLOAT32); 
	PROCEDURE ^ WriteLongReal(W: Rider; x: FLOAT64; n: SIGNED32); 
	PROCEDURE ^ WriteLongRealFix(W: Rider; x: FLOAT64; n, f, D: SIGNED32); 
	PROCEDURE ^ AsciiWriteLongReal(W: Rider; x: FLOAT64); 
	PROCEDURE ^ OpenScanner(R: Rider); 
	PROCEDURE ^ DoRead(R: Rider; VAR ch: CHAR); 
	PROCEDURE ^ Scan(VAR S: Rider); 
	PROCEDURE ^ InitScan; 
	PROCEDURE ^ WhiteSpace*(c: CHAR): BOOLEAN; 
	PROCEDURE ^ AsciiReadInt(R: Rider; VAR x: SIGNED16); 
	PROCEDURE ^ BinReadInt(R: Rider; VAR x: SIGNED16); 
	PROCEDURE ^ AsciiReadLInt(R: Rider; VAR x: SIGNED32); 
	PROCEDURE ^ BinReadLInt(R: Rider; VAR x: SIGNED32); 
	PROCEDURE ^ AsciiReadReal(R: Rider; VAR x: FLOAT32); 
	PROCEDURE ^ BinReadReal(R: Rider; VAR x: FLOAT32); 
	PROCEDURE ^ AsciiReadLReal(R: Rider; VAR x: FLOAT64); 
	PROCEDURE ^ BinReadLReal(R: Rider; VAR x: FLOAT64); 
	PROCEDURE ^ AsciiReadString(R: Rider; VAR x: ARRAY OF CHAR); 
	PROCEDURE ^ BinReadString(R: Rider; VAR x: ARRAY OF CHAR); 
	PROCEDURE ^ WaitFor(R: Rider; ch: CHAR): BOOLEAN; 
	PROCEDURE ^ DoWrite(R: Rider; ch: CHAR); 
	PROCEDURE ^ Turn(VAR ch: ARRAY OF SYSTEM.BYTE; num: SIGNED32); 
	PROCEDURE ^ BinWriteInt(R: Rider; x: SIGNED16); 
	PROCEDURE ^ BinWriteLInt(R: Rider; x: SIGNED32); 
	PROCEDURE ^ BinWriteReal(R: Rider; x: FLOAT32); 
	PROCEDURE ^ BinWriteLongReal(R: Rider; x: FLOAT64); 
	PROCEDURE ^ BinWriteString(R: Rider; x: ARRAY OF CHAR); 
	PROCEDURE ^ ReadDocHeader(VAR R: Files.Rider; VAR ch: CHAR); 
	PROCEDURE ^ ToAscii(T: Texts.Text; VAR R: Files.Rider); 
	PROCEDURE ^ CheckIfText*(VAR R: Files.Rider); 
	PROCEDURE ^ Test*; 
BEGIN
END antsFiles.
