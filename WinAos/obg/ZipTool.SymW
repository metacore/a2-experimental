MODULE ZipTool;
	IMPORT Streams, Commands, Options, Files, Strings, Zip;
CONST 
	EXTRACT = 1; 
	OPEN = 2; 
	Tab = 9X; 

	PROCEDURE ^ GetSuffix(CONST str: ARRAY OF CHAR; VAR suf: ARRAY OF CHAR; sepchar: CHAR); 
	PROCEDURE ^ Append(VAR to: ARRAY OF CHAR; CONST this: ARRAY OF CHAR); 
	PROCEDURE ^ OpenArchive(CONST archiveName: ARRAY OF CHAR; errorLog: Streams.Writer): Zip.Archive; 
	PROCEDURE ^ WriteDirectory*(out, error: Streams.Writer; CONST archiveName: ARRAY OF CHAR; details: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ Directory*(context: Commands.Context); 
	PROCEDURE ^ DoExtract(action: SIGNED32; archive: Zip.Archive; entry: Zip.Entry; name: ARRAY OF CHAR; VAR tempfile: Files.File; path, overwrite, show: BOOLEAN; out, error: Streams.Writer; VAR res: INTEGER); 
	PROCEDURE ^ ExtractFile*(arc: Zip.Archive; ent: Zip.Entry; CONST name: ARRAY OF CHAR; path, overwrite: BOOLEAN; log, error: Streams.Writer; VAR res: INTEGER); 
	PROCEDURE ^ OpenFile*(arc: Zip.Archive; ent: Zip.Entry; CONST name: ARRAY OF CHAR; VAR tempfile: Files.File; path, overwrite, show: BOOLEAN; log, error: Streams.Writer; VAR res: INTEGER); 
	PROCEDURE ^ Extract*(context: Commands.Context); 
	PROCEDURE ^ ExtractAll*(context: Commands.Context); 
	PROCEDURE ^ AddFile*(arc: Zip.Archive; CONST srcname: ARRAY OF CHAR; CONST dstname: ARRAY OF CHAR; level, strategy: SIGNED32; VAR res: INTEGER); 
	PROCEDURE ^ GetFileName(CONST fullname: ARRAY OF CHAR; VAR filename: ARRAY OF CHAR); 
	PROCEDURE ^ GetName(CONST fullname: ARRAY OF CHAR; VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ Add*(context: Commands.Context); 
	PROCEDURE ^ Delete*(context: Commands.Context); 
BEGIN
END ZipTool.
