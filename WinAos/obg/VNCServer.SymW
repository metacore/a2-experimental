MODULE VNCServer;
	IMPORT SYSTEM, Streams, TCP, IP, WMRectangles, KernelLog, DES, Random, Machine, Kernel, Inputs, Raster, Strings;
CONST 
	Version = \"RFB 003.003"\; 
	TraceVersion = 0; 
	TraceAuthentication = 1; 
	TraceMsg = 2; 
	TraceKeyEvent = 3; 
	Trace = {}; 
	EncRaw = 0; 
	EncCopyRect = 1; 
	EncRRE = 2; 
	EncCoRRE = 4; 
	EncHextile = 5; 
	EncZRLE = 16; 
	AuthNone = 1; 
	AuthVNC = 2; 
	AuthOk = 0; 
	AuthFailed = 1; 
	HexRaw = 1; 
	HexBGSpecified = 2; 
	HexFGSpecified = 4; 
	HexAnySubrects = 8; 
	HexSubrectsColoured = 16; 
	MaxRect = 40; 
	MaxWidth = 4096; 
	MaxCutSize = (64 * 1024); 
	BundleRectangles = TRUE; 
	BigPackets = TRUE; 
	SendFBUpdatePacketEarly = TRUE; 
TYPE 
	Rectangle = WMRectangles.Rectangle; 

	RectBuf = POINTER TO ARRAY OF Rectangle; 

	WorkBuf = POINTER TO ARRAY OF CHAR; 

	String = Strings.String; 

	VNCMouseListener* = PROCEDURE {DELEGATE}(x, y, dz: LONGINT; keys: SET); 

	VNCKeyboardListener* = PROCEDURE {DELEGATE}(ucs: LONGINT; flags: SET; keysym: LONGINT); 

	VNCClipboardListener* = PROCEDURE {DELEGATE}(text: String); 

	VNCNofClientsActiveListener* = PROCEDURE {DELEGATE}(nofClients: LONGINT); 

	PFHextile = ARRAY (16 * 16) OF LONGINT; 

	VNCInfo* = OBJECT 
	VAR 
		name*, password*: ARRAY 64 OF CHAR; 
		img*: Raster.Image; 
		ml*: VNCMouseListener; 
		kl*: VNCKeyboardListener; 
		cutl*: VNCClipboardListener; 
		ncal*: VNCNofClientsActiveListener; 
		width*, height*: SIZE; 
		connection*: TCP.Connection; 
		agent*: VNCAgent; 
	END VNCInfo; 

	VNCService* = PROCEDURE {DELEGATE}(vncInfo: VNCInfo); 

	Agent = OBJECT 
	VAR 
		client: TCP.Connection; 
		next: Agent; 
		s: Server; 
	END Agent; 

	PixelFormat = RECORD 
		sr, sg, sb: LONGINT; 
		bpp, depth, rmax, gmax, bmax, rshift, gshift, bshift: LONGINT; 
		bigendian, truecolor, native16: BOOLEAN; 
	END; 

	UpdateQ = OBJECT {EXCLUSIVE} 
	VAR 
		buffer: RectBuf; 
		nofRect: LONGINT; 
		clip: Rectangle; 
		agent: VNCAgent; 
		alive, allowed: BOOLEAN; 

		PROCEDURE ^  & Init*(agent: VNCAgent; w, h: SIZE); 
		PROCEDURE ^ Add(VAR r: Rectangle); 
		PROCEDURE ^ GetBuffer(VAR nof: LONGINT; drawBuf: RectBuf); 
		PROCEDURE ^ Close; 
		PROCEDURE ^ SetAllowed; 
	BEGIN{ACTIVE} 
	END UpdateQ; 

	VNCAgent* = OBJECT {EXCLUSIVE} (Agent)
	VAR 
		vncInfo: VNCInfo; 
		in: Streams.Reader; 
		out: Streams.Writer; 
		pf: PixelFormat; 
		traceStr: ARRAY 64 OF CHAR; 
		encodings: SET; 
		keyState: SET; 
		updateQ: UpdateQ; 
		drawRectBuffer: RectBuf; 
		workBuffer: WorkBuf; 
		allowUpdate: BOOLEAN; 
		mode: Raster.Mode; 
		pfHextile: PFHextile; 

		PROCEDURE ^  & Init*(server: Server; client: TCP.Connection; vncInfo: VNCInfo); 
		PROCEDURE ^ SendVersion(): BOOLEAN; 
		PROCEDURE ^ Authenticate(): BOOLEAN; 
		PROCEDURE ^ CloseAllOtherClients; 
		PROCEDURE ^ Setup(): BOOLEAN; 
		PROCEDURE ^ SetPixelFormat; 
		PROCEDURE ^ InitPixelFormat(VAR pf: PixelFormat); 
		PROCEDURE ^ FixupColorMapEntries; 
		PROCEDURE ^ SetEncodings; 
		PROCEDURE ^ SendRect(VAR r: Rectangle); 
		PROCEDURE ^ DoUpdates; 
		PROCEDURE ^ AddDirty*(r: Rectangle); 
		PROCEDURE ^ FBUpdateRequest; 
		PROCEDURE ^ KeyEvent; 
		PROCEDURE ^ PointerEvent; 
		PROCEDURE ^ ClientCutText; 
		PROCEDURE ^ SendClipboard*(text: String); 
		PROCEDURE ^ CopyRect*(srcx, srcy: LONGINT; dst: Rectangle): BOOLEAN; 
		PROCEDURE ^ Serve; 
	BEGIN{ACTIVE} 
	END VNCAgent; 

	Server* = OBJECT {EXCLUSIVE} 
	VAR 
		res: WORD; 
		service, client: TCP.Connection; 
		root: Agent; 
		agent: VNCAgent; 
		vncInfo: VNCInfo; 
		nofAgents: LONGINT; 
		stopped: BOOLEAN; 
		init: VNCService; 

		PROCEDURE ^  & Open*(port: LONGINT; vncInfo: VNCInfo; init: VNCService; VAR res: WORD); 
		PROCEDURE ^ CloseAllOthers(this: Agent); 
		PROCEDURE ^ Remove(a: Agent); 
		PROCEDURE ^ AddDirty*(r: Rectangle); 
		PROCEDURE ^ SendClipboard*(t: String); 
		PROCEDURE ^ Close*; 
	BEGIN{ACTIVE} 
	END Server; 
VAR 
	NnofAuthenticate-, NnofAuthNone-, NnofAuthVNC-, NnofAuthOk-, NnofAuthFailed-, NnofEnteredServe-, NnofLeftServer-: LONGINT; 

	PROCEDURE ^ SendPixel(out: Streams.Writer; pix: LONGINT; VAR pf: PixelFormat); 
	PROCEDURE ^ SendRawRect(out: Streams.Writer; img: Raster.Image; VAR mode: Raster.Mode; VAR pf: PixelFormat; buf: WorkBuf; r: Rectangle); 
	PROCEDURE ^ AnalyzeColors(VAR hextile: PFHextile; nofPixels: SIZE; VAR bg, fg: LONGINT; VAR solid, mono: BOOLEAN); 
	PROCEDURE ^ EncodeHextile(hextile: PFHextile; buf: WorkBuf; VAR pf: PixelFormat; w, h: SIZE; bg, fg: LONGINT; mono: BOOLEAN; VAR nofRects: LONGINT): SIZE; 
	PROCEDURE ^ SendHextile(out: Streams.Writer; img: Raster.Image; VAR mode: Raster.Mode; VAR pf: PixelFormat; buf: WorkBuf; VAR hextile: PFHextile; r: Rectangle); 
	PROCEDURE ^ OpenServer*(port: LONGINT; img: Raster.Image; name, password: ARRAY OF CHAR; ml: VNCMouseListener; kl: VNCKeyboardListener; cl: VNCClipboardListener; ncal: VNCNofClientsActiveListener): Server; 
	PROCEDURE ^ OpenService*(port: LONGINT; init: VNCService): Server; 
BEGIN
END VNCServer.
