MODULE WMVNCView;
	IMPORT Raster, Rect := WMRectangles, WMWindowManager, VNCServer, Modules, KernelLog, Commands, Graphics := WMGraphics, Messages := WMMessages, Strings, Texts, TextUtilities;
CONST 
TYPE 
	Window = WMWindowManager.Window; 

	Rectangle = Rect.Rectangle; 

	String = Strings.String; 

	VNCView = OBJECT {EXCLUSIVE} (WMWindowManager.ViewPort)
	VAR 
		server: VNCServer.Server; 
		error: BOOLEAN; 
		backbuffer*: Graphics.Image; 
		c: Graphics.BufferCanvas; 
		state: Graphics.CanvasState; 
		navig: BOOLEAN; 
		scrollLock: BOOLEAN; 
		fx, fy, inffx, inffy, factor, intfactor: FLOAT32; 
		active: BOOLEAN; 

		PROCEDURE ^  & New*(manager: WMWindowManager.WindowManager; port, dx, dy, w, h: SIGNED32; name, password: ARRAY OF CHAR); 
		PROCEDURE ^ CheckActive(nof: SIGNED32); 
		PROCEDURE ^ Update*(r: Rectangle; top: WMWindowManager.Window); 
		PROCEDURE ^ Refresh*(top: Window); 
		PROCEDURE ^ Draw(r: Rectangle; top: Window); 
		PROCEDURE ^ SetExtents(w, h: SIGNED32); 
		PROCEDURE ^ SetScaleFactor(factor: FLOAT32); 
		PROCEDURE ^ KeyEvent(ucs: SIGNED32; flags: SET; keysym: SIGNED32); 
		PROCEDURE ^ MouseEvent(x, y, dz: SIGNED32; keys: SET); 
		PROCEDURE ^ ClipboardEvent(text: String); 
		PROCEDURE ^ ClipboardChanged(sender, data: ANY ); 
		PROCEDURE ^ Close; 
	END VNCView; 

	VVList = POINTER TO RECORD 
		v: VNCView; 
		next: VVList; 
	END; 
VAR 
	v: VVList; 

	PROCEDURE ^ Bound(VAR x: SIZE; min, max: SIZE); 
	PROCEDURE ^ ClipAtImage(VAR x: Rectangle; img: Raster.Image); 
	PROCEDURE ^ Install*(context: Commands.Context); 
	PROCEDURE ^ Uninstall*; 
	PROCEDURE ^ Cleanup; 
BEGIN
END WMVNCView.
