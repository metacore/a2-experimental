MODULE OPT IN Oberon;
	IMPORT SYSTEM, OPS, OPM, Files;
CONST 
	TraceFP = FALSE; 
	MaxConstLen* = OPS.MaxStrLen; 
	DefMaxImport = 64; 
	DefMaxStruct = 32; 
	DefMaxReimp = 32; 
	HdPtrName* = \"@ptr"\; 
	ObjBody = \"@Body"\; 
	Delegate* = \"@delegate"\; 
	HdPtrStruct* = \"@pointer"\; 
	Var = 1; 
	VarPar = 2; 
	Con = 3; 
	Fld = 4; 
	Typ = 5; 
	LProc = 6; 
	XProc = 7; 
	SProc = 8; 
	CProc = 9; 
	Mod = 11; 
	Head = 12; 
	TProc = 13; 
	Alias = 14; 
	Operator = 15; 
	Undef = 0; 
	Byte = 1; 
	Bool = 2; 
	Char = 3; 
	SInt = 4; 
	Int = 5; 
	LInt = 6; 
	Real = 7; 
	LReal = 8; 
	Set = 9; 
	String = 10; 
	NilTyp = 11; 
	NoTyp = 12; 
	Pointer = 13; 
	ProcTyp = 14; 
	Comp = 15; 
	HInt = 16; 
	Char16 = 17; 
	Char32 = 18; 
	Basic = 1; 
	StaticArr = 2; 
	SDynArr = 3; 
	DynArr = 4; 
	OpenArr = 5; 
	Record = 6; 
	StaticEnhArr = 7; 
	SDynEnhArr = 8; 
	DynEnhArr = 9; 
	OpenEnhArr = 10; 
	Tensor = 11; 
	Nconst = 7; 
	Ncall = 13; 
	haltfn = 0; 
	newfn = 1; 
	absfn = 2; 
	capfn = 3; 
	ordfn = 4; 
	entierfn = 5; 
	oddfn = 6; 
	minfn = 7; 
	maxfn = 8; 
	chrfn = 9; 
	shortfn = 10; 
	longfn = 11; 
	sizefn = 12; 
	incfn = 13; 
	decfn = 14; 
	inclfn = 15; 
	exclfn = 16; 
	lenfn = 17; 
	copyfn = 18; 
	ashfn = 19; 
	assertfn = 32; 
	awaitfn = 64; 
	lockfn = 66; 
	adrfn = 20; 
	ccfn = 21; 
	lshfn = 22; 
	rotfn = 23; 
	getfn = 24; 
	putfn = 25; 
	getrfn = 26; 
	putrfn = 27; 
	bitfn = 28; 
	valfn = 29; 
	sysnewfn = 30; 
	movefn = 31; 
	stifn = 33; 
	clifn = 34; 
	poutfn = 35; 
	pinfn = 36; 
	shalt = 37; 
	get8fn = 38; 
	get16fn = 39; 
	get32fn = 40; 
	put8fn = 41; 
	put16fn = 42; 
	put32fn = 43; 
	typefn = 44; 
	internal = 0; 
	external = 1; 
	externalR = 2; 
	hasBody = 1; 
	slNeeded = 3; 
	protectedObj = 4; 
	activeObj = 5; 
	locked = 6; 
	guarded = 7; 
	safe = 8; 
	asmProc = 7; 
	typeVisible* = 8; 
	used* = 1; 
	param* = 3; 
	SFtypBool = 1; 
	SFtypChar = 2; 
	SFtypChar16 = 3; 
	SFtypChar32 = 4; 
	SFtypSInt = 5; 
	SFtypInt = 6; 
	SFtypLInt = 7; 
	SFtypHInt = 8; 
	SFtypReal = 9; 
	SFtypLReal = 10; 
	SFtypSet = 11; 
	SFtypString = 12; 
	SFtypNoTyp = 13; 
	SFtypNilTyp = 14; 
	SFtypByte = 15; 
	SFtypptr = 16; 
	SFlastStruct = SFtypptr; 
	SFmod1 = 17; 
	SFmod31 = 44; 
	SFmodOther = 45; 
	SFtypOpenArr = 46; 
	SFtypDynArr = 47; 
	SFtypArray = 48; 
	SFtypPointer = 49; 
	SFtypRecord = 50; 
	SFtypProcTyp = 51; 
	SFsysflag = 52; 
	SFinvisible = 53; 
	SFreadonly = 54; 
	SFobjflag = 55; 
	SFconst = 55; 
	SFvar = 56; 
	SFlproc = 57; 
	SFxproc = 58; 
	SFoperator = 59; 
	SFtproc = 60; 
	SFcproc = SFtproc; 
	SFalias = 61; 
	SFtyp = 62; 
	SFend = 63; 
	SFtypOpenEnhArr = 64; 
	SFtypDynEnhArr = 65; 
	SFtypTensor = 66; 
	SFtypEnhArray = 67; 
	inserted = 0; 
	same = 1; 
	removed = 3; 
	modified = 4; 
TYPE 
	Const* = POINTER TO ConstDesc; 

	Object* = POINTER TO ObjDesc; 

	Module* = POINTER TO ModDesc; 

	Struct* = POINTER TO StrDesc; 

	Node* = POINTER TO NodeDesc; 

	ConstExt* = POINTER TO OPS.String; 

	ReadStringProc = PROCEDURE (VAR R: Files.Rider; VAR string: ARRAY OF CHAR); 

	ConstDesc* = RECORD 
		ext*: ConstExt; 
		intval*: SIGNED32; 
		intval2*: SIGNED32; 
		setval*: SET; 
		realval*: FLOAT64; 
	END; 

	ObjDesc* = RECORD 
		left*, right*, link*, scope*: Object; 
		myscope*: Object; 
		link2*, old: Object; 
		prio*, sysflag*: SIGNED8; 
		code*: Node; 
		name*: OPS.Name; 
		leaf*: BOOLEAN; 
		mode*: SIGNED8; 
		mnolev*: SIGNED32; 
		vis*: SIGNED8; 
		typ*: Struct; 
		conval*: Const; 
		adr*, linkadr*: SIGNED32; 
		nxtobj*, sibling*: Object; 
		par: BOOLEAN; 
		inited*, used*: BOOLEAN; 
		fp*: SIGNED32; 
		history*: SIGNED8; 
		txtpos*: SIGNED32; 
		flag*: SET; 
		finallyOff*: SIGNED32; 
	END; 

	StructArr = POINTER TO ARRAY OF Struct; 

	ModArr = POINTER TO ARRAY OF Module; 

	ModDesc* = RECORD (ObjDesc)
		publics*: Object; 
		directImp*: BOOLEAN; 
		nofimp: SIGNED16; 
		import: ModArr; 
		nofstr: SIGNED16; 
		struct: StructArr; 
		nofreimp: SIGNED16; 
		reimp: StructArr; 
	END; 

	StrDesc* = RECORD 
		form*, comp*, extlev*: SIGNED8; 
		mno*: SIGNED32; 
		ref*: SIGNED16; 
		align*, sysflag*: SIGNED8; 
		rectest*, n*, size*, tdadr*, offset*, txtpos*, txtpos2*: SIGNED32; 
		BaseTyp*: Struct; 
		link*, strobj*: Object; 
		fpdone*, sref*, oref*: SIGNED16; 
		pvused*, pbused*: BOOLEAN; 
		fp*, pvfp*, pbfp*: SIGNED32; 
		incomplete*: BOOLEAN; 
		ptr*: Struct; 
	END; 

	NodeDesc* = RECORD 
		left*, right*, link*: Node; 
		class*, subcl*: SIGNED8; 
		readonly*: BOOLEAN; 
		typ*: Struct; 
		obj*: Object; 
		conval*: Const; 
		global*: BOOLEAN; 
		up*, down*: Node; 
		ref*: SIGNED32; 
		flag*, subflg*: SIGNED8; 
	END; 
VAR 
	topScope*, objects*: Object; 
	undftyp*, bytetyp*, booltyp*, chartyp*, sinttyp*, inttyp*, linttyp*, hinttyp*, realtyp*, lrltyp*, settyp*, stringtyp*, niltyp*, notyp*, ptrtyp*: Struct; 
	char16typ, char32typ: Struct; 
	SYSimported*: BOOLEAN; 
	nofmod*: SIGNED32; 
	modules*: ModArr; 
	nofemod: SIGNED8; 
	emodules: ModArr; 
	modNo*: SIGNED16; 
	universe, syslink: Object; 
	strucForm: ARRAY (SFtypEnhArray + 1) OF SIGNED8; 
	strucComp: ARRAY (SFtypEnhArray + 1) OF SIGNED8; 
	predefStruct: ARRAY (SFlastStruct + 1) OF Struct; 
	strucFormSF: ARRAY (Comp + 1) OF SIGNED8; 
	strucCompSF: ARRAY (Comp + 1) OF SIGNED8; 
	export: BOOLEAN; 
	exp: ARRAY (Operator + 1) OF Object; 
	nofstruc: SIGNED16; 
	newSF, extSF, symNew, symExtended, sfpresent, impSelf, expGlobal: BOOLEAN; 
	typSize*: PROCEDURE (typ: Struct; allocDesc: BOOLEAN); 
	ToBeFixed*: Struct; 

	PROCEDURE ^ err(n: SIGNED16); 
	PROCEDURE ^ Close*; 
	PROCEDURE ^ NewMod(): Module; 
	PROCEDURE ^ NewConst*(): Const; 
	PROCEDURE ^ NewObj*(): Object; 
	PROCEDURE ^ NewStr*(form, comp: SIGNED8): Struct; 
	PROCEDURE ^ NewNode*(class: SIGNED8): Node; 
	PROCEDURE ^ NewExt*(): ConstExt; 
	PROCEDURE ^ DoubleStructArr(VAR x: StructArr); 
	PROCEDURE ^ DoubleModArr(VAR x: ModArr); 
	PROCEDURE ^ MarkObj*(obj: Object); 
	PROCEDURE ^ MarkType*(typ: Struct); 
	PROCEDURE ^ TraverseObjects*(top: Object); 
	PROCEDURE ^ FindImport*(mod: Object; VAR res: Object); 
	PROCEDURE ^ FindField*(VAR name: ARRAY OF CHAR; typ: Struct; VAR res: Object; mark: BOOLEAN); 
	PROCEDURE ^ FindInScope*(name: ARRAY OF CHAR; scope: Object; VAR res: Object); 
	PROCEDURE ^ Find*(VAR res: Object); 
	PROCEDURE ^ Insert*(name: ARRAY OF CHAR; VAR obj: Object); 
	PROCEDURE ^ CopyOp(VAR new, obj: Object); 
	PROCEDURE ^ IsExtern(obj: Object): BOOLEAN; 
	PROCEDURE ^ Contextualize*(VAR sentinel: Object); 
	PROCEDURE ^ Distance(typ, otyp: Struct; VAR distance: SIGNED8); 
	PROCEDURE ^ QualResolve*(VAR obj: Object; VAR x, y: Node; VAR distance: SIGNED8; VAR wrn: BOOLEAN); 
	PROCEDURE ^ Resolve*(VAR name: ARRAY OF CHAR; VAR x, y: Node): Object; 
	PROCEDURE ^ OpenScope*(level: SIGNED8; owner: Object); 
	PROCEDURE ^ CloseScope*; 
	PROCEDURE ^ Init*(VAR name: OPS.Name); 
	PROCEDURE ^ FPrintName(VAR fp: SIGNED32; VAR name: ARRAY OF CHAR); 
	PROCEDURE ^ FPrintSign(VAR fp: SIGNED32; result: Struct; par: Object); 
	PROCEDURE ^ FPrintMeth(VAR pbfp, pvfp: SIGNED32; fld: Object); 
	PROCEDURE ^ FPrintRecord(typ: Struct); 
	PROCEDURE ^ FPrintTyp0(typ: Struct); 
	PROCEDURE ^ FPrintTyp*(typ: Struct); 
	PROCEDURE ^ FPrintObj*(obj: Object); 
	PROCEDURE ^ FPrintErr(obj: Object); 
	PROCEDURE ^ MatchOp(op, list: Object): Object; 
	PROCEDURE ^ InsertImport(obj: Object; root: Object); 
	PROCEDURE ^ CompOldTyp(typ, oldtyp: Struct): SIGNED8; 
	PROCEDURE ^ CompOldSym(obj: Object); 
	PROCEDURE ^ ReadString(VAR R: Files.Rider; VAR string: ARRAY OF CHAR); 
	PROCEDURE ^ ReadStringNoZeroCompress(VAR R: Files.Rider; VAR string: ARRAY OF CHAR); 
	PROCEDURE ^ Imp(VAR impName, modName: OPS.Name; VAR M: Module); 
	PROCEDURE ^ Import*(VAR aliasName, impName, selfName: OPS.Name); 
	PROCEDURE ^ OutMod*(mod: Module); 
	PROCEDURE ^ Enumerate(obj: Object); 
	PROCEDURE ^ OutCProc(n: Node); 
	PROCEDURE ^ OutParList(par: Object); 
	PROCEDURE ^ OutFld(fld: Object); 
	PROCEDURE ^ OutRecord(typ: Struct); 
	PROCEDURE ^ OutStruct(typ: Struct); 
	PROCEDURE ^ OutConst(form: SIGNED8; conval: Const); 
	PROCEDURE ^ OutObj(obj: Object); 
	PROCEDURE ^ OutScope*(scope: Object; public: BOOLEAN); 
	PROCEDURE ^ Export*(VAR modName: OPS.Name; VAR newsf, extsf: BOOLEAN); 
	PROCEDURE ^ InitStruct(VAR typ: Struct; form, sref: SIGNED8); 
	PROCEDURE ^ EnterIntConst(name: ARRAY OF CHAR; value: SIGNED32); 
	PROCEDURE ^ EnterTyp(name: ARRAY OF CHAR; form: SIGNED8; size: SIGNED16; VAR res: Struct; sref: SIGNED8); 
	PROCEDURE ^ EnterTypAlias(name: ARRAY OF CHAR; typ: Struct); 
	PROCEDURE ^ EnterProc(name: ARRAY OF CHAR; num: SIGNED16); 
	PROCEDURE ^ EnterPtr(name: ARRAY OF CHAR; num: SIGNED32); 
BEGIN
END OPT.
