MODULE PDF;
	IMPORT Streams, Strings, Files, WMRectangles, WMGraphics, DynamicStrings, UTF8Strings;
CONST 
	FontTimes = 0; 
	FontHelvetica = 1; 
	FontCourier = 2; 
	FontArial = 3; 
	PageA0* = 1; 
	PageA1* = 2; 
	PageA2* = 3; 
	PageA3* = 4; 
	PageA4* = 5; 
	PageA5* = 6; 
	PageA6* = 7; 
	PageA7* = 8; 
	Unitmm* = 1; 
	Unitmm10* = 2; 
	Unitmm100* = 3; 
TYPE 
	PDFObject = OBJECT 
	VAR 
		context: Document; 

		PROCEDURE ^  & Init*(context: Document); 
		PROCEDURE ^ Write(w: Streams.Writer); 
	END PDFObject; 

	PDFObjArray = POINTER TO ARRAY OF PDFObject; 

	PDFObjList = OBJECT 
	VAR 
		nof: LONGINT; 
		data: PDFObjArray; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Add(o: PDFObject); 
	END PDFObjList; 

	Int = OBJECT (PDFObject)
	VAR 
		val: LONGINT; 

		PROCEDURE ^ Write(w: Streams.Writer); 
	END Int; 

	Real = OBJECT (PDFObject)
	VAR 
		val: REAL; 

		PROCEDURE ^ Write(w: Streams.Writer); 
	END Real; 

	String = OBJECT (PDFObject)
	VAR 
		data: Strings.String; 

		PROCEDURE ^ Write(w: Streams.Writer); 
	END String; 

	Stream = OBJECT (PDFObject)
	VAR 
		length: LONGINT; 
		data: Strings.String; 

		PROCEDURE ^  & Init*(context: Document); 
		PROCEDURE ^ Add(CONST buf: ARRAY OF CHAR; ofs, len: SIZE; propagate: BOOLEAN; VAR res: WORD); 
		PROCEDURE ^ GetWriter(): Streams.Writer; 
		PROCEDURE ^ Write(w: Streams.Writer); 
	END Stream; 

	Name = OBJECT (PDFObject)
	VAR 
		s: Strings.String; 

		PROCEDURE ^ Write(w: Streams.Writer); 
	END Name; 

	DictionaryEntry = RECORD 
		key: Name; 
		data: PDFObject; 
	END; 

	DictionaryList = POINTER TO ARRAY OF DictionaryEntry; 

	Dictionary = OBJECT (PDFObject)
	VAR 
		data: DictionaryList; 
		nofData: LONGINT; 

		PROCEDURE ^  & Init*(context: Document); 
		PROCEDURE ^ Add(key: Name; obj: PDFObject); 
		PROCEDURE ^ GetObject(key: Name): PDFObject; 
		PROCEDURE ^ Write(w: Streams.Writer); 
	END Dictionary; 

	Array = OBJECT (PDFObject)
	VAR 
		content: PDFObjList; 

		PROCEDURE ^  & Init*(context: Document); 
		PROCEDURE ^ Add(content: PDFObject); 
		PROCEDURE ^ Write(w: Streams.Writer); 
		PROCEDURE ^ Get(i: LONGINT): PDFObject; 
	END Array; 

	Object = OBJECT (PDFObject)
	VAR 
		id, generation: LONGINT; 
		filepos: LONGINT; 
		content: PDFObjList; 
		next: Object; 

		PROCEDURE ^  & Init*(context: Document); 
		PROCEDURE ^ AddContent(content: PDFObject); 
		PROCEDURE ^ WriteContent(w: Streams.Writer); 
		PROCEDURE ^ Write(w: Streams.Writer); 
	END Object; 

	PageNode = OBJECT (Object)
	VAR 
		dict: Dictionary; 
		kids: Array; 
		count: Int; 

		PROCEDURE ^  & Init*(context: Document); 
		PROCEDURE ^ AddPage(page: Page); 
	END PageNode; 

	Font = OBJECT (Object)
	VAR 
		dict: Dictionary; 
		name: Name; 
		type: LONGINT; 
		style: SET; 
		next: Font; 

		PROCEDURE ^  & New*(context: Document; type: LONGINT; style: SET); 
		PROCEDURE ^ SetName(n: ARRAY OF CHAR); 
		PROCEDURE ^ SetStandard(type: LONGINT; style: SET); 
	END Font; 

	Page = OBJECT (Object)
	VAR 
		dict: Dictionary; 
		mediaBox: Array; 
		procSet: Array; 
		resources, fonts: Dictionary; 

		PROCEDURE ^  & Init*(context: Document); 
		PROCEDURE ^ SetPaper(paper: LONGINT; landscape: BOOLEAN); 
		PROCEDURE ^ SetExtents(x, y, w, h: REAL); 
		PROCEDURE ^ GetExtents(VAR x, y, w, h: REAL); 
		PROCEDURE ^ GetFont(type: LONGINT; style: SET): Font; 
		PROCEDURE ^ SetContent(content: Object); 
	END Page; 

	NameList = POINTER TO ARRAY OF Name; 

	Document = OBJECT 
	VAR 
		version: ARRAY 64 OF CHAR; 
		nofObjects: LONGINT; 
		firstObj, lastObj: Object; 
		catalog, infoObj: Object; 
		infoDict: Dictionary; 
		rootPages: PageNode; 
		pageDict: Dictionary; 
		defaultProcSet: Object; 
		names: NameList; 
		nofNames: LONGINT; 
		fonts: Font; 
		nofFonts: LONGINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ GetDefaultProcSet(): Object; 
		PROCEDURE ^ RegisterObj(obj: Object); 
		PROCEDURE ^ NewObject(): Object; 
		PROCEDURE ^ NewPageNode(root: BOOLEAN): PageNode; 
		PROCEDURE ^ NewArray(): Array; 
		PROCEDURE ^ NewDictionary(): Dictionary; 
		PROCEDURE ^ NewInt(val: LONGINT): Int; 
		PROCEDURE ^ NewReal(val: REAL): Real; 
		PROCEDURE ^ NewString(str: ARRAY OF CHAR): String; 
		PROCEDURE ^ NewPage(): Page; 
		PROCEDURE ^ GetFont(type: LONGINT; style: SET): Font; 
		PROCEDURE ^ NewName(name: ARRAY OF CHAR): Name; 
		PROCEDURE ^ WriteLZInt(w: Streams.Writer; val, digits: LONGINT); 
		PROCEDURE ^ Write(w: Streams.Writer); 
	END Document; 

	PDFCanvas* = OBJECT (WMGraphics.Canvas)
	VAR 
		d: Document; 
		pc: PDFCreator; 
		p: Page; 
		s: Stream; 
		c: Object; 
		w: Streams.Writer; 
		font: Font; 
		next: PDFCanvas; 
		prl, prt, prr, prb, scale: REAL; 
		colrg, colRG: WMGraphics.Color; 
		fSize: REAL; 
		xfont: Font; 

		PROCEDURE ^  & Init*(pc: PDFCreator; pageFormat: LONGINT; landscape: BOOLEAN; unit: LONGINT); 
		PROCEDURE ^ Transform(x, y: SIZE; VAR rx, ry: REAL); 
		PROCEDURE ^ WriteTrafoCoord(x, y: SIZE); 
		PROCEDURE ^ SetColor*(col: WMGraphics.Color); 
		PROCEDURE ^ SetColrg(col: WMGraphics.Color); 
		PROCEDURE ^ SetColRG(col: WMGraphics.Color); 
		PROCEDURE ^ Fill*(r: WMRectangles.Rectangle; col: WMGraphics.Color; mode: LONGINT); 
		PROCEDURE ^ GetPDFFont(f: WMGraphics.Font): Font; 
		PROCEDURE ^ PDFSetFont*(name: ARRAY OF CHAR; size: LONGINT; style: SET); 
		PROCEDURE ^ DrawString*(x, y: SIZE; CONST text: ARRAY OF CHAR); 
		PROCEDURE ^ DrawStringMultiLine*(x, y, width, height: LONGINT; resizeHeight: BOOLEAN; CONST stext: ARRAY OF CHAR; VAR actualHeight: SIZE); 
		PROCEDURE ^ DrawStringSingleLine*(x, y, width, align: LONGINT; stext: ARRAY OF CHAR); 
		PROCEDURE ^ PDFSetLineWidth*(width: REAL); 
		PROCEDURE ^ PDFSetLineJoin*(param: INTEGER); 
		PROCEDURE ^ PolyLine*(CONST points: ARRAY OF WMGraphics.Point2d; nofPoints: SIZE; closed: BOOLEAN; color: WMGraphics.Color; mode: WORD); 
		PROCEDURE ^ FillPoly*(CONST points: ARRAY OF WMGraphics.Point2d; nofPoints: LONGINT; color: WMGraphics.Color; mode: LONGINT); 
		PROCEDURE ^ Line*(x0, y0, x1, y1: SIZE; color: WMGraphics.Color; mode: LONGINT); 
		PROCEDURE ^ Close; 
	END PDFCanvas; 

	PDFCreator* = OBJECT 
	VAR 
		d: Document; 
		closed: BOOLEAN; 
		pages: PDFCanvas; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ NewPage*(pageFormat: LONGINT; landscape: BOOLEAN; unit: LONGINT): PDFCanvas; 
		PROCEDURE ^ Write*(w: Streams.Writer); 
		PROCEDURE ^ Store*(filename: ARRAY OF CHAR); 
	END PDFCreator; 

	PROCEDURE ^ WriteReal(w: Streams.Writer; val: REAL); 
	PROCEDURE ^ WritePDFString(w: Streams.Writer; CONST data: ARRAY OF CHAR); 
	PROCEDURE ^ WritePDFStringPos(w: Streams.Writer; CONST data: ARRAY OF CHAR; from, to: SIZE); 
	PROCEDURE ^ GetCharSpacings(f: WMGraphics.Font; VAR text: ARRAY OF CHAR; i: SIZE; VAR g: WMGraphics.GlyphSpacings): BOOLEAN; 
BEGIN
END PDF.
