MODULE antsExpressionsObjects IN Oberon;
	IMPORT vyBase, vyLongrealVec, vyRealVec, Objects, vyIntVec, vyLongintVec, vyTypes, vyName, SYSTEM, vyPointerVec;

	PROCEDURE ^ ToVec1(VAR v: vyBase.tData; len: SIGNED32): vyBase.tData; 
	PROCEDURE ^ ToVec(VAR v1, v2: vyBase.tData); 
	PROCEDURE ^ ConvertSize(fixed: vyBase.tData; VAR var: vyBase.tData; new: BOOLEAN); 
	PROCEDURE ^ TakeSmaller(VAR v1, v2: vyBase.tData); 
	PROCEDURE ^ Convert(from, to: vyBase.tData; VAR res: vyBase.tData); 
	PROCEDURE ^ SortByTyp(VAR smaller, bigger: vyBase.tData): BOOLEAN; 
	PROCEDURE ^ vyLongintVecAdd(VAR res: vyLongintVec.tVector; x, y: vyBase.tData); 
	PROCEDURE ^ vyIntVecAdd(VAR res: vyIntVec.tVector; x, y: vyBase.tData); 
	PROCEDURE ^ Add*(VAR res: vyBase.tData; v1, v2: vyBase.tData); 
	PROCEDURE ^ Mult*(VAR res: vyBase.tData; v1, v2: vyBase.tData); 
	PROCEDURE ^ Sub*(VAR res: vyBase.tData; v1, v2: vyBase.tData); 
	PROCEDURE ^ Div*(VAR res: vyBase.tData; v1, v2: vyBase.tData); 
	PROCEDURE ^ AddPtr*(VAR res: ANY ; p1, p2: ANY ); 
	PROCEDURE ^ SubPtr*(VAR res: ANY ; p1, p2: ANY ); 
	PROCEDURE ^ MultPtr*(VAR res: ANY ; p1, p2: ANY ); 
	PROCEDURE ^ DivPtr*(VAR res: ANY ; p1, p2: ANY ); 
	PROCEDURE ^ NegLR(x: FLOAT64): FLOAT64; 
	PROCEDURE ^ NegR(x: FLOAT32): FLOAT32; 
	PROCEDURE ^ NegL(x: SIGNED32): SIGNED32; 
	PROCEDURE ^ NegI(x: SIGNED16): SIGNED16; 
	PROCEDURE ^ Neg*(VAR res: vyBase.tData; v1: vyBase.tData); 
	PROCEDURE ^ NegPtr*(VAR res: ANY ; p1: ANY ); 
	PROCEDURE ^ AssignPointer*(x: SIGNED32; adr: SIGNED32; name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ Assign*(this: Objects.Object; res: Objects.Object): BOOLEAN; 
	PROCEDURE ^ AssignLReal*(x: FLOAT64; adr: SIGNED32; name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ AssignReal*(x: FLOAT32; adr: SIGNED32; name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ AssignLongint*(x: SIGNED32; adr: SIGNED32; name: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ AssignInt*(x: SIGNED16; adr: SIGNED32; name: ARRAY OF CHAR): BOOLEAN; 
BEGIN
END antsExpressionsObjects.
