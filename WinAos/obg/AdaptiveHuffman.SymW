MODULE AdaptiveHuffman;
	IMPORT Streams;
CONST 
	AlphabetSize = 256; 
	BlockSize* = (8 * 1024); 
	ScaleLimit = (4 * 1024); 
	Encode = 0; 
	Decode = 1; 
TYPE 
	BitReader = OBJECT 
	VAR 
		in: Streams.Reader; 
		curByte, curBit: SIGNED32; 

		PROCEDURE ^  & New(r: Streams.Reader); 
		PROCEDURE ^ Initialize; 
		PROCEDURE ^ Bit(): SIGNED32; 
	END BitReader; 

	BitWriter = OBJECT 
	VAR 
		out: Streams.Writer; 
		curByte, curBit: SIGNED32; 

		PROCEDURE ^  & New(w: Streams.Writer); 
		PROCEDURE ^ Bit(bit: SIGNED32); 
		PROCEDURE ^ Finish; 
	END BitWriter; 

	HuffmanCoder = OBJECT 
	TYPE 
		Index = SIGNED16; 

		Pattern = SIGNED16; 

		Node = RECORD 
			weight: SIGNED16; 
			pattern: Pattern; 
			up: Index; 
			down: Index; 
		END; 
	VAR 
		mode: SIGNED8; 
		in: BitReader; 
		out: BitWriter; 
		esc: Index; 
		root: Index; 
		map: ARRAY AlphabetSize OF Index; 
		table: ARRAY ((2 * AlphabetSize) + 2) OF Node; 

		PROCEDURE ^  & New(m: SIGNED8; input: Streams.Reader; output: Streams.Writer); 
		PROCEDURE ^ Initialize; 
		PROCEDURE ^ Finish; 
		PROCEDURE ^ GetPattern(): Pattern; 
		PROCEDURE ^ PutPattern(patt: Pattern); 
		PROCEDURE ^ AddPattern(patt: Pattern): Index; 
		PROCEDURE ^ GroupLeader(node: Index): Index; 
		PROCEDURE ^ SlideNode(node: Index): Index; 
		PROCEDURE ^ IncrementWeight(node: Index); 
		PROCEDURE ^ Scale; 
		PROCEDURE ^ EncodeByte(ch: CHAR); 
		PROCEDURE ^ ExtractByte(): CHAR; 
	END HuffmanCoder; 

	Encoder* = OBJECT 
	VAR 
		huff: HuffmanCoder; 

		PROCEDURE ^  & New*(archive: Streams.Writer); 
		PROCEDURE ^ CompressBlock*(CONST source: ARRAY OF CHAR; len: SIZE); 
	END Encoder; 

	Decoder* = OBJECT 
	VAR 
		huff: HuffmanCoder; 

		PROCEDURE ^  & New*(archive: Streams.Reader); 
		PROCEDURE ^ ExtractBlock*(VAR buf: ARRAY OF CHAR; len: SIGNED32); 
	END Decoder; 
BEGIN
END AdaptiveHuffman.
