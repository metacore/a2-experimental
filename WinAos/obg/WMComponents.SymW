MODULE WMComponents;
	IMPORT KernelLog, Inputs, Streams, Events, Files, Texts, TextUtilities, XML, XMLScanner, XMLParser, XMLObjects, Codecs, Localization, Repositories, Messages := WMMessages, Rectangles := WMRectangles, WMEvents, WMProperties, WMGraphics, Strings, WM := WMWindowManager, Raster, Commands, Modules, Kernel, Locks, Objects, WMDropTarget;
CONST 
	Ok* = 0; 
	DuplicateNamespace* = 1; 
	AlignNone* = 0; 
	AlignLeft* = 1; 
	AlignTop* = 2; 
	AlignRight* = 3; 
	AlignBottom* = 4; 
	AlignClient* = 5; 
	AlignRelative* = 6; 
	None = 0; 
	Left = 1; 
	Right = 2; 
	Lower = 3; 
	Upper = 4; 
	LowerRight = 5; 
	UpperRight = 6; 
	LowerLeft = 7; 
	UpperLeft = 8; 
	Inside = 9; 
	MaxRel = (16 * 1024); 
	MaxComponentNameSize* = 64; 
	TraceFocus = 0; 
	TraceFinalize = 1; 
	Trace = {}; 
	Logging = TRUE; 
	MacroCharacter = \"^"\; 
	NamespaceCharacter = \":"\; 
	NoNamespace = \""\; 
	DefaultNamespace = \"system"\; 
	MacroSelection = \"selection"\; 
	MacroClipboard = \"clipboard"\; 
	MacroAttributePrefix = \"attribute="\; 
	MacroPropertyPrefix = \"property="\; 
	CanYield = TRUE; 
	FlagDirty = 13; 
TYPE 
	PointerHandler* = PROCEDURE {DELEGATE}(x, y: SIZE; keys: SET; VAR handled: BOOLEAN); 

	PointerLeaveHandler* = PROCEDURE {DELEGATE}(VAR handled: BOOLEAN); 

	DragDropHandler* = PROCEDURE {DELEGATE}(x, y: SIZE; dragInfo: WM.DragInfo; VAR handled: BOOLEAN); 

	DragResultHandler* = PROCEDURE {DELEGATE}(accepted: BOOLEAN; recipient: ANY; dragInfo: WM.DragInfo; VAR handled: BOOLEAN); 

	DragAutoStartHandler* = PROCEDURE {DELEGATE}(VAR handled: BOOLEAN); 

	FocusHandler* = PROCEDURE {DELEGATE}(hasFocus: BOOLEAN); 

	ContextMenuHandler* = PROCEDURE {DELEGATE}(sender: ANY; x, y: SIZE); 

	KeyEventHandler* = PROCEDURE {DELEGATE}(ucs: SIZE; flags: SET; VAR keySym: SIZE; VAR handled: BOOLEAN); 

	DrawHandler* = PROCEDURE {DELEGATE}(canvas: WMGraphics.Canvas); 

	Recursion* = ENUM None* = 0, FromComponent* = 1, FromBottom* = 2 END; 

	SetStringProcedure = PROCEDURE {DELEGATE}(CONST string: ARRAY OF CHAR; x, y: SIZE; VAR res: WORD); 

	DropTarget = OBJECT (WMDropTarget.DropTarget)
	VAR 
		originator: ANY; 
		setString: SetStringProcedure; 
		x, y: SIZE; 

		PROCEDURE ^  & Init(originator: ANY; setString: SetStringProcedure; x, y: SIZE); 
		PROCEDURE ^ GetInterface*(type: WORD): WMDropTarget.DropInterface; 
	END DropTarget; 

	DropString = OBJECT (WMDropTarget.DropString)
	VAR 
		originator: ANY; 
		setString: SetStringProcedure; 
		x, y: SIZE; 

		PROCEDURE ^  & Init(originator: ANY; setString: SetStringProcedure; x, y: SIZE); 
		PROCEDURE ^ Set*(CONST string: ARRAY OF CHAR; VAR res: WORD); 
	END DropString; 

	LanguageExtension* = POINTER TO RECORD (Messages.MessageExtension)
		languages*: Localization.Languages; 
	END; 

	ToggleEditMode* = POINTER TO RECORD 
		recursion*: Recursion; 
	END; 

	FindComponentMode* = POINTER TO RECORD 
	END; 

	Event* = RECORD 
	END; 

	KeyPressedEvent* = RECORD (Event)
		ucs-: SIZE; 
		flags-: SET; 
		keysym-: SIZE; 
	END; 

	PointerEvent* = RECORD (Event)
		x-, y-, z-: SIZE; 
		keys-: SET; 
	END; 

	EventContext* = OBJECT (Repositories.Context)
	VAR 
		originator-: Component; 
		command-: Strings.String; 
		timestamp-: LONGINT; 

		PROCEDURE ^  & New*(originator: Component; command: Strings.String; in, arg: Streams.Reader; out, error: Streams.Writer; caller: OBJECT); 
	END EventContext; 

	PointerContext* = OBJECT (EventContext)
	VAR 
		pointer-: PointerEvent; 
	END PointerContext; 

	KeyContext* = OBJECT (EventContext)
	VAR 
		key-: KeyPressedEvent; 
	END KeyContext; 

	ComponentStyleChanged = OBJECT 
	END ComponentStyleChanged; 

	Component* = OBJECT {EXCLUSIVE} (Repositories.Component)
	VAR 
		sequencer-: Messages.MsgSequencer; 
		initialized-: BOOLEAN; 
		properties-: WMProperties.PropertyList; 
		events-: WMEvents.EventSourceList; 
		eventListeners-: WMEvents.EventListenerList; 
		id-, uid-: WMProperties.StringProperty; 
		enabled-: WMProperties.BooleanProperty; 
		inPropertyUpdate, inLinkUpdate: BOOLEAN; 
		internal-: BOOLEAN; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Write*(w: Streams.Writer; context: ANY; level: LONGINT); 
		PROCEDURE ^ FromXML*(xml: XML.Element); 
		PROCEDURE ^ IsCallFromSequencer*(): BOOLEAN; 
		PROCEDURE ^ AssertLock*; 
		PROCEDURE ^ SetSequencer*(s: Messages.MsgSequencer); 
		PROCEDURE ^ Acquire*; 
		PROCEDURE ^ Release*; 
		PROCEDURE ^ CheckReadLock*; 
		PROCEDURE ^ AddContent*(c: XML.Content); 
		PROCEDURE ^ RemoveContent*(c: XML.Content); 
		PROCEDURE ^ AddInternalComponent*(component: Component); 
		PROCEDURE ^ GetComponentRoot*(): Component; 
		PROCEDURE ^ Find*(id: ARRAY OF CHAR): Component; 
		PROCEDURE ^ FindByUID*(CONST uid: ARRAY OF CHAR): Component; 
		PROCEDURE ^ FindByPath*(CONST path: ARRAY OF CHAR; pos: LONGINT): Component; 
		PROCEDURE ^ StringToComponent*(str: Strings.String): Component; 
		PROCEDURE ^ StringToCompCommand*(eventstr: Strings.String): WMEvents.EventListener; 
		PROCEDURE ^ Finalize*; 
		PROCEDURE ^ Reset*(sender, data: ANY); 
		PROCEDURE ^ Initialize*; 
		PROCEDURE ^ HandleInternal*(VAR msg: Messages.Message); 
		PROCEDURE ^ Handle*(VAR msg: Messages.Message); 
		PROCEDURE ^ BroadcastSubcomponents*(VAR msg: Messages.Message); 
		PROCEDURE ^ LanguageChanged*(languages: Localization.Languages); 
		PROCEDURE ^ LinkChanged*(sender, link: ANY); 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ InternalPropertyChanged(sender, property: ANY); 
		PROCEDURE ^ InternalLinkChanged(sender, link: ANY); 
	END Component; 

	Macro* = ARRAY 128 OF CHAR; 

	MacroHandlerProcedure* = PROCEDURE {DELEGATE}(CONST macro: Macro; originator: Component; w: Streams.Writer; VAR handled: BOOLEAN); 

	Namespace = ARRAY 16 OF CHAR; 

	MacroHandler = POINTER TO RECORD 
		handler: MacroHandlerProcedure; 
		namespace: Namespace; 
		next: MacroHandler; 
	END; 

	VisualComponent* = OBJECT {EXCLUSIVE} (Component)
	VAR 
		bounds-, bearing-, relativeBounds-: WMProperties.RectangleProperty; 
		alignment-: WMProperties.Int32Property; 
		fillColor-: WMProperties.ColorProperty; 
		font-: WMProperties.FontProperty; 
		scaleFont-: WMProperties.Int32Property; 
		visible-, takesFocus-, needsTab-, editMode-: WMProperties.BooleanProperty; 
		focusPrevious-, focusNext-: WMProperties.StringProperty; 
		model-: WMProperties.ReferenceProperty; 
		onStartDrag-: WMEvents.EventSource; 
		canvasState-: WMGraphics.CanvasState; 
		fPointerOwner: VisualComponent; 
		hasFocus-: BOOLEAN; 
		focusComponent: VisualComponent; 
		extPointerDown, extPointerUp, extPointerMove: PointerHandler; 
		extPointerLeave: PointerLeaveHandler; 
		extDragOver, extDragDropped: DragDropHandler; 
		extDragResult: DragResultHandler; 
		extKeyEvent: KeyEventHandler; 
		extDraw: DrawHandler; 
		extFocus: FocusHandler; 
		extContextMenu: ContextMenuHandler; 
		extGetPositionOwner: GetPositionOwnerHandler; 
		layoutManager: LayoutManager; 
		aligning*: BOOLEAN; 
		pointerInfo: WM.PointerInfo; 
		editRegion: LONGINT; 
		editX, editY: SIZE; 
		keyFlags: SET; 
		oldPointerInfo: WM.PointerInfo; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ TraceFocusChain*; 
		PROCEDURE ^ SetFocus*; 
		PROCEDURE ^ FocusReceived*; 
		PROCEDURE ^ FocusLost*; 
		PROCEDURE ^ SetFocusTo(CONST id: ARRAY OF CHAR); 
		PROCEDURE ^ FocusNext*; 
		PROCEDURE ^ FocusPrev*; 
		PROCEDURE ^ LinkChanged*(sender, link: ANY); 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
		PROCEDURE ^ RecacheProperties*; 
		PROCEDURE ^ GetVisualComponentRoot*(): VisualComponent; 
		PROCEDURE ^ AdaptRelativeBounds(inner: Rectangles.Rectangle; parent: XML.Element); 
		PROCEDURE ^ AlignmentChanged; 
		PROCEDURE ^ GetClientRect*(): Rectangles.Rectangle; 
		PROCEDURE ^ SetLayoutManager*(layoutManager: LayoutManager); 
		PROCEDURE ^ AlignEvent(sender, data: ANY); 
		PROCEDURE ^ AlignSubComponents*; 
		PROCEDURE ^ Initialize*; 
		PROCEDURE ^ ToWMCoordinates*(x, y: SIZE; VAR gx, gy: SIZE); 
		PROCEDURE ^ IsHit*(x, y: SIZE): BOOLEAN; 
		PROCEDURE ^ GetPositionOwner*(x, y: SIZE): VisualComponent; 
		PROCEDURE ^ DragOver*(x, y: SIZE; dragInfo: WM.DragInfo); 
		PROCEDURE ^ DragDropped*(x, y: SIZE; dragInfo: WM.DragInfo); 
		PROCEDURE ^ FromXML*(xml: XML.Element); 
		PROCEDURE ^ AddVisualComponent(c: VisualComponent; x, y: SIZE); 
		PROCEDURE ^ EditDragDropped(x, y: SIZE; dragInfo: WM.DragInfo): BOOLEAN; 
		PROCEDURE ^ SetDroppedString(CONST string: ARRAY OF CHAR; x, y: SIZE; VAR res: WORD); 
		PROCEDURE ^ DragResult*(accepted: BOOLEAN; recipient: ANY; dragInfo: WM.DragInfo); 
		PROCEDURE ^ StartDrag*(data: ANY; img: WMGraphics.Image; offsetX, offsetY: SIZE; onAccept, onReject: Messages.CompCommand): BOOLEAN; 
		PROCEDURE ^ ConfirmDrag*(accept: BOOLEAN; dragInfo: WM.DragInfo); 
		PROCEDURE ^ AutoStartDrag*; 
		PROCEDURE ^ ShowContextMenu*(x, y: SIZE); 
		PROCEDURE ^ Resized*; 
		PROCEDURE ^ DrawBackground*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ DrawForeground*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ DrawSelection(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ DrawSubComponents*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ GetFont*(): WMGraphics.Font; 
		PROCEDURE ^ SetFont*(font: WMGraphics.Font); 
		PROCEDURE ^ ScaleFont*(height: SIZE; percent: WORD); 
		PROCEDURE ^ Draw*(canvas: WMGraphics.Canvas); 
		PROCEDURE ^ InvalidateRect*(r: Rectangles.Rectangle); 
		PROCEDURE ^ PostInvalidateCommand*(sender, par: ANY); 
		PROCEDURE ^ InvalidateCommand*(sender, par: ANY); 
		PROCEDURE ^ Invalidate*; 
		PROCEDURE ^ DisableUpdate*; 
		PROCEDURE ^ EnableUpdate*; 
		PROCEDURE ^ GetInternalPointerInfo*(): WM.PointerInfo; 
		PROCEDURE ^ SetInternalPointerInfo*(pi: WM.PointerInfo); 
		PROCEDURE ^ SetPointerInfo*(pi: WM.PointerInfo); 
		PROCEDURE ^ GetPointerInfo*(): WM.PointerInfo; 
		PROCEDURE ^ SetExtPointerLeaveHandler*(handler: PointerLeaveHandler); 
		PROCEDURE ^ SetExtPointerDownHandler*(handler: PointerHandler); 
		PROCEDURE ^ SetExtPointerMoveHandler*(handler: PointerHandler); 
		PROCEDURE ^ SetExtPointerUpHandler*(handler: PointerHandler); 
		PROCEDURE ^ SetExtDragOverHandler*(handler: DragDropHandler); 
		PROCEDURE ^ SetExtDragDroppedHandler*(handler: DragDropHandler); 
		PROCEDURE ^ SetExtDragResultHandler*(handler: DragResultHandler); 
		PROCEDURE ^ SetExtKeyEventHandler*(handler: KeyEventHandler); 
		PROCEDURE ^ SetExtDrawHandler*(handler: DrawHandler); 
		PROCEDURE ^ SetExtFocusHandler*(handler: FocusHandler); 
		PROCEDURE ^ SetExtContextMenuHandler*(handler: ContextMenuHandler); 
		PROCEDURE ^ SetExtGetPositionOwnerHandler*(handler: GetPositionOwnerHandler); 
		PROCEDURE ^ PointerLeave*; 
		PROCEDURE ^ PointerDown*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ PointerMove*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ WheelMove*(dz: SIZE); 
		PROCEDURE ^ PointerUp*(x, y: SIZE; keys: SET); 
		PROCEDURE ^ KeyEvent*(ucs: SIZE; flags: SET; VAR keySym: SIZE); 
		PROCEDURE ^ EditKeyEvents(ucs: SIZE; flags: SET; VAR keySym: SIZE): BOOLEAN; 
		PROCEDURE ^ CheckKeyEvents(ucs: SIZE; flags: SET; VAR keySym: SIZE); 
		PROCEDURE ^ CheckPointerEvent(x, y, z: SIZE; keys: SET); 
		PROCEDURE ^ CheckPointerUpEvent(x, y, z: SIZE; keys: SET); 
		PROCEDURE ^ InEditBounds(x, y: SIZE): WORD; 
		PROCEDURE ^ Edit(VAR msg: Messages.Message); 
		PROCEDURE ^ SetEditMode*(mode: BOOLEAN; recurse: BOOLEAN); 
		PROCEDURE ^ EditMoved(sender, data: ANY); 
		PROCEDURE ^ HandleInternal*(VAR msg: Messages.Message); 
	END VisualComponent; 

	GetPositionOwnerHandler* = PROCEDURE {DELEGATE}(x, y: SIZE; VAR positionOwner: VisualComponent; VAR handled: BOOLEAN); 

	LayoutManager* = PROCEDURE {DELEGATE}(vc: VisualComponent); 

	FormWindow* = OBJECT {EXCLUSIVE} (WM.DoubleBufferWindow)
	VAR 
		form-: Form; 
		cs: WMGraphics.CanvasState; 
		disableUpdate: LONGINT; 
		content: VisualComponent; 
		scaling*: BOOLEAN; 

		PROCEDURE ^ ToXML*(): XML.Content; 
		PROCEDURE ^ LoadComponents*(xml: XML.Element); 
		PROCEDURE ^ StoreComponents*(): XML.Element; 
		PROCEDURE ^ SetContent*(x: XML.Content); 
		PROCEDURE ^ DisableUpdate*; 
		PROCEDURE ^ EnableUpdate*; 
		PROCEDURE ^ Resized*(width, height: SIZE); 
		PROCEDURE ^ Trap(): BOOLEAN; 
		PROCEDURE ^ Update(rect: Rectangles.Rectangle); 
		PROCEDURE ^ Handle*(VAR m: Messages.Message); 
		PROCEDURE ^ LanguageChanged*(languages: Localization.Languages); 
		PROCEDURE ^ CSChanged*; 
		PROCEDURE ^ Close*; 
	END FormWindow; 

	Form* = OBJECT {EXCLUSIVE} (VisualComponent)
	VAR 
		window-: FormWindow; 
		lastFocusComponent: VisualComponent; 

		PROCEDURE ^  & New*(window: FormWindow); 
		PROCEDURE ^ SetWindow*(window: FormWindow); 
		PROCEDURE ^ GetPointerInfo*(): WM.PointerInfo; 
		PROCEDURE ^ SetPointerInfo*(pi: WM.PointerInfo); 
		PROCEDURE ^ DisableUpdate*; 
		PROCEDURE ^ EnableUpdate*; 
		PROCEDURE ^ InvalidateRect*(rect: Rectangles.Rectangle); 
		PROCEDURE ^ PropertyChanged*(sender, property: ANY); 
	END Form; 

	PropertyListEntry = POINTER TO RECORD 
		next: PropertyListEntry; 
		name: Strings.String; 
		list: WMProperties.PropertyList; 
	END; 

	ListArray* = POINTER TO ARRAY OF WMProperties.PropertyList; 

	PropertyListList* = OBJECT {EXCLUSIVE} 
	VAR 
		first: PropertyListEntry; 

		PROCEDURE ^ Find*(CONST name: ARRAY OF CHAR): WMProperties.PropertyList; 
		PROCEDURE ^ RemoveInternal(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ Remove*(CONST name: ARRAY OF CHAR); 
		PROCEDURE ^ Add*(CONST name: ARRAY OF CHAR; pl: WMProperties.PropertyList); 
		PROCEDURE ^ Enumerate*(): ListArray; 
		PROCEDURE ^ UpdateStyle*; 
	END PropertyListList; 

	ComponentListEntry = POINTER TO RECORD 
		component: VisualComponent; 
		dx, dy: SIZE; 
		next: ComponentListEntry; 
	END; 

	SelectionArray* = POINTER TO ARRAY OF VisualComponent; 

	SelectionList* = OBJECT {EXCLUSIVE} 
	VAR 
		first, last: ComponentListEntry; 
		number: LONGINT; 
		state: LONGINT; 
		timer: Kernel.Timer; 
		onChanged-: WMEvents.EventSource; 
		lock: Locks.RecursiveLock; 
		rectOwner: ANY; 
		rect: Rectangles.Rectangle; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Reset(this: VisualComponent); 
		PROCEDURE ^ Has*(this: ANY): BOOLEAN; 
		PROCEDURE ^ Add*(this: VisualComponent); 
		PROCEDURE ^ Remove*(this: VisualComponent); 
		PROCEDURE ^ GetSelection*(): SelectionArray; 
		PROCEDURE ^ Toggle*(this: VisualComponent); 
		PROCEDURE ^ Update; 
		PROCEDURE ^ Shift(dx, dy: LONGINT); 
		PROCEDURE ^ ToImg(start: VisualComponent; VAR this: ComponentListEntry): WMGraphics.Image; 
	BEGIN{ACTIVE} 
	END SelectionList; 

	WindowGenerator* = PROCEDURE (xml: XML.Content):WM.Window; 
VAR 
	hasErrors: BOOLEAN; 
	invalidateRectMsg-: Messages.MessageExtension; 
	PrototypeID, PrototypeUID: WMProperties.StringProperty; 
	PrototypeBounds-, PrototypeBoundsRelative-, PrototypeBearing: WMProperties.RectangleProperty; 
	PrototypeEnabled: WMProperties.BooleanProperty; 
	PrototypeFillColor: WMProperties.ColorProperty; 
	PrototypeAlignment: WMProperties.Int32Property; 
	PrototypeVisible, PrototypeTakesFocus, PrototypeNeedsTab, PrototypeEditMode: WMProperties.BooleanProperty; 
	PrototypeScaleFont: WMProperties.Int32Property; 
	PrototypeFocusPrevious, PrototypeFocusNext: WMProperties.StringProperty; 
	PrototypeFont-: WMProperties.FontProperty; 
	StrComponent, StrVisualComponent, StrForm, StrFormWindow, StrModel, StrModelInfo: Strings.String; 
	GSonStartDrag, GSonStartDragInfo: Strings.String; 
	ModelPrototype-: WMProperties.ReferenceProperty; 
	propertyListList-: PropertyListList; 
	currentStyle-: XML.Element; 
	componentStyleMsg-: ComponentStyleChanged; 
	timestamp: LONGINT; 
	macroHandlers: MacroHandler; 
	selection-: SelectionList; 

	PROCEDURE ^ IsWhiteSpace(ch: CHAR): BOOLEAN; 
	PROCEDURE ^ SkipWhiteSpace(CONST string: ARRAY OF CHAR; VAR index: SIZE); 
	PROCEDURE ^ ReadWord*(CONST string: ARRAY OF CHAR; VAR word: ARRAY OF CHAR; VAR index: SIZE): BOOLEAN; 
	PROCEDURE ^ SplitMacroString(CONST string: ARRAY OF CHAR; VAR namespace, name: ARRAY OF CHAR; separator: CHAR); 
	PROCEDURE ^ ReportError(CONST text, argument1, argument2: ARRAY OF CHAR); 
	PROCEDURE ^ GetArgumentStream*(command: Strings.String; offset: SIZE; VAR arguments: Streams.StringReader); 
	PROCEDURE ^ GenerateContext*(oldCommand, command: Strings.String; index: SIZE; originator: Component; CONST event: Event): EventContext; 
	PROCEDURE ^ HandleEvent*(CONST event: Event; originator: Component; command: Strings.String); 
	PROCEDURE ^ ContainsMacros(CONST string: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ WriteSelectionToStream(w: Streams.Writer); 
	PROCEDURE ^ SubstituteMacro(CONST command: Strings.String; VAR index: SIZE; originator: Component; w: Streams.Writer); 
	PROCEDURE ^ SubstituteMacros*(CONST command: Strings.String; VAR newCommand: Strings.String; originator: Component); 
	PROCEDURE ^ GetAttributeValue(originator: Component; CONST fullname: ARRAY OF CHAR): Strings.String; 
	PROCEDURE ^ GetPropertyValue(originator: Component; CONST fullname: ARRAY OF CHAR): Strings.String; 
	PROCEDURE ^ DefaultMacroHandler(CONST macro: Macro; originator: Component; w: Streams.Writer; VAR handled: BOOLEAN); 
	PROCEDURE ^ FindMacroHandler(CONST namespace: ARRAY OF CHAR): MacroHandlerProcedure; 
	PROCEDURE ^ AddMacroHandler*(CONST namespace: Namespace; handler: MacroHandlerProcedure; VAR res: WORD); 
	PROCEDURE ^ RemoveMacroHandler*(handler: MacroHandlerProcedure); 
	PROCEDURE ^ SetAttribute*(context: Commands.Context); 
	PROCEDURE ^ Call*(cmds: ARRAY OF CHAR; caller: Component; flags: SET; VAR res: WORD; VAR msg: ARRAY OF CHAR); 
	PROCEDURE ^ GetComponent*(CONST name: ARRAY OF CHAR): Component; 
	PROCEDURE ^ GetVisualComponent*(CONST name: ARRAY OF CHAR): VisualComponent; 
	PROCEDURE ^ SetStyle*(style: XML.Element); 
	PROCEDURE ^ SetStyleInternal(style: XML.Element); 
	PROCEDURE ^ FindRelativePath(x: Component; CONST path: ARRAY OF CHAR; pos: LONGINT): Component; 
	PROCEDURE ^ Error(pos, line, row: Streams.Position; CONST msg: ARRAY OF CHAR); 
	PROCEDURE ^ Load*(CONST filename: ARRAY OF CHAR): XML.Content; 
	PROCEDURE ^ FormWindowGen*(xml: XML.Content): WM.Window; 
	PROCEDURE ^ LoadFormWindow*(xml: XML.Content): WM.Window; 
	PROCEDURE ^ Open*(context: Commands.Context); 
	PROCEDURE ^ LoadStyleInternal(CONST filename: ARRAY OF CHAR); 
	PROCEDURE ^ LoadStyle*(context: Commands.Context); 
	PROCEDURE ^ NewString*(CONST x: ARRAY OF CHAR): Strings.String; 
	PROCEDURE ^ InitStrings; 
	PROCEDURE ^ InitPrototypes; 
	PROCEDURE ^ ShowComponent(component: Component); 
	PROCEDURE ^ NewLine(w: Streams.Writer; level: LONGINT); 
	PROCEDURE ^ InstallDefaultMacroHandler; 
	PROCEDURE ^ GetElementByName(parent: XML.Element; CONST name: ARRAY OF CHAR): XML.Element; 
	PROCEDURE ^ NewComponent*(): XML.Element; 
	PROCEDURE ^ NewVisualComponent*(): XML.Element; 
	PROCEDURE ^ NewForm*(): XML.Element; 
	PROCEDURE ^ Align*(context: Commands.Context); 
	PROCEDURE ^ SetProperty*(context: Commands.Context); 
	PROCEDURE ^ RemoveSelection*; 
	PROCEDURE ^ ComponentFromXML*(xml: XML.Element): Component; 
	PROCEDURE ^ Clone*(x: Component): Repositories.Component; 
BEGIN
END WMComponents.
