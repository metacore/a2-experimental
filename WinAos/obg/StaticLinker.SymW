MODULE StaticLinker;
	IMPORT Commands, Options, Diagnostics, Files, GenericLinker, ObjectFile, BitSets, Strings, Streams;
CONST 
TYPE 
	ExportName = ARRAY 128 OF CHAR; 

	PatchBlock* = POINTER TO RECORD 
		baseAdr: LONGINT; 
		addresses: LONGINT; 
		address: ARRAY 1024 OF LONGINT; 
		next: PatchBlock; 
	END; 

	RelocationInfo = OBJECT 
	CONST 
		blockSize = 4096; 
	VAR 
		patchBlock: PatchBlock; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ GetPatchBlock(adr: LONGINT): PatchBlock; 
		PROCEDURE ^ AddReloc(adr: LONGINT); 
	END RelocationInfo; 

	ExportInfo = OBJECT 
	VAR 
		exports: LONGINT; 
		name: ExportName; 
		symbolNames: POINTER TO ARRAY OF ExportName; 
		exportNames: POINTER TO ARRAY OF ExportName; 
		exportAddresses: POINTER TO ARRAY OF GenericLinker.Address; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Swap(i, j: LONGINT); 
		PROCEDURE ^ QuickSort(lo, hi: LONGINT); 
		PROCEDURE ^ Sort; 
	END ExportInfo; 

	Arrangement* = OBJECT (GenericLinker.Arrangement)
	VAR 
		displacement: GenericLinker.Address; 
		bits: BitSets.BitSet; 
		maxUnitSize: ObjectFile.Bits; 
		exportInfo: ExportInfo; 
		relocInfo: RelocationInfo; 

		PROCEDURE ^  & InitArrangement*(displacement: GenericLinker.Address); 
		PROCEDURE ^ Allocate*(CONST section: ObjectFile.Section): GenericLinker.Address; 
		PROCEDURE ^ SizeInBits*(): LONGINT; 
		PROCEDURE ^ Patch*(pos, value: GenericLinker.Address; offset, bits, unit: ObjectFile.Bits); 
		PROCEDURE ^ CheckReloc*(target: LONGINT; pattern: ObjectFile.Pattern; CONST patch: ObjectFile.Patch); 
	END Arrangement; 

	FileFormat = PROCEDURE (linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
VAR 
	defaults: Options.Defaults; 
	processing, finished: GenericLinker.Block; 

	PROCEDURE ^ Align(this, to: LONGINT): LONGINT; 
	PROCEDURE ^ ReadObjectFile*(CONST moduleName, path, extension: ARRAY OF CHAR; linker: GenericLinker.Linker; moduleList: GenericLinker.HashTableSegmentedName); 
	PROCEDURE ^ WriteOutputFile*(arrangement: Arrangement; CONST fileName: Files.FileName; linker: GenericLinker.Linker; fileFormat: FileFormat); 
	PROCEDURE ^ WriteBinaryFile(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
	PROCEDURE ^ WriteTRMFile(arrangement: Arrangement; writer: Files.Writer; bitsPerLine, lines: LONGINT); 
	PROCEDURE ^ WriteTRMCodeFile*(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
	PROCEDURE ^ WriteTRMDataFile*(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
	PROCEDURE ^ WritePEFile(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer; bitmode, subSystem: INTEGER; isDLL: BOOLEAN); 
	PROCEDURE ^ WriteDLL32File(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
	PROCEDURE ^ WriteDLL64File(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
	PROCEDURE ^ WritePE32File(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
	PROCEDURE ^ WritePE64File(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
	PROCEDURE ^ WritePE32CUIFile(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
	PROCEDURE ^ WritePE64CUIFile(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
	PROCEDURE ^ WriteEFI32File(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
	PROCEDURE ^ WriteEFI64File(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
	PROCEDURE ^ WriteELFFile(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
	PROCEDURE ^ WriteMachOFile(linker: GenericLinker.Linker; arrangement: Arrangement; writer: Files.Writer); 
	PROCEDURE ^ GetFileFormat(options: Options.Options; CONST name: Options.Name; default: FileFormat): FileFormat; 
	PROCEDURE ^ ParseExports(CONST names: ARRAY OF CHAR): ExportInfo; 
	PROCEDURE ^ CheckExports(info: ExportInfo; error: Streams.Writer): BOOLEAN; 
	PROCEDURE ^ Link*(context: Commands.Context); 
	PROCEDURE ^ ShowDefaults*(context: Commands.Context); 
BEGIN
END StaticLinker.
