MODULE FTPClient;
	IMPORT Streams, Kernel, Objects, IP, DNS, TCP, Strings, KernelLog;
CONST 
	ResOk = 0; 
	ResFailed = 1; 
	ResAlreadyOpen = 2; 
	ResServerNotFound = 3; 
	ResNoConnection = 4; 
	ResUserPassError = 5; 
	ResServerNotReady = 6; 
	ResServerFailed = 7; 
	FileActionOk = 250; 
	CommandOk = 200; 
	DataConnectionOpen = 125; 
	FileStatusOk = 150; 
	EnterPassword = 330; 
	NeedPassword = 331; 
	PathNameCreated = 257; 
	UserLoggedIn = 230; 
	ActvTimeout = (60 * 1000); 
	Debug = FALSE; 
TYPE 
	FTPEntry* = OBJECT 
	VAR 
		full*: ARRAY 331 OF CHAR; 
		flags*: ARRAY 11 OF CHAR; 
		type*: ARRAY 4 OF CHAR; 
		user*, group*, size*: ARRAY 9 OF CHAR; 
		d0*, d1*, d2*: ARRAY 13 OF CHAR; 
		filename*: ARRAY 256 OF CHAR; 
		visible*: BOOLEAN; 
	END FTPEntry; 

	FTPListing* = POINTER TO ARRAY OF FTPEntry; 

	FTPClient* = OBJECT {EXCLUSIVE} 
	VAR 
		open: BOOLEAN; 
		busy: BOOLEAN; 
		connection: TCP.Connection; 
		dataCon: TCP.Connection; 
		dataIP: IP.Adr; 
		dataPort: LONGINT; 
		w: Streams.Writer; 
		r: Streams.Reader; 
		msg-: ARRAY 4096 OF CHAR; 
		code: LONGINT; 
		passiveTransfer: BOOLEAN; 
		actvListener: TCP.Connection; 
		actvTimeout: Objects.Timer; 
		listing-: FTPListing; 
		nofEntries-: LONGINT; 

		PROCEDURE ^  & Init*; 
		PROCEDURE ^ Open*(CONST host, user, password: ARRAY OF CHAR; port: LONGINT; VAR res: LONGINT); 
		PROCEDURE ^ Login(CONST user, password: ARRAY OF CHAR): BOOLEAN; 
		PROCEDURE ^ ReadResponse(VAR code: LONGINT; VAR reply: ARRAY OF CHAR); 
		PROCEDURE ^ Close*(VAR res: LONGINT); 
		PROCEDURE ^ IsAlive*(): BOOLEAN; 
		PROCEDURE ^ IsNum(ch: CHAR): BOOLEAN; 
		PROCEDURE ^ GetDataConnection(VAR res: LONGINT); 
		PROCEDURE ^ ActvTimeoutHandler; 
		PROCEDURE ^ WaitEstablished(c: TCP.Connection); 
		PROCEDURE ^ OpenDataConnection(VAR connection: TCP.Connection; VAR res: LONGINT); 
		PROCEDURE ^ OpenPut*(CONST remoteName: ARRAY OF CHAR; VAR outw: Streams.Writer; VAR res: LONGINT); 
		PROCEDURE ^ ClosePut*(VAR res: LONGINT); 
		PROCEDURE ^ OpenGet*(CONST remoteName: ARRAY OF CHAR; VAR r: Streams.Reader; VAR res: LONGINT); 
		PROCEDURE ^ CloseGet*(VAR res: LONGINT); 
		PROCEDURE ^ DeleteFile*(CONST remoteName: ARRAY OF CHAR; VAR res: LONGINT); 
		PROCEDURE ^ ChangeDir*(CONST dir: ARRAY OF CHAR; VAR res: LONGINT); 
		PROCEDURE ^ MakeDir*(CONST dir: ARRAY OF CHAR; VAR res: LONGINT); 
		PROCEDURE ^ RemoveDir*(CONST dir: ARRAY OF CHAR; VAR res: LONGINT); 
		PROCEDURE ^ RenameFile*(CONST currentName, newName: ARRAY OF CHAR; VAR res: LONGINT); 
		PROCEDURE ^ EnumerateNames*; 
		PROCEDURE ^ EnumerateDir*(CONST args: ARRAY OF CHAR); 
		PROCEDURE ^ AddFTPEntryToListing(entry: FTPEntry); 
		PROCEDURE ^ GetCurrentDir*(VAR dir: ARRAY OF CHAR; VAR res: LONGINT); 
		PROCEDURE ^ Raw*(CONST cmd: ARRAY OF CHAR; VAR res: LONGINT); 
		PROCEDURE ^ SplitCommand(CONST cmd: ARRAY OF CHAR; VAR command, args: ARRAY OF CHAR); 
	END FTPClient; 

BEGIN
END FTPClient.
