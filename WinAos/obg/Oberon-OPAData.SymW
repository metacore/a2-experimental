MODULE OPAData IN Oberon;
	IMPORT Files, Texts, Oberon, SYSTEM;
CONST 
	debug = FALSE; 
	FileName = \"OPA.Data"\; 
	i386 = 0; 
	i486 = 1; 
	Pentium = 2; 
	PentiumPro = 3; 
	FPU = 16; 
	Privileged = 17; 
	MMX = 18; 
	SSE = 19; 
	SSE2 = 20; 
	SSE3 = 21; 
	SSE4 = 22; 
	none =  -1; 
	MnemoLen = 12; 
	Reg8 = 8; 
	Reg16 = 16; 
	Reg32 = 32; 
	MReg = 40; 
	XReg = 41; 
	RegAL = 9; 
	RegAX = 17; 
	RegEAX = 33; 
	RegDX = 18; 
	RegCL = 19; 
	Imm8 = 48; 
	Imm16 = 49; 
	Imm32 = 50; 
	SImm8 = 53; 
	Imm = 54; 
	Const1 = 51; 
	Const3 = 52; 
	RM = 64; 
	RM8 = 65; 
	RM16 = 66; 
	RM32 = 67; 
	MM = 68; 
	MM32 = 69; 
	MM64 = 70; 
	XMM = 160; 
	XMM32 = 161; 
	XMM64 = 162; 
	XMM128 = 163; 
	M = 72; 
	M8 = 73; 
	M16 = 74; 
	M32 = 75; 
	M64 = 76; 
	M80 = 77; 
	M128 = 78; 
	SReg = 80; 
	RegCS = 81; 
	RegDS = 82; 
	RegES = 83; 
	RegFS = 84; 
	RegGS = 85; 
	RegSS = 86; 
	Rel8 = 96; 
	Rel16 = 97; 
	Rel32 = 98; 
	FwdJmp = 99; 
	CRReg = 112; 
	DRReg = 113; 
	TRReg = 114; 
	FReg = 128; 
	FRegST = 129; 
	OmReg = 1; 
	OmOp = 2; 
	OmRMReg = 3; 
	OmRM = 4; 
TYPE 
	Mnemo = ARRAY MnemoLen OF CHAR; 

	InstrDesc = RECORD 
		name: Mnemo; 
		start, end: INTEGER; 
		target: SET; 
	END; 

	OpCode = RECORD 
		op: ARRAY 3 OF INTEGER; 
		op0, op1, op2: INTEGER; 
		opc: INTEGER; 
		reg: INTEGER; 
	END; 
VAR 
	OpTab: POINTER TO ARRAY OF OpCode; 
	OpTabN: INTEGER; 
	InstrTab: POINTER TO ARRAY OF InstrDesc; 
	OpTabLen, InstrTabLen: INTEGER; 
	Clash: ARRAY 32 OF LONGINT; 
	InstrCount, Average: LONGINT; 
	Docu: BOOLEAN; 
	W: Texts.Writer; 

	PROCEDURE ^ Message(CONST str: ARRAY OF CHAR); 
	PROCEDURE ^ IntToHexStr(h, width: LONGINT; VAR s: ARRAY OF CHAR); 
	PROCEDURE ^ DumpMode(VAR W: Texts.Writer; mode: INTEGER); 
	PROCEDURE ^ HashFn(CONST name: ARRAY OF CHAR; VAR k, n: INTEGER); 
	PROCEDURE ^ FindInstruction(CONST name: ARRAY OF CHAR; VAR inx: INTEGER); 
	PROCEDURE ^ InsertMnemo(CONST name: ARRAY OF CHAR; VAR k: INTEGER; target: SET); 
	PROCEDURE ^ InsertAlias(CONST name, alias: ARRAY OF CHAR); 
	PROCEDURE ^ InsertOp3Ext(idx, dest, src, o3, op0, op1, op3, opc, om: INTEGER); 
	PROCEDURE ^ InsertOp3(idx, dest, src, o3, op0, op1, opc, om: INTEGER); 
	PROCEDURE ^ InsertOpExt(idx, dest, src, op0, op1, op2, opc, om: INTEGER); 
	PROCEDURE ^ InsertOp(idx, dest, src, op0, op1, opc, om: INTEGER); 
	PROCEDURE ^ InsertFloatInstr1; 
	PROCEDURE ^ InsertFloatInstr2; 
	PROCEDURE ^ InsertInstr1; 
	PROCEDURE ^ InsertInstr2; 
	PROCEDURE ^ InsertInstr3; 
	PROCEDURE ^ InsertInstr4; 
	PROCEDURE ^ InsertMMX; 
	PROCEDURE ^ InsertSSE; 
	PROCEDURE ^ InsertSSE2; 
	PROCEDURE ^ InsertSSE3; 
	PROCEDURE ^ InsertSSE4; 
	PROCEDURE ^ Insert(nofInstr, nofOps: INTEGER); 
	PROCEDURE ^ FindSize*; 
	PROCEDURE ^ FillTable*; 
	PROCEDURE ^ ExportTables*; 
	PROCEDURE ^ DumpInstructions*; 
BEGIN
END OPAData.
