MODULE Texts IN Oberon;
	IMPORT Files, Objects, Display, Fonts, Reals IN A2;
CONST 
	Inval* = 0; 
	Name* = 1; 
	String* = 2; 
	Int* = 3; 
	Real* = 4; 
	LongReal* = 5; 
	Char* = 6; 
	Object* = 7; 
	TAB = 9X; 
	CR = 0DX; 
	LF = 0AX; 
	OldTextBlockId = 1X; 
	OldTextSpex = 0F0X; 
	BufSize = 64; 
TYPE 
	Piece = POINTER TO PieceDesc; 

	PieceDesc = RECORD 
		f: Files.File; 
		off: SIGNED32; 
		len: SIGNED32; 
		obj: Objects.Object; 
		lib: Objects.Library; 
		ref: SIGNED16; 
		col: SIGNED8; 
		voff: SIGNED8; 
		prev, next: Piece; 
	END; 

	Text* = POINTER TO TextDesc; 

	TextDesc* = RECORD (Objects.ObjDesc)
		len*: SIGNED32; 
		obs: Objects.Library; 
		trailer: Piece; 
		org: SIGNED32; 
		pce: Piece; 
	END; 

	UpdateMsg* = RECORD (Display.FrameMsg)
		text*: Text; 
		beg*, end*, len*: SIGNED32; 
	END; 

	Finder* = RECORD 
		eot*: BOOLEAN; 
		pos*: SIGNED32; 
		T: Text; 
		ref: Piece; 
	END; 

	Reader* = RECORD 
		ref: Piece; 
		T: Text; 
		org: SIGNED32; 
		off: SIGNED32; 
		R: Files.Rider; 
		stamp: SIGNED32; 
		buf: ARRAY BufSize OF CHAR; 
		bufpos, buflen: SIGNED32; 
		lib*: Objects.Library; 
		col*: SIGNED8; 
		voff*: SIGNED8; 
		eot*: BOOLEAN; 
	END; 

	Scanner* = RECORD (Reader)
		nextCh*: CHAR; 
		line*: SIGNED16; 
		class*: SIGNED16; 
		i*: SIGNED32; 
		x*: FLOAT32; 
		y*: FLOAT64; 
		c*: CHAR; 
		len*: SIGNED8; 
		s*: ARRAY 256 OF CHAR; 
		obj*: Objects.Object; 
	END; 

	Buffer* = POINTER TO BufDesc; 

	BufDesc* = RECORD 
		len*: SIGNED32; 
		header, last: Piece; 
	END; 

	Writer* = RECORD 
		R: Files.Rider; 
		buf*: Buffer; 
		lib*: Objects.Library; 
		col*: SIGNED8; 
		voff*: SIGNED8; 
	END; 
VAR 
	TextBlockId*, DocBlockId, NoSpex, NoSpex2, TextSpex: CHAR; 
	Wfile: Files.File; 
	R: Files.Rider; 
	DelBuf: Buffer; 
	H: Objects.Handler; 
	nameChars*: ARRAY 256 OF BOOLEAN; 
	obs: Objects.Library; 

	PROCEDURE ^ LoadAscii*(T: Text; f: Files.File); 
	PROCEDURE ^ ReadDocHeader(VAR R: Files.Rider; VAR ch: CHAR); 
	PROCEDURE ^ Load*(T: Text; f: Files.File; pos: SIGNED32; VAR len: SIGNED32); 
	PROCEDURE ^ SyncPiece(T: Text; p: Piece); 
	PROCEDURE ^ Store*(T: Text; f: Files.File; pos: SIGNED32; VAR len: SIGNED32); 
	PROCEDURE ^ GenNew(T: Text); 
	PROCEDURE ^ Open*(T: Text; CONST name: ARRAY OF CHAR); 
	PROCEDURE ^ New*; 
	PROCEDURE ^ FindPiece(T: Text; pos: SIGNED32; VAR org: SIGNED32; VAR p: Piece); 
	PROCEDURE ^ SplitPiece(p: Piece; off: SIGNED32; VAR pr: Piece); 
	PROCEDURE ^ Insert*(T: Text; pos: SIGNED32; B: Buffer); 
	PROCEDURE ^ Append*(T: Text; B: Buffer); 
	PROCEDURE ^ Delete*(T: Text; beg, end: SIGNED32); 
	PROCEDURE ^ Replace*(T: Text; beg, end: SIGNED32; B: Buffer); 
	PROCEDURE ^ ChangeLooks*(T: Text; beg, end: SIGNED32; sel: SET; lib: Objects.Library; col, voff: SIGNED8); 
	PROCEDURE ^ OpenBuf*(B: Buffer); 
	PROCEDURE ^ Save*(T: Text; beg, end: SIGNED32; B: Buffer); 
	PROCEDURE ^ Copy*(SB, DB: Buffer); 
	PROCEDURE ^ Recall*(VAR B: Buffer); 
	PROCEDURE ^ Handle*(obj: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ OpenFinder*(VAR F: Finder; T: Text; pos: SIGNED32); 
	PROCEDURE ^ FindObj*(VAR F: Finder; VAR obj: Objects.Object); 
	PROCEDURE ^ OpenReader*(VAR R: Reader; T: Text; pos: SIGNED32); 
	PROCEDURE ^ Read*(VAR R: Reader; VAR ch: CHAR); 
	PROCEDURE ^ Pos*(VAR R: Reader): SIGNED32; 
	PROCEDURE ^ OpenScanner*(VAR S: Scanner; T: Text; pos: SIGNED32); 
	PROCEDURE ^ Scan*(VAR S: Scanner); 
	PROCEDURE ^ OpenWriter*(VAR W: Writer); 
	PROCEDURE ^ SetFont*(VAR W: Writer; fnt: Objects.Library); 
	PROCEDURE ^ SetColor*(VAR W: Writer; col: SIGNED8); 
	PROCEDURE ^ SetOffset*(VAR W: Writer; voff: SIGNED8); 
	PROCEDURE ^ Write*(VAR W: Writer; ch: CHAR); 
	PROCEDURE ^ WriteLn*(VAR W: Writer); 
	PROCEDURE ^ WriteString*(VAR W: Writer; CONST s: ARRAY OF CHAR); 
	PROCEDURE ^ WriteInt*(VAR W: Writer; x, n: SIGNED32); 
	PROCEDURE ^ WriteHex*(VAR W: Writer; x: SIGNED32); 
	PROCEDURE ^ WriteRealHex*(VAR W: Writer; x: FLOAT32); 
	PROCEDURE ^ WriteLongRealHex*(VAR W: Writer; x: FLOAT64); 
	PROCEDURE ^ WriteReal*(VAR W: Writer; x: FLOAT32; n: SIGNED32); 
	PROCEDURE ^ WriteRealFix*(VAR W: Writer; x: FLOAT32; n, f, E: SIGNED32); 
	PROCEDURE ^ WriteLongReal*(VAR W: Writer; x: FLOAT64; n: SIGNED32); 
	PROCEDURE ^ WriteLongRealFix*(VAR W: Writer; x: FLOAT64; n, f, D: SIGNED32); 
	PROCEDURE ^ WriteDate*(VAR W: Writer; t, d: SIGNED32); 
	PROCEDURE ^ WriteSet*(VAR W: Writer; s: SET); 
	PROCEDURE ^ WriteObj*(VAR W: Writer; obj: Objects.Object); 
	PROCEDURE ^ InitScan; 
BEGIN
END Texts.
