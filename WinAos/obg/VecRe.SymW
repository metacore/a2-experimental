MODULE VecRe;
	IMPORT SYSTEM, NbrInt, ArrayXdBytes, ArrayXd := ArrayXdRe, Array1d := Array1dRe, NbrRat, NbrRe, DataErrors, DataIO;
CONST 
	VERSION* = 1; 
TYPE 
	Value* = ArrayXd.Value; 

	Index* = SIGNED32; 

	IntValue = ArrayXd.IntValue; 

	RatValue = NbrRat.Rational; 

	Array* = ArrayXd.Array1; 

	Map* = ArrayXd.Map; 

	Vector* = OBJECT {EXCLUSIVE} (ArrayXd.Array)
	VAR 
		lenx-: SIGNED32; 
		ox-: SIGNED32; 
		Get-: PROCEDURE {DELEGATE}(x: Index):Value; 

		PROCEDURE ^ AlikeX*(): ArrayXdBytes.Array; 
		PROCEDURE ^ NewRangeX*(neworigin, newlen: ArrayXdBytes.IndexArray; copydata: BOOLEAN); 
		PROCEDURE ^ ValidateCache*; 
		PROCEDURE ^ SetBoundaryCondition*(c: SIGNED8); 
		PROCEDURE ^  & New*(ox, w: SIGNED32); 
		PROCEDURE ^ NewRange*(ox, w: SIGNED32; copydata: BOOLEAN); 
		PROCEDURE ^ Alike*(): Vector; 
		PROCEDURE ^ Copy*(): Vector; 
		PROCEDURE ^ Set*(x: Index; v: Value); 
		PROCEDURE ^ SetArray*(beginAtRow: Index; VAR array: ARRAY OF Value); 
		PROCEDURE ^ GetArray*(beginAtRow: Index; VAR array: ARRAY OF Value); 
		PROCEDURE ^ Swap*(row1, row2: Index); 
		PROCEDURE ^ Sort*; 
		PROCEDURE ^ Insert*(x: Index; v: Value); 
		PROCEDURE ^ Delete*(x: Index); 
		PROCEDURE ^ CopyToVec*(dest: ArrayXd.Array; srcx, destx, len: Index); 
		PROCEDURE ^ CopyToMtx*(dest: ArrayXd.Array; dim: Index; srcx, destx, desty, len: Index); 
		PROCEDURE ^ CopyToCube*(dest: ArrayXd.Array; dim: Index; srcx, destx, desty, destz, len: Index); 
		PROCEDURE ^ CopyToHCube*(dest: ArrayXd.Array; dim: Index; srcx, destx, desty, destz, destt, len: Index); 
		PROCEDURE ^ CopyTo1dArray*(VAR dest: ARRAY OF Value; srcpos, srclen: Index; dpos, dlen: SIGNED32); 
		PROCEDURE ^ CopyTo2dArray*(VAR dest: ARRAY OF ARRAY OF Value; srcpos, srclen: Index; dposx, dposy, dlenx, dleny: SIGNED32); 
		PROCEDURE ^ CopyTo3dArray*(VAR dest: ARRAY OF ARRAY OF ARRAY OF Value; srcpos, srclen: Index; dposx, dposy, dposz, dlenx, dleny, dlenz: SIGNED32); 
		PROCEDURE ^ CopyTo4dArray*(VAR dest: ARRAY OF ARRAY OF ARRAY OF ARRAY OF Value; srcpos, srclen: Index; dposx, dposy, dposz, dpost, dlenx, dleny, dlenz, dlent: SIGNED32); 
		PROCEDURE ^ CopyFrom1dArray*(VAR src: ARRAY OF Value; spos, slen: Index; destpos, destlen: Index); 
		PROCEDURE ^ CopyFrom2dArray*(VAR src: ARRAY OF ARRAY OF Value; sposx, spoxy, slenx, sleny: Index; destpos, destlen: Index); 
		PROCEDURE ^ CopyFrom3dArray*(VAR src: ARRAY OF ARRAY OF ARRAY OF Value; sposx, spoxy, sposz, slenx, sleny, slenz: Index; destpos, destlen: Index); 
		PROCEDURE ^ CopyFrom4dArray*(VAR src: ARRAY OF ARRAY OF ARRAY OF ARRAY OF Value; sposx, spoxy, sposz, spost, slenx, sleny, slenz, slent: Index; destpos, destlen: Index); 
	END Vector; 

	OPERATOR ^ ":="-(VAR l: Vector; VAR r: ARRAY OF Value); 
	OPERATOR ^ ":="-(VAR l: Vector; r: Value); 
	OPERATOR ^ ":="-(VAR l: Vector; r: RatValue); 
	OPERATOR ^ ":="-(VAR l: Vector; r: IntValue); 
	OPERATOR ^ "+"-(l, r: Vector): Vector; 
	OPERATOR ^ "-"-(l, r: Vector): Vector; 
	OPERATOR ^ "+"-(l: Vector; r: Value): Vector; 
	OPERATOR ^ "+"-(l: Vector; r: RatValue): Vector; 
	OPERATOR ^ "+"-(l: Vector; r: IntValue): Vector; 
	OPERATOR ^ "+"-(l: Value; r: Vector): Vector; 
	OPERATOR ^ "+"-(l: RatValue; r: Vector): Vector; 
	OPERATOR ^ "+"-(l: IntValue; r: Vector): Vector; 
	OPERATOR ^ "-"-(l: Vector; r: Value): Vector; 
	OPERATOR ^ "-"-(l: Vector; r: RatValue): Vector; 
	OPERATOR ^ "-"-(l: Vector; r: IntValue): Vector; 
	OPERATOR ^ "-"-(l: Value; r: Vector): Vector; 
	OPERATOR ^ "-"-(l: RatValue; r: Vector): Vector; 
	OPERATOR ^ "-"-(l: IntValue; r: Vector): Vector; 
	OPERATOR ^ "-"-(l: Vector): Vector; 
	OPERATOR ^ "*"-(l: Vector; r: Value): Vector; 
	OPERATOR ^ "*"-(l: Vector; r: RatValue): Vector; 
	OPERATOR ^ "*"-(l: Vector; r: IntValue): Vector; 
	OPERATOR ^ "*"-(l: Value; r: Vector): Vector; 
	OPERATOR ^ "*"-(l: RatValue; r: Vector): Vector; 
	OPERATOR ^ "*"-(l: IntValue; r: Vector): Vector; 
	OPERATOR ^ "/"-(l: Vector; r: Value): Vector; 
	OPERATOR ^ "/"-(l: Vector; r: RatValue): Vector; 
	OPERATOR ^ "/"-(l: Vector; r: IntValue): Vector; 
	OPERATOR ^ "/"-(l: Value; r: Vector): Vector; 
	OPERATOR ^ "/"-(l: RatValue; r: Vector): Vector; 
	OPERATOR ^ "/"-(l: IntValue; r: Vector): Vector; 
	OPERATOR ^ "*"-(l, r: Vector): Value; 
	PROCEDURE ^ L1Norm*(l: Vector): Value; 
	PROCEDURE ^ L2Norm*(l: Vector): Value; 
	PROCEDURE ^ LInftyNorm*(l: Vector): Value; 
	PROCEDURE ^ LoadVector(R: DataIO.Reader; VAR obj: OBJECT); 
	PROCEDURE ^ StoreVector(W: DataIO.Writer; obj: OBJECT); 
	PROCEDURE ^ Register; 
	PROCEDURE ^ Load*(R: DataIO.Reader; VAR obj: Vector); 
	PROCEDURE ^ Store*(W: DataIO.Writer; obj: Vector); 
BEGIN
END VecRe.
