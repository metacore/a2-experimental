MODULE ZlibDeflate;
	IMPORT SYSTEM, Zlib, ZlibBuffers;
CONST 
	Ok* = Zlib.Ok; 
	StreamEnd* = Zlib.StreamEnd; 
	StreamError* = Zlib.StreamError; 
	DataError* = Zlib.DataError; 
	MemError* = Zlib.MemError; 
	BufError* = Zlib.BufError; 
	NoFlush* = Zlib.NoFlush; 
	PartialFlush = Zlib.PartialFlush; 
	SyncFlush* = Zlib.SyncFlush; 
	FullFlush* = Zlib.FullFlush; 
	Finish* = Zlib.Finish; 
	DefaultCompression* = Zlib.DefaultCompression; 
	NoCompression* = Zlib.NoCompression; 
	BestSpeed* = Zlib.BestSpeed; 
	BestCompression* = Zlib.BestCompression; 
	DefaultStrategy* = Zlib.DefaultStrategy; 
	Filtered* = Zlib.Filtered; 
	HuffmanOnly* = Zlib.HuffmanOnly; 
	Binary* = Zlib.Binary; 
	Ascii* = Zlib.Ascii; 
	Unknown* = Zlib.Unknown; 
	InitState = 1; 
	BusyState = 2; 
	FinishState = 3; 
	NeedMore = 1; 
	BlockDone = 2; 
	FinishStarted = 3; 
	FinishDone = 4; 
	StoredBlock = 0; 
	StaticTrees = 1; 
	DynamicTrees = 2; 
	Deflated = 8; 
	PresetDict = 32; 
	LengthCodes = 29; 
	Literals = 256; 
	LitLenCodes = ((Literals + 1) + LengthCodes); 
	DistCodes = 30; 
	BitCodes = 19; 
	HeapSize = ((2 * LitLenCodes) + 1); 
	MaxBits = 15; 
	MaxBitLenBits = 7; 
	DistCodeLen = 512; 
	EndBlock = 256; 
	BitBufSize = 16; 
	Rep3To6 = 16; 
	RepZero3To10 = 17; 
	RepZero11To138 = 18; 
	WindowBits = 15; 
	WindowSize = ASH(1, WindowBits); 
	MinMatch = 3; 
	MaxMatch = 258; 
	MinLookAhead = ((MinMatch + MaxMatch) + 1); 
	MaxDist = (WindowSize - MinLookAhead); 
	TooFar = 4096; 
	MemLevel = 8; 
	HashBits = (MemLevel + 7); 
	HashSize = ASH(1, HashBits); 
	HashShift = ((HashBits + (MinMatch - 1)) DIV MinMatch); 
	LitBufSize = ASH(1, (MemLevel + 6)); 
	PendingBufSize = ASH(LitBufSize, 2); 
TYPE 
	Node = RECORD 
		freqOrCode: INTEGER; 
		dadOrLen: INTEGER; 
	END; 

	Nodes = POINTER TO ARRAY OF Node; 

	Bits = POINTER TO ARRAY OF INTEGER; 

	StaticTree = RECORD 
		node: Nodes; 
		bits: Bits; 
		base: INTEGER; 
		elems: INTEGER; 
		maxLength: INTEGER; 
	END; 

	Tree = RECORD 
		node: Nodes; 
		maxCode: INTEGER; 
		static: StaticTree; 
	END; 

	Window = ARRAY (2 * WindowSize) OF CHAR; 

	PendingBuffer = RECORD 
		buf: POINTER TO ARRAY PendingBufSize OF CHAR; 
		beg: SIZE; 
		end: SIZE; 
	END; 

	Stream* = RECORD 
		in*, out*: ZlibBuffers.Buffer; 
		res-: LONGINT; 
		level-: SHORTINT; 
		strategy-: SHORTINT; 
		dataType-: SHORTINT; 
		wrapper-: BOOLEAN; 
		open-: BOOLEAN; 
		trailerDone: BOOLEAN; 
		lastFlush: SHORTINT; 
		status: SHORTINT; 
		adler: LONGINT; 
		window: POINTER TO Window; 
		block: SIZE; 
		hash: LONGINT; 
		prev: POINTER TO ARRAY WindowSize OF SIZE; 
		head: POINTER TO ARRAY HashSize OF SIZE; 
		string: SIZE; 
		lookAhead: SIZE; 
		match: SIZE; 
		matchLen: SIZE; 
		prevMatch: SIZE; 
		prevLen: SIZE; 
		prevAvail: BOOLEAN; 
		pend: PendingBuffer; 
		ltree, dtree, btree: Tree; 
		lnode, dnode, bnode: Nodes; 
		bitLenCount: ARRAY (MaxBits + 1) OF INTEGER; 
		heap: ARRAY HeapSize OF INTEGER; 
		heapLen: INTEGER; 
		heapMax: INTEGER; 
		depth: ARRAY HeapSize OF INTEGER; 
		lbuf: POINTER TO ARRAY LitBufSize OF CHAR; 
		dbuf: POINTER TO ARRAY LitBufSize OF INTEGER; 
		lastLit: LONGINT; 
		buf: LONGINT; 
		bits: INTEGER; 
		lastEobLen: INTEGER; 
		optLen: LONGINT; 
		staticLen: LONGINT; 
	END; 

	Compressor = PROCEDURE (VAR s: Stream; flush: SHORTINT):SHORTINT; 

	; 
VAR 
	ExtraLenBits, ExtraDistBits, ExtraBitBits: Bits; 
	LTree, DTree, BTree: StaticTree; 
	BaseLength: ARRAY LengthCodes OF INTEGER; 
	BaseDist: ARRAY DistCodes OF INTEGER; 
	LengthCode: ARRAY ((MaxMatch - MinMatch) + 1) OF CHAR; 
	DistCode: ARRAY DistCodeLen OF CHAR; 
	BitOrder: ARRAY BitCodes OF SHORTINT; 
	ConfigTable: ARRAY 10 OF RECORD 
		GoodLen: INTEGER; 
		MaxLazy: INTEGER; 
		NiceLen: INTEGER; 
		MaxChain: INTEGER; 
		Compress: Compressor; 
	END; 

	PROCEDURE ^ PutChar(VAR pend: PendingBuffer; c: CHAR); 
	PROCEDURE ^ Put16BitsLSB(VAR pend: PendingBuffer; b: SIZE); 
	PROCEDURE ^ Put16BitsMSB(VAR pend: PendingBuffer; b: SIZE); 
	PROCEDURE ^ Put32BitsMSB(VAR pend: PendingBuffer; b: SIZE); 
	PROCEDURE ^ ReverseBits(code, len: INTEGER): INTEGER; 
	PROCEDURE ^ SendBits(VAR stream: Stream; val: LONGINT; len: INTEGER); 
	PROCEDURE ^ SendCode(VAR stream: Stream; VAR node: Node); 
	PROCEDURE ^ FlushBits(VAR stream: Stream); 
	PROCEDURE ^ FlushPending(VAR pend: PendingBuffer; VAR out: ZlibBuffers.Buffer); 
	PROCEDURE ^ WindupBits(VAR stream: Stream); 
	PROCEDURE ^ SetDataType(VAR stream: Stream); 
	PROCEDURE ^ GenCodes(VAR node: Nodes; maxCode: INTEGER; VAR count: ARRAY OF INTEGER); 
	PROCEDURE ^ GenBitLen(VAR stream: Stream; VAR tree: Tree); 
	PROCEDURE ^ Sift(VAR stream: Stream; VAR node: Nodes; k: INTEGER); 
	PROCEDURE ^ BuildTree(VAR stream: Stream; VAR tree: Tree); 
	PROCEDURE ^ ScanTree(VAR stream: Stream; node: Nodes; max: INTEGER); 
	PROCEDURE ^ BuildBitLenTree(VAR stream: Stream): INTEGER; 
	PROCEDURE ^ SendTree(VAR stream: Stream; node: Nodes; max: INTEGER); 
	PROCEDURE ^ SendAllTrees(VAR stream: Stream; lcodes, dcodes, blcodes: INTEGER); 
	PROCEDURE ^ InitStaticTrees; 
	PROCEDURE ^ InitBlock(VAR stream: Stream); 
	PROCEDURE ^ InitTrees(VAR stream: Stream); 
	PROCEDURE ^ FreeTrees(VAR stream: Stream); 
	PROCEDURE ^ AlignTrees(VAR stream: Stream); 
	PROCEDURE ^ CopyBlock(VAR stream: Stream; VAR buf: ARRAY OF CHAR; offset, len: SIZE; header: BOOLEAN); 
	PROCEDURE ^ StoreBlock(VAR stream: Stream; VAR buf: ARRAY OF CHAR; offset, len: SIZE; eof: BOOLEAN); 
	PROCEDURE ^ CompressBlock(VAR stream: Stream; lnode, dnode: Nodes); 
	PROCEDURE ^ FlushBlock(VAR stream: Stream; VAR buf: ARRAY OF CHAR; pos, len: SIZE; eof: BOOLEAN); 
	PROCEDURE ^ TallyLit(VAR stream: Stream; ch: CHAR): BOOLEAN; 
	PROCEDURE ^ TallyDistLen(VAR stream: Stream; dist, len: INTEGER): BOOLEAN; 
	PROCEDURE ^ ClearHash(VAR stream: Stream); 
	PROCEDURE ^ UpdateHash(VAR h: LONGINT; ch: CHAR); 
	PROCEDURE ^ InsertString(VAR stream: Stream; pos: SIZE; VAR head: SIZE); 
	PROCEDURE ^ InitMatches(VAR stream: Stream); 
	PROCEDURE ^ LongestMatch(VAR stream: Stream; cur: SIZE): SIZE; 
	PROCEDURE ^ CheckMatch(VAR stream: Stream; start, match, len: SIZE); 
	PROCEDURE ^ FillWindow(VAR stream: Stream); 
	PROCEDURE ^ CompressStored(VAR stream: Stream; flush: SHORTINT): SHORTINT; 
	PROCEDURE ^ CompressFast(VAR stream: Stream; flush: SHORTINT): SHORTINT; 
	PROCEDURE ^ CompressSlow(VAR stream: Stream; flush: SHORTINT): SHORTINT; 
	PROCEDURE ^ Reset*(VAR stream: Stream); 
	PROCEDURE ^ Close*(VAR stream: Stream); 
	PROCEDURE ^ Open*(VAR stream: Stream; level, strategy: SHORTINT; wrapper: BOOLEAN); 
	PROCEDURE ^ SetDictionary*(VAR stream: Stream; VAR dict: ARRAY OF CHAR; len: SIZE); 
	PROCEDURE ^ Deflate*(VAR stream: Stream; flush: SHORTINT); 
	PROCEDURE ^ SetParams*(VAR stream: Stream; level, strategy: SHORTINT); 
	PROCEDURE ^ Compress*(VAR src, dst: ARRAY OF CHAR; srcoffset, srclen, dstoffset, dstlen: LONGINT; level, strategy: SHORTINT; VAR len: SIZE; VAR res: WORD); 
BEGIN
END ZlibDeflate.
