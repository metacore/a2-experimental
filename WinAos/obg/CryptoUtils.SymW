MODULE CryptoUtils;
	IMPORT S := SYSTEM, Out := KernelLog, Random, Kernel, B := CryptoBigNumbers;
CONST 
TYPE 
	InitBuffer* = OBJECT 
	VAR 
		buf: POINTER TO ARRAY OF CHAR; 
		in, out: SIZE; 

		PROCEDURE ^  & Init*(size: SIZE); 
		PROCEDURE ^ Add*(CONST x: ARRAY OF CHAR); 
		PROCEDURE ^ GetInt*(): LONGINT; 
		PROCEDURE ^ GetSet*(): SET32; 
	END InitBuffer; 
VAR 
	hexd: ARRAY 17 OF CHAR; 

	PROCEDURE ^ PrintHex*(CONST buf: ARRAY OF CHAR; p, n: SIZE); 
	PROCEDURE ^ PrintBufferString*(CONST buf: ARRAY OF CHAR; pos: LONGINT); 
	PROCEDURE ^ PrintPackage*(CONST buf: ARRAY OF CHAR; len: SIZE); 
	PROCEDURE ^ PutLength*(VAR buf: ARRAY OF CHAR; VAR pos: SIZE; len: LONGINT); 
	PROCEDURE ^ GetLength*(CONST buf: ARRAY OF CHAR; VAR pos: SIZE; VAR len: LONGINT); 
	PROCEDURE ^ GetInt*(CONST buf: ARRAY OF CHAR; pos: SIZE): LONGINT; 
	PROCEDURE ^ PutChar*(VAR buf: ARRAY OF CHAR; VAR pos: SIZE; ch: CHAR); 
	PROCEDURE ^ GetChar*(CONST buf: ARRAY OF CHAR; VAR pos: SIZE; VAR ch: CHAR); 
	PROCEDURE ^ PutString*(VAR buf: ARRAY OF CHAR; VAR pos: SIZE; CONST str: ARRAY OF CHAR); 
	PROCEDURE ^ GetString*(CONST buf: ARRAY OF CHAR; VAR pos: SIZE; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ PutArray*(VAR buf: ARRAY OF CHAR; VAR pos: SIZE; CONST arr: ARRAY OF CHAR; apos, len: SIZE); 
	PROCEDURE ^ PutBigNumber*(VAR buf: ARRAY OF CHAR; VAR pos: SIZE; b: B.BigNumber); 
	PROCEDURE ^ GetBigNumber*(CONST buf: ARRAY OF CHAR; VAR pos: SIZE; VAR b: B.BigNumber); 
	PROCEDURE ^ Hex2Bin*(CONST hex: ARRAY OF CHAR; hp: SIZE; VAR bin: ARRAY OF CHAR; bp: SIZE; len: SIZE); 
	PROCEDURE ^ Bin2Hex*(CONST bin: ARRAY OF CHAR; bp: SIZE; VAR hex: ARRAY OF CHAR; hp: SIZE; len: SIZE); 
	PROCEDURE ^ RandomBytes*(VAR buf: ARRAY OF CHAR; ofs, len: SIZE); 
	PROCEDURE ^ XORBlock*(VAR block, iv: ARRAY OF S.BYTE); 
	PROCEDURE ^ BufferToBlockBE*(CONST buf: ARRAY OF CHAR; pos: SIZE; VAR block: ARRAY OF S.BYTE); 
	PROCEDURE ^ BufferToBlockLE*(CONST buf: ARRAY OF CHAR; pos: SIZE; VAR block: ARRAY OF S.BYTE); 
	PROCEDURE ^ BlockToBufferBE*(CONST block: ARRAY OF S.BYTE; VAR buf: ARRAY OF CHAR; pos: SIZE); 
	PROCEDURE ^ BlockToBufferLE*(CONST block: ARRAY OF S.BYTE; VAR buf: ARRAY OF CHAR; pos: SIZE); 
	PROCEDURE ^ SetToBufferBE*(val: SET32; VAR buf: ARRAY OF CHAR; pos: SIZE); 
	PROCEDURE ^ IntToBufferBE*(val: LONGINT; VAR buf: ARRAY OF CHAR; pos: SIZE); 
	PROCEDURE ^ SetToBufferLE*(val: SET32; VAR buf: ARRAY OF CHAR; pos: SIZE); 
	PROCEDURE ^ IntToBufferLE*(val: LONGINT; VAR buf: ARRAY OF CHAR; pos: SIZE); 
	PROCEDURE ^ SetFromBufferBE*(CONST buf: ARRAY OF CHAR; pos: SIZE): SET32; 
	PROCEDURE ^ IntFromBufferBE*(CONST buf: ARRAY OF CHAR; pos: SIZE): LONGINT; 
	PROCEDURE ^ SetFromBufferLE*(CONST buf: ARRAY OF CHAR; pos: SIZE): SET32; 
	PROCEDURE ^ IntFromBufferLE*(CONST buf: ARRAY OF CHAR; pos: SIZE): LONGINT; 
BEGIN
END CryptoUtils.
