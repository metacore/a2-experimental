MODULE Kernel IN Oberon;
	IMPORT Machine IN A2, KernelLog IN A2, Modules IN A2, Objects IN A2, Kernel IN A2, Clock IN A2, Kernel32 IN A2, Types;
CONST 
	LittleEndian* = TRUE; 
	LsbIs0* = TRUE; 
TYPE 
	Finalizer* = Kernel.Finalizer; 

	OberonFinalizer = OBJECT 
	VAR 
		fin: Finalizer; 
		next: OberonFinalizer; 
		obj: ANY; 

		PROCEDURE ^ Finalize(obj: ANY); 
	END OberonFinalizer; 
VAR 
	version*: ARRAY 64 OF CHAR; 
	shutdown*: SIGNED32; 
	lockedBy: ANY; 
	level: SIGNED32; 
	oberon: ANY; 
	finalizeRoot: OberonFinalizer; 
	NfinalizeAlive, NfinalizeDead: SIGNED32; 
	finalizers: Kernel.FinalizedCollection; 
	isEXE-: BOOLEAN; 
	lock-: SIGNED32; 
	hInstance-: ADDRESS; 

	PROCEDURE ^ WriteChar*(c: CHAR); 
	PROCEDURE ^ WriteString*(s: ARRAY OF CHAR); 
	PROCEDURE ^ WriteLn*; 
	PROCEDURE ^ WriteInt*(x, w: SIGNED32); 
	PROCEDURE ^ WriteHex*(x, w: SIGNED32); 
	PROCEDURE ^ WriteMemory*(adr, size: SIGNED32); 
	PROCEDURE ^ Used*(): SIGNED32; 
	PROCEDURE ^ GC*; 
	PROCEDURE ^ RegisterObject*(obj: ANY; fin: Finalizer; basic: BOOLEAN); 
	PROCEDURE ^ GetClock*(VAR time, date: SIGNED32); 
	PROCEDURE ^ SetClock*(time, date: SIGNED32); 
	PROCEDURE ^ GetConfig*(name: ARRAY OF CHAR; VAR val: ARRAY OF CHAR); 
	PROCEDURE ^ Shutdown*(code: SIGNED32); 
	PROCEDURE ^ LockOberon*; 
	PROCEDURE ^ UnlockOberon*; 
	PROCEDURE ^ CheckOberonLock*; 
BEGIN
END Kernel.
