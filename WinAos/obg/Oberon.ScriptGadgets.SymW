MODULE ScriptGadgets IN Oberon;
	IMPORT Texts, Fonts, Objects, Oberon, Styles, StyleGadgets, Input, Display, Modules, Files, Gadgets, Display3, Effects, Printer, Printer3;
CONST 
	insert* = 0; 
	delete* = 1; 
	change* = 2; 
	TAB = 9X; 
	CR = 0DX; 
	LeftArrow = 0C4X; 
	RightArrow = 0C3X; 
	SpcW = 3; 
	ML = 2; 
	MM = 1; 
	MR = 0; 
	LeftMode = {Styles.left}; 
	RightMode = {Styles.right}; 
	AdjMode = {Styles.left, Styles.right}; 
	CenterMode = {}; 
	car = 0; 
	sel = 1; 
	arrow =  -1; 
	PrtUnit = 3048; 
	flat = 0; 
	down = 1; 
	up = 2; 
	border = 3; 
	adaptStyle* = (Styles.break + 1); 
	scrollup* = (adaptStyle + 1); 
	scrollback* = (scrollup + 1); 
	drop* = (scrollback + 1); 
	underlineOff* = (drop + 1); 
	autoScroll* = (underlineOff + 1); 
	fullLine* = (autoScroll + 1); 
	lineBrkOff* = (fullLine + 1); 
	narrow* = (lineBrkOff + 1); 
	hide = (narrow + 1); 
	version = 2; 
TYPE 
	Box = POINTER TO BoxDesc; 

	Line = POINTER TO LineDesc; 

	LineDesc = RECORD 
		len, W: LONGINT; 
		w, h: INTEGER; 
		asr, dsr: INTEGER; 
		off, w0: INTEGER; 
		nSpc: INTEGER; 
		style: Styles.Style; 
		brk, eot, tabs: BOOLEAN; 
		next: Line; 
		box: Box; 
	END; 

	Location* = RECORD 
		org*, pos*: LONGINT; 
		dx*, x*, y*: INTEGER; 
		lin: Line; 
	END; 

	Frame* = POINTER TO FrameDesc; 

	FrameDesc* = RECORD (Gadgets.ViewDesc)
		background*: PROCEDURE (F: Frame; x, y: INTEGER; R: Display3.Mask); 
		edit*: PROCEDURE (F: Frame; id: INTEGER; beg, end: LONGINT; text: Texts.Text); 
		text*: Texts.Text; 
		org*: LONGINT; 
		left*, right*, top*, bot*: INTEGER; 
		markH*, mark*: INTEGER; 
		time*: LONGINT; 
		car*, sel*, hide*, hidetext*: BOOLEAN; 
		carLoc*: Location; 
		selBeg*, selEnd*: Location; 
		trailer: Line; 
		hook*: Display.Pattern; 
		cmd*: ARRAY 64 OF CHAR; 
		pointPos*: LONGINT; 
		point*, select*: POINTER TO ARRAY 64 OF CHAR; 
		profile*: INTEGER; 
		msk: Display3.Mask; 
		defStyle*: Styles.Style; 
		save: Line; 
		sorg: LONGINT; 
		deleting: BOOLEAN; 
		state0*: SET; 
		col*: INTEGER; 
	END; 

	Formatter = RECORD (Texts.Reader)
		len, W: LONGINT; 
		w, asr, dsr, nSpc: INTEGER; 
		hide, narrow: BOOLEAN; 
		fnt, mfnt: Fonts.Font; 
		unit: LONGINT; 
	END; 

	MarkMsg = RECORD (Display.FrameMsg)
		id: INTEGER; 
		absX, absY: INTEGER; 
	END; 

	DisplayMsg = RECORD (Display.FrameMsg)
		pos: LONGINT; 
	END; 

	FocusMsg = RECORD (Display.FrameMsg)
		foc: Frame; 
	END; 

	CaretMsg* = RECORD (Display.FrameMsg)
		id*: INTEGER; 
		frame*: Frame; 
		pos*: LONGINT; 
	END; 

	BoxDesc = RECORD 
		next: Box; 
		F: Display.Frame; 
		off: LONGINT; 
		X, dY: INTEGER; 
	END; 

	RecursiveMsg = RECORD (Display.FrameMsg)
		text: Texts.Text; 
		rec: BOOLEAN; 
	END; 
VAR 
	barW*, left*, right*, top*, bot*: INTEGER; 
	Asr, Dsr, markW, eolW: INTEGER; 
	R1: Texts.Reader; 
	fnt, mfnt: Fonts.Font; 
	unit: LONGINT; 
	R: Formatter; 
	ch: CHAR; 
	dx, a, d: INTEGER; 
	dX: LONGINT; 
	style: Styles.Style; 
	W, KW, XW: Texts.Writer; 
	nomarks: BOOLEAN; 
	hook: Display.Pattern; 
	hookS: ARRAY 12 OF SET; 
	visible: BOOLEAN; 
	showCaret: BOOLEAN; 
	show: PROCEDURE (F: Frame; pos: LONGINT); 
	repeatTime, waitTime: LONGINT; 
	block: BOOLEAN; 

	PROCEDURE ^ Min(i, j: LONGINT): LONGINT; 
	PROCEDURE ^ Max(i, j: INTEGER): INTEGER; 
	PROCEDURE ^ Txt(buf: Texts.Buffer): Texts.Text; 
	PROCEDURE ^ Recursive(parent: Frame; newchild: Objects.Object): BOOLEAN; 
	PROCEDURE ^ InvC(col: INTEGER): INTEGER; 
	PROCEDURE ^ Marks(F: Frame; id: INTEGER); 
	PROCEDURE ^ Mark*(F: Frame; mark: INTEGER); 
	PROCEDURE ^ Caret(F: Frame; pos: LONGINT; id: INTEGER); 
	PROCEDURE ^ DrawCursor(X, Y: INTEGER); 
	PROCEDURE ^ TrackMouse(VAR X, Y: INTEGER; VAR Keys, keysum: SET); 
	PROCEDURE ^ InvertRect(F: Frame; x, y, X, Y, W, H: INTEGER); 
	PROCEDURE ^ RemoveMark(F: Frame); 
	PROCEDURE ^ ReplConst(msk: Display3.Mask; col, x, y, w, h: INTEGER); 
	PROCEDURE ^ Background(F: Frame; x, y, X, Y, W, H: INTEGER); 
	PROCEDURE ^ Erase(F: Frame; x, y, X, Y, H, R: INTEGER); 
	PROCEDURE ^ RemTick(F: Frame; x, y: INTEGER); 
	PROCEDURE ^ ShowTick(F: Frame; x, y: INTEGER); 
	PROCEDURE ^ Bar(F: Frame; x, y, Y, H: INTEGER); 
	PROCEDURE ^ FrameDsr(F: Display.Frame): INTEGER; 
	PROCEDURE ^ DrawFrame(F: Frame; G: Display.Frame; x, y, X, Y: INTEGER); 
	PROCEDURE ^ Move(F: Frame; x, y, Y, H, dY: INTEGER); 
	PROCEDURE ^ FlipCaret(F: Frame; x, y: INTEGER); 
	PROCEDURE ^ Insert(L: Line; X, voff: INTEGER; off: LONGINT; G: Display.Frame; VAR dY: INTEGER); 
	PROCEDURE ^ Append(L: Line; X: INTEGER; b: Box); 
	PROCEDURE ^ Broadcast(F: Frame; VAR M: Display.FrameMsg); 
	PROCEDURE ^ InvertArea(F: Frame; L: Line; x, y, X, Y, W: INTEGER); 
	PROCEDURE ^ FlipSelection(F: Frame; x, y: INTEGER; VAR beg, end: Location); 
	PROCEDURE ^ Deselect(F: Frame; G: Display.Frame); 
	PROCEDURE ^ Lim(F: Frame): LONGINT; 
	PROCEDURE ^ CollectLines(F: Frame; VAR L: Line; VAR Y: INTEGER; VAR org: LONGINT); 
	PROCEDURE ^ Clone(obj: Objects.Object; id: INTEGER; VAR new: Objects.Object); 
	PROCEDURE ^ SaveAndCopy(F: Frame; text: Texts.Text; beg, end: LONGINT; VAR W: Texts.Writer); 
	PROCEDURE ^ StyleAt(F: Frame; pos: LONGINT): Styles.Style; 
	PROCEDURE ^ StyleFrame(F: Frame; st: Styles.Style; X: INTEGER): Objects.Object; 
	PROCEDURE ^ Offsets(L: Line; VAR spc, rest: INTEGER); 
	PROCEDURE ^ IncPos(spc: INTEGER; VAR rest, X: INTEGER); 
	PROCEDURE ^ GetWidth(lib: Objects.Library; ch: CHAR; VAR obj: Objects.Object; VAR dx: INTEGER; VAR dX: LONGINT); 
	PROCEDURE ^ Width(F: Frame; L: Line; beg, end: LONGINT; VAR x: INTEGER; VAR X: LONGINT); 
	PROCEDURE ^ Height(fnt: Fonts.Font; narrow: BOOLEAN; VAR a, d: INTEGER); 
	PROCEDURE ^ DisplayLine(F: Frame; pos, dXX: LONGINT; x, y, dX, Y: INTEGER; L: Line); 
	PROCEDURE ^ DisplaySec(F: Frame; x, y, Y0: INTEGER; org0: LONGINT; L0, L1: Line); 
	PROCEDURE ^ DisplaySec0(F: Frame; x, y: INTEGER; org0, off: LONGINT; Y0: INTEGER; oldL0, L0, L1: Line); 
	PROCEDURE ^ ScrollBack(F: Frame; x, y: INTEGER; oldL: Line; VAR L: Line; VAR Y: INTEGER; VAR org: LONGINT); 
	PROCEDURE ^ Read; 
	PROCEDURE ^ InitFormatter(F: Frame; org: LONGINT); 
	PROCEDURE ^ FormatLine(VAR L: Line); 
	PROCEDURE ^ NewLines(F: Frame; limit: LONGINT; VAR L: Line; VAR Y: INTEGER; VAR org: LONGINT); 
	PROCEDURE ^ BottomLine(F: Frame; x, y, Y: INTEGER; VAR L: Line; org: LONGINT); 
	PROCEDURE ^ AppendLines(F: Frame; x, y: INTEGER; org: LONGINT; L: Line; VAR Y: INTEGER); 
	PROCEDURE ^ ShowText(F: Frame; x, y: INTEGER; pos: LONGINT; restore: BOOLEAN); 
	PROCEDURE ^ Resize*(F: Frame; x, y, newY: INTEGER); 
	PROCEDURE ^ LocateOrg(F: Frame; org, pos: LONGINT; VAR loc: Location); 
	PROCEDURE ^ LocateLine(F: Frame; y: INTEGER; VAR loc: Location); 
	PROCEDURE ^ LocateObj(F: Frame; x, y: INTEGER; VAR loc: Location; VAR obj: Objects.Object); 
	PROCEDURE ^ LocatePos(F: Frame; pos: LONGINT; VAR loc: Location); 
	PROCEDURE ^ LocateString(F: Frame; x, y: INTEGER; VAR loc: Location); 
	PROCEDURE ^ FindFrame(F: Frame; G: Display.Frame; VAR loc: Location); 
	PROCEDURE ^ TouchFrame(F: Frame; VAR M: Oberon.InputMsg): BOOLEAN; 
	PROCEDURE ^ Pos*(F: Frame; X, Y: INTEGER): LONGINT; 
	PROCEDURE ^ ParaBeg(F: Frame; T: Texts.Text; pos: LONGINT; VAR org: LONGINT); 
	PROCEDURE ^ Validate(F: Frame; VAR pos: LONGINT); 
	PROCEDURE ^ SetAttributes(F: Frame; pos: LONGINT); 
	PROCEDURE ^ SetCaret*(F: Frame; pos: LONGINT); 
	PROCEDURE ^ RemoveCaret*(F: Frame); 
	PROCEDURE ^ SetSelection*(F: Frame; beg, end: LONGINT); 
	PROCEDURE ^ RemoveSelection*(F: Frame); 
	PROCEDURE ^ RemoveMarks(F: Frame); 
	PROCEDURE ^ FlipMarks(F: Frame; x, y: INTEGER); 
	PROCEDURE ^ Neutralize*(F: Frame); 
	PROCEDURE ^ UpdateVisible(F: Frame; x, y: INTEGER; beg, end, corr: LONGINT); 
	PROCEDURE ^ UpdateSection(F: Frame; x, y: INTEGER; beg, end, corr: LONGINT); 
	PROCEDURE ^ UpdateStyle(F: Frame; VAR M: Styles.UpdateMsg); 
	PROCEDURE ^ TrackCaret*(F: Frame; x, y, X, Y: INTEGER; VAR keysum: SET); 
	PROCEDURE ^ KeyPressed(): BOOLEAN; 
	PROCEDURE ^ ResetRepeat; 
	PROCEDURE ^ Scroll*(F: Frame; x, y: INTEGER; back: BOOLEAN); 
	PROCEDURE ^ TrackSelection*(F: Frame; x, y, X, Y: INTEGER; VAR keysum: SET); 
	PROCEDURE ^ TrackLine*(F: Frame; x, y, X, Y: INTEGER; VAR org: LONGINT; VAR keysum: SET); 
	PROCEDURE ^ TrackWord*(F: Frame; x, y, X, Y: INTEGER; VAR pos: LONGINT; VAR keysum: SET); 
	PROCEDURE ^ Show*(F: Frame; pos: LONGINT); 
	PROCEDURE ^ Call*(F: Frame; pos: LONGINT; new: BOOLEAN; dlink: Objects.Object); 
	PROCEDURE ^ Write*(F: Frame; ch: CHAR; lib: Objects.Library; col, voff: SHORTINT); 
	PROCEDURE ^ Open*(F: Frame; H: Objects.Handler; T: Texts.Text; org: LONGINT; col, left, right, top, bot: INTEGER); 
	PROCEDURE ^ CopyOver*(F: Frame; text: Texts.Text; beg, end: LONGINT); 
	PROCEDURE ^ GetSelection*(F: Frame; VAR M: Oberon.SelectMsg); 
	PROCEDURE ^ GetCaret*(F: Frame; VAR M: Oberon.CaretMsg); 
	PROCEDURE ^ Recall(F: Frame); 
	PROCEDURE ^ FormatBack(F: Frame; pos: LONGINT; H: INTEGER; VAR org: LONGINT; VAR L: Line; VAR h: INTEGER); 
	PROCEDURE ^ ScrollBackTo(F: Frame; x, y: INTEGER; pos: LONGINT); 
	PROCEDURE ^ ScrollToEnd(F: Frame; x, y: INTEGER); 
	PROCEDURE ^ Update*(F: Frame; VAR M: Texts.UpdateMsg); 
	PROCEDURE ^ Edit*(F: Frame; x, y, X, Y: INTEGER; Keys: SET; dlink: Objects.Object; VAR res: INTEGER); 
	PROCEDURE ^ Integrate(F: Frame; pos: LONGINT; obj: Objects.Object; new: BOOLEAN; VAR res: INTEGER); 
	PROCEDURE ^ Control(F: Frame; VAR M: Display.ControlMsg); 
	PROCEDURE ^ DisplayArea(F: Frame; x, y, X, Y, W, H: INTEGER); 
	PROCEDURE ^ Enum(X, Y, W, H: INTEGER); 
	PROCEDURE ^ Restore(F: Frame; x, y: INTEGER; VAR M: Display.FrameMsg); 
	PROCEDURE ^ ModifyDsc(F: Frame; x, y: INTEGER; M: Display.ModifyMsg); 
	PROCEDURE ^ InvalidateMasks(F: Frame); 
	PROCEDURE ^ Modify(F: Frame; VAR M: Display.ModifyMsg); 
	PROCEDURE ^ FrameAttr(F: Frame; VAR M: Objects.AttrMsg); 
	PROCEDURE ^ CopyFrame*(M: Objects.CopyMsg; F: Frame; F1: Frame); 
	PROCEDURE ^ Link(F: Frame; VAR M: Objects.LinkMsg); 
	PROCEDURE ^ CopyLineDesc(trailer: Line; VAR save: Line); 
	PROCEDURE ^ P(d: INTEGER): INTEGER; 
	PROCEDURE ^ PrintLine(F: Frame; L: Line; msk: Display3.Mask; X, Y, XT: INTEGER); 
	PROCEDURE ^ PrintView(F: Frame; x, y: INTEGER); 
	PROCEDURE ^ Handle*(F: Objects.Object; VAR M: Objects.ObjMsg); 
	PROCEDURE ^ NewText*(text: Texts.Text; pos: LONGINT): Frame; 
	PROCEDURE ^ CalcSize*(F: Frame; VAR w, h: INTEGER); 
	PROCEDURE ^ NewFrame*; 
BEGIN
END ScriptGadgets.
