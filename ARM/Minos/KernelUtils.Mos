MODULE KernelUtils;

(* ----------------------------------------------------------------------------------------------------------------------- *)
(* SYSTEM and KERNEL ACCESS FROM THE APPLICATION LAYER GO THROUGH THIS MODULE *)
(* ----------------------------------------------------------------------------------------------------------------------- *)

IMPORT SYSTEM, Bit, Clocks;

VAR
	tickDivisor : FLOAT32;


PROCEDURE IsValidSetParameter*( CONST value : SIGNED32 ) : BOOLEAN;
VAR
	res : BOOLEAN;
BEGIN
	res:=TRUE;
	IF ( value < 0 ) OR ( value > 31 ) THEN
		res:=FALSE;
	END;
	RETURN res
END IsValidSetParameter;

PROCEDURE GetSetAsInteger*( CONST value : SET ): SIGNED32;
VAR
	res : SIGNED32;
BEGIN
	res:=0;
	res:=SYSTEM.VAL( SIGNED32, value );
	RETURN res
END GetSetAsInteger;

PROCEDURE GetIntegerAsSet*( CONST value : SIGNED32 ): SET;
VAR
	res : SET;
BEGIN
	res:={};
	res:=SYSTEM.VAL( SET, value );
	RETURN res
END GetIntegerAsSet;

PROCEDURE GetIntegerAsChar*( CONST value : SIGNED32 ): CHAR;
VAR 
	c : CHAR;
BEGIN
	c:=0X;
	c:=SYSTEM.VAL(CHAR, value);
	RETURN c
END GetIntegerAsChar;

PROCEDURE GetCharAsSet*( CONST value : CHAR ) : SET;
VAR 
	s : SET;
BEGIN
	s:={};
	s:=SYSTEM.VAL(SET, value);
	RETURN s
END GetCharAsSet;

PROCEDURE GetSetAsChar*( CONST value : SET ): CHAR;
VAR 
	c : CHAR;
BEGIN
	c:=0X;
	c:=SYSTEM.VAL(CHAR, value);
	RETURN c
END GetSetAsChar;


PROCEDURE GetOsTimer*() : SIGNED32;
BEGIN
(*

TODO 

*)
	RETURN  0;
END GetOsTimer;

PROCEDURE Ticks2Micros*( CONST ticks : SIGNED32 )  : SIGNED32;
VAR
	res : SIGNED32;
BEGIN
	RETURN ENTIER( ticks/tickDivisor );
END Ticks2Micros;

PROCEDURE GetTime*() : SIGNED32;
BEGIN
(*
	TODO
*)
	RETURN 0;
END GetTime;

PROCEDURE GetMem32*( CONST adr : SIGNED32; VAR mem : SIGNED32 );
BEGIN
	SYSTEM.GET( adr, mem );
END GetMem32;

PROCEDURE GetSetMem32*( CONST adr : SIGNED32; VAR mem : SET );
BEGIN
	SYSTEM.GET( adr, mem );
END GetSetMem32;

PROCEDURE PutMem32*( CONST adr : SIGNED32; CONST mem : SIGNED32 );
BEGIN
	SYSTEM.PUT( adr, mem );
END PutMem32;

PROCEDURE GetIntAsReal*( CONST i : SIGNED32 ): FLOAT32;
BEGIN
	RETURN SYSTEM.VAL(FLOAT32,i)
END GetIntAsReal;

PROCEDURE GetIntLittleEndian*( CONST input : SIGNED32; VAR output : ARRAY OF CHAR; VAR result : SIGNED32 );
VAR i, tmpdata: SIGNED32;
BEGIN
	tmpdata:=input;
	IF ( LEN(output) = 4 ) THEN
		FOR i:=0 TO 3 DO
			output[i] := CHR( tmpdata );
			tmpdata := tmpdata DIV 100H; 
		END;
		result:=0;
	ELSE
		result:=-1;
	END;
END GetIntLittleEndian;
	
BEGIN
	tickDivisor := Clocks.GetTimerClock() / 1000000;
END KernelUtils.

(* ----------------------------------------------------------------------------------------------------------------------- *)
(* END OF MODULE *)
(* ----------------------------------------------------------------------------------------------------------------------- *)



