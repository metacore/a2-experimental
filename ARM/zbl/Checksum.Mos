MODULE Checksum;
(**
	AUTHOR Timoth√©e Martiel, 01/2016
	PURPOSE Pluggable checksum management for the bootloader
*)

IMPORT
	Modules, Strings;

CONST
	MaxChecksums			= 32;

	Ok *						= 0;	(** No error *)
	InvalidChecksumAlgo *	= 6;	(** Checksum algorithm is not available *)
	InvalidChecksum *			= 7;	(** Computed and reference checksums do not match *)

TYPE
	Checksum * = PROCEDURE (start, size: SIGNED32; CONST value: ARRAY OF CHAR): SIGNED32;

VAR
	checksums: ARRAY MaxChecksums OF RECORD type: ARRAY 32 OF CHAR; check: Checksum END;
	checksumNb: SIGNED32;

	PROCEDURE Register * (CONST type: ARRAY OF CHAR; check: Checksum);
	BEGIN
		COPY(type, checksums[checksumNb].type);
		checksums[checksumNb].check := check;
		INC(checksumNb)
	END Register;

	PROCEDURE Check * (CONST type, reference: ARRAY OF CHAR; start, size: ADDRESS): SIGNED32;
	VAR
		m: Modules.Module;
		name: ARRAY 64 OF CHAR;
		i: SIGNED32;
	BEGIN
		COPY(type, name);
		Strings.Append(name, 'Checksum');
		Modules.ThisMod(name, m);
		IF m = NIL THEN
			RETURN InvalidChecksumAlgo
		END;

		FOR i := 0 TO checksumNb - 1 DO
			IF checksums[i].type = type THEN
				RETURN checksums[i].check(start, size, reference)
			END
		END;
		RETURN InvalidChecksumAlgo
	END Check;
END Checksum.
